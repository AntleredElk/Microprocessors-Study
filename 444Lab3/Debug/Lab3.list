
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004278  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c7c  08004c7c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004c7c  08004c7c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c7c  08004c7c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c7c  08004c7c  00014c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c80  08004c80  00014c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  20000010  08004c94  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  08004c94  00020744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a84  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020ba  00000000  00000000  00031ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  00033b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c78  00000000  00000000  00034908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002aa17  00000000  00000000  00035580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b234  00000000  00000000  0005ff97  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001081b6  00000000  00000000  0006b1cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  00173381  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000387c  00000000  00000000  00173474  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000000fa  00000000  00000000  00176cf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004420 	.word	0x08004420

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	08004420 	.word	0x08004420

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <HAL_GPIO_EXTI_Callback>:
 * DEFINE INTERRUPT HANDLERS
 *
 */

//GPIO Button
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ButtOn_Pin) {
 8000a46:	88fb      	ldrh	r3, [r7, #6]
 8000a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a4c:	d115      	bne.n	8000a7a <HAL_GPIO_EXTI_Callback+0x3e>

		HAL_GPIO_TogglePin(LED_GReeN_GPIO_Port, LED_GReeN_Pin);
 8000a4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a52:	480c      	ldr	r0, [pc, #48]	; (8000a84 <HAL_GPIO_EXTI_Callback+0x48>)
 8000a54:	f002 f830 	bl	8002ab8 <HAL_GPIO_TogglePin>

		signalSelection = (signalSelection + 1)%3;
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	1c59      	adds	r1, r3, #1
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_GPIO_EXTI_Callback+0x50>)
 8000a60:	fb83 3201 	smull	r3, r2, r3, r1
 8000a64:	17cb      	asrs	r3, r1, #31
 8000a66:	1ad2      	subs	r2, r2, r3
 8000a68:	4613      	mov	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	1aca      	subs	r2, r1, r3
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000a72:	601a      	str	r2, [r3, #0]

		bufferFlag = 1;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x54>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	601a      	str	r2, [r3, #0]
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	48000400 	.word	0x48000400
 8000a88:	2000002c 	.word	0x2000002c
 8000a8c:	55555556 	.word	0x55555556
 8000a90:	20000030 	.word	0x20000030

08000a94 <HAL_TIM_PeriodElapsedCallback>:


//Timer 2
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 && partNum == 2) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a3b      	ldr	r2, [pc, #236]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d16e      	bne.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0xee>
 8000aa4:	4b3a      	ldr	r3, [pc, #232]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d16a      	bne.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0xee>

		//Increment everything
		C6index = (C6index + 1)%C6size;
 8000aac:	4b39      	ldr	r3, [pc, #228]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	1c5a      	adds	r2, r3, #1
 8000ab2:	4b39      	ldr	r3, [pc, #228]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000ab4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ab8:	10d9      	asrs	r1, r3, #3
 8000aba:	17d3      	asrs	r3, r2, #31
 8000abc:	1acb      	subs	r3, r1, r3
 8000abe:	212a      	movs	r1, #42	; 0x2a
 8000ac0:	fb01 f303 	mul.w	r3, r1, r3
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	4a33      	ldr	r2, [pc, #204]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000ac8:	6013      	str	r3, [r2, #0]
		E6index = (E6index + 1)%E6size;
 8000aca:	4b34      	ldr	r3, [pc, #208]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	425a      	negs	r2, r3
 8000ad2:	f003 031f 	and.w	r3, r3, #31
 8000ad6:	f002 021f 	and.w	r2, r2, #31
 8000ada:	bf58      	it	pl
 8000adc:	4253      	negpl	r3, r2
 8000ade:	4a2f      	ldr	r2, [pc, #188]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ae0:	6013      	str	r3, [r2, #0]
		G6index = (G6index + 1)%G6size;
 8000ae2:	4b2f      	ldr	r3, [pc, #188]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000aea:	fb83 1302 	smull	r1, r3, r3, r2
 8000aee:	4413      	add	r3, r2
 8000af0:	1119      	asrs	r1, r3, #4
 8000af2:	17d3      	asrs	r3, r2, #31
 8000af4:	1ac9      	subs	r1, r1, r3
 8000af6:	460b      	mov	r3, r1
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	1a5b      	subs	r3, r3, r1
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	1ad1      	subs	r1, r2, r3
 8000b00:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b02:	6019      	str	r1, [r3, #0]

		C6signal = C6tone[C6index];
 8000b04:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a27      	ldr	r2, [pc, #156]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000b0a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b0e:	4b27      	ldr	r3, [pc, #156]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000b10:	801a      	strh	r2, [r3, #0]
		E6signal = E6tone[E6index];
 8000b12:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a26      	ldr	r2, [pc, #152]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000b18:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b1c:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000b1e:	801a      	strh	r2, [r3, #0]
		G6signal = G6tone[G6index];
 8000b20:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a24      	ldr	r2, [pc, #144]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000b26:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b2a:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000b2c:	801a      	strh	r2, [r3, #0]

		switch (signalSelection) {
 8000b2e:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d00f      	beq.n	8000b56 <HAL_TIM_PeriodElapsedCallback+0xc2>
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d018      	beq.n	8000b6c <HAL_TIM_PeriodElapsedCallback+0xd8>
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d000      	beq.n	8000b40 <HAL_TIM_PeriodElapsedCallback+0xac>
			case 2:
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, G6tone[G6index]);
				break;
		}
	}
}
 8000b3e:	e020      	b.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0xee>
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, C6tone[C6index]);
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000b46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	481d      	ldr	r0, [pc, #116]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000b50:	f001 f87e 	bl	8001c50 <HAL_DAC_SetValue>
				break;
 8000b54:	e015      	b.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0xee>
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, E6tone[E6index]);
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a15      	ldr	r2, [pc, #84]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	4817      	ldr	r0, [pc, #92]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000b66:	f001 f873 	bl	8001c50 <HAL_DAC_SetValue>
				break;
 8000b6a:	e00a      	b.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0xee>
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, G6tone[G6index]);
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a11      	ldr	r2, [pc, #68]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000b7c:	f001 f868 	bl	8001c50 <HAL_DAC_SetValue>
				break;
 8000b80:	bf00      	nop
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200006f4 	.word	0x200006f4
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000034 	.word	0x20000034
 8000b98:	30c30c31 	.word	0x30c30c31
 8000b9c:	20000038 	.word	0x20000038
 8000ba0:	2000003c 	.word	0x2000003c
 8000ba4:	92492493 	.word	0x92492493
 8000ba8:	20000040 	.word	0x20000040
 8000bac:	200006f0 	.word	0x200006f0
 8000bb0:	200006b0 	.word	0x200006b0
 8000bb4:	20000168 	.word	0x20000168
 8000bb8:	20000130 	.word	0x20000130
 8000bbc:	200006ac 	.word	0x200006ac
 8000bc0:	2000002c 	.word	0x2000002c
 8000bc4:	20000094 	.word	0x20000094

08000bc8 <HAL_DAC_ConvCpltCallbackCh1>:


//DMA Complete
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	if (bufferFlag) {
 8000bd0:	4b35      	ldr	r3, [pc, #212]	; (8000ca8 <HAL_DAC_ConvCpltCallbackCh1+0xe0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d060      	beq.n	8000c9a <HAL_DAC_ConvCpltCallbackCh1+0xd2>

		switch (signalSelection) {
 8000bd8:	4b34      	ldr	r3, [pc, #208]	; (8000cac <HAL_DAC_ConvCpltCallbackCh1+0xe4>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d020      	beq.n	8000c22 <HAL_DAC_ConvCpltCallbackCh1+0x5a>
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d038      	beq.n	8000c56 <HAL_DAC_ConvCpltCallbackCh1+0x8e>
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d155      	bne.n	8000c94 <HAL_DAC_ConvCpltCallbackCh1+0xcc>

			case 0:
				for (int i = 0; i < 672; i++) {
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	e014      	b.n	8000c18 <HAL_DAC_ConvCpltCallbackCh1+0x50>
					buffer[i] = C6tone[i%C6size];
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <HAL_DAC_ConvCpltCallbackCh1+0xe8>)
 8000bf2:	fb83 1302 	smull	r1, r3, r3, r2
 8000bf6:	10d9      	asrs	r1, r3, #3
 8000bf8:	17d3      	asrs	r3, r2, #31
 8000bfa:	1acb      	subs	r3, r1, r3
 8000bfc:	212a      	movs	r1, #42	; 0x2a
 8000bfe:	fb01 f303 	mul.w	r3, r1, r3
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	4a2b      	ldr	r2, [pc, #172]	; (8000cb4 <HAL_DAC_ConvCpltCallbackCh1+0xec>)
 8000c06:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000c0a:	4a2b      	ldr	r2, [pc, #172]	; (8000cb8 <HAL_DAC_ConvCpltCallbackCh1+0xf0>)
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (int i = 0; i < 672; i++) {
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3301      	adds	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 8000c1e:	dbe6      	blt.n	8000bee <HAL_DAC_ConvCpltCallbackCh1+0x26>
				}
				break;
 8000c20:	e038      	b.n	8000c94 <HAL_DAC_ConvCpltCallbackCh1+0xcc>
			case 1:
				for (int i = 0; i < 672; i++) {
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	e011      	b.n	8000c4c <HAL_DAC_ConvCpltCallbackCh1+0x84>
					buffer[i] = E6tone[i%E6size];
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	425a      	negs	r2, r3
 8000c2c:	f003 031f 	and.w	r3, r3, #31
 8000c30:	f002 021f 	and.w	r2, r2, #31
 8000c34:	bf58      	it	pl
 8000c36:	4253      	negpl	r3, r2
 8000c38:	4a20      	ldr	r2, [pc, #128]	; (8000cbc <HAL_DAC_ConvCpltCallbackCh1+0xf4>)
 8000c3a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000c3e:	4a1e      	ldr	r2, [pc, #120]	; (8000cb8 <HAL_DAC_ConvCpltCallbackCh1+0xf0>)
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (int i = 0; i < 672; i++) {
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 8000c52:	dbe9      	blt.n	8000c28 <HAL_DAC_ConvCpltCallbackCh1+0x60>
				}
				break;
 8000c54:	e01e      	b.n	8000c94 <HAL_DAC_ConvCpltCallbackCh1+0xcc>
			case 2:
				for (int i = 0; i < 672; i++) {
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	e016      	b.n	8000c8a <HAL_DAC_ConvCpltCallbackCh1+0xc2>
					buffer[i] = G6tone[i%G6size];
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_DAC_ConvCpltCallbackCh1+0xf8>)
 8000c60:	fb83 1302 	smull	r1, r3, r3, r2
 8000c64:	4413      	add	r3, r2
 8000c66:	1119      	asrs	r1, r3, #4
 8000c68:	17d3      	asrs	r3, r2, #31
 8000c6a:	1ac9      	subs	r1, r1, r3
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	1ad1      	subs	r1, r2, r3
 8000c76:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <HAL_DAC_ConvCpltCallbackCh1+0xfc>)
 8000c78:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <HAL_DAC_ConvCpltCallbackCh1+0xf0>)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (int i = 0; i < 672; i++) {
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	3301      	adds	r3, #1
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 8000c90:	dbe4      	blt.n	8000c5c <HAL_DAC_ConvCpltCallbackCh1+0x94>
				}
				break;
 8000c92:	bf00      	nop

		}

		bufferFlag = 0;
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <HAL_DAC_ConvCpltCallbackCh1+0xe0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
	}

}
 8000c9a:	bf00      	nop
 8000c9c:	371c      	adds	r7, #28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000030 	.word	0x20000030
 8000cac:	2000002c 	.word	0x2000002c
 8000cb0:	30c30c31 	.word	0x30c30c31
 8000cb4:	20000040 	.word	0x20000040
 8000cb8:	2000016c 	.word	0x2000016c
 8000cbc:	200006b0 	.word	0x200006b0
 8000cc0:	92492493 	.word	0x92492493
 8000cc4:	20000130 	.word	0x20000130

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b0a1      	sub	sp, #132	; 0x84
 8000ccc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cce:	f000 fce4 	bl	800169a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd2:	f000 f9fd 	bl	80010d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd6:	f000 fb29 	bl	800132c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cda:	f000 fafd 	bl	80012d8 <MX_DMA_Init>
  MX_DAC1_Init();
 8000cde:	f000 fa5d 	bl	800119c <MX_DAC1_Init>
  MX_TIM2_Init();
 8000ce2:	f000 faab 	bl	800123c <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000ce6:	f000 fa45 	bl	8001174 <MX_NVIC_Init>
   *
   * CHANNEL CALIBRATION
   *
   */

  HAL_DACEx_SelfCalibrate(&hdac1, &sConfigGlobal, DAC_CHANNEL_1);
 8000cea:	2200      	movs	r2, #0
 8000cec:	499a      	ldr	r1, [pc, #616]	; (8000f58 <main+0x290>)
 8000cee:	489b      	ldr	r0, [pc, #620]	; (8000f5c <main+0x294>)
 8000cf0:	f001 f97c 	bl	8001fec <HAL_DACEx_SelfCalibrate>
  HAL_DACEx_SelfCalibrate(&hdac1, &sConfigGlobal, DAC_CHANNEL_2);
 8000cf4:	2210      	movs	r2, #16
 8000cf6:	4998      	ldr	r1, [pc, #608]	; (8000f58 <main+0x290>)
 8000cf8:	4898      	ldr	r0, [pc, #608]	; (8000f5c <main+0x294>)
 8000cfa:	f001 f977 	bl	8001fec <HAL_DACEx_SelfCalibrate>
   * INITIALIZATION
   *
   */

  //Manual signals
  uint32_t saw = 0; //Starting position for saw signal
 8000cfe:	2300      	movs	r3, #0
 8000d00:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t triangle = 0; //Starting position for triangle signal
 8000d02:	2300      	movs	r3, #0
 8000d04:	673b      	str	r3, [r7, #112]	; 0x70
  int32_t incrementSaw = 7; //For the saw and triangle signals to have same frequency, use 7 and 15 as increments and only go up to a maximum of 105
 8000d06:	2307      	movs	r3, #7
 8000d08:	66fb      	str	r3, [r7, #108]	; 0x6c
  int32_t incrementTriangle = 15;
 8000d0a:	230f      	movs	r3, #15
 8000d0c:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t sawSignal; //Scaled signal to send to DAC
  uint32_t triangleSignal; //Scaled signal to send to DAC
  float32_t sineSignal = 0; //Scaled signal to send to DAC
 8000d0e:	f04f 0300 	mov.w	r3, #0
 8000d12:	64fb      	str	r3, [r7, #76]	; 0x4c
  int sineIndex = 0; //Keep track/increment the index through the sineValues array to generate the signal
 8000d14:	2300      	movs	r3, #0
 8000d16:	667b      	str	r3, [r7, #100]	; 0x64
  int channel = 2; // Selects DAC channel
 8000d18:	2302      	movs	r3, #2
 8000d1a:	64bb      	str	r3, [r7, #72]	; 0x48


  //Timer interrupts/DAC
  if (partNum == 2) HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d1c:	4b90      	ldr	r3, [pc, #576]	; (8000f60 <main+0x298>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d103      	bne.n	8000d2c <main+0x64>
 8000d24:	2100      	movs	r1, #0
 8000d26:	488d      	ldr	r0, [pc, #564]	; (8000f5c <main+0x294>)
 8000d28:	f000 fe81 	bl	8001a2e <HAL_DAC_Start>
  if (partNum == 1) HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000d2c:	4b8c      	ldr	r3, [pc, #560]	; (8000f60 <main+0x298>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d103      	bne.n	8000d3c <main+0x74>
 8000d34:	2110      	movs	r1, #16
 8000d36:	4889      	ldr	r0, [pc, #548]	; (8000f5c <main+0x294>)
 8000d38:	f000 fe79 	bl	8001a2e <HAL_DAC_Start>
  if (partNum == 2 || partNum == 3) HAL_TIM_Base_Start_IT(&htim2); //Start the timer in interrupt mode
 8000d3c:	4b88      	ldr	r3, [pc, #544]	; (8000f60 <main+0x298>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d003      	beq.n	8000d4c <main+0x84>
 8000d44:	4b86      	ldr	r3, [pc, #536]	; (8000f60 <main+0x298>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d102      	bne.n	8000d52 <main+0x8a>
 8000d4c:	4885      	ldr	r0, [pc, #532]	; (8000f64 <main+0x29c>)
 8000d4e:	f002 feab 	bl	8003aa8 <HAL_TIM_Base_Start_IT>
   * This prevents choppy sine waves due to long float calculation speeds
   *
   */

  float32_t sineValues[15];
  for (int i = 0; i < 15; i++) {
 8000d52:	2300      	movs	r3, #0
 8000d54:	663b      	str	r3, [r7, #96]	; 0x60
 8000d56:	e030      	b.n	8000dba <main+0xf2>
	  sineValues[i] = (arm_sin_f32(2*pi*i/15)+1)*(0xFFF/2);
 8000d58:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d5a:	f7ff fba3 	bl	80004a4 <__aeabi_i2d>
 8000d5e:	a37a      	add	r3, pc, #488	; (adr r3, 8000f48 <main+0x280>)
 8000d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d64:	f7ff fc08 	bl	8000578 <__aeabi_dmul>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	4621      	mov	r1, r4
 8000d70:	f04f 0200 	mov.w	r2, #0
 8000d74:	4b7c      	ldr	r3, [pc, #496]	; (8000f68 <main+0x2a0>)
 8000d76:	f7ff fd29 	bl	80007cc <__aeabi_ddiv>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	460c      	mov	r4, r1
 8000d7e:	4618      	mov	r0, r3
 8000d80:	4621      	mov	r1, r4
 8000d82:	f7ff fe0b 	bl	800099c <__aeabi_d2f>
 8000d86:	4603      	mov	r3, r0
 8000d88:	ee00 3a10 	vmov	s0, r3
 8000d8c:	f003 fad6 	bl	800433c <arm_sin_f32>
 8000d90:	eeb0 7a40 	vmov.f32	s14, s0
 8000d94:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d9c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8000f6c <main+0x2a4>
 8000da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000dac:	4413      	add	r3, r2
 8000dae:	3b74      	subs	r3, #116	; 0x74
 8000db0:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 15; i++) {
 8000db4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000db6:	3301      	adds	r3, #1
 8000db8:	663b      	str	r3, [r7, #96]	; 0x60
 8000dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000dbc:	2b0e      	cmp	r3, #14
 8000dbe:	ddcb      	ble.n	8000d58 <main+0x90>
   *
   * 3 FREQUENCY SIGNAL GENERATION (C6, E6, G6)
   *
   */

  for (int i = 0; i < C6size; i++) {
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000dc4:	e039      	b.n	8000e3a <main+0x172>
	  C6tone[i] = (uint16_t)(2*(arm_sin_f32(i*2*pi/C6size) + 1)*(0xFFF/2)/3);
 8000dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fb6a 	bl	80004a4 <__aeabi_i2d>
 8000dd0:	a35f      	add	r3, pc, #380	; (adr r3, 8000f50 <main+0x288>)
 8000dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd6:	f7ff fbcf 	bl	8000578 <__aeabi_dmul>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	460c      	mov	r4, r1
 8000dde:	4618      	mov	r0, r3
 8000de0:	4621      	mov	r1, r4
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	4b62      	ldr	r3, [pc, #392]	; (8000f70 <main+0x2a8>)
 8000de8:	f7ff fcf0 	bl	80007cc <__aeabi_ddiv>
 8000dec:	4603      	mov	r3, r0
 8000dee:	460c      	mov	r4, r1
 8000df0:	4618      	mov	r0, r3
 8000df2:	4621      	mov	r1, r4
 8000df4:	f7ff fdd2 	bl	800099c <__aeabi_d2f>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	ee00 3a10 	vmov	s0, r3
 8000dfe:	f003 fa9d 	bl	800433c <arm_sin_f32>
 8000e02:	eeb0 7a40 	vmov.f32	s14, s0
 8000e06:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e12:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8000f6c <main+0x2a4>
 8000e16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e1a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000e1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e26:	ee17 3a90 	vmov	r3, s15
 8000e2a:	b299      	uxth	r1, r3
 8000e2c:	4a51      	ldr	r2, [pc, #324]	; (8000f74 <main+0x2ac>)
 8000e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < C6size; i++) {
 8000e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e36:	3301      	adds	r3, #1
 8000e38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e3c:	2b29      	cmp	r3, #41	; 0x29
 8000e3e:	ddc2      	ble.n	8000dc6 <main+0xfe>
  }

  for (int i = 0; i < E6size; i++) {
 8000e40:	2300      	movs	r3, #0
 8000e42:	65bb      	str	r3, [r7, #88]	; 0x58
 8000e44:	e039      	b.n	8000eba <main+0x1f2>
	  E6tone[i] = (uint16_t)(2*(arm_sin_f32(i*2*pi/E6size) + 1)*(0xFFF/2)/3);
 8000e46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fb2a 	bl	80004a4 <__aeabi_i2d>
 8000e50:	a33f      	add	r3, pc, #252	; (adr r3, 8000f50 <main+0x288>)
 8000e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e56:	f7ff fb8f 	bl	8000578 <__aeabi_dmul>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	460c      	mov	r4, r1
 8000e5e:	4618      	mov	r0, r3
 8000e60:	4621      	mov	r1, r4
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	4b44      	ldr	r3, [pc, #272]	; (8000f78 <main+0x2b0>)
 8000e68:	f7ff fcb0 	bl	80007cc <__aeabi_ddiv>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	460c      	mov	r4, r1
 8000e70:	4618      	mov	r0, r3
 8000e72:	4621      	mov	r1, r4
 8000e74:	f7ff fd92 	bl	800099c <__aeabi_d2f>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	ee00 3a10 	vmov	s0, r3
 8000e7e:	f003 fa5d 	bl	800433c <arm_sin_f32>
 8000e82:	eeb0 7a40 	vmov.f32	s14, s0
 8000e86:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e92:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000f6c <main+0x2a4>
 8000e96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e9a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000e9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ea6:	ee17 3a90 	vmov	r3, s15
 8000eaa:	b299      	uxth	r1, r3
 8000eac:	4a33      	ldr	r2, [pc, #204]	; (8000f7c <main+0x2b4>)
 8000eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000eb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < E6size; i++) {
 8000eb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8000eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ebc:	2b1f      	cmp	r3, #31
 8000ebe:	ddc2      	ble.n	8000e46 <main+0x17e>
  }

  for (int i = 0; i < G6size; i++) {
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8000ec4:	e039      	b.n	8000f3a <main+0x272>
	  G6tone[i] = (uint16_t)(2*(arm_sin_f32(i*2*pi/G6size) + 1)*(0xFFF/2)/3);
 8000ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff faea 	bl	80004a4 <__aeabi_i2d>
 8000ed0:	a31f      	add	r3, pc, #124	; (adr r3, 8000f50 <main+0x288>)
 8000ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed6:	f7ff fb4f 	bl	8000578 <__aeabi_dmul>
 8000eda:	4603      	mov	r3, r0
 8000edc:	460c      	mov	r4, r1
 8000ede:	4618      	mov	r0, r3
 8000ee0:	4621      	mov	r1, r4
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <main+0x2b8>)
 8000ee8:	f7ff fc70 	bl	80007cc <__aeabi_ddiv>
 8000eec:	4603      	mov	r3, r0
 8000eee:	460c      	mov	r4, r1
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	4621      	mov	r1, r4
 8000ef4:	f7ff fd52 	bl	800099c <__aeabi_d2f>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	ee00 3a10 	vmov	s0, r3
 8000efe:	f003 fa1d 	bl	800433c <arm_sin_f32>
 8000f02:	eeb0 7a40 	vmov.f32	s14, s0
 8000f06:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f12:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000f6c <main+0x2a4>
 8000f16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f1a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000f1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f26:	ee17 3a90 	vmov	r3, s15
 8000f2a:	b299      	uxth	r1, r3
 8000f2c:	4a15      	ldr	r2, [pc, #84]	; (8000f84 <main+0x2bc>)
 8000f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < G6size; i++) {
 8000f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f36:	3301      	adds	r3, #1
 8000f38:	657b      	str	r3, [r7, #84]	; 0x54
 8000f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f3c:	2b1b      	cmp	r3, #27
 8000f3e:	ddc2      	ble.n	8000ec6 <main+0x1fe>
   *
   * INITIALIZE BUFFER AND START DMA DAC PROCESS
   *
   */

  for (int i = 0; i < 672; i++) {
 8000f40:	2300      	movs	r3, #0
 8000f42:	653b      	str	r3, [r7, #80]	; 0x50
 8000f44:	e035      	b.n	8000fb2 <main+0x2ea>
 8000f46:	bf00      	nop
 8000f48:	54442d18 	.word	0x54442d18
 8000f4c:	401921fb 	.word	0x401921fb
 8000f50:	54442d18 	.word	0x54442d18
 8000f54:	400921fb 	.word	0x400921fb
 8000f58:	20000108 	.word	0x20000108
 8000f5c:	20000094 	.word	0x20000094
 8000f60:	20000000 	.word	0x20000000
 8000f64:	200006f4 	.word	0x200006f4
 8000f68:	402e0000 	.word	0x402e0000
 8000f6c:	44ffe000 	.word	0x44ffe000
 8000f70:	40450000 	.word	0x40450000
 8000f74:	20000040 	.word	0x20000040
 8000f78:	40400000 	.word	0x40400000
 8000f7c:	200006b0 	.word	0x200006b0
 8000f80:	403c0000 	.word	0x403c0000
 8000f84:	20000130 	.word	0x20000130
	  buffer[i] = C6tone[i%C6size];
 8000f88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f8a:	4b49      	ldr	r3, [pc, #292]	; (80010b0 <main+0x3e8>)
 8000f8c:	fb83 1302 	smull	r1, r3, r3, r2
 8000f90:	10d9      	asrs	r1, r3, #3
 8000f92:	17d3      	asrs	r3, r2, #31
 8000f94:	1acb      	subs	r3, r1, r3
 8000f96:	212a      	movs	r1, #42	; 0x2a
 8000f98:	fb01 f303 	mul.w	r3, r1, r3
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	4a45      	ldr	r2, [pc, #276]	; (80010b4 <main+0x3ec>)
 8000fa0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000fa4:	4a44      	ldr	r2, [pc, #272]	; (80010b8 <main+0x3f0>)
 8000fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fa8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < 672; i++) {
 8000fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fae:	3301      	adds	r3, #1
 8000fb0:	653b      	str	r3, [r7, #80]	; 0x50
 8000fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fb4:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 8000fb8:	dbe6      	blt.n	8000f88 <main+0x2c0>
  }

  if (partNum == 3) HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)buffer, (uint32_t)672, DAC_ALIGN_12B_R); //672 = LCM(42, 32, 28)
 8000fba:	4b40      	ldr	r3, [pc, #256]	; (80010bc <main+0x3f4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	d108      	bne.n	8000fd4 <main+0x30c>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000fca:	4a3b      	ldr	r2, [pc, #236]	; (80010b8 <main+0x3f0>)
 8000fcc:	2100      	movs	r1, #0
 8000fce:	483c      	ldr	r0, [pc, #240]	; (80010c0 <main+0x3f8>)
 8000fd0:	f000 fd80 	bl	8001ad4 <HAL_DAC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (partNum == 1) {
 8000fd4:	4b39      	ldr	r3, [pc, #228]	; (80010bc <main+0x3f4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d1fb      	bne.n	8000fd4 <main+0x30c>
		   * MANUAL SIGNAL GENERATION
		   *
		   */

		  //Generate saw signal
		  saw += incrementSaw;
 8000fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fde:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000fe0:	4413      	add	r3, r2
 8000fe2:	677b      	str	r3, [r7, #116]	; 0x74
		  incrementSaw = 7;
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	66fb      	str	r3, [r7, #108]	; 0x6c

		  if (saw >= 105) {
 8000fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fea:	2b68      	cmp	r3, #104	; 0x68
 8000fec:	d902      	bls.n	8000ff4 <main+0x32c>
			  incrementSaw = -105;
 8000fee:	f06f 0368 	mvn.w	r3, #104	; 0x68
 8000ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
		  }

		  //Generate triangle signal
		  triangle += incrementTriangle;
 8000ff4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ff6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000ff8:	4413      	add	r3, r2
 8000ffa:	673b      	str	r3, [r7, #112]	; 0x70

		  if (triangle <= 0 || triangle >= 105) {
 8000ffc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <main+0x340>
 8001002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001004:	2b68      	cmp	r3, #104	; 0x68
 8001006:	d902      	bls.n	800100e <main+0x346>
			  incrementTriangle *= -1;
 8001008:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800100a:	425b      	negs	r3, r3
 800100c:	66bb      	str	r3, [r7, #104]	; 0x68
		  }

		  //Increment the sine signal -> circular
		  sineIndex = (sineIndex + 1)%15;
 800100e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <main+0x3fc>)
 8001014:	fb83 1302 	smull	r1, r3, r3, r2
 8001018:	4413      	add	r3, r2
 800101a:	10d9      	asrs	r1, r3, #3
 800101c:	17d3      	asrs	r3, r2, #31
 800101e:	1ac9      	subs	r1, r1, r3
 8001020:	460b      	mov	r3, r1
 8001022:	011b      	lsls	r3, r3, #4
 8001024:	1a5b      	subs	r3, r3, r1
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	667b      	str	r3, [r7, #100]	; 0x64

		  //Scaling the signal to generate sound
		  sawSignal = (float)saw*4095/105;
 800102a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001034:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80010c8 <main+0x400>
 8001038:	ee27 7a87 	vmul.f32	s14, s15, s14
 800103c:	eddf 6a23 	vldr	s13, [pc, #140]	; 80010cc <main+0x404>
 8001040:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001048:	ee17 3a90 	vmov	r3, s15
 800104c:	647b      	str	r3, [r7, #68]	; 0x44
		  triangleSignal = (float)triangle*4095/105;
 800104e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001058:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80010c8 <main+0x400>
 800105c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001060:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80010cc <main+0x404>
 8001064:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800106c:	ee17 3a90 	vmov	r3, s15
 8001070:	643b      	str	r3, [r7, #64]	; 0x40
		  sineSignal = sineValues[sineIndex];
 8001072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800107a:	4413      	add	r3, r2
 800107c:	3b74      	subs	r3, #116	; 0x74
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	64fb      	str	r3, [r7, #76]	; 0x4c
		   *
		   * SENDING CHOSEN SIGNAL TO DAC
		   *
		   */

		  if (channel == 1) {
 8001082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001084:	2b01      	cmp	r3, #1
 8001086:	d106      	bne.n	8001096 <main+0x3ce>
			  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)sawSignal); //Useless because we dont use channel 1 anymore for part 1
 8001088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	480c      	ldr	r0, [pc, #48]	; (80010c0 <main+0x3f8>)
 8001090:	f000 fdde 	bl	8001c50 <HAL_DAC_SetValue>
 8001094:	e008      	b.n	80010a8 <main+0x3e0>
		  } else if (channel == 2) {
 8001096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001098:	2b02      	cmp	r3, #2
 800109a:	d105      	bne.n	80010a8 <main+0x3e0>
			  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, (uint32_t)sawSignal);
 800109c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800109e:	2200      	movs	r2, #0
 80010a0:	2110      	movs	r1, #16
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <main+0x3f8>)
 80010a4:	f000 fdd4 	bl	8001c50 <HAL_DAC_SetValue>
		  }

		  HAL_Delay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f000 fb6b 	bl	8001784 <HAL_Delay>
	  if (partNum == 1) {
 80010ae:	e791      	b.n	8000fd4 <main+0x30c>
 80010b0:	30c30c31 	.word	0x30c30c31
 80010b4:	20000040 	.word	0x20000040
 80010b8:	2000016c 	.word	0x2000016c
 80010bc:	20000000 	.word	0x20000000
 80010c0:	20000094 	.word	0x20000094
 80010c4:	88888889 	.word	0x88888889
 80010c8:	457ff000 	.word	0x457ff000
 80010cc:	42d20000 	.word	0x42d20000

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b096      	sub	sp, #88	; 0x58
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	2244      	movs	r2, #68	; 0x44
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 f996 	bl	8004410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	463b      	mov	r3, r7
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010f6:	f001 fd31 	bl	8002b5c <HAL_PWREx_ControlVoltageScaling>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001100:	f000 f972 	bl	80013e8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001104:	2310      	movs	r3, #16
 8001106:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001108:	2301      	movs	r3, #1
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001110:	2360      	movs	r3, #96	; 0x60
 8001112:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001114:	2302      	movs	r3, #2
 8001116:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001118:	2301      	movs	r3, #1
 800111a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800111c:	2301      	movs	r3, #1
 800111e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001120:	2328      	movs	r3, #40	; 0x28
 8001122:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001124:	2302      	movs	r3, #2
 8001126:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001128:	2302      	movs	r3, #2
 800112a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800112c:	2302      	movs	r3, #2
 800112e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4618      	mov	r0, r3
 8001136:	f001 fdb5 	bl	8002ca4 <HAL_RCC_OscConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001140:	f000 f952 	bl	80013e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001144:	230f      	movs	r3, #15
 8001146:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001148:	2303      	movs	r3, #3
 800114a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001158:	463b      	mov	r3, r7
 800115a:	2103      	movs	r1, #3
 800115c:	4618      	mov	r0, r3
 800115e:	f002 f9c7 	bl	80034f0 <HAL_RCC_ClockConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001168:	f000 f93e 	bl	80013e8 <Error_Handler>
  }
}
 800116c:	bf00      	nop
 800116e:	3758      	adds	r7, #88	; 0x58
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	201c      	movs	r0, #28
 800117e:	f000 fbfe 	bl	800197e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001182:	201c      	movs	r0, #28
 8001184:	f000 fc17 	bl	80019b6 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	2028      	movs	r0, #40	; 0x28
 800118e:	f000 fbf6 	bl	800197e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001192:	2028      	movs	r0, #40	; 0x28
 8001194:	f000 fc0f 	bl	80019b6 <HAL_NVIC_EnableIRQ>
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}

0800119c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800119c:	b5b0      	push	{r4, r5, r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011a2:	463b      	mov	r3, r7
 80011a4:	2228      	movs	r2, #40	; 0x28
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 f931 	bl	8004410 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <MX_DAC1_Init+0x94>)
 80011b0:	4a20      	ldr	r2, [pc, #128]	; (8001234 <MX_DAC1_Init+0x98>)
 80011b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80011b4:	481e      	ldr	r0, [pc, #120]	; (8001230 <MX_DAC1_Init+0x94>)
 80011b6:	f000 fc18 	bl	80019ea <HAL_DAC_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80011c0:	f000 f912 	bl	80013e8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80011c8:	230a      	movs	r3, #10
 80011ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011dc:	463b      	mov	r3, r7
 80011de:	2200      	movs	r2, #0
 80011e0:	4619      	mov	r1, r3
 80011e2:	4813      	ldr	r0, [pc, #76]	; (8001230 <MX_DAC1_Init+0x94>)
 80011e4:	f000 fd6e 	bl	8001cc4 <HAL_DAC_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 80011ee:	f000 f8fb 	bl	80013e8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	2210      	movs	r2, #16
 80011fe:	4619      	mov	r1, r3
 8001200:	480b      	ldr	r0, [pc, #44]	; (8001230 <MX_DAC1_Init+0x94>)
 8001202:	f000 fd5f 	bl	8001cc4 <HAL_DAC_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_DAC1_Init+0x74>
  {
    Error_Handler();
 800120c:	f000 f8ec 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  sConfigGlobal = sConfig;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_DAC1_Init+0x9c>)
 8001212:	461d      	mov	r5, r3
 8001214:	463c      	mov	r4, r7
 8001216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800121a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800121c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800121e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001222:	e885 0003 	stmia.w	r5, {r0, r1}
  /* USER CODE END DAC1_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	3728      	adds	r7, #40	; 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bdb0      	pop	{r4, r5, r7, pc}
 800122e:	bf00      	nop
 8001230:	20000094 	.word	0x20000094
 8001234:	40007400 	.word	0x40007400
 8001238:	20000108 	.word	0x20000108

0800123c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800125a:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <MX_TIM2_Init+0x98>)
 800125c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001260:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001262:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <MX_TIM2_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <MX_TIM2_Init+0x98>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <MX_TIM2_Init+0x98>)
 8001270:	f240 7216 	movw	r2, #1814	; 0x716
 8001274:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <MX_TIM2_Init+0x98>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <MX_TIM2_Init+0x98>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001282:	4814      	ldr	r0, [pc, #80]	; (80012d4 <MX_TIM2_Init+0x98>)
 8001284:	f002 fbb8 	bl	80039f8 <HAL_TIM_Base_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800128e:	f000 f8ab 	bl	80013e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001296:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4619      	mov	r1, r3
 800129e:	480d      	ldr	r0, [pc, #52]	; (80012d4 <MX_TIM2_Init+0x98>)
 80012a0:	f002 fd91 	bl	8003dc6 <HAL_TIM_ConfigClockSource>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012aa:	f000 f89d 	bl	80013e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012ae:	2320      	movs	r3, #32
 80012b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	4619      	mov	r1, r3
 80012ba:	4806      	ldr	r0, [pc, #24]	; (80012d4 <MX_TIM2_Init+0x98>)
 80012bc:	f002 ff98 	bl	80041f0 <HAL_TIMEx_MasterConfigSynchronization>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012c6:	f000 f88f 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200006f4 	.word	0x200006f4

080012d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_DMA_Init+0x50>)
 80012e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012e2:	4a11      	ldr	r2, [pc, #68]	; (8001328 <MX_DMA_Init+0x50>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6493      	str	r3, [r2, #72]	; 0x48
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_DMA_Init+0x50>)
 80012ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_DMA_Init+0x50>)
 80012f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012fa:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <MX_DMA_Init+0x50>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6493      	str	r3, [r2, #72]	; 0x48
 8001302:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_DMA_Init+0x50>)
 8001304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	200b      	movs	r0, #11
 8001314:	f000 fb33 	bl	800197e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001318:	200b      	movs	r0, #11
 800131a:	f000 fb4c 	bl	80019b6 <HAL_NVIC_EnableIRQ>

}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000

0800132c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <MX_GPIO_Init+0xac>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a24      	ldr	r2, [pc, #144]	; (80013d8 <MX_GPIO_Init+0xac>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <MX_GPIO_Init+0xac>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <MX_GPIO_Init+0xac>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a1e      	ldr	r2, [pc, #120]	; (80013d8 <MX_GPIO_Init+0xac>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <MX_GPIO_Init+0xac>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <MX_GPIO_Init+0xac>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	4a18      	ldr	r2, [pc, #96]	; (80013d8 <MX_GPIO_Init+0xac>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <MX_GPIO_Init+0xac>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GReeN_GPIO_Port, LED_GReeN_Pin, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001390:	4812      	ldr	r0, [pc, #72]	; (80013dc <MX_GPIO_Init+0xb0>)
 8001392:	f001 fb79 	bl	8002a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ButtOn_Pin */
  GPIO_InitStruct.Pin = ButtOn_Pin;
 8001396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800139a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_GPIO_Init+0xb4>)
 800139e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ButtOn_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	4619      	mov	r1, r3
 80013aa:	480e      	ldr	r0, [pc, #56]	; (80013e4 <MX_GPIO_Init+0xb8>)
 80013ac:	f001 f9da 	bl	8002764 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GReeN_Pin */
  GPIO_InitStruct.Pin = LED_GReeN_Pin;
 80013b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GReeN_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	4619      	mov	r1, r3
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_GPIO_Init+0xb0>)
 80013ca:	f001 f9cb 	bl	8002764 <HAL_GPIO_Init>

}
 80013ce:	bf00      	nop
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	48000400 	.word	0x48000400
 80013e0:	10110000 	.word	0x10110000
 80013e4:	48000800 	.word	0x48000800

080013e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ee:	e7fe      	b.n	80013ee <Error_Handler+0x6>

080013f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_MspInit+0x44>)
 80013f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_MspInit+0x44>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6613      	str	r3, [r2, #96]	; 0x60
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_MspInit+0x44>)
 8001404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_MspInit+0x44>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_MspInit+0x44>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	6593      	str	r3, [r2, #88]	; 0x58
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_MspInit+0x44>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000

08001438 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a2b      	ldr	r2, [pc, #172]	; (8001504 <HAL_DAC_MspInit+0xcc>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d14f      	bne.n	80014fa <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800145a:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HAL_DAC_MspInit+0xd0>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	4a2a      	ldr	r2, [pc, #168]	; (8001508 <HAL_DAC_MspInit+0xd0>)
 8001460:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001464:	6593      	str	r3, [r2, #88]	; 0x58
 8001466:	4b28      	ldr	r3, [pc, #160]	; (8001508 <HAL_DAC_MspInit+0xd0>)
 8001468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b25      	ldr	r3, [pc, #148]	; (8001508 <HAL_DAC_MspInit+0xd0>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	4a24      	ldr	r2, [pc, #144]	; (8001508 <HAL_DAC_MspInit+0xd0>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147e:	4b22      	ldr	r3, [pc, #136]	; (8001508 <HAL_DAC_MspInit+0xd0>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800148a:	2330      	movs	r3, #48	; 0x30
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148e:	2303      	movs	r3, #3
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a0:	f001 f960 	bl	8002764 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80014a4:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_DAC_MspInit+0xd4>)
 80014a6:	4a1a      	ldr	r2, [pc, #104]	; (8001510 <HAL_DAC_MspInit+0xd8>)
 80014a8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_DAC_MspInit+0xd4>)
 80014ac:	2206      	movs	r2, #6
 80014ae:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b0:	4b16      	ldr	r3, [pc, #88]	; (800150c <HAL_DAC_MspInit+0xd4>)
 80014b2:	2210      	movs	r2, #16
 80014b4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_DAC_MspInit+0xd4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_DAC_MspInit+0xd4>)
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_DAC_MspInit+0xd4>)
 80014c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_DAC_MspInit+0xd4>)
 80014cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <HAL_DAC_MspInit+0xd4>)
 80014d4:	2220      	movs	r2, #32
 80014d6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <HAL_DAC_MspInit+0xd4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80014de:	480b      	ldr	r0, [pc, #44]	; (800150c <HAL_DAC_MspInit+0xd4>)
 80014e0:	f000 fece 	bl	8002280 <HAL_DMA_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80014ea:	f7ff ff7d 	bl	80013e8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a06      	ldr	r2, [pc, #24]	; (800150c <HAL_DAC_MspInit+0xd4>)
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	4a05      	ldr	r2, [pc, #20]	; (800150c <HAL_DAC_MspInit+0xd4>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80014fa:	bf00      	nop
 80014fc:	3728      	adds	r7, #40	; 0x28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40007400 	.word	0x40007400
 8001508:	40021000 	.word	0x40021000
 800150c:	200000a8 	.word	0x200000a8
 8001510:	40020008 	.word	0x40020008

08001514 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001524:	d10b      	bne.n	800153e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_TIM_Base_MspInit+0x38>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	4a08      	ldr	r2, [pc, #32]	; (800154c <HAL_TIM_Base_MspInit+0x38>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6593      	str	r3, [r2, #88]	; 0x58
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_TIM_Base_MspInit+0x38>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000

08001550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <NMI_Handler+0x4>

08001556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <HardFault_Handler+0x4>

0800155c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <MemManage_Handler+0x4>

08001562 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <BusFault_Handler+0x4>

08001568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <UsageFault_Handler+0x4>

0800156e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800159c:	f000 f8d2 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <DMA1_Channel1_IRQHandler+0x10>)
 80015aa:	f000 ff8c 	bl	80024c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200000a8 	.word	0x200000a8

080015b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <TIM2_IRQHandler+0x10>)
 80015be:	f002 fae3 	bl	8003b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200006f4 	.word	0x200006f4

080015cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015d4:	f001 fa8a 	bl	8002aec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <SystemInit+0x64>)
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e6:	4a16      	ldr	r2, [pc, #88]	; (8001640 <SystemInit+0x64>)
 80015e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <SystemInit+0x68>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a13      	ldr	r2, [pc, #76]	; (8001644 <SystemInit+0x68>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <SystemInit+0x68>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <SystemInit+0x68>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a0f      	ldr	r2, [pc, #60]	; (8001644 <SystemInit+0x68>)
 8001608:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800160c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001610:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <SystemInit+0x68>)
 8001614:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001618:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <SystemInit+0x68>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a09      	ldr	r2, [pc, #36]	; (8001644 <SystemInit+0x68>)
 8001620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001624:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001626:	4b07      	ldr	r3, [pc, #28]	; (8001644 <SystemInit+0x68>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <SystemInit+0x64>)
 800162e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001632:	609a      	str	r2, [r3, #8]
#endif
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00
 8001644:	40021000 	.word	0x40021000

08001648 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001680 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800164c:	f7ff ffc6 	bl	80015dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001650:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001652:	e003      	b.n	800165c <LoopCopyDataInit>

08001654 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001656:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001658:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800165a:	3104      	adds	r1, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800165c:	480a      	ldr	r0, [pc, #40]	; (8001688 <LoopForever+0xa>)
	ldr	r3, =_edata
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001660:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001662:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001664:	d3f6      	bcc.n	8001654 <CopyDataInit>
	ldr	r2, =_sbss
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001668:	e002      	b.n	8001670 <LoopFillZerobss>

0800166a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800166a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800166c:	f842 3b04 	str.w	r3, [r2], #4

08001670 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <LoopForever+0x16>)
	cmp	r2, r3
 8001672:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001674:	d3f9      	bcc.n	800166a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001676:	f002 fea7 	bl	80043c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800167a:	f7ff fb25 	bl	8000cc8 <main>

0800167e <LoopForever>:

LoopForever:
    b LoopForever
 800167e:	e7fe      	b.n	800167e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001680:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001684:	08004c84 	.word	0x08004c84
	ldr	r0, =_sdata
 8001688:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800168c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001690:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001694:	20000744 	.word	0x20000744

08001698 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC1_IRQHandler>

0800169a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a4:	2003      	movs	r0, #3
 80016a6:	f000 f95f 	bl	8001968 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016aa:	2000      	movs	r0, #0
 80016ac:	f000 f80e 	bl	80016cc <HAL_InitTick>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d002      	beq.n	80016bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	71fb      	strb	r3, [r7, #7]
 80016ba:	e001      	b.n	80016c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016bc:	f7ff fe98 	bl	80013f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016c0:	79fb      	ldrb	r3, [r7, #7]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <HAL_InitTick+0x6c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d023      	beq.n	8001728 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_InitTick+0x70>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_InitTick+0x6c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f96b 	bl	80019d2 <HAL_SYSTICK_Config>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10f      	bne.n	8001722 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d809      	bhi.n	800171c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001708:	2200      	movs	r2, #0
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001710:	f000 f935 	bl	800197e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001714:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <HAL_InitTick+0x74>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e007      	b.n	800172c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
 8001720:	e004      	b.n	800172c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	73fb      	strb	r3, [r7, #15]
 8001726:	e001      	b.n	800172c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000000c 	.word	0x2000000c
 800173c:	20000004 	.word	0x20000004
 8001740:	20000008 	.word	0x20000008

08001744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_IncTick+0x20>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x24>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	4a04      	ldr	r2, [pc, #16]	; (8001768 <HAL_IncTick+0x24>)
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	2000000c 	.word	0x2000000c
 8001768:	20000740 	.word	0x20000740

0800176c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <HAL_GetTick+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000740 	.word	0x20000740

08001784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800178c:	f7ff ffee 	bl	800176c <HAL_GetTick>
 8001790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800179c:	d005      	beq.n	80017aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_Delay+0x40>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017aa:	bf00      	nop
 80017ac:	f7ff ffde 	bl	800176c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d8f7      	bhi.n	80017ac <HAL_Delay+0x28>
  {
  }
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2000000c 	.word	0x2000000c

080017c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db0b      	blt.n	8001856 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4907      	ldr	r1, [pc, #28]	; (8001864 <__NVIC_EnableIRQ+0x38>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2001      	movs	r0, #1
 800184e:	fa00 f202 	lsl.w	r2, r0, r2
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000e100 	.word	0xe000e100

08001868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	db0a      	blt.n	8001892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	490c      	ldr	r1, [pc, #48]	; (80018b4 <__NVIC_SetPriority+0x4c>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	440b      	add	r3, r1
 800188c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001890:	e00a      	b.n	80018a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4908      	ldr	r1, [pc, #32]	; (80018b8 <__NVIC_SetPriority+0x50>)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	3b04      	subs	r3, #4
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	761a      	strb	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f1c3 0307 	rsb	r3, r3, #7
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	bf28      	it	cs
 80018da:	2304      	movcs	r3, #4
 80018dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3304      	adds	r3, #4
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d902      	bls.n	80018ec <NVIC_EncodePriority+0x30>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3b03      	subs	r3, #3
 80018ea:	e000      	b.n	80018ee <NVIC_EncodePriority+0x32>
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43da      	mvns	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001904:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43d9      	mvns	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	4313      	orrs	r3, r2
         );
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001934:	d301      	bcc.n	800193a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001936:	2301      	movs	r3, #1
 8001938:	e00f      	b.n	800195a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <SysTick_Config+0x40>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001942:	210f      	movs	r1, #15
 8001944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001948:	f7ff ff8e 	bl	8001868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <SysTick_Config+0x40>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <SysTick_Config+0x40>)
 8001954:	2207      	movs	r2, #7
 8001956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	e000e010 	.word	0xe000e010

08001968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff ff29 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b086      	sub	sp, #24
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
 800198a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001990:	f7ff ff3e 	bl	8001810 <__NVIC_GetPriorityGrouping>
 8001994:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	6978      	ldr	r0, [r7, #20]
 800199c:	f7ff ff8e 	bl	80018bc <NVIC_EncodePriority>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff5d 	bl	8001868 <__NVIC_SetPriority>
}
 80019ae:	bf00      	nop
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff31 	bl	800182c <__NVIC_EnableIRQ>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff ffa2 	bl	8001924 <SysTick_Config>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e014      	b.n	8001a26 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	791b      	ldrb	r3, [r3, #4]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d105      	bne.n	8001a12 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fd13 	bl	8001438 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2202      	movs	r2, #2
 8001a16:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	795b      	ldrb	r3, [r3, #5]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_DAC_Start+0x16>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e040      	b.n	8001ac6 <HAL_DAC_Start+0x98>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6819      	ldr	r1, [r3, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10f      	bne.n	8001a8e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d11d      	bne.n	8001ab8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	e014      	b.n	8001ab8 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d107      	bne.n	8001ab8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0202 	orr.w	r2, r2, #2
 8001ab6:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	795b      	ldrb	r3, [r3, #5]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_DAC_Start_DMA+0x1e>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e09e      	b.n	8001c30 <HAL_DAC_Start_DMA+0x15c>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2201      	movs	r2, #1
 8001af6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2202      	movs	r2, #2
 8001afc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d12a      	bne.n	8001b5a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4a4b      	ldr	r2, [pc, #300]	; (8001c38 <HAL_DAC_Start_DMA+0x164>)
 8001b0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4a4a      	ldr	r2, [pc, #296]	; (8001c3c <HAL_DAC_Start_DMA+0x168>)
 8001b12:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4a49      	ldr	r2, [pc, #292]	; (8001c40 <HAL_DAC_Start_DMA+0x16c>)
 8001b1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b2a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d009      	beq.n	8001b46 <HAL_DAC_Start_DMA+0x72>
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d00c      	beq.n	8001b50 <HAL_DAC_Start_DMA+0x7c>
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d000      	beq.n	8001b3c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001b3a:	e039      	b.n	8001bb0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	3308      	adds	r3, #8
 8001b42:	613b      	str	r3, [r7, #16]
        break;
 8001b44:	e034      	b.n	8001bb0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	330c      	adds	r3, #12
 8001b4c:	613b      	str	r3, [r7, #16]
        break;
 8001b4e:	e02f      	b.n	8001bb0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3310      	adds	r3, #16
 8001b56:	613b      	str	r3, [r7, #16]
        break;
 8001b58:	e02a      	b.n	8001bb0 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	4a39      	ldr	r2, [pc, #228]	; (8001c44 <HAL_DAC_Start_DMA+0x170>)
 8001b60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	4a38      	ldr	r2, [pc, #224]	; (8001c48 <HAL_DAC_Start_DMA+0x174>)
 8001b68:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	4a37      	ldr	r2, [pc, #220]	; (8001c4c <HAL_DAC_Start_DMA+0x178>)
 8001b70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b80:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d009      	beq.n	8001b9c <HAL_DAC_Start_DMA+0xc8>
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d00c      	beq.n	8001ba6 <HAL_DAC_Start_DMA+0xd2>
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d000      	beq.n	8001b92 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001b90:	e00e      	b.n	8001bb0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3314      	adds	r3, #20
 8001b98:	613b      	str	r3, [r7, #16]
        break;
 8001b9a:	e009      	b.n	8001bb0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	3318      	adds	r3, #24
 8001ba2:	613b      	str	r3, [r7, #16]
        break;
 8001ba4:	e004      	b.n	8001bb0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	331c      	adds	r3, #28
 8001bac:	613b      	str	r3, [r7, #16]
        break;
 8001bae:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d111      	bne.n	8001bda <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bc4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6898      	ldr	r0, [r3, #8]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	f000 fbfe 	bl	80023d0 <HAL_DMA_Start_IT>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	75fb      	strb	r3, [r7, #23]
 8001bd8:	e010      	b.n	8001bfc <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001be8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	68d8      	ldr	r0, [r3, #12]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	f000 fbec 	bl	80023d0 <HAL_DMA_Start_IT>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10c      	bne.n	8001c22 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6819      	ldr	r1, [r3, #0]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	2201      	movs	r2, #1
 8001c16:	409a      	lsls	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	e005      	b.n	8001c2e <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f043 0204 	orr.w	r2, r3, #4
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	08001f45 	.word	0x08001f45
 8001c3c:	08001f67 	.word	0x08001f67
 8001c40:	08001f83 	.word	0x08001f83
 8001c44:	08002215 	.word	0x08002215
 8001c48:	08002237 	.word	0x08002237
 8001c4c:	08002253 	.word	0x08002253

08001c50 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d105      	bne.n	8001c7a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4413      	add	r3, r2
 8001c74:	3308      	adds	r3, #8
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	e004      	b.n	8001c84 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	3314      	adds	r3, #20
 8001c82:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	461a      	mov	r2, r3
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	371c      	adds	r7, #28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	795b      	ldrb	r3, [r3, #5]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_DAC_ConfigChannel+0x1c>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e12a      	b.n	8001f36 <HAL_DAC_ConfigChannel+0x272>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d174      	bne.n	8001dde <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001cf4:	f7ff fd3a 	bl	800176c <HAL_GetTick>
 8001cf8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d134      	bne.n	8001d6a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001d00:	e011      	b.n	8001d26 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001d02:	f7ff fd33 	bl	800176c <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d90a      	bls.n	8001d26 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	f043 0208 	orr.w	r2, r3, #8
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2203      	movs	r2, #3
 8001d20:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e107      	b.n	8001f36 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1e6      	bne.n	8001d02 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001d34:	2001      	movs	r0, #1
 8001d36:	f7ff fd25 	bl	8001784 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	69d2      	ldr	r2, [r2, #28]
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40
 8001d44:	e01e      	b.n	8001d84 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001d46:	f7ff fd11 	bl	800176c <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d90a      	bls.n	8001d6a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	f043 0208 	orr.w	r2, r3, #8
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2203      	movs	r2, #3
 8001d64:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e0e5      	b.n	8001f36 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	dbe8      	blt.n	8001d46 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001d74:	2001      	movs	r0, #1
 8001d76:	f7ff fd05 	bl	8001784 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	69d2      	ldr	r2, [r2, #28]
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	ea02 0103 	and.w	r1, r2, r3
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	6a1a      	ldr	r2, [r3, #32]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f003 0310 	and.w	r3, r3, #16
 8001da8:	409a      	lsls	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	21ff      	movs	r1, #255	; 0xff
 8001dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	ea02 0103 	and.w	r1, r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d11d      	bne.n	8001e22 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dec:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	221f      	movs	r2, #31
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e28:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	2207      	movs	r2, #7
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	431a      	orrs	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6819      	ldr	r1, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	400a      	ands	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ec6:	d104      	bne.n	8001ed2 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ece:	61fb      	str	r3, [r7, #28]
 8001ed0:	e018      	b.n	8001f04 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d104      	bne.n	8001ee4 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	e00f      	b.n	8001f04 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001ee4:	f001 fcba 	bl	800385c <HAL_RCC_GetHCLKFreq>
 8001ee8:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <HAL_DAC_ConfigChannel+0x27c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d904      	bls.n	8001efc <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	e003      	b.n	8001f04 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f02:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	69fa      	ldr	r2, [r7, #28]
 8001f0a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6819      	ldr	r1, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	22c0      	movs	r2, #192	; 0xc0
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	400a      	ands	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3720      	adds	r7, #32
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	04c4b400 	.word	0x04c4b400

08001f44 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f7fe fe38 	bl	8000bc8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	711a      	strb	r2, [r3, #4]
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f7ff fe90 	bl	8001c9a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	f043 0204 	orr.w	r2, r3, #4
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7ff fe86 	bl	8001cae <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	711a      	strb	r2, [r3, #4]
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_DACEx_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */

HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

 /* Check the DAC handle allocation */
 /* Check if DAC running */
  if (hdac == NULL)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d103      	bne.n	800200c <HAL_DACEx_SelfCalibrate+0x20>
  {
    status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800200a:	e0fd      	b.n	8002208 <HAL_DACEx_SelfCalibrate+0x21c>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	791b      	ldrb	r3, [r3, #4]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d103      	bne.n	800201e <HAL_DACEx_SelfCalibrate+0x32>
  {
    status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800201c:	e0f4      	b.n	8002208 <HAL_DACEx_SelfCalibrate+0x21c>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	795b      	ldrb	r3, [r3, #5]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_DACEx_SelfCalibrate+0x3e>
 8002026:	2302      	movs	r3, #2
 8002028:	e0f0      	b.n	800220c <HAL_DACEx_SelfCalibrate+0x220>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2107      	movs	r1, #7
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6819      	ldr	r1, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2201      	movs	r2, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43da      	mvns	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	400a      	ands	r2, r1
 8002060:	601a      	str	r2, [r3, #0]

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2207      	movs	r2, #7
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43da      	mvns	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	400a      	ands	r2, r1
 800207c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set DAC Channel1 DHR register to the middle value */
    tmp = (uint32_t)hdac->Instance;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	617b      	str	r3, [r7, #20]

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
    if(Channel == DAC_CHANNEL_1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d103      	bne.n	8002092 <HAL_DACEx_SelfCalibrate+0xa6>
    {
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3308      	adds	r3, #8
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	e002      	b.n	8002098 <HAL_DACEx_SelfCalibrate+0xac>
    }
    else
    {
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3314      	adds	r3, #20
 8002096:	617b      	str	r3, [r7, #20]
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
#if defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx)
    tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
#endif /* STM32L451xx STM32L452xx STM32L462xx */
    *(__IO uint32_t *) tmp = 0x0800U;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	461a      	mov	r2, r3
 800209c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020a0:	6013      	str	r3, [r2, #0]

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6819      	ldr	r1, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020b2:	409a      	lsls	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 16U;
 80020bc:	2310      	movs	r3, #16
 80020be:	623b      	str	r3, [r7, #32]
    delta = 8U;
 80020c0:	2308      	movs	r3, #8
 80020c2:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 80020c4:	e037      	b.n	8002136 <HAL_DACEx_SelfCalibrate+0x14a>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	211f      	movs	r1, #31
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	ea02 0103 	and.w	r1, r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	6a3a      	ldr	r2, [r7, #32]
 80020e6:	409a      	lsls	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	639a      	str	r2, [r3, #56]	; 0x38

      /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
      /* i.e. minimum time needed between two calibration steps */
      HAL_Delay(1);
 80020f0:	2001      	movs	r0, #1
 80020f2:	f7ff fb47 	bl	8001784 <HAL_Delay>

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	401a      	ands	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	429a      	cmp	r2, r3
 800211c:	d104      	bne.n	8002128 <HAL_DACEx_SelfCalibrate+0x13c>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 800211e:	6a3a      	ldr	r2, [r7, #32]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	623b      	str	r3, [r7, #32]
 8002126:	e003      	b.n	8002130 <HAL_DACEx_SelfCalibrate+0x144>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 8002128:	6a3a      	ldr	r2, [r7, #32]
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	4413      	add	r3, r2
 800212e:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1U;
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	085b      	lsrs	r3, r3, #1
 8002134:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1c4      	bne.n	80020c6 <HAL_DACEx_SelfCalibrate+0xda>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	211f      	movs	r1, #31
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	ea02 0103 	and.w	r1, r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	6a3a      	ldr	r2, [r7, #32]
 800215c:	409a      	lsls	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	639a      	str	r2, [r3, #56]	; 0x38

    /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
    /* i.e. minimum time needed between two calibration steps */
    HAL_Delay(1U);
 8002166:	2001      	movs	r0, #1
 8002168:	f7ff fb0c 	bl	8001784 <HAL_Delay>

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d117      	bne.n	80021b6 <HAL_DACEx_SelfCalibrate+0x1ca>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvalue++;
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	3301      	adds	r3, #1
 800218a:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f003 0310 	and.w	r3, r3, #16
 8002198:	211f      	movs	r1, #31
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	ea02 0103 	and.w	r1, r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	6a3a      	ldr	r2, [r7, #32]
 80021ac:	409a      	lsls	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6819      	ldr	r1, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	400a      	ands	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	6a3a      	ldr	r2, [r7, #32]
 80021d8:	619a      	str	r2, [r3, #24]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2201      	movs	r2, #1
 80021de:	615a      	str	r2, [r3, #20]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2107      	movs	r1, #7
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	ea02 0103 	and.w	r1, r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	430a      	orrs	r2, r1
 8002200:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	715a      	strb	r2, [r3, #5]
  }

  return status;
 8002208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800220c:	4618      	mov	r0, r3
 800220e:	3728      	adds	r7, #40	; 0x28
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f7ff fec4 	bl	8001fb0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2201      	movs	r2, #1
 800222c:	711a      	strb	r2, [r3, #4]
}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002242:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f7ff febd 	bl	8001fc4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f043 0204 	orr.w	r2, r3, #4
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f7ff feb3 	bl	8001fd8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	711a      	strb	r2, [r3, #4]
}
 8002278:	bf00      	nop
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e08d      	b.n	80023ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <HAL_DMA_Init+0x138>)
 800229a:	429a      	cmp	r2, r3
 800229c:	d80f      	bhi.n	80022be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	4b45      	ldr	r3, [pc, #276]	; (80023bc <HAL_DMA_Init+0x13c>)
 80022a6:	4413      	add	r3, r2
 80022a8:	4a45      	ldr	r2, [pc, #276]	; (80023c0 <HAL_DMA_Init+0x140>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	091b      	lsrs	r3, r3, #4
 80022b0:	009a      	lsls	r2, r3, #2
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a42      	ldr	r2, [pc, #264]	; (80023c4 <HAL_DMA_Init+0x144>)
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40
 80022bc:	e00e      	b.n	80022dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	461a      	mov	r2, r3
 80022c4:	4b40      	ldr	r3, [pc, #256]	; (80023c8 <HAL_DMA_Init+0x148>)
 80022c6:	4413      	add	r3, r2
 80022c8:	4a3d      	ldr	r2, [pc, #244]	; (80023c0 <HAL_DMA_Init+0x140>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	009a      	lsls	r2, r3, #2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a3c      	ldr	r2, [pc, #240]	; (80023cc <HAL_DMA_Init+0x14c>)
 80022da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80022f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002300:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800230c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002318:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f9b6 	bl	80026a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800233c:	d102      	bne.n	8002344 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002358:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d010      	beq.n	8002384 <HAL_DMA_Init+0x104>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b04      	cmp	r3, #4
 8002368:	d80c      	bhi.n	8002384 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f9d6 	bl	800271c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	e008      	b.n	8002396 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40020407 	.word	0x40020407
 80023bc:	bffdfff8 	.word	0xbffdfff8
 80023c0:	cccccccd 	.word	0xcccccccd
 80023c4:	40020000 	.word	0x40020000
 80023c8:	bffdfbf8 	.word	0xbffdfbf8
 80023cc:	40020400 	.word	0x40020400

080023d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_DMA_Start_IT+0x20>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e066      	b.n	80024be <HAL_DMA_Start_IT+0xee>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b01      	cmp	r3, #1
 8002402:	d155      	bne.n	80024b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0201 	bic.w	r2, r2, #1
 8002420:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68b9      	ldr	r1, [r7, #8]
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f8fb 	bl	8002624 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 020e 	orr.w	r2, r2, #14
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e00f      	b.n	8002468 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0204 	bic.w	r2, r2, #4
 8002456:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 020a 	orr.w	r2, r2, #10
 8002466:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002484:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800249c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	e005      	b.n	80024bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
 80024ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f003 031c 	and.w	r3, r3, #28
 80024e6:	2204      	movs	r2, #4
 80024e8:	409a      	lsls	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d026      	beq.n	8002540 <HAL_DMA_IRQHandler+0x7a>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d021      	beq.n	8002540 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0320 	and.w	r3, r3, #32
 8002506:	2b00      	cmp	r3, #0
 8002508:	d107      	bne.n	800251a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0204 	bic.w	r2, r2, #4
 8002518:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	f003 021c 	and.w	r2, r3, #28
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	2104      	movs	r1, #4
 8002528:	fa01 f202 	lsl.w	r2, r1, r2
 800252c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	2b00      	cmp	r3, #0
 8002534:	d071      	beq.n	800261a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800253e:	e06c      	b.n	800261a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	f003 031c 	and.w	r3, r3, #28
 8002548:	2202      	movs	r2, #2
 800254a:	409a      	lsls	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d02e      	beq.n	80025b2 <HAL_DMA_IRQHandler+0xec>
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d029      	beq.n	80025b2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10b      	bne.n	8002584 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 020a 	bic.w	r2, r2, #10
 800257a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002588:	f003 021c 	and.w	r2, r3, #28
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	2102      	movs	r1, #2
 8002592:	fa01 f202 	lsl.w	r2, r1, r2
 8002596:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d038      	beq.n	800261a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025b0:	e033      	b.n	800261a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f003 031c 	and.w	r3, r3, #28
 80025ba:	2208      	movs	r2, #8
 80025bc:	409a      	lsls	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d02a      	beq.n	800261c <HAL_DMA_IRQHandler+0x156>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d025      	beq.n	800261c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 020e 	bic.w	r2, r2, #14
 80025de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	f003 021c 	and.w	r2, r3, #28
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	2101      	movs	r1, #1
 80025ee:	fa01 f202 	lsl.w	r2, r1, r2
 80025f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260e:	2b00      	cmp	r3, #0
 8002610:	d004      	beq.n	800261c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800261a:	bf00      	nop
 800261c:	bf00      	nop
}
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800263a:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800264c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f003 021c 	and.w	r2, r3, #28
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2101      	movs	r1, #1
 800265c:	fa01 f202 	lsl.w	r2, r1, r2
 8002660:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b10      	cmp	r3, #16
 8002670:	d108      	bne.n	8002684 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002682:	e007      	b.n	8002694 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	60da      	str	r2, [r3, #12]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d80a      	bhi.n	80026ca <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	089b      	lsrs	r3, r3, #2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026c0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6493      	str	r3, [r2, #72]	; 0x48
 80026c8:	e007      	b.n	80026da <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	009a      	lsls	r2, r3, #2
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80026d4:	4413      	add	r3, r2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	3b08      	subs	r3, #8
 80026e2:	4a0c      	ldr	r2, [pc, #48]	; (8002714 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80026e4:	fba2 2303 	umull	r2, r3, r2, r3
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80026f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	2201      	movs	r2, #1
 80026fa:	409a      	lsls	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40020407 	.word	0x40020407
 8002710:	4002081c 	.word	0x4002081c
 8002714:	cccccccd 	.word	0xcccccccd
 8002718:	40020880 	.word	0x40020880

0800271c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	461a      	mov	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a08      	ldr	r2, [pc, #32]	; (8002760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800273e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	3b01      	subs	r3, #1
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2201      	movs	r2, #1
 800274a:	409a      	lsls	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	1000823f 	.word	0x1000823f
 8002760:	40020940 	.word	0x40020940

08002764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002772:	e166      	b.n	8002a42 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	fa01 f303 	lsl.w	r3, r1, r3
 8002780:	4013      	ands	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 8158 	beq.w	8002a3c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d00b      	beq.n	80027ac <HAL_GPIO_Init+0x48>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d007      	beq.n	80027ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027a0:	2b11      	cmp	r3, #17
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b12      	cmp	r3, #18
 80027aa:	d130      	bne.n	800280e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	2203      	movs	r2, #3
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027e2:	2201      	movs	r2, #1
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4013      	ands	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	f003 0201 	and.w	r2, r3, #1
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	2203      	movs	r2, #3
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4013      	ands	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0xea>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b12      	cmp	r3, #18
 800284c:	d123      	bne.n	8002896 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	08da      	lsrs	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3208      	adds	r2, #8
 8002856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	220f      	movs	r2, #15
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	08da      	lsrs	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3208      	adds	r2, #8
 8002890:	6939      	ldr	r1, [r7, #16]
 8002892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	2203      	movs	r2, #3
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4013      	ands	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0203 	and.w	r2, r3, #3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80b2 	beq.w	8002a3c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d8:	4b61      	ldr	r3, [pc, #388]	; (8002a60 <HAL_GPIO_Init+0x2fc>)
 80028da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028dc:	4a60      	ldr	r2, [pc, #384]	; (8002a60 <HAL_GPIO_Init+0x2fc>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6613      	str	r3, [r2, #96]	; 0x60
 80028e4:	4b5e      	ldr	r3, [pc, #376]	; (8002a60 <HAL_GPIO_Init+0x2fc>)
 80028e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028f0:	4a5c      	ldr	r2, [pc, #368]	; (8002a64 <HAL_GPIO_Init+0x300>)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	089b      	lsrs	r3, r3, #2
 80028f6:	3302      	adds	r3, #2
 80028f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	220f      	movs	r2, #15
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800291a:	d02b      	beq.n	8002974 <HAL_GPIO_Init+0x210>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a52      	ldr	r2, [pc, #328]	; (8002a68 <HAL_GPIO_Init+0x304>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d025      	beq.n	8002970 <HAL_GPIO_Init+0x20c>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a51      	ldr	r2, [pc, #324]	; (8002a6c <HAL_GPIO_Init+0x308>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d01f      	beq.n	800296c <HAL_GPIO_Init+0x208>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a50      	ldr	r2, [pc, #320]	; (8002a70 <HAL_GPIO_Init+0x30c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d019      	beq.n	8002968 <HAL_GPIO_Init+0x204>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a4f      	ldr	r2, [pc, #316]	; (8002a74 <HAL_GPIO_Init+0x310>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d013      	beq.n	8002964 <HAL_GPIO_Init+0x200>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a4e      	ldr	r2, [pc, #312]	; (8002a78 <HAL_GPIO_Init+0x314>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00d      	beq.n	8002960 <HAL_GPIO_Init+0x1fc>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a4d      	ldr	r2, [pc, #308]	; (8002a7c <HAL_GPIO_Init+0x318>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d007      	beq.n	800295c <HAL_GPIO_Init+0x1f8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a4c      	ldr	r2, [pc, #304]	; (8002a80 <HAL_GPIO_Init+0x31c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d101      	bne.n	8002958 <HAL_GPIO_Init+0x1f4>
 8002954:	2307      	movs	r3, #7
 8002956:	e00e      	b.n	8002976 <HAL_GPIO_Init+0x212>
 8002958:	2308      	movs	r3, #8
 800295a:	e00c      	b.n	8002976 <HAL_GPIO_Init+0x212>
 800295c:	2306      	movs	r3, #6
 800295e:	e00a      	b.n	8002976 <HAL_GPIO_Init+0x212>
 8002960:	2305      	movs	r3, #5
 8002962:	e008      	b.n	8002976 <HAL_GPIO_Init+0x212>
 8002964:	2304      	movs	r3, #4
 8002966:	e006      	b.n	8002976 <HAL_GPIO_Init+0x212>
 8002968:	2303      	movs	r3, #3
 800296a:	e004      	b.n	8002976 <HAL_GPIO_Init+0x212>
 800296c:	2302      	movs	r3, #2
 800296e:	e002      	b.n	8002976 <HAL_GPIO_Init+0x212>
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <HAL_GPIO_Init+0x212>
 8002974:	2300      	movs	r3, #0
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	f002 0203 	and.w	r2, r2, #3
 800297c:	0092      	lsls	r2, r2, #2
 800297e:	4093      	lsls	r3, r2
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002986:	4937      	ldr	r1, [pc, #220]	; (8002a64 <HAL_GPIO_Init+0x300>)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	089b      	lsrs	r3, r3, #2
 800298c:	3302      	adds	r3, #2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002994:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <HAL_GPIO_Init+0x320>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	43db      	mvns	r3, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029b8:	4a32      	ldr	r2, [pc, #200]	; (8002a84 <HAL_GPIO_Init+0x320>)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80029be:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <HAL_GPIO_Init+0x320>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	43db      	mvns	r3, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029e2:	4a28      	ldr	r2, [pc, #160]	; (8002a84 <HAL_GPIO_Init+0x320>)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029e8:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <HAL_GPIO_Init+0x320>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a0c:	4a1d      	ldr	r2, [pc, #116]	; (8002a84 <HAL_GPIO_Init+0x320>)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a12:	4b1c      	ldr	r3, [pc, #112]	; (8002a84 <HAL_GPIO_Init+0x320>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a36:	4a13      	ldr	r2, [pc, #76]	; (8002a84 <HAL_GPIO_Init+0x320>)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f47f ae91 	bne.w	8002774 <HAL_GPIO_Init+0x10>
  }
}
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40010000 	.word	0x40010000
 8002a68:	48000400 	.word	0x48000400
 8002a6c:	48000800 	.word	0x48000800
 8002a70:	48000c00 	.word	0x48000c00
 8002a74:	48001000 	.word	0x48001000
 8002a78:	48001400 	.word	0x48001400
 8002a7c:	48001800 	.word	0x48001800
 8002a80:	48001c00 	.word	0x48001c00
 8002a84:	40010400 	.word	0x40010400

08002a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	807b      	strh	r3, [r7, #2]
 8002a94:	4613      	mov	r3, r2
 8002a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a98:	787b      	ldrb	r3, [r7, #1]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a9e:	887a      	ldrh	r2, [r7, #2]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002aa4:	e002      	b.n	8002aac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aa6:	887a      	ldrh	r2, [r7, #2]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002aca:	887a      	ldrh	r2, [r7, #2]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	041a      	lsls	r2, r3, #16
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	43d9      	mvns	r1, r3
 8002ad6:	887b      	ldrh	r3, [r7, #2]
 8002ad8:	400b      	ands	r3, r1
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	619a      	str	r2, [r3, #24]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002af6:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d006      	beq.n	8002b10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b02:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fd ff96 	bl	8000a3c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40010400 	.word	0x40010400

08002b1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b20:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2c:	d102      	bne.n	8002b34 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b32:	e00b      	b.n	8002b4c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002b34:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b42:	d102      	bne.n	8002b4a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b48:	e000      	b.n	8002b4c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002b4a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40007000 	.word	0x40007000

08002b5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d141      	bne.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b6a:	4b4b      	ldr	r3, [pc, #300]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b76:	d131      	bne.n	8002bdc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b78:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b7e:	4a46      	ldr	r2, [pc, #280]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b88:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b90:	4a41      	ldr	r2, [pc, #260]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002b98:	4b40      	ldr	r3, [pc, #256]	; (8002c9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2232      	movs	r2, #50	; 0x32
 8002b9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ba2:	4a3f      	ldr	r2, [pc, #252]	; (8002ca0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	0c9b      	lsrs	r3, r3, #18
 8002baa:	3301      	adds	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bae:	e002      	b.n	8002bb6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bb6:	4b38      	ldr	r3, [pc, #224]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc2:	d102      	bne.n	8002bca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f2      	bne.n	8002bb0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bca:	4b33      	ldr	r3, [pc, #204]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd6:	d158      	bne.n	8002c8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e057      	b.n	8002c8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bdc:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002be2:	4a2d      	ldr	r2, [pc, #180]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002bec:	e04d      	b.n	8002c8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf4:	d141      	bne.n	8002c7a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bf6:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c02:	d131      	bne.n	8002c68 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c04:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c0a:	4a23      	ldr	r2, [pc, #140]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c14:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c1c:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002c24:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2232      	movs	r2, #50	; 0x32
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	0c9b      	lsrs	r3, r3, #18
 8002c36:	3301      	adds	r3, #1
 8002c38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c3a:	e002      	b.n	8002c42 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4e:	d102      	bne.n	8002c56 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f2      	bne.n	8002c3c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c56:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c62:	d112      	bne.n	8002c8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e011      	b.n	8002c8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c78:	e007      	b.n	8002c8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c7a:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c82:	4a05      	ldr	r2, [pc, #20]	; (8002c98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c88:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	40007000 	.word	0x40007000
 8002c9c:	20000004 	.word	0x20000004
 8002ca0:	431bde83 	.word	0x431bde83

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d102      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f000 bc16 	b.w	80034e4 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb8:	4ba0      	ldr	r3, [pc, #640]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
 8002cc0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc2:	4b9e      	ldr	r3, [pc, #632]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80e4 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4c>
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	f040 808b 	bne.w	8002dfe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	f040 8087 	bne.w	8002dfe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cf0:	4b92      	ldr	r3, [pc, #584]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_OscConfig+0x64>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e3ed      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1a      	ldr	r2, [r3, #32]
 8002d0c:	4b8b      	ldr	r3, [pc, #556]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d004      	beq.n	8002d22 <HAL_RCC_OscConfig+0x7e>
 8002d18:	4b88      	ldr	r3, [pc, #544]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d20:	e005      	b.n	8002d2e <HAL_RCC_OscConfig+0x8a>
 8002d22:	4b86      	ldr	r3, [pc, #536]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d223      	bcs.n	8002d7a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fd9c 	bl	8003874 <RCC_SetFlashLatencyFromMSIRange>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e3ce      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d46:	4b7d      	ldr	r3, [pc, #500]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a7c      	ldr	r2, [pc, #496]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002d4c:	f043 0308 	orr.w	r3, r3, #8
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b7a      	ldr	r3, [pc, #488]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4977      	ldr	r1, [pc, #476]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d64:	4b75      	ldr	r3, [pc, #468]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	4972      	ldr	r1, [pc, #456]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
 8002d78:	e025      	b.n	8002dc6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d7a:	4b70      	ldr	r3, [pc, #448]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6f      	ldr	r2, [pc, #444]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002d80:	f043 0308 	orr.w	r3, r3, #8
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b6d      	ldr	r3, [pc, #436]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	496a      	ldr	r1, [pc, #424]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d98:	4b68      	ldr	r3, [pc, #416]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	4965      	ldr	r1, [pc, #404]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fd5c 	bl	8003874 <RCC_SetFlashLatencyFromMSIRange>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e38e      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dc6:	f000 fcbf 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 8002dca:	4601      	mov	r1, r0
 8002dcc:	4b5b      	ldr	r3, [pc, #364]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	4a5a      	ldr	r2, [pc, #360]	; (8002f40 <HAL_RCC_OscConfig+0x29c>)
 8002dd8:	5cd3      	ldrb	r3, [r2, r3]
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	fa21 f303 	lsr.w	r3, r1, r3
 8002de2:	4a58      	ldr	r2, [pc, #352]	; (8002f44 <HAL_RCC_OscConfig+0x2a0>)
 8002de4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002de6:	4b58      	ldr	r3, [pc, #352]	; (8002f48 <HAL_RCC_OscConfig+0x2a4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fc6e 	bl	80016cc <HAL_InitTick>
 8002df0:	4603      	mov	r3, r0
 8002df2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d052      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	e372      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d032      	beq.n	8002e6c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e06:	4b4d      	ldr	r3, [pc, #308]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a4c      	ldr	r2, [pc, #304]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e12:	f7fe fcab 	bl	800176c <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e1a:	f7fe fca7 	bl	800176c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e35b      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e2c:	4b43      	ldr	r3, [pc, #268]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e38:	4b40      	ldr	r3, [pc, #256]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a3f      	ldr	r2, [pc, #252]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002e3e:	f043 0308 	orr.w	r3, r3, #8
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	4b3d      	ldr	r3, [pc, #244]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	493a      	ldr	r1, [pc, #232]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e56:	4b39      	ldr	r3, [pc, #228]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	4935      	ldr	r1, [pc, #212]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
 8002e6a:	e01a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e6c:	4b33      	ldr	r3, [pc, #204]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a32      	ldr	r2, [pc, #200]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002e72:	f023 0301 	bic.w	r3, r3, #1
 8002e76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e78:	f7fe fc78 	bl	800176c <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e80:	f7fe fc74 	bl	800176c <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e328      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e92:	4b2a      	ldr	r3, [pc, #168]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x1dc>
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ea0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d073      	beq.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x21c>
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2b0c      	cmp	r3, #12
 8002eb8:	d10e      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	4b1e      	ldr	r3, [pc, #120]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d063      	beq.n	8002f94 <HAL_RCC_OscConfig+0x2f0>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d15f      	bne.n	8002f94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e305      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
 8002ee2:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e01d      	b.n	8002f2c <HAL_RCC_OscConfig+0x288>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x270>
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a0f      	ldr	r2, [pc, #60]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a0c      	ldr	r2, [pc, #48]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0x288>
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a05      	ldr	r2, [pc, #20]	; (8002f3c <HAL_RCC_OscConfig+0x298>)
 8002f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d01b      	beq.n	8002f6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fe fc1a 	bl	800176c <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f3a:	e010      	b.n	8002f5e <HAL_RCC_OscConfig+0x2ba>
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	08004438 	.word	0x08004438
 8002f44:	20000004 	.word	0x20000004
 8002f48:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7fe fc0e 	bl	800176c <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e2c2      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f5e:	4baf      	ldr	r3, [pc, #700]	; (800321c <HAL_RCC_OscConfig+0x578>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x2a8>
 8002f6a:	e014      	b.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fbfe 	bl	800176c <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fe fbfa 	bl	800176c <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e2ae      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f86:	4ba5      	ldr	r3, [pc, #660]	; (800321c <HAL_RCC_OscConfig+0x578>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x2d0>
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d060      	beq.n	8003064 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x310>
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d119      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d116      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb4:	4b99      	ldr	r3, [pc, #612]	; (800321c <HAL_RCC_OscConfig+0x578>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_OscConfig+0x328>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e28b      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fcc:	4b93      	ldr	r3, [pc, #588]	; (800321c <HAL_RCC_OscConfig+0x578>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	4990      	ldr	r1, [pc, #576]	; (800321c <HAL_RCC_OscConfig+0x578>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe0:	e040      	b.n	8003064 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d023      	beq.n	8003032 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fea:	4b8c      	ldr	r3, [pc, #560]	; (800321c <HAL_RCC_OscConfig+0x578>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a8b      	ldr	r2, [pc, #556]	; (800321c <HAL_RCC_OscConfig+0x578>)
 8002ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fe fbb9 	bl	800176c <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffe:	f7fe fbb5 	bl	800176c <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e269      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003010:	4b82      	ldr	r3, [pc, #520]	; (800321c <HAL_RCC_OscConfig+0x578>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301c:	4b7f      	ldr	r3, [pc, #508]	; (800321c <HAL_RCC_OscConfig+0x578>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	497c      	ldr	r1, [pc, #496]	; (800321c <HAL_RCC_OscConfig+0x578>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
 8003030:	e018      	b.n	8003064 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003032:	4b7a      	ldr	r3, [pc, #488]	; (800321c <HAL_RCC_OscConfig+0x578>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a79      	ldr	r2, [pc, #484]	; (800321c <HAL_RCC_OscConfig+0x578>)
 8003038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800303c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fe fb95 	bl	800176c <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003046:	f7fe fb91 	bl	800176c <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e245      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003058:	4b70      	ldr	r3, [pc, #448]	; (800321c <HAL_RCC_OscConfig+0x578>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1f0      	bne.n	8003046 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d03c      	beq.n	80030ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01c      	beq.n	80030b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003078:	4b68      	ldr	r3, [pc, #416]	; (800321c <HAL_RCC_OscConfig+0x578>)
 800307a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307e:	4a67      	ldr	r2, [pc, #412]	; (800321c <HAL_RCC_OscConfig+0x578>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fe fb70 	bl	800176c <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003090:	f7fe fb6c 	bl	800176c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e220      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030a2:	4b5e      	ldr	r3, [pc, #376]	; (800321c <HAL_RCC_OscConfig+0x578>)
 80030a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0ef      	beq.n	8003090 <HAL_RCC_OscConfig+0x3ec>
 80030b0:	e01b      	b.n	80030ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b2:	4b5a      	ldr	r3, [pc, #360]	; (800321c <HAL_RCC_OscConfig+0x578>)
 80030b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b8:	4a58      	ldr	r2, [pc, #352]	; (800321c <HAL_RCC_OscConfig+0x578>)
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c2:	f7fe fb53 	bl	800176c <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ca:	f7fe fb4f 	bl	800176c <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e203      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030dc:	4b4f      	ldr	r3, [pc, #316]	; (800321c <HAL_RCC_OscConfig+0x578>)
 80030de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1ef      	bne.n	80030ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 80a6 	beq.w	8003244 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f8:	2300      	movs	r3, #0
 80030fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030fc:	4b47      	ldr	r3, [pc, #284]	; (800321c <HAL_RCC_OscConfig+0x578>)
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10d      	bne.n	8003124 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003108:	4b44      	ldr	r3, [pc, #272]	; (800321c <HAL_RCC_OscConfig+0x578>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	4a43      	ldr	r2, [pc, #268]	; (800321c <HAL_RCC_OscConfig+0x578>)
 800310e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003112:	6593      	str	r3, [r2, #88]	; 0x58
 8003114:	4b41      	ldr	r3, [pc, #260]	; (800321c <HAL_RCC_OscConfig+0x578>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003120:	2301      	movs	r3, #1
 8003122:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003124:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <HAL_RCC_OscConfig+0x57c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d118      	bne.n	8003162 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003130:	4b3b      	ldr	r3, [pc, #236]	; (8003220 <HAL_RCC_OscConfig+0x57c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a3a      	ldr	r2, [pc, #232]	; (8003220 <HAL_RCC_OscConfig+0x57c>)
 8003136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313c:	f7fe fb16 	bl	800176c <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003144:	f7fe fb12 	bl	800176c <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e1c6      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003156:	4b32      	ldr	r3, [pc, #200]	; (8003220 <HAL_RCC_OscConfig+0x57c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d108      	bne.n	800317c <HAL_RCC_OscConfig+0x4d8>
 800316a:	4b2c      	ldr	r3, [pc, #176]	; (800321c <HAL_RCC_OscConfig+0x578>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003170:	4a2a      	ldr	r2, [pc, #168]	; (800321c <HAL_RCC_OscConfig+0x578>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800317a:	e024      	b.n	80031c6 <HAL_RCC_OscConfig+0x522>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b05      	cmp	r3, #5
 8003182:	d110      	bne.n	80031a6 <HAL_RCC_OscConfig+0x502>
 8003184:	4b25      	ldr	r3, [pc, #148]	; (800321c <HAL_RCC_OscConfig+0x578>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	4a24      	ldr	r2, [pc, #144]	; (800321c <HAL_RCC_OscConfig+0x578>)
 800318c:	f043 0304 	orr.w	r3, r3, #4
 8003190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003194:	4b21      	ldr	r3, [pc, #132]	; (800321c <HAL_RCC_OscConfig+0x578>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	4a20      	ldr	r2, [pc, #128]	; (800321c <HAL_RCC_OscConfig+0x578>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031a4:	e00f      	b.n	80031c6 <HAL_RCC_OscConfig+0x522>
 80031a6:	4b1d      	ldr	r3, [pc, #116]	; (800321c <HAL_RCC_OscConfig+0x578>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ac:	4a1b      	ldr	r2, [pc, #108]	; (800321c <HAL_RCC_OscConfig+0x578>)
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031b6:	4b19      	ldr	r3, [pc, #100]	; (800321c <HAL_RCC_OscConfig+0x578>)
 80031b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031bc:	4a17      	ldr	r2, [pc, #92]	; (800321c <HAL_RCC_OscConfig+0x578>)
 80031be:	f023 0304 	bic.w	r3, r3, #4
 80031c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d016      	beq.n	80031fc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7fe facd 	bl	800176c <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d4:	e00a      	b.n	80031ec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d6:	f7fe fac9 	bl	800176c <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e17b      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_RCC_OscConfig+0x578>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0ed      	beq.n	80031d6 <HAL_RCC_OscConfig+0x532>
 80031fa:	e01a      	b.n	8003232 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fc:	f7fe fab6 	bl	800176c <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003202:	e00f      	b.n	8003224 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003204:	f7fe fab2 	bl	800176c <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d906      	bls.n	8003224 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e164      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000
 8003220:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003224:	4ba8      	ldr	r3, [pc, #672]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1e8      	bne.n	8003204 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003232:	7ffb      	ldrb	r3, [r7, #31]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003238:	4ba3      	ldr	r3, [pc, #652]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 800323a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323c:	4aa2      	ldr	r2, [pc, #648]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 800323e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003242:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d03c      	beq.n	80032ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01c      	beq.n	8003292 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003258:	4b9b      	ldr	r3, [pc, #620]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 800325a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800325e:	4a9a      	ldr	r2, [pc, #616]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fe fa80 	bl	800176c <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003270:	f7fe fa7c 	bl	800176c <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e130      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003282:	4b91      	ldr	r3, [pc, #580]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 8003284:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ef      	beq.n	8003270 <HAL_RCC_OscConfig+0x5cc>
 8003290:	e01b      	b.n	80032ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003292:	4b8d      	ldr	r3, [pc, #564]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 8003294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003298:	4a8b      	ldr	r2, [pc, #556]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7fe fa63 	bl	800176c <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032aa:	f7fe fa5f 	bl	800176c <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e113      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032bc:	4b82      	ldr	r3, [pc, #520]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 80032be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1ef      	bne.n	80032aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8107 	beq.w	80034e2 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	2b02      	cmp	r3, #2
 80032da:	f040 80cb 	bne.w	8003474 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032de:	4b7a      	ldr	r3, [pc, #488]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f003 0203 	and.w	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d12c      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	3b01      	subs	r3, #1
 80032fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d123      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d11b      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d113      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	3b01      	subs	r3, #1
 8003332:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d109      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	3b01      	subs	r3, #1
 8003346:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d06d      	beq.n	8003428 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2b0c      	cmp	r3, #12
 8003350:	d068      	beq.n	8003424 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003352:	4b5d      	ldr	r3, [pc, #372]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800335e:	4b5a      	ldr	r3, [pc, #360]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0ba      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800336e:	4b56      	ldr	r3, [pc, #344]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a55      	ldr	r2, [pc, #340]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 8003374:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003378:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800337a:	f7fe f9f7 	bl	800176c <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003382:	f7fe f9f3 	bl	800176c <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e0a7      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003394:	4b4c      	ldr	r3, [pc, #304]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033a0:	4b49      	ldr	r3, [pc, #292]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	4b49      	ldr	r3, [pc, #292]	; (80034cc <HAL_RCC_OscConfig+0x828>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033b0:	3a01      	subs	r2, #1
 80033b2:	0112      	lsls	r2, r2, #4
 80033b4:	4311      	orrs	r1, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033ba:	0212      	lsls	r2, r2, #8
 80033bc:	4311      	orrs	r1, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033c2:	0852      	lsrs	r2, r2, #1
 80033c4:	3a01      	subs	r2, #1
 80033c6:	0552      	lsls	r2, r2, #21
 80033c8:	4311      	orrs	r1, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033ce:	0852      	lsrs	r2, r2, #1
 80033d0:	3a01      	subs	r2, #1
 80033d2:	0652      	lsls	r2, r2, #25
 80033d4:	4311      	orrs	r1, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033da:	06d2      	lsls	r2, r2, #27
 80033dc:	430a      	orrs	r2, r1
 80033de:	493a      	ldr	r1, [pc, #232]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033e4:	4b38      	ldr	r3, [pc, #224]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a37      	ldr	r2, [pc, #220]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 80033ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033f0:	4b35      	ldr	r3, [pc, #212]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4a34      	ldr	r2, [pc, #208]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 80033f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033fc:	f7fe f9b6 	bl	800176c <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003404:	f7fe f9b2 	bl	800176c <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e066      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003416:	4b2c      	ldr	r3, [pc, #176]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003422:	e05e      	b.n	80034e2 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e05d      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003428:	4b27      	ldr	r3, [pc, #156]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d156      	bne.n	80034e2 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003434:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a23      	ldr	r2, [pc, #140]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 800343a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003440:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4a20      	ldr	r2, [pc, #128]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 8003446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800344a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800344c:	f7fe f98e 	bl	800176c <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003454:	f7fe f98a 	bl	800176c <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e03e      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003466:	4b18      	ldr	r3, [pc, #96]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0x7b0>
 8003472:	e036      	b.n	80034e2 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d031      	beq.n	80034de <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347a:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a12      	ldr	r2, [pc, #72]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 8003480:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003484:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d105      	bne.n	800349e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003492:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	4a0c      	ldr	r2, [pc, #48]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 8003498:	f023 0303 	bic.w	r3, r3, #3
 800349c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800349e:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	4a09      	ldr	r2, [pc, #36]	; (80034c8 <HAL_RCC_OscConfig+0x824>)
 80034a4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80034a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fe f95d 	bl	800176c <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b4:	e00c      	b.n	80034d0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fe f959 	bl	800176c <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d905      	bls.n	80034d0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e00d      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
 80034c8:	40021000 	.word	0x40021000
 80034cc:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <HAL_RCC_OscConfig+0x848>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ec      	bne.n	80034b6 <HAL_RCC_OscConfig+0x812>
 80034dc:	e001      	b.n	80034e2 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3720      	adds	r7, #32
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40021000 	.word	0x40021000

080034f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e10f      	b.n	8003728 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003508:	4b89      	ldr	r3, [pc, #548]	; (8003730 <HAL_RCC_ClockConfig+0x240>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d910      	bls.n	8003538 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b86      	ldr	r3, [pc, #536]	; (8003730 <HAL_RCC_ClockConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 020f 	bic.w	r2, r3, #15
 800351e:	4984      	ldr	r1, [pc, #528]	; (8003730 <HAL_RCC_ClockConfig+0x240>)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b82      	ldr	r3, [pc, #520]	; (8003730 <HAL_RCC_ClockConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0f7      	b.n	8003728 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8089 	beq.w	8003658 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b03      	cmp	r3, #3
 800354c:	d133      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800354e:	4b79      	ldr	r3, [pc, #484]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e0e4      	b.n	8003728 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800355e:	f000 f9e3 	bl	8003928 <RCC_GetSysClockFreqFromPLLSource>
 8003562:	4602      	mov	r2, r0
 8003564:	4b74      	ldr	r3, [pc, #464]	; (8003738 <HAL_RCC_ClockConfig+0x248>)
 8003566:	429a      	cmp	r2, r3
 8003568:	d955      	bls.n	8003616 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800356a:	4b72      	ldr	r3, [pc, #456]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003576:	4b6f      	ldr	r3, [pc, #444]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800357e:	4a6d      	ldr	r2, [pc, #436]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003584:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003586:	2380      	movs	r3, #128	; 0x80
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	e044      	b.n	8003616 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d03e      	beq.n	8003616 <HAL_RCC_ClockConfig+0x126>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d13a      	bne.n	8003616 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035a0:	4b64      	ldr	r3, [pc, #400]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035a8:	4a62      	ldr	r2, [pc, #392]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 80035aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	e02f      	b.n	8003616 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035be:	4b5d      	ldr	r3, [pc, #372]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d115      	bne.n	80035f6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e0ac      	b.n	8003728 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035d6:	4b57      	ldr	r3, [pc, #348]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e0a0      	b.n	8003728 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035e6:	4b53      	ldr	r3, [pc, #332]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e098      	b.n	8003728 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80035f6:	f000 f8a7 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 80035fa:	4602      	mov	r2, r0
 80035fc:	4b4e      	ldr	r3, [pc, #312]	; (8003738 <HAL_RCC_ClockConfig+0x248>)
 80035fe:	429a      	cmp	r2, r3
 8003600:	d909      	bls.n	8003616 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003602:	4b4c      	ldr	r3, [pc, #304]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800360a:	4a4a      	ldr	r2, [pc, #296]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 800360c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003610:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003616:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f023 0203 	bic.w	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4944      	ldr	r1, [pc, #272]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003624:	4313      	orrs	r3, r2
 8003626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003628:	f7fe f8a0 	bl	800176c <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362e:	e00a      	b.n	8003646 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003630:	f7fe f89c 	bl	800176c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	; 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e070      	b.n	8003728 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003646:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 020c 	and.w	r2, r3, #12
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	429a      	cmp	r2, r3
 8003656:	d1eb      	bne.n	8003630 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003664:	4b33      	ldr	r3, [pc, #204]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	4930      	ldr	r1, [pc, #192]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
 8003676:	e008      	b.n	800368a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	2b80      	cmp	r3, #128	; 0x80
 800367c:	d105      	bne.n	800368a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800367e:	4b2d      	ldr	r3, [pc, #180]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	4a2c      	ldr	r2, [pc, #176]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003684:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003688:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800368a:	4b29      	ldr	r3, [pc, #164]	; (8003730 <HAL_RCC_ClockConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d210      	bcs.n	80036ba <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003698:	4b25      	ldr	r3, [pc, #148]	; (8003730 <HAL_RCC_ClockConfig+0x240>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f023 020f 	bic.w	r2, r3, #15
 80036a0:	4923      	ldr	r1, [pc, #140]	; (8003730 <HAL_RCC_ClockConfig+0x240>)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a8:	4b21      	ldr	r3, [pc, #132]	; (8003730 <HAL_RCC_ClockConfig+0x240>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e036      	b.n	8003728 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c6:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	4918      	ldr	r1, [pc, #96]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d009      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036e4:	4b13      	ldr	r3, [pc, #76]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4910      	ldr	r1, [pc, #64]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036f8:	f000 f826 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 80036fc:	4601      	mov	r1, r0
 80036fe:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	4a0c      	ldr	r2, [pc, #48]	; (800373c <HAL_RCC_ClockConfig+0x24c>)
 800370a:	5cd3      	ldrb	r3, [r2, r3]
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	fa21 f303 	lsr.w	r3, r1, r3
 8003714:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <HAL_RCC_ClockConfig+0x250>)
 8003716:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003718:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <HAL_RCC_ClockConfig+0x254>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fd ffd5 	bl	80016cc <HAL_InitTick>
 8003722:	4603      	mov	r3, r0
 8003724:	73fb      	strb	r3, [r7, #15]

  return status;
 8003726:	7bfb      	ldrb	r3, [r7, #15]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40022000 	.word	0x40022000
 8003734:	40021000 	.word	0x40021000
 8003738:	04c4b400 	.word	0x04c4b400
 800373c:	08004438 	.word	0x08004438
 8003740:	20000004 	.word	0x20000004
 8003744:	20000008 	.word	0x20000008

08003748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003748:	b480      	push	{r7}
 800374a:	b089      	sub	sp, #36	; 0x24
 800374c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003756:	4b3d      	ldr	r3, [pc, #244]	; (800384c <HAL_RCC_GetSysClockFreq+0x104>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003760:	4b3a      	ldr	r3, [pc, #232]	; (800384c <HAL_RCC_GetSysClockFreq+0x104>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_GetSysClockFreq+0x34>
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b0c      	cmp	r3, #12
 8003774:	d121      	bne.n	80037ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d11e      	bne.n	80037ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800377c:	4b33      	ldr	r3, [pc, #204]	; (800384c <HAL_RCC_GetSysClockFreq+0x104>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d107      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003788:	4b30      	ldr	r3, [pc, #192]	; (800384c <HAL_RCC_GetSysClockFreq+0x104>)
 800378a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	e005      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003798:	4b2c      	ldr	r3, [pc, #176]	; (800384c <HAL_RCC_GetSysClockFreq+0x104>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037a4:	4a2a      	ldr	r2, [pc, #168]	; (8003850 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037b8:	e00a      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d102      	bne.n	80037c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037c0:	4b24      	ldr	r3, [pc, #144]	; (8003854 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	e004      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037cc:	4b22      	ldr	r3, [pc, #136]	; (8003858 <HAL_RCC_GetSysClockFreq+0x110>)
 80037ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d133      	bne.n	800383e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037d6:	4b1d      	ldr	r3, [pc, #116]	; (800384c <HAL_RCC_GetSysClockFreq+0x104>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d002      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0xa4>
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d003      	beq.n	80037f2 <HAL_RCC_GetSysClockFreq+0xaa>
 80037ea:	e005      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037ee:	617b      	str	r3, [r7, #20]
      break;
 80037f0:	e005      	b.n	80037fe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037f2:	4b19      	ldr	r3, [pc, #100]	; (8003858 <HAL_RCC_GetSysClockFreq+0x110>)
 80037f4:	617b      	str	r3, [r7, #20]
      break;
 80037f6:	e002      	b.n	80037fe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	617b      	str	r3, [r7, #20]
      break;
 80037fc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037fe:	4b13      	ldr	r3, [pc, #76]	; (800384c <HAL_RCC_GetSysClockFreq+0x104>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	3301      	adds	r3, #1
 800380a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800380c:	4b0f      	ldr	r3, [pc, #60]	; (800384c <HAL_RCC_GetSysClockFreq+0x104>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	fb02 f203 	mul.w	r2, r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003822:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003824:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RCC_GetSysClockFreq+0x104>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	0e5b      	lsrs	r3, r3, #25
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	3301      	adds	r3, #1
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	fbb2 f3f3 	udiv	r3, r2, r3
 800383c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800383e:	69bb      	ldr	r3, [r7, #24]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3724      	adds	r7, #36	; 0x24
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	40021000 	.word	0x40021000
 8003850:	08004448 	.word	0x08004448
 8003854:	00f42400 	.word	0x00f42400
 8003858:	007a1200 	.word	0x007a1200

0800385c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <HAL_RCC_GetHCLKFreq+0x14>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000004 	.word	0x20000004

08003874 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003880:	4b27      	ldr	r3, [pc, #156]	; (8003920 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800388c:	f7ff f946 	bl	8002b1c <HAL_PWREx_GetVoltageRange>
 8003890:	6178      	str	r0, [r7, #20]
 8003892:	e014      	b.n	80038be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003894:	4b22      	ldr	r3, [pc, #136]	; (8003920 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003898:	4a21      	ldr	r2, [pc, #132]	; (8003920 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800389a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389e:	6593      	str	r3, [r2, #88]	; 0x58
 80038a0:	4b1f      	ldr	r3, [pc, #124]	; (8003920 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80038a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038ac:	f7ff f936 	bl	8002b1c <HAL_PWREx_GetVoltageRange>
 80038b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038b2:	4b1b      	ldr	r3, [pc, #108]	; (8003920 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	4a1a      	ldr	r2, [pc, #104]	; (8003920 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80038b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c4:	d10b      	bne.n	80038de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b80      	cmp	r3, #128	; 0x80
 80038ca:	d913      	bls.n	80038f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2ba0      	cmp	r3, #160	; 0xa0
 80038d0:	d902      	bls.n	80038d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038d2:	2302      	movs	r3, #2
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	e00d      	b.n	80038f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038d8:	2301      	movs	r3, #1
 80038da:	613b      	str	r3, [r7, #16]
 80038dc:	e00a      	b.n	80038f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b7f      	cmp	r3, #127	; 0x7f
 80038e2:	d902      	bls.n	80038ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80038e4:	2302      	movs	r3, #2
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	e004      	b.n	80038f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b70      	cmp	r3, #112	; 0x70
 80038ee:	d101      	bne.n	80038f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038f0:	2301      	movs	r3, #1
 80038f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f023 020f 	bic.w	r2, r3, #15
 80038fc:	4909      	ldr	r1, [pc, #36]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003904:	4b07      	ldr	r3, [pc, #28]	; (8003924 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	429a      	cmp	r2, r3
 8003910:	d001      	beq.n	8003916 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021000 	.word	0x40021000
 8003924:	40022000 	.word	0x40022000

08003928 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003932:	4b2d      	ldr	r3, [pc, #180]	; (80039e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	2b01      	cmp	r3, #1
 800393c:	d118      	bne.n	8003970 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800393e:	4b2a      	ldr	r3, [pc, #168]	; (80039e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d107      	bne.n	800395a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800394a:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800394c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003950:	0a1b      	lsrs	r3, r3, #8
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	e005      	b.n	8003966 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800395a:	4b23      	ldr	r3, [pc, #140]	; (80039e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	091b      	lsrs	r3, r3, #4
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003966:	4a21      	ldr	r2, [pc, #132]	; (80039ec <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003970:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d002      	beq.n	8003986 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003980:	2b03      	cmp	r3, #3
 8003982:	d003      	beq.n	800398c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003984:	e005      	b.n	8003992 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003986:	4b1a      	ldr	r3, [pc, #104]	; (80039f0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003988:	613b      	str	r3, [r7, #16]
    break;
 800398a:	e005      	b.n	8003998 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800398c:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800398e:	613b      	str	r3, [r7, #16]
    break;
 8003990:	e002      	b.n	8003998 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	613b      	str	r3, [r7, #16]
    break;
 8003996:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003998:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	3301      	adds	r3, #1
 80039a4:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039a6:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	fb02 f203 	mul.w	r2, r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039be:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	0e5b      	lsrs	r3, r3, #25
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	3301      	adds	r3, #1
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d6:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80039d8:	683b      	ldr	r3, [r7, #0]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	08004448 	.word	0x08004448
 80039f0:	00f42400 	.word	0x00f42400
 80039f4:	007a1200 	.word	0x007a1200

080039f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e049      	b.n	8003a9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fd fd78 	bl	8001514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3304      	adds	r3, #4
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f000 faa6 	bl	8003f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d001      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e04f      	b.n	8003b60 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a23      	ldr	r2, [pc, #140]	; (8003b6c <HAL_TIM_Base_Start_IT+0xc4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01d      	beq.n	8003b1e <HAL_TIM_Base_Start_IT+0x76>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aea:	d018      	beq.n	8003b1e <HAL_TIM_Base_Start_IT+0x76>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <HAL_TIM_Base_Start_IT+0xc8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <HAL_TIM_Base_Start_IT+0x76>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1e      	ldr	r2, [pc, #120]	; (8003b74 <HAL_TIM_Base_Start_IT+0xcc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00e      	beq.n	8003b1e <HAL_TIM_Base_Start_IT+0x76>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1c      	ldr	r2, [pc, #112]	; (8003b78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_TIM_Base_Start_IT+0x76>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1b      	ldr	r2, [pc, #108]	; (8003b7c <HAL_TIM_Base_Start_IT+0xd4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d004      	beq.n	8003b1e <HAL_TIM_Base_Start_IT+0x76>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a19      	ldr	r2, [pc, #100]	; (8003b80 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d115      	bne.n	8003b4a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	4b17      	ldr	r3, [pc, #92]	; (8003b84 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b06      	cmp	r3, #6
 8003b2e:	d015      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0xb4>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b36:	d011      	beq.n	8003b5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b48:	e008      	b.n	8003b5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	e000      	b.n	8003b5e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	40012c00 	.word	0x40012c00
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800
 8003b78:	40000c00 	.word	0x40000c00
 8003b7c:	40013400 	.word	0x40013400
 8003b80:	40014000 	.word	0x40014000
 8003b84:	00010007 	.word	0x00010007

08003b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d122      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d11b      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0202 	mvn.w	r2, #2
 8003bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f9be 	bl	8003f4c <HAL_TIM_IC_CaptureCallback>
 8003bd0:	e005      	b.n	8003bde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f9b0 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f9c1 	bl	8003f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d122      	bne.n	8003c38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d11b      	bne.n	8003c38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0204 	mvn.w	r2, #4
 8003c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f994 	bl	8003f4c <HAL_TIM_IC_CaptureCallback>
 8003c24:	e005      	b.n	8003c32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f986 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f997 	bl	8003f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d122      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d11b      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0208 	mvn.w	r2, #8
 8003c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2204      	movs	r2, #4
 8003c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f96a 	bl	8003f4c <HAL_TIM_IC_CaptureCallback>
 8003c78:	e005      	b.n	8003c86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f95c 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f96d 	bl	8003f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	2b10      	cmp	r3, #16
 8003c98:	d122      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b10      	cmp	r3, #16
 8003ca6:	d11b      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0210 	mvn.w	r2, #16
 8003cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f940 	bl	8003f4c <HAL_TIM_IC_CaptureCallback>
 8003ccc:	e005      	b.n	8003cda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f932 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f943 	bl	8003f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d10e      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d107      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0201 	mvn.w	r2, #1
 8003d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fc fec4 	bl	8000a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d16:	2b80      	cmp	r3, #128	; 0x80
 8003d18:	d10e      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d24:	2b80      	cmp	r3, #128	; 0x80
 8003d26:	d107      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 faee 	bl	8004314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d46:	d10e      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b80      	cmp	r3, #128	; 0x80
 8003d54:	d107      	bne.n	8003d66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fae1 	bl	8004328 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d10e      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d107      	bne.n	8003d92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f8f1 	bl	8003f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d10e      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f003 0320 	and.w	r3, r3, #32
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d107      	bne.n	8003dbe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f06f 0220 	mvn.w	r2, #32
 8003db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 faa1 	bl	8004300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_TIM_ConfigClockSource+0x18>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e0a8      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x16a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e00:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e08:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b40      	cmp	r3, #64	; 0x40
 8003e18:	d067      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0x124>
 8003e1a:	2b40      	cmp	r3, #64	; 0x40
 8003e1c:	d80b      	bhi.n	8003e36 <HAL_TIM_ConfigClockSource+0x70>
 8003e1e:	2b10      	cmp	r3, #16
 8003e20:	d073      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x144>
 8003e22:	2b10      	cmp	r3, #16
 8003e24:	d802      	bhi.n	8003e2c <HAL_TIM_ConfigClockSource+0x66>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d06f      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e2a:	e078      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d06c      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x144>
 8003e30:	2b30      	cmp	r3, #48	; 0x30
 8003e32:	d06a      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003e34:	e073      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003e36:	2b70      	cmp	r3, #112	; 0x70
 8003e38:	d00d      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x90>
 8003e3a:	2b70      	cmp	r3, #112	; 0x70
 8003e3c:	d804      	bhi.n	8003e48 <HAL_TIM_ConfigClockSource+0x82>
 8003e3e:	2b50      	cmp	r3, #80	; 0x50
 8003e40:	d033      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0xe4>
 8003e42:	2b60      	cmp	r3, #96	; 0x60
 8003e44:	d041      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003e46:	e06a      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4c:	d066      	beq.n	8003f1c <HAL_TIM_ConfigClockSource+0x156>
 8003e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e52:	d017      	beq.n	8003e84 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003e54:	e063      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6899      	ldr	r1, [r3, #8]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f000 f9a3 	bl	80041b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e78:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	609a      	str	r2, [r3, #8]
      break;
 8003e82:	e04c      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6818      	ldr	r0, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	6899      	ldr	r1, [r3, #8]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f000 f98c 	bl	80041b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ea6:	609a      	str	r2, [r3, #8]
      break;
 8003ea8:	e039      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6859      	ldr	r1, [r3, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f000 f900 	bl	80040bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2150      	movs	r1, #80	; 0x50
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 f959 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003ec8:	e029      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6859      	ldr	r1, [r3, #4]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f000 f91f 	bl	800411a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2160      	movs	r1, #96	; 0x60
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f949 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003ee8:	e019      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6859      	ldr	r1, [r3, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f000 f8e0 	bl	80040bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2140      	movs	r1, #64	; 0x40
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 f939 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003f08:	e009      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f000 f930 	bl	800417a <TIM_ITRx_SetConfig>
        break;
 8003f1a:	e000      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003f1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a40      	ldr	r2, [pc, #256]	; (800409c <TIM_Base_SetConfig+0x114>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d013      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa6:	d00f      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a3d      	ldr	r2, [pc, #244]	; (80040a0 <TIM_Base_SetConfig+0x118>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00b      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a3c      	ldr	r2, [pc, #240]	; (80040a4 <TIM_Base_SetConfig+0x11c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d007      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a3b      	ldr	r2, [pc, #236]	; (80040a8 <TIM_Base_SetConfig+0x120>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a3a      	ldr	r2, [pc, #232]	; (80040ac <TIM_Base_SetConfig+0x124>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d108      	bne.n	8003fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a2f      	ldr	r2, [pc, #188]	; (800409c <TIM_Base_SetConfig+0x114>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d01f      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe8:	d01b      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a2c      	ldr	r2, [pc, #176]	; (80040a0 <TIM_Base_SetConfig+0x118>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d017      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a2b      	ldr	r2, [pc, #172]	; (80040a4 <TIM_Base_SetConfig+0x11c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a2a      	ldr	r2, [pc, #168]	; (80040a8 <TIM_Base_SetConfig+0x120>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00f      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a29      	ldr	r2, [pc, #164]	; (80040ac <TIM_Base_SetConfig+0x124>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00b      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a28      	ldr	r2, [pc, #160]	; (80040b0 <TIM_Base_SetConfig+0x128>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d007      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a27      	ldr	r2, [pc, #156]	; (80040b4 <TIM_Base_SetConfig+0x12c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d003      	beq.n	8004022 <TIM_Base_SetConfig+0x9a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a26      	ldr	r2, [pc, #152]	; (80040b8 <TIM_Base_SetConfig+0x130>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d108      	bne.n	8004034 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a10      	ldr	r2, [pc, #64]	; (800409c <TIM_Base_SetConfig+0x114>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00f      	beq.n	8004080 <TIM_Base_SetConfig+0xf8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a12      	ldr	r2, [pc, #72]	; (80040ac <TIM_Base_SetConfig+0x124>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00b      	beq.n	8004080 <TIM_Base_SetConfig+0xf8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a11      	ldr	r2, [pc, #68]	; (80040b0 <TIM_Base_SetConfig+0x128>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d007      	beq.n	8004080 <TIM_Base_SetConfig+0xf8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a10      	ldr	r2, [pc, #64]	; (80040b4 <TIM_Base_SetConfig+0x12c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <TIM_Base_SetConfig+0xf8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a0f      	ldr	r2, [pc, #60]	; (80040b8 <TIM_Base_SetConfig+0x130>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d103      	bne.n	8004088 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	615a      	str	r2, [r3, #20]
}
 800408e:	bf00      	nop
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40000400 	.word	0x40000400
 80040a4:	40000800 	.word	0x40000800
 80040a8:	40000c00 	.word	0x40000c00
 80040ac:	40013400 	.word	0x40013400
 80040b0:	40014000 	.word	0x40014000
 80040b4:	40014400 	.word	0x40014400
 80040b8:	40014800 	.word	0x40014800

080040bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f023 0201 	bic.w	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f023 030a 	bic.w	r3, r3, #10
 80040f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	621a      	str	r2, [r3, #32]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800411a:	b480      	push	{r7}
 800411c:	b087      	sub	sp, #28
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f023 0210 	bic.w	r2, r3, #16
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004144:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	031b      	lsls	r3, r3, #12
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004156:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	f043 0307 	orr.w	r3, r3, #7
 800419c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	609a      	str	r2, [r3, #8]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	021a      	lsls	r2, r3, #8
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	609a      	str	r2, [r3, #8]
}
 80041e4:	bf00      	nop
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004204:	2302      	movs	r3, #2
 8004206:	e068      	b.n	80042da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a2e      	ldr	r2, [pc, #184]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a2d      	ldr	r2, [pc, #180]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d108      	bne.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004242:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004254:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1e      	ldr	r2, [pc, #120]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d01d      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427a:	d018      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a1b      	ldr	r2, [pc, #108]	; (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d013      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1a      	ldr	r2, [pc, #104]	; (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00e      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a18      	ldr	r2, [pc, #96]	; (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d009      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a13      	ldr	r2, [pc, #76]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a14      	ldr	r2, [pc, #80]	; (80042fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d10c      	bne.n	80042c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40013400 	.word	0x40013400
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40000800 	.word	0x40000800
 80042f8:	40000c00 	.word	0x40000c00
 80042fc:	40014000 	.word	0x40014000

08004300 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <arm_sin_f32>:
 800433c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80043bc <arm_sin_f32+0x80>
 8004340:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004344:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004350:	d504      	bpl.n	800435c <arm_sin_f32+0x20>
 8004352:	ee17 3a90 	vmov	r3, s15
 8004356:	3b01      	subs	r3, #1
 8004358:	ee07 3a90 	vmov	s15, r3
 800435c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004360:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80043c0 <arm_sin_f32+0x84>
 8004364:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004368:	ee20 0a07 	vmul.f32	s0, s0, s14
 800436c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8004370:	ee17 3a90 	vmov	r3, s15
 8004374:	b29b      	uxth	r3, r3
 8004376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437a:	d21a      	bcs.n	80043b2 <arm_sin_f32+0x76>
 800437c:	ee07 3a90 	vmov	s15, r3
 8004380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004384:	1c59      	adds	r1, r3, #1
 8004386:	ee30 0a67 	vsub.f32	s0, s0, s15
 800438a:	4a0e      	ldr	r2, [pc, #56]	; (80043c4 <arm_sin_f32+0x88>)
 800438c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004390:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004394:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004398:	ed93 7a00 	vldr	s14, [r3]
 800439c:	edd2 6a00 	vldr	s13, [r2]
 80043a0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80043a4:	ee20 0a26 	vmul.f32	s0, s0, s13
 80043a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043ac:	ee37 0a80 	vadd.f32	s0, s15, s0
 80043b0:	4770      	bx	lr
 80043b2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80043b6:	2101      	movs	r1, #1
 80043b8:	2300      	movs	r3, #0
 80043ba:	e7e6      	b.n	800438a <arm_sin_f32+0x4e>
 80043bc:	3e22f983 	.word	0x3e22f983
 80043c0:	44000000 	.word	0x44000000
 80043c4:	08004478 	.word	0x08004478

080043c8 <__libc_init_array>:
 80043c8:	b570      	push	{r4, r5, r6, lr}
 80043ca:	4e0d      	ldr	r6, [pc, #52]	; (8004400 <__libc_init_array+0x38>)
 80043cc:	4c0d      	ldr	r4, [pc, #52]	; (8004404 <__libc_init_array+0x3c>)
 80043ce:	1ba4      	subs	r4, r4, r6
 80043d0:	10a4      	asrs	r4, r4, #2
 80043d2:	2500      	movs	r5, #0
 80043d4:	42a5      	cmp	r5, r4
 80043d6:	d109      	bne.n	80043ec <__libc_init_array+0x24>
 80043d8:	4e0b      	ldr	r6, [pc, #44]	; (8004408 <__libc_init_array+0x40>)
 80043da:	4c0c      	ldr	r4, [pc, #48]	; (800440c <__libc_init_array+0x44>)
 80043dc:	f000 f820 	bl	8004420 <_init>
 80043e0:	1ba4      	subs	r4, r4, r6
 80043e2:	10a4      	asrs	r4, r4, #2
 80043e4:	2500      	movs	r5, #0
 80043e6:	42a5      	cmp	r5, r4
 80043e8:	d105      	bne.n	80043f6 <__libc_init_array+0x2e>
 80043ea:	bd70      	pop	{r4, r5, r6, pc}
 80043ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043f0:	4798      	blx	r3
 80043f2:	3501      	adds	r5, #1
 80043f4:	e7ee      	b.n	80043d4 <__libc_init_array+0xc>
 80043f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043fa:	4798      	blx	r3
 80043fc:	3501      	adds	r5, #1
 80043fe:	e7f2      	b.n	80043e6 <__libc_init_array+0x1e>
 8004400:	08004c7c 	.word	0x08004c7c
 8004404:	08004c7c 	.word	0x08004c7c
 8004408:	08004c7c 	.word	0x08004c7c
 800440c:	08004c80 	.word	0x08004c80

08004410 <memset>:
 8004410:	4402      	add	r2, r0
 8004412:	4603      	mov	r3, r0
 8004414:	4293      	cmp	r3, r2
 8004416:	d100      	bne.n	800441a <memset+0xa>
 8004418:	4770      	bx	lr
 800441a:	f803 1b01 	strb.w	r1, [r3], #1
 800441e:	e7f9      	b.n	8004414 <memset+0x4>

08004420 <_init>:
 8004420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004422:	bf00      	nop
 8004424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004426:	bc08      	pop	{r3}
 8004428:	469e      	mov	lr, r3
 800442a:	4770      	bx	lr

0800442c <_fini>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr
