
444Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089b8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08008b78  08008b78  00018b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dcc  08008dcc  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  08008dcc  08008dcc  00018dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dd4  08008dd4  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dd4  08008dd4  00018dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dd8  08008dd8  00018dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08008ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000121c  200000f4  08008ed0  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001310  08008ed0  00021310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002175b  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000422e  00000000  00000000  0004187f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b10  00000000  00000000  00045ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018e8  00000000  00000000  000475c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d357  00000000  00000000  00048ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001727c  00000000  00000000  000761ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011c235  00000000  00000000  0008d47b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a96b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007258  00000000  00000000  001a972c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008b60 	.word	0x08008b60

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000f8 	.word	0x200000f8
 80001fc:	08008b60 	.word	0x08008b60

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2120      	movs	r1, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 f85b 	bl	800166c <SENSOR_IO_Read>
 80005b6:	4603      	mov	r3, r0
 80005b8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	f023 0304 	bic.w	r3, r3, #4
 80005c0:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	f023 0303 	bic.w	r3, r3, #3
 80005d0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005e0:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	7bfa      	ldrb	r2, [r7, #15]
 80005e8:	2120      	movs	r1, #32
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 f824 	bl	8001638 <SENSOR_IO_Write>
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000602:	2300      	movs	r3, #0
 8000604:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8000606:	f001 f80d 	bl	8001624 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	210f      	movs	r1, #15
 8000610:	4618      	mov	r0, r3
 8000612:	f001 f82b 	bl	800166c <SENSOR_IO_Read>
 8000616:	4603      	mov	r3, r0
 8000618:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800061a:	7bfb      	ldrb	r3, [r7, #15]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	b2d8      	uxtb	r0, r3
 8000632:	f107 020c 	add.w	r2, r7, #12
 8000636:	2302      	movs	r3, #2
 8000638:	21b0      	movs	r1, #176	; 0xb0
 800063a:	f001 f835 	bl	80016a8 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800063e:	7b3b      	ldrb	r3, [r7, #12]
 8000640:	085b      	lsrs	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8000646:	7b7b      	ldrb	r3, [r7, #13]
 8000648:	085b      	lsrs	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	b2d8      	uxtb	r0, r3
 8000652:	f107 020c 	add.w	r2, r7, #12
 8000656:	2302      	movs	r3, #2
 8000658:	21b6      	movs	r1, #182	; 0xb6
 800065a:	f001 f825 	bl	80016a8 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800065e:	7b7b      	ldrb	r3, [r7, #13]
 8000660:	021b      	lsls	r3, r3, #8
 8000662:	b21a      	sxth	r2, r3
 8000664:	7b3b      	ldrb	r3, [r7, #12]
 8000666:	b21b      	sxth	r3, r3
 8000668:	4313      	orrs	r3, r2
 800066a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	b2d8      	uxtb	r0, r3
 8000670:	f107 020c 	add.w	r2, r7, #12
 8000674:	2302      	movs	r3, #2
 8000676:	21ba      	movs	r1, #186	; 0xba
 8000678:	f001 f816 	bl	80016a8 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800067c:	7b7b      	ldrb	r3, [r7, #13]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21a      	sxth	r2, r3
 8000682:	7b3b      	ldrb	r3, [r7, #12]
 8000684:	b21b      	sxth	r3, r3
 8000686:	4313      	orrs	r3, r2
 8000688:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	b2d8      	uxtb	r0, r3
 800068e:	f107 020c 	add.w	r2, r7, #12
 8000692:	2302      	movs	r3, #2
 8000694:	21a8      	movs	r1, #168	; 0xa8
 8000696:	f001 f807 	bl	80016a8 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800069a:	7b7b      	ldrb	r3, [r7, #13]
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	b21a      	sxth	r2, r3
 80006a0:	7b3b      	ldrb	r3, [r7, #12]
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80006a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80006ac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	ee07 3a90 	vmov	s15, r3
 80006b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ba:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80006be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	ee07 3a90 	vmov	s15, r3
 80006c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006cc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80006d0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80006d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	ee07 3a90 	vmov	s15, r3
 80006de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80006e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006ea:	ee07 3a90 	vmov	s15, r3
 80006ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006f6:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80006fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80006fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000706:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800070a:	edd7 7a04 	vldr	s15, [r7, #16]
 800070e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000754 <HTS221_H_ReadHumidity+0x130>
 8000712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	dd01      	ble.n	8000720 <HTS221_H_ReadHumidity+0xfc>
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <HTS221_H_ReadHumidity+0x134>)
 800071e:	e00a      	b.n	8000736 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8000720:	edd7 7a04 	vldr	s15, [r7, #16]
 8000724:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072c:	d502      	bpl.n	8000734 <HTS221_H_ReadHumidity+0x110>
 800072e:	f04f 0300 	mov.w	r3, #0
 8000732:	e000      	b.n	8000736 <HTS221_H_ReadHumidity+0x112>
 8000734:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8000736:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8000738:	edd7 7a04 	vldr	s15, [r7, #16]
 800073c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000740:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000744:	eef0 7a66 	vmov.f32	s15, s13
}
 8000748:	eeb0 0a67 	vmov.f32	s0, s15
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	447a0000 	.word	0x447a0000
 8000758:	447a0000 	.word	0x447a0000

0800075c <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	463b      	mov	r3, r7
 8000764:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8000768:	783b      	ldrb	r3, [r7, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2120      	movs	r1, #32
 800076e:	203c      	movs	r0, #60	; 0x3c
 8000770:	f000 ff62 	bl	8001638 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8000774:	787b      	ldrb	r3, [r7, #1]
 8000776:	461a      	mov	r2, r3
 8000778:	2121      	movs	r1, #33	; 0x21
 800077a:	203c      	movs	r0, #60	; 0x3c
 800077c:	f000 ff5c 	bl	8001638 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8000780:	78bb      	ldrb	r3, [r7, #2]
 8000782:	461a      	mov	r2, r3
 8000784:	2122      	movs	r1, #34	; 0x22
 8000786:	203c      	movs	r0, #60	; 0x3c
 8000788:	f000 ff56 	bl	8001638 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	461a      	mov	r2, r3
 8000790:	2123      	movs	r1, #35	; 0x23
 8000792:	203c      	movs	r0, #60	; 0x3c
 8000794:	f000 ff50 	bl	8001638 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8000798:	793b      	ldrb	r3, [r7, #4]
 800079a:	461a      	mov	r2, r3
 800079c:	2124      	movs	r1, #36	; 0x24
 800079e:	203c      	movs	r0, #60	; 0x3c
 80007a0:	f000 ff4a 	bl	8001638 <SENSOR_IO_Write>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80007b2:	2300      	movs	r3, #0
 80007b4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80007b6:	2122      	movs	r1, #34	; 0x22
 80007b8:	203c      	movs	r0, #60	; 0x3c
 80007ba:	f000 ff57 	bl	800166c <SENSOR_IO_Read>
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f023 0303 	bic.w	r3, r3, #3
 80007c8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f043 0303 	orr.w	r3, r3, #3
 80007d0:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	461a      	mov	r2, r3
 80007d6:	2122      	movs	r1, #34	; 0x22
 80007d8:	203c      	movs	r0, #60	; 0x3c
 80007da:	f000 ff2d 	bl	8001638 <SENSOR_IO_Write>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80007ea:	f000 ff1b 	bl	8001624 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80007ee:	210f      	movs	r1, #15
 80007f0:	203c      	movs	r0, #60	; 0x3c
 80007f2:	f000 ff3b 	bl	800166c <SENSOR_IO_Read>
 80007f6:	4603      	mov	r3, r0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	bd80      	pop	{r7, pc}

080007fc <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800080a:	2122      	movs	r1, #34	; 0x22
 800080c:	203c      	movs	r0, #60	; 0x3c
 800080e:	f000 ff2d 	bl	800166c <SENSOR_IO_Read>
 8000812:	4603      	mov	r3, r0
 8000814:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	f023 0320 	bic.w	r3, r3, #32
 800081c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d003      	beq.n	800082c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	f043 0320 	orr.w	r3, r3, #32
 800082a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	461a      	mov	r2, r3
 8000830:	2122      	movs	r1, #34	; 0x22
 8000832:	203c      	movs	r0, #60	; 0x3c
 8000834:	f000 ff00 	bl	8001638 <SENSOR_IO_Write>
}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8000848:	2300      	movs	r3, #0
 800084a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000850:	f04f 0300 	mov.w	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8000856:	2121      	movs	r1, #33	; 0x21
 8000858:	203c      	movs	r0, #60	; 0x3c
 800085a:	f000 ff07 	bl	800166c <SENSOR_IO_Read>
 800085e:	4603      	mov	r3, r0
 8000860:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8000862:	f107 0208 	add.w	r2, r7, #8
 8000866:	2306      	movs	r3, #6
 8000868:	21a8      	movs	r1, #168	; 0xa8
 800086a:	203c      	movs	r0, #60	; 0x3c
 800086c:	f000 ff1c 	bl	80016a8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000870:	2300      	movs	r3, #0
 8000872:	77fb      	strb	r3, [r7, #31]
 8000874:	e01f      	b.n	80008b6 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000876:	7ffb      	ldrb	r3, [r7, #31]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	3301      	adds	r3, #1
 800087c:	f107 0220 	add.w	r2, r7, #32
 8000880:	4413      	add	r3, r2
 8000882:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000886:	b29b      	uxth	r3, r3
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b29a      	uxth	r2, r3
 800088c:	7ffb      	ldrb	r3, [r7, #31]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	f107 0120 	add.w	r1, r7, #32
 8000894:	440b      	add	r3, r1
 8000896:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800089a:	b29b      	uxth	r3, r3
 800089c:	4413      	add	r3, r2
 800089e:	b29a      	uxth	r2, r3
 80008a0:	7ffb      	ldrb	r3, [r7, #31]
 80008a2:	b212      	sxth	r2, r2
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	f107 0120 	add.w	r1, r7, #32
 80008aa:	440b      	add	r3, r1
 80008ac:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80008b0:	7ffb      	ldrb	r3, [r7, #31]
 80008b2:	3301      	adds	r3, #1
 80008b4:	77fb      	strb	r3, [r7, #31]
 80008b6:	7ffb      	ldrb	r3, [r7, #31]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d9dc      	bls.n	8000876 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80008bc:	7dfb      	ldrb	r3, [r7, #23]
 80008be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80008c2:	2b20      	cmp	r3, #32
 80008c4:	d00c      	beq.n	80008e0 <LIS3MDL_MagReadXYZ+0xa0>
 80008c6:	2b20      	cmp	r3, #32
 80008c8:	dc02      	bgt.n	80008d0 <LIS3MDL_MagReadXYZ+0x90>
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d005      	beq.n	80008da <LIS3MDL_MagReadXYZ+0x9a>
 80008ce:	e010      	b.n	80008f2 <LIS3MDL_MagReadXYZ+0xb2>
 80008d0:	2b40      	cmp	r3, #64	; 0x40
 80008d2:	d008      	beq.n	80008e6 <LIS3MDL_MagReadXYZ+0xa6>
 80008d4:	2b60      	cmp	r3, #96	; 0x60
 80008d6:	d009      	beq.n	80008ec <LIS3MDL_MagReadXYZ+0xac>
 80008d8:	e00b      	b.n	80008f2 <LIS3MDL_MagReadXYZ+0xb2>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <LIS3MDL_MagReadXYZ+0x100>)
 80008dc:	61bb      	str	r3, [r7, #24]
    break;
 80008de:	e008      	b.n	80008f2 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <LIS3MDL_MagReadXYZ+0x104>)
 80008e2:	61bb      	str	r3, [r7, #24]
    break;
 80008e4:	e005      	b.n	80008f2 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <LIS3MDL_MagReadXYZ+0x108>)
 80008e8:	61bb      	str	r3, [r7, #24]
    break;
 80008ea:	e002      	b.n	80008f2 <LIS3MDL_MagReadXYZ+0xb2>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <LIS3MDL_MagReadXYZ+0x10c>)
 80008ee:	61bb      	str	r3, [r7, #24]
    break;    
 80008f0:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	77fb      	strb	r3, [r7, #31]
 80008f6:	e01b      	b.n	8000930 <LIS3MDL_MagReadXYZ+0xf0>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80008f8:	7ffb      	ldrb	r3, [r7, #31]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	f107 0220 	add.w	r2, r7, #32
 8000900:	4413      	add	r3, r2
 8000902:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000906:	ee07 3a90 	vmov	s15, r3
 800090a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800090e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000916:	7ffb      	ldrb	r3, [r7, #31]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000922:	ee17 2a90 	vmov	r2, s15
 8000926:	b212      	sxth	r2, r2
 8000928:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800092a:	7ffb      	ldrb	r3, [r7, #31]
 800092c:	3301      	adds	r3, #1
 800092e:	77fb      	strb	r3, [r7, #31]
 8000930:	7ffb      	ldrb	r3, [r7, #31]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d9e0      	bls.n	80008f8 <LIS3MDL_MagReadXYZ+0xb8>
  }
}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	3e0f5c29 	.word	0x3e0f5c29
 8000944:	3e947ae1 	.word	0x3e947ae1
 8000948:	3edc28f6 	.word	0x3edc28f6
 800094c:	3f147ae1 	.word	0x3f147ae1

08000950 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	4618      	mov	r0, r3
 800095e:	f000 f87b 	bl	8000a58 <LPS22HB_Init>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800096a:	b580      	push	{r7, lr}
 800096c:	b084      	sub	sp, #16
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000974:	2300      	movs	r3, #0
 8000976:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8000978:	f000 fe54 	bl	8001624 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	210f      	movs	r1, #15
 8000982:	4618      	mov	r0, r3
 8000984:	f000 fe72 	bl	800166c <SENSOR_IO_Read>
 8000988:	4603      	mov	r3, r0
 800098a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800098c:	7bfb      	ldrb	r3, [r7, #15]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b087      	sub	sp, #28
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	74fb      	strb	r3, [r7, #19]
 80009aa:	e013      	b.n	80009d4 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	7cfb      	ldrb	r3, [r7, #19]
 80009b2:	3328      	adds	r3, #40	; 0x28
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	7cfc      	ldrb	r4, [r7, #19]
 80009b8:	4619      	mov	r1, r3
 80009ba:	4610      	mov	r0, r2
 80009bc:	f000 fe56 	bl	800166c <SENSOR_IO_Read>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	f107 0318 	add.w	r3, r7, #24
 80009c8:	4423      	add	r3, r4
 80009ca:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80009ce:	7cfb      	ldrb	r3, [r7, #19]
 80009d0:	3301      	adds	r3, #1
 80009d2:	74fb      	strb	r3, [r7, #19]
 80009d4:	7cfb      	ldrb	r3, [r7, #19]
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d9e8      	bls.n	80009ac <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80009da:	2300      	movs	r3, #0
 80009dc:	74fb      	strb	r3, [r7, #19]
 80009de:	e010      	b.n	8000a02 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80009e0:	7cfb      	ldrb	r3, [r7, #19]
 80009e2:	f107 0218 	add.w	r2, r7, #24
 80009e6:	4413      	add	r3, r2
 80009e8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80009ec:	461a      	mov	r2, r3
 80009ee:	7cfb      	ldrb	r3, [r7, #19]
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80009fc:	7cfb      	ldrb	r3, [r7, #19]
 80009fe:	3301      	adds	r3, #1
 8000a00:	74fb      	strb	r3, [r7, #19]
 8000a02:	7cfb      	ldrb	r3, [r7, #19]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d9eb      	bls.n	80009e0 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d003      	beq.n	8000a1a <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000a18:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2264      	movs	r2, #100	; 0x64
 8000a22:	fb02 f303 	mul.w	r3, r2, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	da01      	bge.n	8000a2e <LPS22HB_P_ReadPressure+0x96>
 8000a2a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a2e:	131b      	asrs	r3, r3, #12
 8000a30:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	ee07 3a90 	vmov	s15, r3
 8000a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a3c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a54 <LPS22HB_P_ReadPressure+0xbc>
 8000a40:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a44:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a48:	eeb0 0a67 	vmov.f32	s0, s15
 8000a4c:	371c      	adds	r7, #28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd90      	pop	{r4, r7, pc}
 8000a52:	bf00      	nop
 8000a54:	42c80000 	.word	0x42c80000

08000a58 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	211a      	movs	r1, #26
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fdff 	bl	800166c <SENSOR_IO_Read>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	f023 0301 	bic.w	r3, r3, #1
 8000a78:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	7bfa      	ldrb	r2, [r7, #15]
 8000a88:	211a      	movs	r1, #26
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fdd4 	bl	8001638 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2110      	movs	r1, #16
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fde8 	bl	800166c <SENSOR_IO_Read>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000aa6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000aae:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	f023 0302 	bic.w	r3, r3, #2
 8000ab6:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	7bfa      	ldrb	r2, [r7, #15]
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 fdb5 	bl	8001638 <SENSOR_IO_Write>
}  
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b084      	sub	sp, #16
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000ae4:	2110      	movs	r1, #16
 8000ae6:	20d4      	movs	r0, #212	; 0xd4
 8000ae8:	f000 fdc0 	bl	800166c <SENSOR_IO_Read>
 8000aec:	4603      	mov	r3, r0
 8000aee:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8000af0:	88fb      	ldrh	r3, [r7, #6]
 8000af2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8000af4:	7bbb      	ldrb	r3, [r7, #14]
 8000af6:	f003 0303 	and.w	r3, r3, #3
 8000afa:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000afc:	7bba      	ldrb	r2, [r7, #14]
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8000b04:	7bbb      	ldrb	r3, [r7, #14]
 8000b06:	461a      	mov	r2, r3
 8000b08:	2110      	movs	r1, #16
 8000b0a:	20d4      	movs	r0, #212	; 0xd4
 8000b0c:	f000 fd94 	bl	8001638 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000b10:	2112      	movs	r1, #18
 8000b12:	20d4      	movs	r0, #212	; 0xd4
 8000b14:	f000 fdaa 	bl	800166c <SENSOR_IO_Read>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	0a1b      	lsrs	r3, r3, #8
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8000b24:	7bbb      	ldrb	r3, [r7, #14]
 8000b26:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000b2a:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8000b2c:	7bba      	ldrb	r2, [r7, #14]
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8000b34:	7bbb      	ldrb	r3, [r7, #14]
 8000b36:	461a      	mov	r2, r3
 8000b38:	2112      	movs	r1, #18
 8000b3a:	20d4      	movs	r0, #212	; 0xd4
 8000b3c:	f000 fd7c 	bl	8001638 <SENSOR_IO_Write>
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000b52:	2110      	movs	r1, #16
 8000b54:	20d4      	movs	r0, #212	; 0xd4
 8000b56:	f000 fd89 	bl	800166c <SENSOR_IO_Read>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	f003 030f 	and.w	r3, r3, #15
 8000b64:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	2110      	movs	r1, #16
 8000b6c:	20d4      	movs	r0, #212	; 0xd4
 8000b6e:	f000 fd63 	bl	8001638 <SENSOR_IO_Write>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8000b7e:	f000 fd51 	bl	8001624 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8000b82:	210f      	movs	r1, #15
 8000b84:	20d4      	movs	r0, #212	; 0xd4
 8000b86:	f000 fd71 	bl	800166c <SENSOR_IO_Read>
 8000b8a:	4603      	mov	r3, r0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8000b9e:	2115      	movs	r1, #21
 8000ba0:	20d4      	movs	r0, #212	; 0xd4
 8000ba2:	f000 fd63 	bl	800166c <SENSOR_IO_Read>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	f023 0310 	bic.w	r3, r3, #16
 8000bb0:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	f043 0310 	orr.w	r3, r3, #16
 8000bbe:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	2115      	movs	r1, #21
 8000bc6:	20d4      	movs	r0, #212	; 0xd4
 8000bc8:	f000 fd36 	bl	8001638 <SENSOR_IO_Write>
}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000bea:	2110      	movs	r1, #16
 8000bec:	20d4      	movs	r0, #212	; 0xd4
 8000bee:	f000 fd3d 	bl	800166c <SENSOR_IO_Read>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8000bf6:	f107 0208 	add.w	r2, r7, #8
 8000bfa:	2306      	movs	r3, #6
 8000bfc:	2128      	movs	r1, #40	; 0x28
 8000bfe:	20d4      	movs	r0, #212	; 0xd4
 8000c00:	f000 fd52 	bl	80016a8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	77fb      	strb	r3, [r7, #31]
 8000c08:	e01f      	b.n	8000c4a <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000c0a:	7ffb      	ldrb	r3, [r7, #31]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	3301      	adds	r3, #1
 8000c10:	f107 0220 	add.w	r2, r7, #32
 8000c14:	4413      	add	r3, r2
 8000c16:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	021b      	lsls	r3, r3, #8
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	7ffb      	ldrb	r3, [r7, #31]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	f107 0120 	add.w	r1, r7, #32
 8000c28:	440b      	add	r3, r1
 8000c2a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	4413      	add	r3, r2
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	7ffb      	ldrb	r3, [r7, #31]
 8000c36:	b212      	sxth	r2, r2
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	f107 0120 	add.w	r1, r7, #32
 8000c3e:	440b      	add	r3, r1
 8000c40:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000c44:	7ffb      	ldrb	r3, [r7, #31]
 8000c46:	3301      	adds	r3, #1
 8000c48:	77fb      	strb	r3, [r7, #31]
 8000c4a:	7ffb      	ldrb	r3, [r7, #31]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d9dc      	bls.n	8000c0a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
 8000c52:	f003 030c 	and.w	r3, r3, #12
 8000c56:	2b0c      	cmp	r3, #12
 8000c58:	d828      	bhi.n	8000cac <LSM6DSL_AccReadXYZ+0xd8>
 8000c5a:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <LSM6DSL_AccReadXYZ+0x8c>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000c95 	.word	0x08000c95
 8000c64:	08000cad 	.word	0x08000cad
 8000c68:	08000cad 	.word	0x08000cad
 8000c6c:	08000cad 	.word	0x08000cad
 8000c70:	08000ca7 	.word	0x08000ca7
 8000c74:	08000cad 	.word	0x08000cad
 8000c78:	08000cad 	.word	0x08000cad
 8000c7c:	08000cad 	.word	0x08000cad
 8000c80:	08000c9b 	.word	0x08000c9b
 8000c84:	08000cad 	.word	0x08000cad
 8000c88:	08000cad 	.word	0x08000cad
 8000c8c:	08000cad 	.word	0x08000cad
 8000c90:	08000ca1 	.word	0x08000ca1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <LSM6DSL_AccReadXYZ+0x124>)
 8000c96:	61bb      	str	r3, [r7, #24]
    break;
 8000c98:	e008      	b.n	8000cac <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <LSM6DSL_AccReadXYZ+0x128>)
 8000c9c:	61bb      	str	r3, [r7, #24]
    break;
 8000c9e:	e005      	b.n	8000cac <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <LSM6DSL_AccReadXYZ+0x12c>)
 8000ca2:	61bb      	str	r3, [r7, #24]
    break;
 8000ca4:	e002      	b.n	8000cac <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <LSM6DSL_AccReadXYZ+0x130>)
 8000ca8:	61bb      	str	r3, [r7, #24]
    break;    
 8000caa:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	77fb      	strb	r3, [r7, #31]
 8000cb0:	e01b      	b.n	8000cea <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8000cb2:	7ffb      	ldrb	r3, [r7, #31]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	f107 0220 	add.w	r2, r7, #32
 8000cba:	4413      	add	r3, r2
 8000cbc:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000cc0:	ee07 3a90 	vmov	s15, r3
 8000cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd0:	7ffb      	ldrb	r3, [r7, #31]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cdc:	ee17 2a90 	vmov	r2, s15
 8000ce0:	b212      	sxth	r2, r2
 8000ce2:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000ce4:	7ffb      	ldrb	r3, [r7, #31]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	77fb      	strb	r3, [r7, #31]
 8000cea:	7ffb      	ldrb	r3, [r7, #31]
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d9e0      	bls.n	8000cb2 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	3720      	adds	r7, #32
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	3d79db23 	.word	0x3d79db23
 8000cfc:	3df9db23 	.word	0x3df9db23
 8000d00:	3e79db23 	.word	0x3e79db23
 8000d04:	3ef9db23 	.word	0x3ef9db23

08000d08 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <vApplicationGetIdleTaskMemory+0x30>)
 8000d1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000110 	.word	0x20000110
 8000d38:	20000164 	.word	0x20000164

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	b5b0      	push	{r4, r5, r7, lr}
 8000d3e:	b09c      	sub	sp, #112	; 0x70
 8000d40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d42:	f000 ffa4 	bl	8001c8e <HAL_Init>
  /* USER CODE BEGIN Init */
  //#######################################################################################################################################



  BSP_HSENSOR_Init(); // Initialize humidity sensor
 8000d46:	f000 fd23 	bl	8001790 <BSP_HSENSOR_Init>
  BSP_MAGNETO_Init(); // Initialize magnetometer
 8000d4a:	f000 fd4f 	bl	80017ec <BSP_MAGNETO_Init>
  BSP_PSENSOR_Init(); // Initialize pressure
 8000d4e:	f000 fd91 	bl	8001874 <BSP_PSENSOR_Init>
  BSP_ACCELERO_Init(); // Initialize accelerometer
 8000d52:	f000 fcc7 	bl	80016e4 <BSP_ACCELERO_Init>

  //#######################################################################################################################################
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d56:	f000 f907 	bl	8000f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5a:	f000 fa0b 	bl	8001174 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d5e:	f000 f97d 	bl	800105c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d62:	f000 f9bb 	bl	80010dc <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of msgMutex */
  osMutexDef(msgMutex);
 8000d66:	2300      	movs	r3, #0
 8000d68:	663b      	str	r3, [r7, #96]	; 0x60
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	667b      	str	r3, [r7, #100]	; 0x64
  msgMutexHandle = osMutexCreate(osMutex(msgMutex));
 8000d6e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d72:	4618      	mov	r0, r3
 8000d74:	f004 ffaf 	bl	8005cd6 <osMutexCreate>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	4b68      	ldr	r3, [pc, #416]	; (8000f1c <main+0x1e0>)
 8000d7c:	601a      	str	r2, [r3, #0]

  /* definition and creation of sensorSelectorMutex */
  osMutexDef(sensorSelectorMutex);
 8000d7e:	2300      	movs	r3, #0
 8000d80:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d82:	2300      	movs	r3, #0
 8000d84:	65fb      	str	r3, [r7, #92]	; 0x5c
  sensorSelectorMutexHandle = osMutexCreate(osMutex(sensorSelectorMutex));
 8000d86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f004 ffa3 	bl	8005cd6 <osMutexCreate>
 8000d90:	4602      	mov	r2, r0
 8000d92:	4b63      	ldr	r3, [pc, #396]	; (8000f20 <main+0x1e4>)
 8000d94:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, buttonPressTask, osPriorityBelowNormal, 0, 128);
 8000d96:	4b63      	ldr	r3, [pc, #396]	; (8000f24 <main+0x1e8>)
 8000d98:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000d9c:	461d      	mov	r5, r3
 8000d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000da6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000daa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f004 ff30 	bl	8005c16 <osThreadCreate>
 8000db6:	4602      	mov	r2, r0
 8000db8:	4b5b      	ldr	r3, [pc, #364]	; (8000f28 <main+0x1ec>)
 8000dba:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, transmitDataTask, osPriorityNormal, 0, 128);
 8000dbc:	4b5b      	ldr	r3, [pc, #364]	; (8000f2c <main+0x1f0>)
 8000dbe:	f107 0420 	add.w	r4, r7, #32
 8000dc2:	461d      	mov	r5, r3
 8000dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000dd0:	f107 0320 	add.w	r3, r7, #32
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f004 ff1d 	bl	8005c16 <osThreadCreate>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	4b54      	ldr	r3, [pc, #336]	; (8000f30 <main+0x1f4>)
 8000de0:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, readSensorDataTask, osPriorityNormal, 0, 128);
 8000de2:	4b54      	ldr	r3, [pc, #336]	; (8000f34 <main+0x1f8>)
 8000de4:	1d3c      	adds	r4, r7, #4
 8000de6:	461d      	mov	r5, r3
 8000de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000df0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f004 ff0c 	bl	8005c16 <osThreadCreate>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	4b4d      	ldr	r3, [pc, #308]	; (8000f38 <main+0x1fc>)
 8000e02:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e04:	f004 ff00 	bl	8005c08 <osKernelStart>
  /* USER CODE BEGIN WHILE */
  //#######################################################################################################################################
  while (1)
  {

	  if(HAL_GPIO_ReadPin(button_GPIO_Port,button_Pin) == 0){ //If button is pressed
 8000e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e0c:	484b      	ldr	r0, [pc, #300]	; (8000f3c <main+0x200>)
 8000e0e:	f001 faff 	bl	8002410 <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d110      	bne.n	8000e3a <main+0xfe>
		  sensorSelector = (sensorSelector + 1)%4; //Change sensor
 8000e18:	4b49      	ldr	r3, [pc, #292]	; (8000f40 <main+0x204>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	425a      	negs	r2, r3
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	f002 0203 	and.w	r2, r2, #3
 8000e28:	bf58      	it	pl
 8000e2a:	4253      	negpl	r3, r2
 8000e2c:	4a44      	ldr	r2, [pc, #272]	; (8000f40 <main+0x204>)
 8000e2e:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin); //Flip LED
 8000e30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e34:	4843      	ldr	r0, [pc, #268]	; (8000f44 <main+0x208>)
 8000e36:	f001 fb1b 	bl	8002470 <HAL_GPIO_TogglePin>
	  }

	  if(sensorSelector == 0){
 8000e3a:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <main+0x204>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d111      	bne.n	8000e66 <main+0x12a>
		  sensorReading = (uint16_t)(BSP_HSENSOR_ReadHumidity());
 8000e42:	f000 fcc5 	bl	80017d0 <BSP_HSENSOR_ReadHumidity>
 8000e46:	eef0 7a40 	vmov.f32	s15, s0
 8000e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e4e:	ee17 3a90 	vmov	r3, s15
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4b3c      	ldr	r3, [pc, #240]	; (8000f48 <main+0x20c>)
 8000e56:	801a      	strh	r2, [r3, #0]
		  sprintf(msg, "\rHumidity: %d                                                             ", sensorReading);
 8000e58:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <main+0x20c>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	493b      	ldr	r1, [pc, #236]	; (8000f4c <main+0x210>)
 8000e60:	483b      	ldr	r0, [pc, #236]	; (8000f50 <main+0x214>)
 8000e62:	f007 fa81 	bl	8008368 <siprintf>
	  }

	  if(sensorSelector == 1){
 8000e66:	4b36      	ldr	r3, [pc, #216]	; (8000f40 <main+0x204>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d111      	bne.n	8000e92 <main+0x156>
		  sensorReading = (uint16_t)(BSP_PSENSOR_ReadPressure());
 8000e6e:	f000 fd21 	bl	80018b4 <BSP_PSENSOR_ReadPressure>
 8000e72:	eef0 7a40 	vmov.f32	s15, s0
 8000e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e7a:	ee17 3a90 	vmov	r3, s15
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b31      	ldr	r3, [pc, #196]	; (8000f48 <main+0x20c>)
 8000e82:	801a      	strh	r2, [r3, #0]
		  sprintf(msg, "\rPressure: %d                                                             ", sensorReading);
 8000e84:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <main+0x20c>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4932      	ldr	r1, [pc, #200]	; (8000f54 <main+0x218>)
 8000e8c:	4830      	ldr	r0, [pc, #192]	; (8000f50 <main+0x214>)
 8000e8e:	f007 fa6b 	bl	8008368 <siprintf>
	  }

	  if(sensorSelector == 2){
 8000e92:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <main+0x204>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d113      	bne.n	8000ec2 <main+0x186>
		  BSP_MAGNETO_GetXYZ(&sensorReadingXYZ);
 8000e9a:	482f      	ldr	r0, [pc, #188]	; (8000f58 <main+0x21c>)
 8000e9c:	f000 fcd2 	bl	8001844 <BSP_MAGNETO_GetXYZ>
		  sprintf(msg, "\rMagnetometer X: %d, Magnetometer Y: %d, Magnetometer Z: %d               ", sensorReadingXYZ[0], sensorReadingXYZ[1], sensorReadingXYZ[2]);
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <main+0x21c>)
 8000ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <main+0x21c>)
 8000eaa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <main+0x21c>)
 8000eb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4928      	ldr	r1, [pc, #160]	; (8000f5c <main+0x220>)
 8000ebc:	4824      	ldr	r0, [pc, #144]	; (8000f50 <main+0x214>)
 8000ebe:	f007 fa53 	bl	8008368 <siprintf>
	  }

	  if(sensorSelector == 3){
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <main+0x204>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d113      	bne.n	8000ef2 <main+0x1b6>
		  BSP_ACCELERO_AccGetXYZ(&sensorReadingXYZ);
 8000eca:	4823      	ldr	r0, [pc, #140]	; (8000f58 <main+0x21c>)
 8000ecc:	f000 fc48 	bl	8001760 <BSP_ACCELERO_AccGetXYZ>
		  sprintf(msg, "\rAccelerometer X: %d, Accelerometer Y: %d, Accelerometer Z: %d\0          ", sensorReadingXYZ[0], sensorReadingXYZ[1], sensorReadingXYZ[2]);
 8000ed0:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <main+0x21c>)
 8000ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <main+0x21c>)
 8000eda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <main+0x21c>)
 8000ee2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	491d      	ldr	r1, [pc, #116]	; (8000f60 <main+0x224>)
 8000eec:	4818      	ldr	r0, [pc, #96]	; (8000f50 <main+0x214>)
 8000eee:	f007 fa3b 	bl	8008368 <siprintf>
	  }

	  while(HAL_GPIO_ReadPin(button_GPIO_Port,button_Pin) == 0); //Wait until unpress
 8000ef2:	bf00      	nop
 8000ef4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef8:	4810      	ldr	r0, [pc, #64]	; (8000f3c <main+0x200>)
 8000efa:	f001 fa89 	bl	8002410 <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f7      	beq.n	8000ef4 <main+0x1b8>
	  HAL_UART_Transmit(&huart1, &msg, sizeof(msg), HAL_MAX_DELAY);
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f08:	2264      	movs	r2, #100	; 0x64
 8000f0a:	4911      	ldr	r1, [pc, #68]	; (8000f50 <main+0x214>)
 8000f0c:	4815      	ldr	r0, [pc, #84]	; (8000f64 <main+0x228>)
 8000f0e:	f004 f85f 	bl	8004fd0 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8000f12:	2064      	movs	r0, #100	; 0x64
 8000f14:	f000 fef4 	bl	8001d00 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(button_GPIO_Port,button_Pin) == 0){ //If button is pressed
 8000f18:	e776      	b.n	8000e08 <main+0xcc>
 8000f1a:	bf00      	nop
 8000f1c:	200010dc 	.word	0x200010dc
 8000f20:	20001144 	.word	0x20001144
 8000f24:	08008cb4 	.word	0x08008cb4
 8000f28:	20001088 	.word	0x20001088
 8000f2c:	08008cdc 	.word	0x08008cdc
 8000f30:	200011d4 	.word	0x200011d4
 8000f34:	08008d04 	.word	0x08008d04
 8000f38:	200011e0 	.word	0x200011e0
 8000f3c:	48000800 	.word	0x48000800
 8000f40:	20000364 	.word	0x20000364
 8000f44:	48000400 	.word	0x48000400
 8000f48:	200010d8 	.word	0x200010d8
 8000f4c:	08008b78 	.word	0x08008b78
 8000f50:	200010e0 	.word	0x200010e0
 8000f54:	08008bc4 	.word	0x08008bc4
 8000f58:	200011d8 	.word	0x200011d8
 8000f5c:	08008c10 	.word	0x08008c10
 8000f60:	08008c5c 	.word	0x08008c5c
 8000f64:	20001148 	.word	0x20001148

08000f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b0bc      	sub	sp, #240	; 0xf0
 8000f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f72:	2244      	movs	r2, #68	; 0x44
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f007 f9ed 	bl	8008356 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f7c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2294      	movs	r2, #148	; 0x94
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f007 f9df 	bl	8008356 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f98:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f9c:	f002 f842 	bl	8003024 <HAL_PWREx_ControlVoltageScaling>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000fa6:	f000 fa49 	bl	800143c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000faa:	2310      	movs	r3, #16
 8000fac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fbc:	2360      	movs	r3, #96	; 0x60
 8000fbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000fd4:	2328      	movs	r3, #40	; 0x28
 8000fd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 f8bb 	bl	800316c <HAL_RCC_OscConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ffc:	f000 fa1e 	bl	800143c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001000:	230f      	movs	r3, #15
 8001002:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001006:	2303      	movs	r3, #3
 8001008:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800101e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001022:	2103      	movs	r1, #3
 8001024:	4618      	mov	r0, r3
 8001026:	f002 fcc7 	bl	80039b8 <HAL_RCC_ClockConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001030:	f000 fa04 	bl	800143c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001034:	2341      	movs	r3, #65	; 0x41
 8001036:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001038:	2300      	movs	r3, #0
 800103a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800103c:	2300      	movs	r3, #0
 800103e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	4618      	mov	r0, r3
 8001044:	f002 ff9a 	bl	8003f7c <HAL_RCCEx_PeriphCLKConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800104e:	f000 f9f5 	bl	800143c <Error_Handler>
  }
}
 8001052:	bf00      	nop
 8001054:	37f0      	adds	r7, #240	; 0xf0
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001060:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_I2C1_Init+0x74>)
 8001062:	4a1c      	ldr	r2, [pc, #112]	; (80010d4 <MX_I2C1_Init+0x78>)
 8001064:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MX_I2C1_Init+0x74>)
 8001068:	4a1b      	ldr	r2, [pc, #108]	; (80010d8 <MX_I2C1_Init+0x7c>)
 800106a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <MX_I2C1_Init+0x74>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_I2C1_Init+0x74>)
 8001074:	2201      	movs	r2, #1
 8001076:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <MX_I2C1_Init+0x74>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_I2C1_Init+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_I2C1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_I2C1_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_I2C1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001096:	480e      	ldr	r0, [pc, #56]	; (80010d0 <MX_I2C1_Init+0x74>)
 8001098:	f001 fa04 	bl	80024a4 <HAL_I2C_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010a2:	f000 f9cb 	bl	800143c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010a6:	2100      	movs	r1, #0
 80010a8:	4809      	ldr	r0, [pc, #36]	; (80010d0 <MX_I2C1_Init+0x74>)
 80010aa:	f001 ff03 	bl	8002eb4 <HAL_I2CEx_ConfigAnalogFilter>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010b4:	f000 f9c2 	bl	800143c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010b8:	2100      	movs	r1, #0
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_I2C1_Init+0x74>)
 80010bc:	f001 ff45 	bl	8002f4a <HAL_I2CEx_ConfigDigitalFilter>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010c6:	f000 f9b9 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000108c 	.word	0x2000108c
 80010d4:	40005400 	.word	0x40005400
 80010d8:	10909cec 	.word	0x10909cec

080010dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e0:	4b22      	ldr	r3, [pc, #136]	; (800116c <MX_USART1_UART_Init+0x90>)
 80010e2:	4a23      	ldr	r2, [pc, #140]	; (8001170 <MX_USART1_UART_Init+0x94>)
 80010e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <MX_USART1_UART_Init+0x90>)
 80010e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ee:	4b1f      	ldr	r3, [pc, #124]	; (800116c <MX_USART1_UART_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <MX_USART1_UART_Init+0x90>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <MX_USART1_UART_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_USART1_UART_Init+0x90>)
 8001102:	220c      	movs	r2, #12
 8001104:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <MX_USART1_UART_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_USART1_UART_Init+0x90>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001112:	4b16      	ldr	r3, [pc, #88]	; (800116c <MX_USART1_UART_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_USART1_UART_Init+0x90>)
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <MX_USART1_UART_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001124:	4811      	ldr	r0, [pc, #68]	; (800116c <MX_USART1_UART_Init+0x90>)
 8001126:	f003 ff03 	bl	8004f30 <HAL_UART_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001130:	f000 f984 	bl	800143c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001134:	2100      	movs	r1, #0
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <MX_USART1_UART_Init+0x90>)
 8001138:	f004 fc57 	bl	80059ea <HAL_UARTEx_SetTxFifoThreshold>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001142:	f000 f97b 	bl	800143c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001146:	2100      	movs	r1, #0
 8001148:	4808      	ldr	r0, [pc, #32]	; (800116c <MX_USART1_UART_Init+0x90>)
 800114a:	f004 fc8c 	bl	8005a66 <HAL_UARTEx_SetRxFifoThreshold>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001154:	f000 f972 	bl	800143c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <MX_USART1_UART_Init+0x90>)
 800115a:	f004 fc0d 	bl	8005978 <HAL_UARTEx_DisableFifoMode>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001164:	f000 f96a 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20001148 	.word	0x20001148
 8001170:	40013800 	.word	0x40013800

08001174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <MX_GPIO_Init+0x94>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <MX_GPIO_Init+0x94>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <MX_GPIO_Init+0x94>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_GPIO_Init+0x94>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	4a18      	ldr	r2, [pc, #96]	; (8001208 <MX_GPIO_Init+0x94>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_GPIO_Init+0x94>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011c0:	4812      	ldr	r0, [pc, #72]	; (800120c <MX_GPIO_Init+0x98>)
 80011c2:	f001 f93d 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 80011c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	4619      	mov	r1, r3
 80011da:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_GPIO_Init+0x9c>)
 80011dc:	f000 fe94 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80011e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 030c 	add.w	r3, r7, #12
 80011f6:	4619      	mov	r1, r3
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <MX_GPIO_Init+0x98>)
 80011fa:	f000 fe85 	bl	8001f08 <HAL_GPIO_Init>

}
 80011fe:	bf00      	nop
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000
 800120c:	48000400 	.word	0x48000400
 8001210:	48000800 	.word	0x48000800

08001214 <buttonPressTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_buttonPressTask */
void buttonPressTask(void const * argument)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
//#######################################################################################################################################

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800121c:	2001      	movs	r0, #1
 800121e:	f004 fd46 	bl	8005cae <osDelay>

    //When button has been pressed, update LED and pick next sensor
    if (HAL_GPIO_ReadPin(button_GPIO_Port,button_Pin) == 0) {
 8001222:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001226:	481c      	ldr	r0, [pc, #112]	; (8001298 <buttonPressTask+0x84>)
 8001228:	f001 f8f2 	bl	8002410 <HAL_GPIO_ReadPin>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d128      	bne.n	8001284 <buttonPressTask+0x70>

    	//Flip LED
    	HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8001232:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001236:	4819      	ldr	r0, [pc, #100]	; (800129c <buttonPressTask+0x88>)
 8001238:	f001 f91a 	bl	8002470 <HAL_GPIO_TogglePin>


    	//Change the shared resource: sensorSelector
    	osMutexWait(sensorSelectorMutexHandle, osWaitForever);
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <buttonPressTask+0x8c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001244:	4618      	mov	r0, r3
 8001246:	f004 fd5f 	bl	8005d08 <osMutexWait>
    	osMutexWait(msgMutexHandle, osWaitForever);
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <buttonPressTask+0x90>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001252:	4618      	mov	r0, r3
 8001254:	f004 fd58 	bl	8005d08 <osMutexWait>
    	sensorSelector = (sensorSelector + 1)%4;
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <buttonPressTask+0x94>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	425a      	negs	r2, r3
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	f002 0203 	and.w	r2, r2, #3
 8001268:	bf58      	it	pl
 800126a:	4253      	negpl	r3, r2
 800126c:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <buttonPressTask+0x94>)
 800126e:	6013      	str	r3, [r2, #0]
    	osMutexRelease(sensorSelectorMutexHandle);
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <buttonPressTask+0x8c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f004 fd95 	bl	8005da4 <osMutexRelease>
    	osMutexRelease(msgMutexHandle);
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <buttonPressTask+0x90>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f004 fd90 	bl	8005da4 <osMutexRelease>

    }
    while(HAL_GPIO_ReadPin(button_GPIO_Port,button_Pin) == 0); //Wait until unpress
 8001284:	bf00      	nop
 8001286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128a:	4803      	ldr	r0, [pc, #12]	; (8001298 <buttonPressTask+0x84>)
 800128c:	f001 f8c0 	bl	8002410 <HAL_GPIO_ReadPin>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f7      	beq.n	8001286 <buttonPressTask+0x72>
    osDelay(1);
 8001296:	e7c1      	b.n	800121c <buttonPressTask+0x8>
 8001298:	48000800 	.word	0x48000800
 800129c:	48000400 	.word	0x48000400
 80012a0:	20001144 	.word	0x20001144
 80012a4:	200010dc 	.word	0x200010dc
 80012a8:	20000364 	.word	0x20000364

080012ac <transmitDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmitDataTask */
void transmitDataTask(void const * argument)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmitDataTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100); //Put thread to sleep for 100ms for 10 Hz sampling time
 80012b4:	2064      	movs	r0, #100	; 0x64
 80012b6:	f004 fcfa 	bl	8005cae <osDelay>

    //Make sure msg is free to be used
    osMutexWait(msgMutexHandle, osWaitForever);
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <transmitDataTask+0x38>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 fd20 	bl	8005d08 <osMutexWait>

    //Transmit
    HAL_UART_Transmit(&huart1, &msg, sizeof(msg), HAL_MAX_DELAY);
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012cc:	2264      	movs	r2, #100	; 0x64
 80012ce:	4906      	ldr	r1, [pc, #24]	; (80012e8 <transmitDataTask+0x3c>)
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <transmitDataTask+0x40>)
 80012d2:	f003 fe7d 	bl	8004fd0 <HAL_UART_Transmit>

    //Release msg
    osMutexRelease(msgMutexHandle);
 80012d6:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <transmitDataTask+0x38>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f004 fd62 	bl	8005da4 <osMutexRelease>
    osDelay(100); //Put thread to sleep for 100ms for 10 Hz sampling time
 80012e0:	e7e8      	b.n	80012b4 <transmitDataTask+0x8>
 80012e2:	bf00      	nop
 80012e4:	200010dc 	.word	0x200010dc
 80012e8:	200010e0 	.word	0x200010e0
 80012ec:	20001148 	.word	0x20001148

080012f0 <readSensorDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readSensorDataTask */
void readSensorDataTask(void const * argument)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN readSensorDataTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100); //Put thread to sleep for 100ms for 10 Hz sampling time
 80012f8:	2064      	movs	r0, #100	; 0x64
 80012fa:	f004 fcd8 	bl	8005cae <osDelay>

	//Make sure sensorSelector and msg are free for being used
	osMutexWait(sensorSelectorMutexHandle, osWaitForever);
 80012fe:	4b3c      	ldr	r3, [pc, #240]	; (80013f0 <readSensorDataTask+0x100>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001306:	4618      	mov	r0, r3
 8001308:	f004 fcfe 	bl	8005d08 <osMutexWait>
	osMutexWait(msgMutexHandle, osWaitForever);
 800130c:	4b39      	ldr	r3, [pc, #228]	; (80013f4 <readSensorDataTask+0x104>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001314:	4618      	mov	r0, r3
 8001316:	f004 fcf7 	bl	8005d08 <osMutexWait>

	switch (sensorSelector) {
 800131a:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <readSensorDataTask+0x108>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b03      	cmp	r3, #3
 8001320:	d85a      	bhi.n	80013d8 <readSensorDataTask+0xe8>
 8001322:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <readSensorDataTask+0x38>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	08001339 	.word	0x08001339
 800132c:	0800135f 	.word	0x0800135f
 8001330:	08001385 	.word	0x08001385
 8001334:	080013af 	.word	0x080013af
		case 0: // 0->Humidity

			sensorReading = (uint16_t)(BSP_HSENSOR_ReadHumidity());
 8001338:	f000 fa4a 	bl	80017d0 <BSP_HSENSOR_ReadHumidity>
 800133c:	eef0 7a40 	vmov.f32	s15, s0
 8001340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001344:	ee17 3a90 	vmov	r3, s15
 8001348:	b29a      	uxth	r2, r3
 800134a:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <readSensorDataTask+0x10c>)
 800134c:	801a      	strh	r2, [r3, #0]
			sprintf(msg, "\rHumidity: %d                                                             ", sensorReading);
 800134e:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <readSensorDataTask+0x10c>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	492a      	ldr	r1, [pc, #168]	; (8001400 <readSensorDataTask+0x110>)
 8001356:	482b      	ldr	r0, [pc, #172]	; (8001404 <readSensorDataTask+0x114>)
 8001358:	f007 f806 	bl	8008368 <siprintf>
			break;
 800135c:	e03c      	b.n	80013d8 <readSensorDataTask+0xe8>

		case 1: // 1->Pressure

			sensorReading = (uint16_t)(BSP_PSENSOR_ReadPressure());
 800135e:	f000 faa9 	bl	80018b4 <BSP_PSENSOR_ReadPressure>
 8001362:	eef0 7a40 	vmov.f32	s15, s0
 8001366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800136a:	ee17 3a90 	vmov	r3, s15
 800136e:	b29a      	uxth	r2, r3
 8001370:	4b22      	ldr	r3, [pc, #136]	; (80013fc <readSensorDataTask+0x10c>)
 8001372:	801a      	strh	r2, [r3, #0]
			sprintf(msg, "\rPressure: %d                                                             ", sensorReading);
 8001374:	4b21      	ldr	r3, [pc, #132]	; (80013fc <readSensorDataTask+0x10c>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4923      	ldr	r1, [pc, #140]	; (8001408 <readSensorDataTask+0x118>)
 800137c:	4821      	ldr	r0, [pc, #132]	; (8001404 <readSensorDataTask+0x114>)
 800137e:	f006 fff3 	bl	8008368 <siprintf>
			break;
 8001382:	e029      	b.n	80013d8 <readSensorDataTask+0xe8>

		case 2: // 2->Magnetometer

			BSP_MAGNETO_GetXYZ(&sensorReadingXYZ);
 8001384:	4821      	ldr	r0, [pc, #132]	; (800140c <readSensorDataTask+0x11c>)
 8001386:	f000 fa5d 	bl	8001844 <BSP_MAGNETO_GetXYZ>
			sprintf(msg, "\rMagnetometer X: %d, Magnetometer Y: %d, Magnetometer Z: %d               ", sensorReadingXYZ[0], sensorReadingXYZ[1], sensorReadingXYZ[2]);
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <readSensorDataTask+0x11c>)
 800138c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001390:	461a      	mov	r2, r3
 8001392:	4b1e      	ldr	r3, [pc, #120]	; (800140c <readSensorDataTask+0x11c>)
 8001394:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001398:	4619      	mov	r1, r3
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <readSensorDataTask+0x11c>)
 800139c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	460b      	mov	r3, r1
 80013a4:	491a      	ldr	r1, [pc, #104]	; (8001410 <readSensorDataTask+0x120>)
 80013a6:	4817      	ldr	r0, [pc, #92]	; (8001404 <readSensorDataTask+0x114>)
 80013a8:	f006 ffde 	bl	8008368 <siprintf>
			break;
 80013ac:	e014      	b.n	80013d8 <readSensorDataTask+0xe8>

		case 3: // 3->Accelerometer

			BSP_ACCELERO_AccGetXYZ(&sensorReadingXYZ);
 80013ae:	4817      	ldr	r0, [pc, #92]	; (800140c <readSensorDataTask+0x11c>)
 80013b0:	f000 f9d6 	bl	8001760 <BSP_ACCELERO_AccGetXYZ>
			sprintf(msg, "\rAccelerometer X: %d, Accelerometer Y: %d, Accelerometer Z: %d\0          ", sensorReadingXYZ[0], sensorReadingXYZ[1], sensorReadingXYZ[2]);
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <readSensorDataTask+0x11c>)
 80013b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <readSensorDataTask+0x11c>)
 80013be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013c2:	4619      	mov	r1, r3
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <readSensorDataTask+0x11c>)
 80013c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	460b      	mov	r3, r1
 80013ce:	4911      	ldr	r1, [pc, #68]	; (8001414 <readSensorDataTask+0x124>)
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <readSensorDataTask+0x114>)
 80013d2:	f006 ffc9 	bl	8008368 <siprintf>
			break;
 80013d6:	bf00      	nop

	}

	//Release sensorSelector and msg
	osMutexRelease(sensorSelectorMutexHandle);
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <readSensorDataTask+0x100>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f004 fce1 	bl	8005da4 <osMutexRelease>
	osMutexRelease(msgMutexHandle);
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <readSensorDataTask+0x104>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f004 fcdc 	bl	8005da4 <osMutexRelease>
    osDelay(100); //Put thread to sleep for 100ms for 10 Hz sampling time
 80013ec:	e784      	b.n	80012f8 <readSensorDataTask+0x8>
 80013ee:	bf00      	nop
 80013f0:	20001144 	.word	0x20001144
 80013f4:	200010dc 	.word	0x200010dc
 80013f8:	20000364 	.word	0x20000364
 80013fc:	200010d8 	.word	0x200010d8
 8001400:	08008b78 	.word	0x08008b78
 8001404:	200010e0 	.word	0x200010e0
 8001408:	08008bc4 	.word	0x08008bc4
 800140c:	200011d8 	.word	0x200011d8
 8001410:	08008c10 	.word	0x08008c10
 8001414:	08008c5c 	.word	0x08008c5c

08001418 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800142a:	f000 fc49 	bl	8001cc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40001000 	.word	0x40001000

0800143c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001440:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001442:	e7fe      	b.n	8001442 <Error_Handler+0x6>

08001444 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800144c:	4b27      	ldr	r3, [pc, #156]	; (80014ec <I2Cx_MspInit+0xa8>)
 800144e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001450:	4a26      	ldr	r2, [pc, #152]	; (80014ec <I2Cx_MspInit+0xa8>)
 8001452:	f043 0302 	orr.w	r3, r3, #2
 8001456:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <I2Cx_MspInit+0xa8>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001464:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001468:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800146a:	2312      	movs	r3, #18
 800146c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800146e:	2301      	movs	r3, #1
 8001470:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001476:	2304      	movs	r3, #4
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	481b      	ldr	r0, [pc, #108]	; (80014f0 <I2Cx_MspInit+0xac>)
 8001482:	f000 fd41 	bl	8001f08 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4818      	ldr	r0, [pc, #96]	; (80014f0 <I2Cx_MspInit+0xac>)
 800148e:	f000 fd3b 	bl	8001f08 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <I2Cx_MspInit+0xa8>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	4a15      	ldr	r2, [pc, #84]	; (80014ec <I2Cx_MspInit+0xa8>)
 8001498:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800149c:	6593      	str	r3, [r2, #88]	; 0x58
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <I2Cx_MspInit+0xa8>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <I2Cx_MspInit+0xa8>)
 80014ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ae:	4a0f      	ldr	r2, [pc, #60]	; (80014ec <I2Cx_MspInit+0xa8>)
 80014b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014b4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <I2Cx_MspInit+0xa8>)
 80014b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ba:	4a0c      	ldr	r2, [pc, #48]	; (80014ec <I2Cx_MspInit+0xa8>)
 80014bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80014c0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	210f      	movs	r1, #15
 80014c6:	2021      	movs	r0, #33	; 0x21
 80014c8:	f000 fcf4 	bl	8001eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80014cc:	2021      	movs	r0, #33	; 0x21
 80014ce:	f000 fd0d 	bl	8001eec <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	210f      	movs	r1, #15
 80014d6:	2022      	movs	r0, #34	; 0x22
 80014d8:	f000 fcec 	bl	8001eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80014dc:	2022      	movs	r0, #34	; 0x22
 80014de:	f000 fd05 	bl	8001eec <HAL_NVIC_EnableIRQ>
}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	; 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000
 80014f0:	48000400 	.word	0x48000400

080014f4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <I2Cx_Init+0x54>)
 8001500:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a11      	ldr	r2, [pc, #68]	; (800154c <I2Cx_Init+0x58>)
 8001506:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff89 	bl	8001444 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 ffb6 	bl	80024a4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001538:	2100      	movs	r1, #0
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f001 fcba 	bl	8002eb4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40005800 	.word	0x40005800
 800154c:	00702681 	.word	0x00702681

08001550 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af04      	add	r7, sp, #16
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	4608      	mov	r0, r1
 800155a:	4611      	mov	r1, r2
 800155c:	461a      	mov	r2, r3
 800155e:	4603      	mov	r3, r0
 8001560:	72fb      	strb	r3, [r7, #11]
 8001562:	460b      	mov	r3, r1
 8001564:	813b      	strh	r3, [r7, #8]
 8001566:	4613      	mov	r3, r2
 8001568:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800156e:	7afb      	ldrb	r3, [r7, #11]
 8001570:	b299      	uxth	r1, r3
 8001572:	88f8      	ldrh	r0, [r7, #6]
 8001574:	893a      	ldrh	r2, [r7, #8]
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	4603      	mov	r3, r0
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f001 f95e 	bl	8002848 <HAL_I2C_Mem_Read>
 800158c:	4603      	mov	r3, r0
 800158e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001590:	7dfb      	ldrb	r3, [r7, #23]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d004      	beq.n	80015a0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001596:	7afb      	ldrb	r3, [r7, #11]
 8001598:	4619      	mov	r1, r3
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f000 f832 	bl	8001604 <I2Cx_Error>
  }
  return status;
 80015a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b08a      	sub	sp, #40	; 0x28
 80015ae:	af04      	add	r7, sp, #16
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	4608      	mov	r0, r1
 80015b4:	4611      	mov	r1, r2
 80015b6:	461a      	mov	r2, r3
 80015b8:	4603      	mov	r3, r0
 80015ba:	72fb      	strb	r3, [r7, #11]
 80015bc:	460b      	mov	r3, r1
 80015be:	813b      	strh	r3, [r7, #8]
 80015c0:	4613      	mov	r3, r2
 80015c2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80015c8:	7afb      	ldrb	r3, [r7, #11]
 80015ca:	b299      	uxth	r1, r3
 80015cc:	88f8      	ldrh	r0, [r7, #6]
 80015ce:	893a      	ldrh	r2, [r7, #8]
 80015d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	4603      	mov	r3, r0
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f001 f81d 	bl	8002620 <HAL_I2C_Mem_Write>
 80015e6:	4603      	mov	r3, r0
 80015e8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80015ea:	7dfb      	ldrb	r3, [r7, #23]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d004      	beq.n	80015fa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80015f0:	7afb      	ldrb	r3, [r7, #11]
 80015f2:	4619      	mov	r1, r3
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f000 f805 	bl	8001604 <I2Cx_Error>
  }
  return status;
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 ffd6 	bl	80025c2 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ff6c 	bl	80014f4 <I2Cx_Init>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <SENSOR_IO_Init+0x10>)
 800162a:	f7ff ff63 	bl	80014f4 <I2Cx_Init>
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20001270 	.word	0x20001270

08001638 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af02      	add	r7, sp, #8
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	460b      	mov	r3, r1
 8001644:	71bb      	strb	r3, [r7, #6]
 8001646:	4613      	mov	r3, r2
 8001648:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800164a:	79bb      	ldrb	r3, [r7, #6]
 800164c:	b29a      	uxth	r2, r3
 800164e:	79f9      	ldrb	r1, [r7, #7]
 8001650:	2301      	movs	r3, #1
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	1d7b      	adds	r3, r7, #5
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2301      	movs	r3, #1
 800165a:	4803      	ldr	r0, [pc, #12]	; (8001668 <SENSOR_IO_Write+0x30>)
 800165c:	f7ff ffa5 	bl	80015aa <I2Cx_WriteMultiple>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20001270 	.word	0x20001270

0800166c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af02      	add	r7, sp, #8
 8001672:	4603      	mov	r3, r0
 8001674:	460a      	mov	r2, r1
 8001676:	71fb      	strb	r3, [r7, #7]
 8001678:	4613      	mov	r3, r2
 800167a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001680:	79bb      	ldrb	r3, [r7, #6]
 8001682:	b29a      	uxth	r2, r3
 8001684:	79f9      	ldrb	r1, [r7, #7]
 8001686:	2301      	movs	r3, #1
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	f107 030f 	add.w	r3, r7, #15
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2301      	movs	r3, #1
 8001692:	4804      	ldr	r0, [pc, #16]	; (80016a4 <SENSOR_IO_Read+0x38>)
 8001694:	f7ff ff5c 	bl	8001550 <I2Cx_ReadMultiple>

  return read_value;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20001270 	.word	0x20001270

080016a8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af02      	add	r7, sp, #8
 80016ae:	603a      	str	r2, [r7, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
 80016b6:	460b      	mov	r3, r1
 80016b8:	71bb      	strb	r3, [r7, #6]
 80016ba:	4613      	mov	r3, r2
 80016bc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80016be:	79bb      	ldrb	r3, [r7, #6]
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	79f9      	ldrb	r1, [r7, #7]
 80016c4:	88bb      	ldrh	r3, [r7, #4]
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2301      	movs	r3, #1
 80016ce:	4804      	ldr	r0, [pc, #16]	; (80016e0 <SENSOR_IO_ReadMultiple+0x38>)
 80016d0:	f7ff ff3e 	bl	8001550 <I2Cx_ReadMultiple>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b29b      	uxth	r3, r3
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20001270 	.word	0x20001270

080016e4 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80016ee:	2300      	movs	r3, #0
 80016f0:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <BSP_ACCELERO_Init+0x74>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	4798      	blx	r3
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b6a      	cmp	r3, #106	; 0x6a
 80016fc:	d002      	beq.n	8001704 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	73fb      	strb	r3, [r7, #15]
 8001702:	e024      	b.n	800174e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <BSP_ACCELERO_Init+0x78>)
 8001706:	4a14      	ldr	r2, [pc, #80]	; (8001758 <BSP_ACCELERO_Init+0x74>)
 8001708:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800170a:	2330      	movs	r3, #48	; 0x30
 800170c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001712:	2300      	movs	r3, #0
 8001714:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001716:	2340      	movs	r3, #64	; 0x40
 8001718:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001722:	797a      	ldrb	r2, [r7, #5]
 8001724:	7abb      	ldrb	r3, [r7, #10]
 8001726:	4313      	orrs	r3, r2
 8001728:	b2db      	uxtb	r3, r3
 800172a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800172c:	7a3b      	ldrb	r3, [r7, #8]
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	b2db      	uxtb	r3, r3
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	b21a      	sxth	r2, r3
 8001738:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800173c:	4313      	orrs	r3, r2
 800173e:	b21b      	sxth	r3, r3
 8001740:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <BSP_ACCELERO_Init+0x78>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	89ba      	ldrh	r2, [r7, #12]
 800174a:	4610      	mov	r0, r2
 800174c:	4798      	blx	r3
  }  

  return ret;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2000004c 	.word	0x2000004c
 800175c:	20000368 	.word	0x20000368

08001760 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d009      	beq.n	8001784 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	2b00      	cmp	r3, #0
 8001778:	d004      	beq.n	8001784 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	4798      	blx	r3
    }
  }
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000368 	.word	0x20000368

08001790 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <BSP_HSENSOR_Init+0x38>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	20be      	movs	r0, #190	; 0xbe
 800179c:	4798      	blx	r3
 800179e:	4603      	mov	r3, r0
 80017a0:	2bbc      	cmp	r3, #188	; 0xbc
 80017a2:	d002      	beq.n	80017aa <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	e009      	b.n	80017be <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <BSP_HSENSOR_Init+0x3c>)
 80017ac:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <BSP_HSENSOR_Init+0x38>)
 80017ae:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <BSP_HSENSOR_Init+0x3c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	20be      	movs	r0, #190	; 0xbe
 80017b8:	4798      	blx	r3
    ret = HSENSOR_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80017be:	687b      	ldr	r3, [r7, #4]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000000 	.word	0x20000000
 80017cc:	2000036c 	.word	0x2000036c

080017d0 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <BSP_HSENSOR_ReadHumidity+0x18>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	20be      	movs	r0, #190	; 0xbe
 80017dc:	4798      	blx	r3
 80017de:	eef0 7a40 	vmov.f32	s15, s0
}
 80017e2:	eeb0 0a67 	vmov.f32	s0, s15
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2000036c 	.word	0x2000036c

080017ec <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <BSP_MAGNETO_Init+0x50>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	4798      	blx	r3
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b3d      	cmp	r3, #61	; 0x3d
 8001800:	d002      	beq.n	8001808 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	e013      	b.n	8001830 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <BSP_MAGNETO_Init+0x54>)
 800180a:	4a0c      	ldr	r2, [pc, #48]	; (800183c <BSP_MAGNETO_Init+0x50>)
 800180c:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800180e:	2358      	movs	r3, #88	; 0x58
 8001810:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8001812:	2300      	movs	r3, #0
 8001814:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8001816:	2300      	movs	r3, #0
 8001818:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800181a:	2308      	movs	r3, #8
 800181c:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800181e:	2340      	movs	r3, #64	; 0x40
 8001820:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <BSP_MAGNETO_Init+0x54>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	463a      	mov	r2, r7
 800182a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800182e:	4798      	blx	r3
  } 

  return ret;  
 8001830:	79fb      	ldrb	r3, [r7, #7]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000000c 	.word	0x2000000c
 8001840:	20000370 	.word	0x20000370

08001844 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <BSP_MAGNETO_GetXYZ+0x2c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d009      	beq.n	8001868 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	2b00      	cmp	r3, #0
 800185c:	d004      	beq.n	8001868 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 800185e:	4b04      	ldr	r3, [pc, #16]	; (8001870 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	4798      	blx	r3
    }
  }
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000370 	.word	0x20000370

08001874 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <BSP_PSENSOR_Init+0x38>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	20ba      	movs	r0, #186	; 0xba
 8001880:	4798      	blx	r3
 8001882:	4603      	mov	r3, r0
 8001884:	2bb1      	cmp	r3, #177	; 0xb1
 8001886:	d002      	beq.n	800188e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	e009      	b.n	80018a2 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <BSP_PSENSOR_Init+0x3c>)
 8001890:	4a06      	ldr	r2, [pc, #24]	; (80018ac <BSP_PSENSOR_Init+0x38>)
 8001892:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <BSP_PSENSOR_Init+0x3c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	20ba      	movs	r0, #186	; 0xba
 800189c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80018a2:	687b      	ldr	r3, [r7, #4]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000040 	.word	0x20000040
 80018b0:	20000374 	.word	0x20000374

080018b4 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <BSP_PSENSOR_ReadPressure+0x18>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	20ba      	movs	r0, #186	; 0xba
 80018c0:	4798      	blx	r3
 80018c2:	eef0 7a40 	vmov.f32	s15, s0
}
 80018c6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000374 	.word	0x20000374

080018d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_MspInit+0x4c>)
 80018d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018da:	4a10      	ldr	r2, [pc, #64]	; (800191c <HAL_MspInit+0x4c>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6613      	str	r3, [r2, #96]	; 0x60
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_MspInit+0x4c>)
 80018e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_MspInit+0x4c>)
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <HAL_MspInit+0x4c>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f8:	6593      	str	r3, [r2, #88]	; 0x58
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <HAL_MspInit+0x4c>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	210f      	movs	r1, #15
 800190a:	f06f 0001 	mvn.w	r0, #1
 800190e:	f000 fad1 	bl	8001eb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000

08001920 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a17      	ldr	r2, [pc, #92]	; (800199c <HAL_I2C_MspInit+0x7c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d128      	bne.n	8001994 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_I2C_MspInit+0x80>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	4a16      	ldr	r2, [pc, #88]	; (80019a0 <HAL_I2C_MspInit+0x80>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <HAL_I2C_MspInit+0x80>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800195a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800195e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001960:	2312      	movs	r3, #18
 8001962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001964:	2301      	movs	r3, #1
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800196c:	2304      	movs	r3, #4
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4619      	mov	r1, r3
 8001976:	480b      	ldr	r0, [pc, #44]	; (80019a4 <HAL_I2C_MspInit+0x84>)
 8001978:	f000 fac6 	bl	8001f08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_I2C_MspInit+0x80>)
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <HAL_I2C_MspInit+0x80>)
 8001982:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001986:	6593      	str	r3, [r2, #88]	; 0x58
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_I2C_MspInit+0x80>)
 800198a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001994:	bf00      	nop
 8001996:	3728      	adds	r7, #40	; 0x28
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40005400 	.word	0x40005400
 80019a0:	40021000 	.word	0x40021000
 80019a4:	48000400 	.word	0x48000400

080019a8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <HAL_I2C_MspDeInit+0x3c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d10f      	bne.n	80019da <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_I2C_MspDeInit+0x40>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <HAL_I2C_MspDeInit+0x40>)
 80019c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019c4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80019c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ca:	4808      	ldr	r0, [pc, #32]	; (80019ec <HAL_I2C_MspDeInit+0x44>)
 80019cc:	f000 fc2e 	bl	800222c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80019d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019d4:	4805      	ldr	r0, [pc, #20]	; (80019ec <HAL_I2C_MspDeInit+0x44>)
 80019d6:	f000 fc29 	bl	800222c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40005400 	.word	0x40005400
 80019e8:	40021000 	.word	0x40021000
 80019ec:	48000400 	.word	0x48000400

080019f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a17      	ldr	r2, [pc, #92]	; (8001a6c <HAL_UART_MspInit+0x7c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d127      	bne.n	8001a62 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <HAL_UART_MspInit+0x80>)
 8001a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a16:	4a16      	ldr	r2, [pc, #88]	; (8001a70 <HAL_UART_MspInit+0x80>)
 8001a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a1e:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_UART_MspInit+0x80>)
 8001a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_UART_MspInit+0x80>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	4a10      	ldr	r2, [pc, #64]	; (8001a70 <HAL_UART_MspInit+0x80>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_UART_MspInit+0x80>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a42:	23c0      	movs	r3, #192	; 0xc0
 8001a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a52:	2307      	movs	r3, #7
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <HAL_UART_MspInit+0x84>)
 8001a5e:	f000 fa53 	bl	8001f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	; 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40013800 	.word	0x40013800
 8001a70:	40021000 	.word	0x40021000
 8001a74:	48000400 	.word	0x48000400

08001a78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08c      	sub	sp, #48	; 0x30
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	2036      	movs	r0, #54	; 0x36
 8001a8e:	f000 fa11 	bl	8001eb4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a92:	2036      	movs	r0, #54	; 0x36
 8001a94:	f000 fa2a 	bl	8001eec <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a98:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <HAL_InitTick+0x9c>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	4a1d      	ldr	r2, [pc, #116]	; (8001b14 <HAL_InitTick+0x9c>)
 8001a9e:	f043 0310 	orr.w	r3, r3, #16
 8001aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_InitTick+0x9c>)
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa8:	f003 0310 	and.w	r3, r3, #16
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ab0:	f107 0210 	add.w	r2, r7, #16
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 f96a 	bl	8003d94 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ac0:	f002 f93c 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 8001ac4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac8:	4a13      	ldr	r2, [pc, #76]	; (8001b18 <HAL_InitTick+0xa0>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0c9b      	lsrs	r3, r3, #18
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_InitTick+0xa4>)
 8001ad6:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <HAL_InitTick+0xa8>)
 8001ad8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <HAL_InitTick+0xa4>)
 8001adc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ae0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <HAL_InitTick+0xa4>)
 8001ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_InitTick+0xa4>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_InitTick+0xa4>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001af4:	4809      	ldr	r0, [pc, #36]	; (8001b1c <HAL_InitTick+0xa4>)
 8001af6:	f002 ff49 	bl	800498c <HAL_TIM_Base_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d104      	bne.n	8001b0a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b00:	4806      	ldr	r0, [pc, #24]	; (8001b1c <HAL_InitTick+0xa4>)
 8001b02:	f002 ffa5 	bl	8004a50 <HAL_TIM_Base_Start_IT>
 8001b06:	4603      	mov	r3, r0
 8001b08:	e000      	b.n	8001b0c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3730      	adds	r7, #48	; 0x30
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	431bde83 	.word	0x431bde83
 8001b1c:	200012bc 	.word	0x200012bc
 8001b20:	40001000 	.word	0x40001000

08001b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <NMI_Handler+0x4>

08001b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <HardFault_Handler+0x4>

08001b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <MemManage_Handler+0x4>

08001b36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3a:	e7fe      	b.n	8001b3a <BusFault_Handler+0x4>

08001b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <UsageFault_Handler+0x4>

08001b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <TIM6_DAC_IRQHandler+0x10>)
 8001b56:	f002 ffeb 	bl	8004b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200012bc 	.word	0x200012bc

08001b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b6c:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <_sbrk+0x5c>)
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <_sbrk+0x60>)
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <_sbrk+0x64>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <_sbrk+0x68>)
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d207      	bcs.n	8001ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b94:	f006 fbaa 	bl	80082ec <__errno>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	230c      	movs	r3, #12
 8001b9c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ba2:	e009      	b.n	8001bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <_sbrk+0x64>)
 8001bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	200a0000 	.word	0x200a0000
 8001bc4:	00000400 	.word	0x00000400
 8001bc8:	20000378 	.word	0x20000378
 8001bcc:	20001310 	.word	0x20001310

08001bd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <SystemInit+0x64>)
 8001bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bda:	4a16      	ldr	r2, [pc, #88]	; (8001c34 <SystemInit+0x64>)
 8001bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <SystemInit+0x68>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a13      	ldr	r2, [pc, #76]	; (8001c38 <SystemInit+0x68>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <SystemInit+0x68>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <SystemInit+0x68>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a0f      	ldr	r2, [pc, #60]	; (8001c38 <SystemInit+0x68>)
 8001bfc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c00:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <SystemInit+0x68>)
 8001c08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c0c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <SystemInit+0x68>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <SystemInit+0x68>)
 8001c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <SystemInit+0x68>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <SystemInit+0x64>)
 8001c22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c26:	609a      	str	r2, [r3, #8]
#endif
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000ed00 	.word	0xe000ed00
 8001c38:	40021000 	.word	0x40021000

08001c3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c40:	f7ff ffc6 	bl	8001bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c44:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c46:	e003      	b.n	8001c50 <LoopCopyDataInit>

08001c48 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c4a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c4c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c4e:	3104      	adds	r1, #4

08001c50 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c50:	480a      	ldr	r0, [pc, #40]	; (8001c7c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c54:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c56:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c58:	d3f6      	bcc.n	8001c48 <CopyDataInit>
	ldr	r2, =_sbss
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c5c:	e002      	b.n	8001c64 <LoopFillZerobss>

08001c5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c5e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c60:	f842 3b04 	str.w	r3, [r2], #4

08001c64 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <LoopForever+0x16>)
	cmp	r2, r3
 8001c66:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c68:	d3f9      	bcc.n	8001c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c6a:	f006 fb45 	bl	80082f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c6e:	f7ff f865 	bl	8000d3c <main>

08001c72 <LoopForever>:

LoopForever:
    b LoopForever
 8001c72:	e7fe      	b.n	8001c72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c74:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001c78:	08008ddc 	.word	0x08008ddc
	ldr	r0, =_sdata
 8001c7c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c80:	200000f4 	.word	0x200000f4
	ldr	r2, =_sbss
 8001c84:	200000f4 	.word	0x200000f4
	ldr	r3, = _ebss
 8001c88:	20001310 	.word	0x20001310

08001c8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c8c:	e7fe      	b.n	8001c8c <ADC1_IRQHandler>

08001c8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c98:	2003      	movs	r0, #3
 8001c9a:	f000 f900 	bl	8001e9e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f7ff feea 	bl	8001a78 <HAL_InitTick>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	71fb      	strb	r3, [r7, #7]
 8001cae:	e001      	b.n	8001cb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cb0:	f7ff fe0e 	bl	80018d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_IncTick+0x20>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x24>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <HAL_IncTick+0x24>)
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000088 	.word	0x20000088
 8001ce4:	20001308 	.word	0x20001308

08001ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_GetTick+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20001308 	.word	0x20001308

08001d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d08:	f7ff ffee 	bl	8001ce8 <HAL_GetTick>
 8001d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d18:	d005      	beq.n	8001d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_Delay+0x40>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d26:	bf00      	nop
 8001d28:	f7ff ffde 	bl	8001ce8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d8f7      	bhi.n	8001d28 <HAL_Delay+0x28>
  {
  }
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000088 	.word	0x20000088

08001d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d60:	4013      	ands	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d76:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	60d3      	str	r3, [r2, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <__NVIC_GetPriorityGrouping+0x18>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	f003 0307 	and.w	r3, r3, #7
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	db0b      	blt.n	8001dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	f003 021f 	and.w	r2, r3, #31
 8001dc0:	4907      	ldr	r1, [pc, #28]	; (8001de0 <__NVIC_EnableIRQ+0x38>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	2001      	movs	r0, #1
 8001dca:	fa00 f202 	lsl.w	r2, r0, r2
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000e100 	.word	0xe000e100

08001de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	db0a      	blt.n	8001e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	490c      	ldr	r1, [pc, #48]	; (8001e30 <__NVIC_SetPriority+0x4c>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	0112      	lsls	r2, r2, #4
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	440b      	add	r3, r1
 8001e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e0c:	e00a      	b.n	8001e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4908      	ldr	r1, [pc, #32]	; (8001e34 <__NVIC_SetPriority+0x50>)
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	3b04      	subs	r3, #4
 8001e1c:	0112      	lsls	r2, r2, #4
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	440b      	add	r3, r1
 8001e22:	761a      	strb	r2, [r3, #24]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000e100 	.word	0xe000e100
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f1c3 0307 	rsb	r3, r3, #7
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	bf28      	it	cs
 8001e56:	2304      	movcs	r3, #4
 8001e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	2b06      	cmp	r3, #6
 8001e60:	d902      	bls.n	8001e68 <NVIC_EncodePriority+0x30>
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3b03      	subs	r3, #3
 8001e66:	e000      	b.n	8001e6a <NVIC_EncodePriority+0x32>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43da      	mvns	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	43d9      	mvns	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	4313      	orrs	r3, r2
         );
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3724      	adds	r7, #36	; 0x24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ff4c 	bl	8001d44 <__NVIC_SetPriorityGrouping>
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec6:	f7ff ff61 	bl	8001d8c <__NVIC_GetPriorityGrouping>
 8001eca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	68b9      	ldr	r1, [r7, #8]
 8001ed0:	6978      	ldr	r0, [r7, #20]
 8001ed2:	f7ff ffb1 	bl	8001e38 <NVIC_EncodePriority>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ff80 	bl	8001de4 <__NVIC_SetPriority>
}
 8001ee4:	bf00      	nop
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff ff54 	bl	8001da8 <__NVIC_EnableIRQ>
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f16:	e166      	b.n	80021e6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	4013      	ands	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8158 	beq.w	80021e0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d00b      	beq.n	8001f50 <HAL_GPIO_Init+0x48>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d007      	beq.n	8001f50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f44:	2b11      	cmp	r3, #17
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b12      	cmp	r3, #18
 8001f4e:	d130      	bne.n	8001fb2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f86:	2201      	movs	r2, #1
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	f003 0201 	and.w	r2, r3, #1
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0xea>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b12      	cmp	r3, #18
 8001ff0:	d123      	bne.n	800203a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	08da      	lsrs	r2, r3, #3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3208      	adds	r2, #8
 8001ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	220f      	movs	r2, #15
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	691a      	ldr	r2, [r3, #16]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	08da      	lsrs	r2, r3, #3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3208      	adds	r2, #8
 8002034:	6939      	ldr	r1, [r7, #16]
 8002036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	2203      	movs	r2, #3
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0203 	and.w	r2, r3, #3
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 80b2 	beq.w	80021e0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207c:	4b61      	ldr	r3, [pc, #388]	; (8002204 <HAL_GPIO_Init+0x2fc>)
 800207e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002080:	4a60      	ldr	r2, [pc, #384]	; (8002204 <HAL_GPIO_Init+0x2fc>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6613      	str	r3, [r2, #96]	; 0x60
 8002088:	4b5e      	ldr	r3, [pc, #376]	; (8002204 <HAL_GPIO_Init+0x2fc>)
 800208a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002094:	4a5c      	ldr	r2, [pc, #368]	; (8002208 <HAL_GPIO_Init+0x300>)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	3302      	adds	r3, #2
 800209c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	220f      	movs	r2, #15
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020be:	d02b      	beq.n	8002118 <HAL_GPIO_Init+0x210>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a52      	ldr	r2, [pc, #328]	; (800220c <HAL_GPIO_Init+0x304>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d025      	beq.n	8002114 <HAL_GPIO_Init+0x20c>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a51      	ldr	r2, [pc, #324]	; (8002210 <HAL_GPIO_Init+0x308>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d01f      	beq.n	8002110 <HAL_GPIO_Init+0x208>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a50      	ldr	r2, [pc, #320]	; (8002214 <HAL_GPIO_Init+0x30c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d019      	beq.n	800210c <HAL_GPIO_Init+0x204>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a4f      	ldr	r2, [pc, #316]	; (8002218 <HAL_GPIO_Init+0x310>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d013      	beq.n	8002108 <HAL_GPIO_Init+0x200>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a4e      	ldr	r2, [pc, #312]	; (800221c <HAL_GPIO_Init+0x314>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00d      	beq.n	8002104 <HAL_GPIO_Init+0x1fc>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a4d      	ldr	r2, [pc, #308]	; (8002220 <HAL_GPIO_Init+0x318>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d007      	beq.n	8002100 <HAL_GPIO_Init+0x1f8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a4c      	ldr	r2, [pc, #304]	; (8002224 <HAL_GPIO_Init+0x31c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d101      	bne.n	80020fc <HAL_GPIO_Init+0x1f4>
 80020f8:	2307      	movs	r3, #7
 80020fa:	e00e      	b.n	800211a <HAL_GPIO_Init+0x212>
 80020fc:	2308      	movs	r3, #8
 80020fe:	e00c      	b.n	800211a <HAL_GPIO_Init+0x212>
 8002100:	2306      	movs	r3, #6
 8002102:	e00a      	b.n	800211a <HAL_GPIO_Init+0x212>
 8002104:	2305      	movs	r3, #5
 8002106:	e008      	b.n	800211a <HAL_GPIO_Init+0x212>
 8002108:	2304      	movs	r3, #4
 800210a:	e006      	b.n	800211a <HAL_GPIO_Init+0x212>
 800210c:	2303      	movs	r3, #3
 800210e:	e004      	b.n	800211a <HAL_GPIO_Init+0x212>
 8002110:	2302      	movs	r3, #2
 8002112:	e002      	b.n	800211a <HAL_GPIO_Init+0x212>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <HAL_GPIO_Init+0x212>
 8002118:	2300      	movs	r3, #0
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	f002 0203 	and.w	r2, r2, #3
 8002120:	0092      	lsls	r2, r2, #2
 8002122:	4093      	lsls	r3, r2
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800212a:	4937      	ldr	r1, [pc, #220]	; (8002208 <HAL_GPIO_Init+0x300>)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	3302      	adds	r3, #2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002138:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_GPIO_Init+0x320>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800215c:	4a32      	ldr	r2, [pc, #200]	; (8002228 <HAL_GPIO_Init+0x320>)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002162:	4b31      	ldr	r3, [pc, #196]	; (8002228 <HAL_GPIO_Init+0x320>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	43db      	mvns	r3, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4013      	ands	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002186:	4a28      	ldr	r2, [pc, #160]	; (8002228 <HAL_GPIO_Init+0x320>)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800218c:	4b26      	ldr	r3, [pc, #152]	; (8002228 <HAL_GPIO_Init+0x320>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	43db      	mvns	r3, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021b0:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <HAL_GPIO_Init+0x320>)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <HAL_GPIO_Init+0x320>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	43db      	mvns	r3, r3
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021da:	4a13      	ldr	r2, [pc, #76]	; (8002228 <HAL_GPIO_Init+0x320>)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3301      	adds	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f47f ae91 	bne.w	8001f18 <HAL_GPIO_Init+0x10>
  }
}
 80021f6:	bf00      	nop
 80021f8:	371c      	adds	r7, #28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	40010000 	.word	0x40010000
 800220c:	48000400 	.word	0x48000400
 8002210:	48000800 	.word	0x48000800
 8002214:	48000c00 	.word	0x48000c00
 8002218:	48001000 	.word	0x48001000
 800221c:	48001400 	.word	0x48001400
 8002220:	48001800 	.word	0x48001800
 8002224:	48001c00 	.word	0x48001c00
 8002228:	40010400 	.word	0x40010400

0800222c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800223a:	e0c9      	b.n	80023d0 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800223c:	2201      	movs	r2, #1
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 80bc 	beq.w	80023ca <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002252:	4a66      	ldr	r2, [pc, #408]	; (80023ec <HAL_GPIO_DeInit+0x1c0>)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	220f      	movs	r2, #15
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4013      	ands	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800227a:	d02b      	beq.n	80022d4 <HAL_GPIO_DeInit+0xa8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a5c      	ldr	r2, [pc, #368]	; (80023f0 <HAL_GPIO_DeInit+0x1c4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d025      	beq.n	80022d0 <HAL_GPIO_DeInit+0xa4>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a5b      	ldr	r2, [pc, #364]	; (80023f4 <HAL_GPIO_DeInit+0x1c8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d01f      	beq.n	80022cc <HAL_GPIO_DeInit+0xa0>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a5a      	ldr	r2, [pc, #360]	; (80023f8 <HAL_GPIO_DeInit+0x1cc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d019      	beq.n	80022c8 <HAL_GPIO_DeInit+0x9c>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a59      	ldr	r2, [pc, #356]	; (80023fc <HAL_GPIO_DeInit+0x1d0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d013      	beq.n	80022c4 <HAL_GPIO_DeInit+0x98>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a58      	ldr	r2, [pc, #352]	; (8002400 <HAL_GPIO_DeInit+0x1d4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00d      	beq.n	80022c0 <HAL_GPIO_DeInit+0x94>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a57      	ldr	r2, [pc, #348]	; (8002404 <HAL_GPIO_DeInit+0x1d8>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d007      	beq.n	80022bc <HAL_GPIO_DeInit+0x90>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a56      	ldr	r2, [pc, #344]	; (8002408 <HAL_GPIO_DeInit+0x1dc>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d101      	bne.n	80022b8 <HAL_GPIO_DeInit+0x8c>
 80022b4:	2307      	movs	r3, #7
 80022b6:	e00e      	b.n	80022d6 <HAL_GPIO_DeInit+0xaa>
 80022b8:	2308      	movs	r3, #8
 80022ba:	e00c      	b.n	80022d6 <HAL_GPIO_DeInit+0xaa>
 80022bc:	2306      	movs	r3, #6
 80022be:	e00a      	b.n	80022d6 <HAL_GPIO_DeInit+0xaa>
 80022c0:	2305      	movs	r3, #5
 80022c2:	e008      	b.n	80022d6 <HAL_GPIO_DeInit+0xaa>
 80022c4:	2304      	movs	r3, #4
 80022c6:	e006      	b.n	80022d6 <HAL_GPIO_DeInit+0xaa>
 80022c8:	2303      	movs	r3, #3
 80022ca:	e004      	b.n	80022d6 <HAL_GPIO_DeInit+0xaa>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e002      	b.n	80022d6 <HAL_GPIO_DeInit+0xaa>
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <HAL_GPIO_DeInit+0xaa>
 80022d4:	2300      	movs	r3, #0
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	f002 0203 	and.w	r2, r2, #3
 80022dc:	0092      	lsls	r2, r2, #2
 80022de:	4093      	lsls	r3, r2
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d132      	bne.n	800234c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80022e6:	4b49      	ldr	r3, [pc, #292]	; (800240c <HAL_GPIO_DeInit+0x1e0>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	4947      	ldr	r1, [pc, #284]	; (800240c <HAL_GPIO_DeInit+0x1e0>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80022f4:	4b45      	ldr	r3, [pc, #276]	; (800240c <HAL_GPIO_DeInit+0x1e0>)
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	4943      	ldr	r1, [pc, #268]	; (800240c <HAL_GPIO_DeInit+0x1e0>)
 80022fe:	4013      	ands	r3, r2
 8002300:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002302:	4b42      	ldr	r3, [pc, #264]	; (800240c <HAL_GPIO_DeInit+0x1e0>)
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	43db      	mvns	r3, r3
 800230a:	4940      	ldr	r1, [pc, #256]	; (800240c <HAL_GPIO_DeInit+0x1e0>)
 800230c:	4013      	ands	r3, r2
 800230e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002310:	4b3e      	ldr	r3, [pc, #248]	; (800240c <HAL_GPIO_DeInit+0x1e0>)
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	493c      	ldr	r1, [pc, #240]	; (800240c <HAL_GPIO_DeInit+0x1e0>)
 800231a:	4013      	ands	r3, r2
 800231c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	220f      	movs	r2, #15
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800232e:	4a2f      	ldr	r2, [pc, #188]	; (80023ec <HAL_GPIO_DeInit+0x1c0>)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43da      	mvns	r2, r3
 800233e:	482b      	ldr	r0, [pc, #172]	; (80023ec <HAL_GPIO_DeInit+0x1c0>)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	400a      	ands	r2, r1
 8002346:	3302      	adds	r3, #2
 8002348:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2103      	movs	r1, #3
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	08da      	lsrs	r2, r3, #3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3208      	adds	r2, #8
 8002368:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	220f      	movs	r2, #15
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	08d2      	lsrs	r2, r2, #3
 8002380:	4019      	ands	r1, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3208      	adds	r2, #8
 8002386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	2103      	movs	r1, #3
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	401a      	ands	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	2101      	movs	r1, #1
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	401a      	ands	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	2103      	movs	r1, #3
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	401a      	ands	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	3301      	adds	r3, #1
 80023ce:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f47f af2f 	bne.w	800223c <HAL_GPIO_DeInit+0x10>
  }
}
 80023de:	bf00      	nop
 80023e0:	371c      	adds	r7, #28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40010000 	.word	0x40010000
 80023f0:	48000400 	.word	0x48000400
 80023f4:	48000800 	.word	0x48000800
 80023f8:	48000c00 	.word	0x48000c00
 80023fc:	48001000 	.word	0x48001000
 8002400:	48001400 	.word	0x48001400
 8002404:	48001800 	.word	0x48001800
 8002408:	48001c00 	.word	0x48001c00
 800240c:	40010400 	.word	0x40010400

08002410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
 800242c:	e001      	b.n	8002432 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002450:	787b      	ldrb	r3, [r7, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800245c:	e002      	b.n	8002464 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4013      	ands	r3, r2
 8002488:	041a      	lsls	r2, r3, #16
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	43d9      	mvns	r1, r3
 800248e:	887b      	ldrh	r3, [r7, #2]
 8002490:	400b      	ands	r3, r1
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	619a      	str	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e081      	b.n	80025ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff fa28 	bl	8001920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2224      	movs	r2, #36	; 0x24
 80024d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0201 	bic.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002504:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d107      	bne.n	800251e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	e006      	b.n	800252c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800252a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d104      	bne.n	800253e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800253c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800254c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002550:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002560:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	ea42 0103 	orr.w	r1, r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	021a      	lsls	r2, r3, #8
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69d9      	ldr	r1, [r3, #28]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1a      	ldr	r2, [r3, #32]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e021      	b.n	8002618 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2224      	movs	r2, #36	; 0x24
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff f9db 	bl	80019a8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	461a      	mov	r2, r3
 800262e:	4603      	mov	r3, r0
 8002630:	817b      	strh	r3, [r7, #10]
 8002632:	460b      	mov	r3, r1
 8002634:	813b      	strh	r3, [r7, #8]
 8002636:	4613      	mov	r3, r2
 8002638:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b20      	cmp	r3, #32
 8002644:	f040 80f9 	bne.w	800283a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <HAL_I2C_Mem_Write+0x34>
 800264e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0ed      	b.n	800283c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_I2C_Mem_Write+0x4e>
 800266a:	2302      	movs	r3, #2
 800266c:	e0e6      	b.n	800283c <HAL_I2C_Mem_Write+0x21c>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002676:	f7ff fb37 	bl	8001ce8 <HAL_GetTick>
 800267a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2319      	movs	r3, #25
 8002682:	2201      	movs	r2, #1
 8002684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 fac3 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0d1      	b.n	800283c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2221      	movs	r2, #33	; 0x21
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2240      	movs	r2, #64	; 0x40
 80026a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a3a      	ldr	r2, [r7, #32]
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026c0:	88f8      	ldrh	r0, [r7, #6]
 80026c2:	893a      	ldrh	r2, [r7, #8]
 80026c4:	8979      	ldrh	r1, [r7, #10]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	4603      	mov	r3, r0
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f9d3 	bl	8002a7c <I2C_RequestMemoryWrite>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0a9      	b.n	800283c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2bff      	cmp	r3, #255	; 0xff
 80026f0:	d90e      	bls.n	8002710 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	22ff      	movs	r2, #255	; 0xff
 80026f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	8979      	ldrh	r1, [r7, #10]
 8002700:	2300      	movs	r3, #0
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 fba5 	bl	8002e58 <I2C_TransferConfig>
 800270e:	e00f      	b.n	8002730 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271e:	b2da      	uxtb	r2, r3
 8002720:	8979      	ldrh	r1, [r7, #10]
 8002722:	2300      	movs	r3, #0
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fb94 	bl	8002e58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 faad 	bl	8002c94 <I2C_WaitOnTXISFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e07b      	b.n	800283c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	781a      	ldrb	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d034      	beq.n	80027e8 <HAL_I2C_Mem_Write+0x1c8>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002782:	2b00      	cmp	r3, #0
 8002784:	d130      	bne.n	80027e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278c:	2200      	movs	r2, #0
 800278e:	2180      	movs	r1, #128	; 0x80
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fa3f 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e04d      	b.n	800283c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2bff      	cmp	r3, #255	; 0xff
 80027a8:	d90e      	bls.n	80027c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	22ff      	movs	r2, #255	; 0xff
 80027ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	8979      	ldrh	r1, [r7, #10]
 80027b8:	2300      	movs	r3, #0
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fb49 	bl	8002e58 <I2C_TransferConfig>
 80027c6:	e00f      	b.n	80027e8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	8979      	ldrh	r1, [r7, #10]
 80027da:	2300      	movs	r3, #0
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fb38 	bl	8002e58 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d19e      	bne.n	8002730 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fa8c 	bl	8002d14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e01a      	b.n	800283c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2220      	movs	r2, #32
 800280c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6859      	ldr	r1, [r3, #4]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <HAL_I2C_Mem_Write+0x224>)
 800281a:	400b      	ands	r3, r1
 800281c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800283a:	2302      	movs	r3, #2
  }
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	fe00e800 	.word	0xfe00e800

08002848 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	4608      	mov	r0, r1
 8002852:	4611      	mov	r1, r2
 8002854:	461a      	mov	r2, r3
 8002856:	4603      	mov	r3, r0
 8002858:	817b      	strh	r3, [r7, #10]
 800285a:	460b      	mov	r3, r1
 800285c:	813b      	strh	r3, [r7, #8]
 800285e:	4613      	mov	r3, r2
 8002860:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b20      	cmp	r3, #32
 800286c:	f040 80fd 	bne.w	8002a6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_I2C_Mem_Read+0x34>
 8002876:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002882:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0f1      	b.n	8002a6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_I2C_Mem_Read+0x4e>
 8002892:	2302      	movs	r3, #2
 8002894:	e0ea      	b.n	8002a6c <HAL_I2C_Mem_Read+0x224>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800289e:	f7ff fa23 	bl	8001ce8 <HAL_GetTick>
 80028a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2319      	movs	r3, #25
 80028aa:	2201      	movs	r2, #1
 80028ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f9af 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0d5      	b.n	8002a6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2222      	movs	r2, #34	; 0x22
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2240      	movs	r2, #64	; 0x40
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a3a      	ldr	r2, [r7, #32]
 80028da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028e8:	88f8      	ldrh	r0, [r7, #6]
 80028ea:	893a      	ldrh	r2, [r7, #8]
 80028ec:	8979      	ldrh	r1, [r7, #10]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	4603      	mov	r3, r0
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f913 	bl	8002b24 <I2C_RequestMemoryRead>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0ad      	b.n	8002a6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	2bff      	cmp	r3, #255	; 0xff
 8002918:	d90e      	bls.n	8002938 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	22ff      	movs	r2, #255	; 0xff
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002924:	b2da      	uxtb	r2, r3
 8002926:	8979      	ldrh	r1, [r7, #10]
 8002928:	4b52      	ldr	r3, [pc, #328]	; (8002a74 <HAL_I2C_Mem_Read+0x22c>)
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 fa91 	bl	8002e58 <I2C_TransferConfig>
 8002936:	e00f      	b.n	8002958 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002946:	b2da      	uxtb	r2, r3
 8002948:	8979      	ldrh	r1, [r7, #10]
 800294a:	4b4a      	ldr	r3, [pc, #296]	; (8002a74 <HAL_I2C_Mem_Read+0x22c>)
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fa80 	bl	8002e58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295e:	2200      	movs	r2, #0
 8002960:	2104      	movs	r1, #4
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f956 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07c      	b.n	8002a6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d034      	beq.n	8002a18 <HAL_I2C_Mem_Read+0x1d0>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d130      	bne.n	8002a18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029bc:	2200      	movs	r2, #0
 80029be:	2180      	movs	r1, #128	; 0x80
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f927 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e04d      	b.n	8002a6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2bff      	cmp	r3, #255	; 0xff
 80029d8:	d90e      	bls.n	80029f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	22ff      	movs	r2, #255	; 0xff
 80029de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	8979      	ldrh	r1, [r7, #10]
 80029e8:	2300      	movs	r3, #0
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fa31 	bl	8002e58 <I2C_TransferConfig>
 80029f6:	e00f      	b.n	8002a18 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	8979      	ldrh	r1, [r7, #10]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fa20 	bl	8002e58 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d19a      	bne.n	8002958 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f974 	bl	8002d14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e01a      	b.n	8002a6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_I2C_Mem_Read+0x230>)
 8002a4a:	400b      	ands	r3, r1
 8002a4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a6a:	2302      	movs	r3, #2
  }
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	80002400 	.word	0x80002400
 8002a78:	fe00e800 	.word	0xfe00e800

08002a7c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	4608      	mov	r0, r1
 8002a86:	4611      	mov	r1, r2
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	817b      	strh	r3, [r7, #10]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	813b      	strh	r3, [r7, #8]
 8002a92:	4613      	mov	r3, r2
 8002a94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	8979      	ldrh	r1, [r7, #10]
 8002a9c:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <I2C_RequestMemoryWrite+0xa4>)
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f9d7 	bl	8002e58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	69b9      	ldr	r1, [r7, #24]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f8f0 	bl	8002c94 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e02c      	b.n	8002b18 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d105      	bne.n	8002ad0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac4:	893b      	ldrh	r3, [r7, #8]
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	629a      	str	r2, [r3, #40]	; 0x28
 8002ace:	e015      	b.n	8002afc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ad0:	893b      	ldrh	r3, [r7, #8]
 8002ad2:	0a1b      	lsrs	r3, r3, #8
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	69b9      	ldr	r1, [r7, #24]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f8d6 	bl	8002c94 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e012      	b.n	8002b18 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002af2:	893b      	ldrh	r3, [r7, #8]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	2200      	movs	r2, #0
 8002b04:	2180      	movs	r1, #128	; 0x80
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f884 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	80002000 	.word	0x80002000

08002b24 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	4608      	mov	r0, r1
 8002b2e:	4611      	mov	r1, r2
 8002b30:	461a      	mov	r2, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	817b      	strh	r3, [r7, #10]
 8002b36:	460b      	mov	r3, r1
 8002b38:	813b      	strh	r3, [r7, #8]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	8979      	ldrh	r1, [r7, #10]
 8002b44:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <I2C_RequestMemoryRead+0xa4>)
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f984 	bl	8002e58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	69b9      	ldr	r1, [r7, #24]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f89d 	bl	8002c94 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e02c      	b.n	8002bbe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d105      	bne.n	8002b76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b6a:	893b      	ldrh	r3, [r7, #8]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	629a      	str	r2, [r3, #40]	; 0x28
 8002b74:	e015      	b.n	8002ba2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	69b9      	ldr	r1, [r7, #24]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f883 	bl	8002c94 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e012      	b.n	8002bbe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b98:	893b      	ldrh	r3, [r7, #8]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2140      	movs	r1, #64	; 0x40
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f831 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	80002000 	.word	0x80002000

08002bcc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d103      	bne.n	8002bea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d007      	beq.n	8002c08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	619a      	str	r2, [r3, #24]
  }
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c24:	e022      	b.n	8002c6c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c2c:	d01e      	beq.n	8002c6c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2e:	f7ff f85b 	bl	8001ce8 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d302      	bcc.n	8002c44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d113      	bne.n	8002c6c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	f043 0220 	orr.w	r2, r3, #32
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e00f      	b.n	8002c8c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4013      	ands	r3, r2
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d0cd      	beq.n	8002c26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ca0:	e02c      	b.n	8002cfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f870 	bl	8002d8c <I2C_IsAcknowledgeFailed>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e02a      	b.n	8002d0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cbc:	d01e      	beq.n	8002cfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cbe:	f7ff f813 	bl	8001ce8 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d302      	bcc.n	8002cd4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d113      	bne.n	8002cfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd8:	f043 0220 	orr.w	r2, r3, #32
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e007      	b.n	8002d0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d1cb      	bne.n	8002ca2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d20:	e028      	b.n	8002d74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f830 	bl	8002d8c <I2C_IsAcknowledgeFailed>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e026      	b.n	8002d84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d36:	f7fe ffd7 	bl	8001ce8 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d302      	bcc.n	8002d4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d113      	bne.n	8002d74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d50:	f043 0220 	orr.w	r2, r3, #32
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e007      	b.n	8002d84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b20      	cmp	r3, #32
 8002d80:	d1cf      	bne.n	8002d22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b10      	cmp	r3, #16
 8002da4:	d151      	bne.n	8002e4a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da6:	e022      	b.n	8002dee <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dae:	d01e      	beq.n	8002dee <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db0:	f7fe ff9a 	bl	8001ce8 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d302      	bcc.n	8002dc6 <I2C_IsAcknowledgeFailed+0x3a>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d113      	bne.n	8002dee <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	f043 0220 	orr.w	r2, r3, #32
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e02e      	b.n	8002e4c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d1d5      	bne.n	8002da8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2210      	movs	r2, #16
 8002e02:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff fedd 	bl	8002bcc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <I2C_IsAcknowledgeFailed+0xc8>)
 8002e1e:	400b      	ands	r3, r1
 8002e20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	f043 0204 	orr.w	r2, r3, #4
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	fe00e800 	.word	0xfe00e800

08002e58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	460b      	mov	r3, r1
 8002e64:	817b      	strh	r3, [r7, #10]
 8002e66:	4613      	mov	r3, r2
 8002e68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	0d5b      	lsrs	r3, r3, #21
 8002e74:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e78:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <I2C_TransferConfig+0x58>)
 8002e7a:	430b      	orrs	r3, r1
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	ea02 0103 	and.w	r1, r2, r3
 8002e82:	897b      	ldrh	r3, [r7, #10]
 8002e84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e88:	7a7b      	ldrb	r3, [r7, #9]
 8002e8a:	041b      	lsls	r3, r3, #16
 8002e8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	431a      	orrs	r2, r3
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	03ff63ff 	.word	0x03ff63ff

08002eb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	d138      	bne.n	8002f3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e032      	b.n	8002f3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2224      	movs	r2, #36	; 0x24
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6819      	ldr	r1, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e000      	b.n	8002f3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
  }
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b085      	sub	sp, #20
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d139      	bne.n	8002fd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e033      	b.n	8002fd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2224      	movs	r2, #36	; 0x24
 8002f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0201 	bic.w	r2, r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	021b      	lsls	r3, r3, #8
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e000      	b.n	8002fd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fd4:	2302      	movs	r3, #2
  }
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fe8:	4b0d      	ldr	r3, [pc, #52]	; (8003020 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff4:	d102      	bne.n	8002ffc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ffa:	e00b      	b.n	8003014 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002ffc:	4b08      	ldr	r3, [pc, #32]	; (8003020 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300a:	d102      	bne.n	8003012 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800300c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003010:	e000      	b.n	8003014 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003012:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40007000 	.word	0x40007000

08003024 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d141      	bne.n	80030b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003032:	4b4b      	ldr	r3, [pc, #300]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800303a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303e:	d131      	bne.n	80030a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003040:	4b47      	ldr	r3, [pc, #284]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003046:	4a46      	ldr	r2, [pc, #280]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800304c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003050:	4b43      	ldr	r3, [pc, #268]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003058:	4a41      	ldr	r2, [pc, #260]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800305e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003060:	4b40      	ldr	r3, [pc, #256]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2232      	movs	r2, #50	; 0x32
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	4a3f      	ldr	r2, [pc, #252]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800306c:	fba2 2303 	umull	r2, r3, r2, r3
 8003070:	0c9b      	lsrs	r3, r3, #18
 8003072:	3301      	adds	r3, #1
 8003074:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003076:	e002      	b.n	800307e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3b01      	subs	r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800307e:	4b38      	ldr	r3, [pc, #224]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308a:	d102      	bne.n	8003092 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f2      	bne.n	8003078 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003092:	4b33      	ldr	r3, [pc, #204]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800309a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309e:	d158      	bne.n	8003152 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e057      	b.n	8003154 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030a4:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030aa:	4a2d      	ldr	r2, [pc, #180]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80030b4:	e04d      	b.n	8003152 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030bc:	d141      	bne.n	8003142 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030be:	4b28      	ldr	r3, [pc, #160]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ca:	d131      	bne.n	8003130 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030cc:	4b24      	ldr	r3, [pc, #144]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030d2:	4a23      	ldr	r2, [pc, #140]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030dc:	4b20      	ldr	r3, [pc, #128]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030e4:	4a1e      	ldr	r2, [pc, #120]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80030ec:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2232      	movs	r2, #50	; 0x32
 80030f2:	fb02 f303 	mul.w	r3, r2, r3
 80030f6:	4a1c      	ldr	r2, [pc, #112]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	0c9b      	lsrs	r3, r3, #18
 80030fe:	3301      	adds	r3, #1
 8003100:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003102:	e002      	b.n	800310a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3b01      	subs	r3, #1
 8003108:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800310a:	4b15      	ldr	r3, [pc, #84]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003116:	d102      	bne.n	800311e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f2      	bne.n	8003104 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312a:	d112      	bne.n	8003152 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e011      	b.n	8003154 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003136:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003140:	e007      	b.n	8003152 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003142:	4b07      	ldr	r3, [pc, #28]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800314a:	4a05      	ldr	r2, [pc, #20]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800314c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003150:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	40007000 	.word	0x40007000
 8003164:	20000080 	.word	0x20000080
 8003168:	431bde83 	.word	0x431bde83

0800316c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d102      	bne.n	8003180 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f000 bc16 	b.w	80039ac <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003180:	4ba0      	ldr	r3, [pc, #640]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 030c 	and.w	r3, r3, #12
 8003188:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800318a:	4b9e      	ldr	r3, [pc, #632]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80e4 	beq.w	800336a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <HAL_RCC_OscConfig+0x4c>
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2b0c      	cmp	r3, #12
 80031ac:	f040 808b 	bne.w	80032c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	f040 8087 	bne.w	80032c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031b8:	4b92      	ldr	r3, [pc, #584]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_OscConfig+0x64>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e3ed      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1a      	ldr	r2, [r3, #32]
 80031d4:	4b8b      	ldr	r3, [pc, #556]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d004      	beq.n	80031ea <HAL_RCC_OscConfig+0x7e>
 80031e0:	4b88      	ldr	r3, [pc, #544]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e8:	e005      	b.n	80031f6 <HAL_RCC_OscConfig+0x8a>
 80031ea:	4b86      	ldr	r3, [pc, #536]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 80031ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d223      	bcs.n	8003242 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fdfa 	bl	8003df8 <RCC_SetFlashLatencyFromMSIRange>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e3ce      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800320e:	4b7d      	ldr	r3, [pc, #500]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a7c      	ldr	r2, [pc, #496]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 8003214:	f043 0308 	orr.w	r3, r3, #8
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b7a      	ldr	r3, [pc, #488]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4977      	ldr	r1, [pc, #476]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 8003228:	4313      	orrs	r3, r2
 800322a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800322c:	4b75      	ldr	r3, [pc, #468]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	021b      	lsls	r3, r3, #8
 800323a:	4972      	ldr	r1, [pc, #456]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]
 8003240:	e025      	b.n	800328e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003242:	4b70      	ldr	r3, [pc, #448]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a6f      	ldr	r2, [pc, #444]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 8003248:	f043 0308 	orr.w	r3, r3, #8
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4b6d      	ldr	r3, [pc, #436]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	496a      	ldr	r1, [pc, #424]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 800325c:	4313      	orrs	r3, r2
 800325e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003260:	4b68      	ldr	r3, [pc, #416]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	4965      	ldr	r1, [pc, #404]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fdba 	bl	8003df8 <RCC_SetFlashLatencyFromMSIRange>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e38e      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800328e:	f000 fcbf 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8003292:	4601      	mov	r1, r0
 8003294:	4b5b      	ldr	r3, [pc, #364]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	4a5a      	ldr	r2, [pc, #360]	; (8003408 <HAL_RCC_OscConfig+0x29c>)
 80032a0:	5cd3      	ldrb	r3, [r2, r3]
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	fa21 f303 	lsr.w	r3, r1, r3
 80032aa:	4a58      	ldr	r2, [pc, #352]	; (800340c <HAL_RCC_OscConfig+0x2a0>)
 80032ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032ae:	4b58      	ldr	r3, [pc, #352]	; (8003410 <HAL_RCC_OscConfig+0x2a4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe fbe0 	bl	8001a78 <HAL_InitTick>
 80032b8:	4603      	mov	r3, r0
 80032ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d052      	beq.n	8003368 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	e372      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d032      	beq.n	8003334 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032ce:	4b4d      	ldr	r3, [pc, #308]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a4c      	ldr	r2, [pc, #304]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032da:	f7fe fd05 	bl	8001ce8 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032e2:	f7fe fd01 	bl	8001ce8 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e35b      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032f4:	4b43      	ldr	r3, [pc, #268]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003300:	4b40      	ldr	r3, [pc, #256]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a3f      	ldr	r2, [pc, #252]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 8003306:	f043 0308 	orr.w	r3, r3, #8
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	4b3d      	ldr	r3, [pc, #244]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	493a      	ldr	r1, [pc, #232]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800331e:	4b39      	ldr	r3, [pc, #228]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	4935      	ldr	r1, [pc, #212]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 800332e:	4313      	orrs	r3, r2
 8003330:	604b      	str	r3, [r1, #4]
 8003332:	e01a      	b.n	800336a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003334:	4b33      	ldr	r3, [pc, #204]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a32      	ldr	r2, [pc, #200]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003340:	f7fe fcd2 	bl	8001ce8 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003348:	f7fe fcce 	bl	8001ce8 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e328      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800335a:	4b2a      	ldr	r3, [pc, #168]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x1dc>
 8003366:	e000      	b.n	800336a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003368:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d073      	beq.n	800345e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d005      	beq.n	8003388 <HAL_RCC_OscConfig+0x21c>
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b0c      	cmp	r3, #12
 8003380:	d10e      	bne.n	80033a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d10b      	bne.n	80033a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d063      	beq.n	800345c <HAL_RCC_OscConfig+0x2f0>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d15f      	bne.n	800345c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e305      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a8:	d106      	bne.n	80033b8 <HAL_RCC_OscConfig+0x24c>
 80033aa:	4b16      	ldr	r3, [pc, #88]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a15      	ldr	r2, [pc, #84]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e01d      	b.n	80033f4 <HAL_RCC_OscConfig+0x288>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0x270>
 80033c2:	4b10      	ldr	r3, [pc, #64]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a0f      	ldr	r2, [pc, #60]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 80033c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a0c      	ldr	r2, [pc, #48]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e00b      	b.n	80033f4 <HAL_RCC_OscConfig+0x288>
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a08      	ldr	r2, [pc, #32]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 80033e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a05      	ldr	r2, [pc, #20]	; (8003404 <HAL_RCC_OscConfig+0x298>)
 80033ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01b      	beq.n	8003434 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fe fc74 	bl	8001ce8 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003402:	e010      	b.n	8003426 <HAL_RCC_OscConfig+0x2ba>
 8003404:	40021000 	.word	0x40021000
 8003408:	08008d38 	.word	0x08008d38
 800340c:	20000080 	.word	0x20000080
 8003410:	20000084 	.word	0x20000084
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003414:	f7fe fc68 	bl	8001ce8 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e2c2      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003426:	4baf      	ldr	r3, [pc, #700]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x2a8>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fe fc58 	bl	8001ce8 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7fe fc54 	bl	8001ce8 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e2ae      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800344e:	4ba5      	ldr	r3, [pc, #660]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x2d0>
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d060      	beq.n	800352c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2b04      	cmp	r3, #4
 800346e:	d005      	beq.n	800347c <HAL_RCC_OscConfig+0x310>
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2b0c      	cmp	r3, #12
 8003474:	d119      	bne.n	80034aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d116      	bne.n	80034aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800347c:	4b99      	ldr	r3, [pc, #612]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_OscConfig+0x328>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e28b      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003494:	4b93      	ldr	r3, [pc, #588]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	061b      	lsls	r3, r3, #24
 80034a2:	4990      	ldr	r1, [pc, #576]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034a8:	e040      	b.n	800352c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d023      	beq.n	80034fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b2:	4b8c      	ldr	r3, [pc, #560]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a8b      	ldr	r2, [pc, #556]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 80034b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fe fc13 	bl	8001ce8 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c6:	f7fe fc0f 	bl	8001ce8 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e269      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d8:	4b82      	ldr	r3, [pc, #520]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e4:	4b7f      	ldr	r3, [pc, #508]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	061b      	lsls	r3, r3, #24
 80034f2:	497c      	ldr	r1, [pc, #496]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
 80034f8:	e018      	b.n	800352c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fa:	4b7a      	ldr	r3, [pc, #488]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a79      	ldr	r2, [pc, #484]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 8003500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003506:	f7fe fbef 	bl	8001ce8 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350e:	f7fe fbeb 	bl	8001ce8 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e245      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003520:	4b70      	ldr	r3, [pc, #448]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f0      	bne.n	800350e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d03c      	beq.n	80035b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01c      	beq.n	800357a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003540:	4b68      	ldr	r3, [pc, #416]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 8003542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003546:	4a67      	ldr	r2, [pc, #412]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fe fbca 	bl	8001ce8 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003558:	f7fe fbc6 	bl	8001ce8 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e220      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800356a:	4b5e      	ldr	r3, [pc, #376]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 800356c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0ef      	beq.n	8003558 <HAL_RCC_OscConfig+0x3ec>
 8003578:	e01b      	b.n	80035b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357a:	4b5a      	ldr	r3, [pc, #360]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 800357c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003580:	4a58      	ldr	r2, [pc, #352]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358a:	f7fe fbad 	bl	8001ce8 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003592:	f7fe fba9 	bl	8001ce8 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e203      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a4:	4b4f      	ldr	r3, [pc, #316]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 80035a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1ef      	bne.n	8003592 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80a6 	beq.w	800370c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c0:	2300      	movs	r3, #0
 80035c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035c4:	4b47      	ldr	r3, [pc, #284]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10d      	bne.n	80035ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d0:	4b44      	ldr	r3, [pc, #272]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	4a43      	ldr	r2, [pc, #268]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 80035d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035da:	6593      	str	r3, [r2, #88]	; 0x58
 80035dc:	4b41      	ldr	r3, [pc, #260]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e8:	2301      	movs	r3, #1
 80035ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ec:	4b3e      	ldr	r3, [pc, #248]	; (80036e8 <HAL_RCC_OscConfig+0x57c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d118      	bne.n	800362a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035f8:	4b3b      	ldr	r3, [pc, #236]	; (80036e8 <HAL_RCC_OscConfig+0x57c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a3a      	ldr	r2, [pc, #232]	; (80036e8 <HAL_RCC_OscConfig+0x57c>)
 80035fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003602:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003604:	f7fe fb70 	bl	8001ce8 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360c:	f7fe fb6c 	bl	8001ce8 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e1c6      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800361e:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <HAL_RCC_OscConfig+0x57c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d108      	bne.n	8003644 <HAL_RCC_OscConfig+0x4d8>
 8003632:	4b2c      	ldr	r3, [pc, #176]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003638:	4a2a      	ldr	r2, [pc, #168]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003642:	e024      	b.n	800368e <HAL_RCC_OscConfig+0x522>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b05      	cmp	r3, #5
 800364a:	d110      	bne.n	800366e <HAL_RCC_OscConfig+0x502>
 800364c:	4b25      	ldr	r3, [pc, #148]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003652:	4a24      	ldr	r2, [pc, #144]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 8003654:	f043 0304 	orr.w	r3, r3, #4
 8003658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800365c:	4b21      	ldr	r3, [pc, #132]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	4a20      	ldr	r2, [pc, #128]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800366c:	e00f      	b.n	800368e <HAL_RCC_OscConfig+0x522>
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 8003670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003674:	4a1b      	ldr	r2, [pc, #108]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800367e:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003684:	4a17      	ldr	r2, [pc, #92]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 8003686:	f023 0304 	bic.w	r3, r3, #4
 800368a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d016      	beq.n	80036c4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003696:	f7fe fb27 	bl	8001ce8 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800369c:	e00a      	b.n	80036b4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369e:	f7fe fb23 	bl	8001ce8 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e17b      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b4:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_RCC_OscConfig+0x578>)
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0ed      	beq.n	800369e <HAL_RCC_OscConfig+0x532>
 80036c2:	e01a      	b.n	80036fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c4:	f7fe fb10 	bl	8001ce8 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ca:	e00f      	b.n	80036ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036cc:	f7fe fb0c 	bl	8001ce8 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036da:	4293      	cmp	r3, r2
 80036dc:	d906      	bls.n	80036ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e164      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ec:	4ba8      	ldr	r3, [pc, #672]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1e8      	bne.n	80036cc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036fa:	7ffb      	ldrb	r3, [r7, #31]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003700:	4ba3      	ldr	r3, [pc, #652]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	4aa2      	ldr	r2, [pc, #648]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 8003706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	2b00      	cmp	r3, #0
 8003716:	d03c      	beq.n	8003792 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01c      	beq.n	800375a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003720:	4b9b      	ldr	r3, [pc, #620]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 8003722:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003726:	4a9a      	ldr	r2, [pc, #616]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003730:	f7fe fada 	bl	8001ce8 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003738:	f7fe fad6 	bl	8001ce8 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e130      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800374a:	4b91      	ldr	r3, [pc, #580]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 800374c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ef      	beq.n	8003738 <HAL_RCC_OscConfig+0x5cc>
 8003758:	e01b      	b.n	8003792 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800375a:	4b8d      	ldr	r3, [pc, #564]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 800375c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003760:	4a8b      	ldr	r2, [pc, #556]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376a:	f7fe fabd 	bl	8001ce8 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003772:	f7fe fab9 	bl	8001ce8 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e113      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003784:	4b82      	ldr	r3, [pc, #520]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 8003786:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1ef      	bne.n	8003772 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8107 	beq.w	80039aa <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	f040 80cb 	bne.w	800393c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037a6:	4b7a      	ldr	r3, [pc, #488]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f003 0203 	and.w	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d12c      	bne.n	8003814 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	3b01      	subs	r3, #1
 80037c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d123      	bne.n	8003814 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d11b      	bne.n	8003814 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d113      	bne.n	8003814 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f6:	085b      	lsrs	r3, r3, #1
 80037f8:	3b01      	subs	r3, #1
 80037fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d109      	bne.n	8003814 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	085b      	lsrs	r3, r3, #1
 800380c:	3b01      	subs	r3, #1
 800380e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003810:	429a      	cmp	r2, r3
 8003812:	d06d      	beq.n	80038f0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2b0c      	cmp	r3, #12
 8003818:	d068      	beq.n	80038ec <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800381a:	4b5d      	ldr	r3, [pc, #372]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d105      	bne.n	8003832 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003826:	4b5a      	ldr	r3, [pc, #360]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e0ba      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003836:	4b56      	ldr	r3, [pc, #344]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a55      	ldr	r2, [pc, #340]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 800383c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003840:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003842:	f7fe fa51 	bl	8001ce8 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384a:	f7fe fa4d 	bl	8001ce8 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e0a7      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800385c:	4b4c      	ldr	r3, [pc, #304]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f0      	bne.n	800384a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003868:	4b49      	ldr	r3, [pc, #292]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	4b49      	ldr	r3, [pc, #292]	; (8003994 <HAL_RCC_OscConfig+0x828>)
 800386e:	4013      	ands	r3, r2
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003878:	3a01      	subs	r2, #1
 800387a:	0112      	lsls	r2, r2, #4
 800387c:	4311      	orrs	r1, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003882:	0212      	lsls	r2, r2, #8
 8003884:	4311      	orrs	r1, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800388a:	0852      	lsrs	r2, r2, #1
 800388c:	3a01      	subs	r2, #1
 800388e:	0552      	lsls	r2, r2, #21
 8003890:	4311      	orrs	r1, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003896:	0852      	lsrs	r2, r2, #1
 8003898:	3a01      	subs	r2, #1
 800389a:	0652      	lsls	r2, r2, #25
 800389c:	4311      	orrs	r1, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038a2:	06d2      	lsls	r2, r2, #27
 80038a4:	430a      	orrs	r2, r1
 80038a6:	493a      	ldr	r1, [pc, #232]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038ac:	4b38      	ldr	r3, [pc, #224]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a37      	ldr	r2, [pc, #220]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 80038b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038b8:	4b35      	ldr	r3, [pc, #212]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	4a34      	ldr	r2, [pc, #208]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 80038be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038c4:	f7fe fa10 	bl	8001ce8 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fe fa0c 	bl	8001ce8 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e066      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038de:	4b2c      	ldr	r3, [pc, #176]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038ea:	e05e      	b.n	80039aa <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e05d      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038f0:	4b27      	ldr	r3, [pc, #156]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d156      	bne.n	80039aa <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038fc:	4b24      	ldr	r3, [pc, #144]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a23      	ldr	r2, [pc, #140]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 8003902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003906:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003908:	4b21      	ldr	r3, [pc, #132]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a20      	ldr	r2, [pc, #128]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 800390e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003912:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003914:	f7fe f9e8 	bl	8001ce8 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391c:	f7fe f9e4 	bl	8001ce8 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e03e      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392e:	4b18      	ldr	r3, [pc, #96]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x7b0>
 800393a:	e036      	b.n	80039aa <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b0c      	cmp	r3, #12
 8003940:	d031      	beq.n	80039a6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003942:	4b13      	ldr	r3, [pc, #76]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a12      	ldr	r2, [pc, #72]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 8003948:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800394c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d105      	bne.n	8003966 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	4a0c      	ldr	r2, [pc, #48]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 8003960:	f023 0303 	bic.w	r3, r3, #3
 8003964:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003966:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	4a09      	ldr	r2, [pc, #36]	; (8003990 <HAL_RCC_OscConfig+0x824>)
 800396c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003974:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003976:	f7fe f9b7 	bl	8001ce8 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800397c:	e00c      	b.n	8003998 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800397e:	f7fe f9b3 	bl	8001ce8 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d905      	bls.n	8003998 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e00d      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
 8003990:	40021000 	.word	0x40021000
 8003994:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003998:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <HAL_RCC_OscConfig+0x848>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1ec      	bne.n	800397e <HAL_RCC_OscConfig+0x812>
 80039a4:	e001      	b.n	80039aa <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3720      	adds	r7, #32
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000

080039b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e10f      	b.n	8003bf0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039d0:	4b89      	ldr	r3, [pc, #548]	; (8003bf8 <HAL_RCC_ClockConfig+0x240>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 030f 	and.w	r3, r3, #15
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d910      	bls.n	8003a00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039de:	4b86      	ldr	r3, [pc, #536]	; (8003bf8 <HAL_RCC_ClockConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 020f 	bic.w	r2, r3, #15
 80039e6:	4984      	ldr	r1, [pc, #528]	; (8003bf8 <HAL_RCC_ClockConfig+0x240>)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ee:	4b82      	ldr	r3, [pc, #520]	; (8003bf8 <HAL_RCC_ClockConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0f7      	b.n	8003bf0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8089 	beq.w	8003b20 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d133      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a16:	4b79      	ldr	r3, [pc, #484]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0e4      	b.n	8003bf0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003a26:	f000 fa41 	bl	8003eac <RCC_GetSysClockFreqFromPLLSource>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	4b74      	ldr	r3, [pc, #464]	; (8003c00 <HAL_RCC_ClockConfig+0x248>)
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d955      	bls.n	8003ade <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a32:	4b72      	ldr	r3, [pc, #456]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a3e:	4b6f      	ldr	r3, [pc, #444]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a46:	4a6d      	ldr	r2, [pc, #436]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a4e:	2380      	movs	r3, #128	; 0x80
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	e044      	b.n	8003ade <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d03e      	beq.n	8003ade <HAL_RCC_ClockConfig+0x126>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d13a      	bne.n	8003ade <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a68:	4b64      	ldr	r3, [pc, #400]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a70:	4a62      	ldr	r2, [pc, #392]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a76:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	e02f      	b.n	8003ade <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a86:	4b5d      	ldr	r3, [pc, #372]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d115      	bne.n	8003abe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e0ac      	b.n	8003bf0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a9e:	4b57      	ldr	r3, [pc, #348]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e0a0      	b.n	8003bf0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aae:	4b53      	ldr	r3, [pc, #332]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e098      	b.n	8003bf0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003abe:	f000 f8a7 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	4b4e      	ldr	r3, [pc, #312]	; (8003c00 <HAL_RCC_ClockConfig+0x248>)
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d909      	bls.n	8003ade <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003aca:	4b4c      	ldr	r3, [pc, #304]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ad2:	4a4a      	ldr	r2, [pc, #296]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ada:	2380      	movs	r3, #128	; 0x80
 8003adc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ade:	4b47      	ldr	r3, [pc, #284]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f023 0203 	bic.w	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	4944      	ldr	r1, [pc, #272]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af0:	f7fe f8fa 	bl	8001ce8 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	e00a      	b.n	8003b0e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af8:	f7fe f8f6 	bl	8001ce8 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e070      	b.n	8003bf0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0e:	4b3b      	ldr	r3, [pc, #236]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 020c 	and.w	r2, r3, #12
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d1eb      	bne.n	8003af8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d009      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b2c:	4b33      	ldr	r3, [pc, #204]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4930      	ldr	r1, [pc, #192]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	608b      	str	r3, [r1, #8]
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2b80      	cmp	r3, #128	; 0x80
 8003b44:	d105      	bne.n	8003b52 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b46:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	4a2c      	ldr	r2, [pc, #176]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003b4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b50:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b52:	4b29      	ldr	r3, [pc, #164]	; (8003bf8 <HAL_RCC_ClockConfig+0x240>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d210      	bcs.n	8003b82 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b60:	4b25      	ldr	r3, [pc, #148]	; (8003bf8 <HAL_RCC_ClockConfig+0x240>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f023 020f 	bic.w	r2, r3, #15
 8003b68:	4923      	ldr	r1, [pc, #140]	; (8003bf8 <HAL_RCC_ClockConfig+0x240>)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b70:	4b21      	ldr	r3, [pc, #132]	; (8003bf8 <HAL_RCC_ClockConfig+0x240>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d001      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e036      	b.n	8003bf0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b8e:	4b1b      	ldr	r3, [pc, #108]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	4918      	ldr	r1, [pc, #96]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d009      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bac:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	4910      	ldr	r1, [pc, #64]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bc0:	f000 f826 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8003bc4:	4601      	mov	r1, r0
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <HAL_RCC_ClockConfig+0x244>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	091b      	lsrs	r3, r3, #4
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	4a0c      	ldr	r2, [pc, #48]	; (8003c04 <HAL_RCC_ClockConfig+0x24c>)
 8003bd2:	5cd3      	ldrb	r3, [r2, r3]
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	fa21 f303 	lsr.w	r3, r1, r3
 8003bdc:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <HAL_RCC_ClockConfig+0x250>)
 8003bde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003be0:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <HAL_RCC_ClockConfig+0x254>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fd ff47 	bl	8001a78 <HAL_InitTick>
 8003bea:	4603      	mov	r3, r0
 8003bec:	73fb      	strb	r3, [r7, #15]

  return status;
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40022000 	.word	0x40022000
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	04c4b400 	.word	0x04c4b400
 8003c04:	08008d38 	.word	0x08008d38
 8003c08:	20000080 	.word	0x20000080
 8003c0c:	20000084 	.word	0x20000084

08003c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b089      	sub	sp, #36	; 0x24
 8003c14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c1e:	4b3d      	ldr	r3, [pc, #244]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c28:	4b3a      	ldr	r3, [pc, #232]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0x34>
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	2b0c      	cmp	r3, #12
 8003c3c:	d121      	bne.n	8003c82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d11e      	bne.n	8003c82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c44:	4b33      	ldr	r3, [pc, #204]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d107      	bne.n	8003c60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c50:	4b30      	ldr	r3, [pc, #192]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c56:	0a1b      	lsrs	r3, r3, #8
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	e005      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c60:	4b2c      	ldr	r3, [pc, #176]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c6c:	4a2a      	ldr	r2, [pc, #168]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10d      	bne.n	8003c98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c80:	e00a      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d102      	bne.n	8003c8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c88:	4b24      	ldr	r3, [pc, #144]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c8a:	61bb      	str	r3, [r7, #24]
 8003c8c:	e004      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c94:	4b22      	ldr	r3, [pc, #136]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	2b0c      	cmp	r3, #12
 8003c9c:	d133      	bne.n	8003d06 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c9e:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d002      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0xa4>
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d003      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0xaa>
 8003cb2:	e005      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003cb4:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cb6:	617b      	str	r3, [r7, #20]
      break;
 8003cb8:	e005      	b.n	8003cc6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003cba:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cbc:	617b      	str	r3, [r7, #20]
      break;
 8003cbe:	e002      	b.n	8003cc6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	617b      	str	r3, [r7, #20]
      break;
 8003cc4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cc6:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	091b      	lsrs	r3, r3, #4
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cd4:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	fb02 f203 	mul.w	r2, r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cea:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cec:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <HAL_RCC_GetSysClockFreq+0x104>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	0e5b      	lsrs	r3, r3, #25
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d04:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d06:	69bb      	ldr	r3, [r7, #24]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3724      	adds	r7, #36	; 0x24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	40021000 	.word	0x40021000
 8003d18:	08008d50 	.word	0x08008d50
 8003d1c:	00f42400 	.word	0x00f42400
 8003d20:	007a1200 	.word	0x007a1200

08003d24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d28:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000080 	.word	0x20000080

08003d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d40:	f7ff fff0 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8003d44:	4601      	mov	r1, r0
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	0a1b      	lsrs	r3, r3, #8
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	4a04      	ldr	r2, [pc, #16]	; (8003d64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d52:	5cd3      	ldrb	r3, [r2, r3]
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40021000 	.word	0x40021000
 8003d64:	08008d48 	.word	0x08008d48

08003d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d6c:	f7ff ffda 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8003d70:	4601      	mov	r1, r0
 8003d72:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	0adb      	lsrs	r3, r3, #11
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	4a04      	ldr	r2, [pc, #16]	; (8003d90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d7e:	5cd3      	ldrb	r3, [r2, r3]
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	08008d48 	.word	0x08008d48

08003d94 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	220f      	movs	r2, #15
 8003da2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003da4:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <HAL_RCC_GetClockConfig+0x5c>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0203 	and.w	r2, r3, #3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003db0:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <HAL_RCC_GetClockConfig+0x5c>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <HAL_RCC_GetClockConfig+0x5c>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003dc8:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <HAL_RCC_GetClockConfig+0x5c>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	08db      	lsrs	r3, r3, #3
 8003dce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003dd6:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <HAL_RCC_GetClockConfig+0x60>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 020f 	and.w	r2, r3, #15
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	601a      	str	r2, [r3, #0]
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40022000 	.word	0x40022000

08003df8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e00:	2300      	movs	r3, #0
 8003e02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e04:	4b27      	ldr	r3, [pc, #156]	; (8003ea4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e10:	f7ff f8e8 	bl	8002fe4 <HAL_PWREx_GetVoltageRange>
 8003e14:	6178      	str	r0, [r7, #20]
 8003e16:	e014      	b.n	8003e42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e18:	4b22      	ldr	r3, [pc, #136]	; (8003ea4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	4a21      	ldr	r2, [pc, #132]	; (8003ea4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e22:	6593      	str	r3, [r2, #88]	; 0x58
 8003e24:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e30:	f7ff f8d8 	bl	8002fe4 <HAL_PWREx_GetVoltageRange>
 8003e34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e36:	4b1b      	ldr	r3, [pc, #108]	; (8003ea4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	4a1a      	ldr	r2, [pc, #104]	; (8003ea4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e48:	d10b      	bne.n	8003e62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b80      	cmp	r3, #128	; 0x80
 8003e4e:	d913      	bls.n	8003e78 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2ba0      	cmp	r3, #160	; 0xa0
 8003e54:	d902      	bls.n	8003e5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e56:	2302      	movs	r3, #2
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	e00d      	b.n	8003e78 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	e00a      	b.n	8003e78 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b7f      	cmp	r3, #127	; 0x7f
 8003e66:	d902      	bls.n	8003e6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003e68:	2302      	movs	r3, #2
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	e004      	b.n	8003e78 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b70      	cmp	r3, #112	; 0x70
 8003e72:	d101      	bne.n	8003e78 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e74:	2301      	movs	r3, #1
 8003e76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f023 020f 	bic.w	r2, r3, #15
 8003e80:	4909      	ldr	r1, [pc, #36]	; (8003ea8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e88:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d001      	beq.n	8003e9a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40022000 	.word	0x40022000

08003eac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003eb6:	4b2d      	ldr	r3, [pc, #180]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d118      	bne.n	8003ef4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ec2:	4b2a      	ldr	r3, [pc, #168]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d107      	bne.n	8003ede <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ece:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed4:	0a1b      	lsrs	r3, r3, #8
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	e005      	b.n	8003eea <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ede:	4b23      	ldr	r3, [pc, #140]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	091b      	lsrs	r3, r3, #4
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003eea:	4a21      	ldr	r2, [pc, #132]	; (8003f70 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ef2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ef4:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d002      	beq.n	8003f0a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d003      	beq.n	8003f10 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003f08:	e005      	b.n	8003f16 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003f0a:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003f0c:	613b      	str	r3, [r7, #16]
    break;
 8003f0e:	e005      	b.n	8003f1c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003f10:	4b19      	ldr	r3, [pc, #100]	; (8003f78 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003f12:	613b      	str	r3, [r7, #16]
    break;
 8003f14:	e002      	b.n	8003f1c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	613b      	str	r3, [r7, #16]
    break;
 8003f1a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f1c:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	091b      	lsrs	r3, r3, #4
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	3301      	adds	r3, #1
 8003f28:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f2a:	4b10      	ldr	r3, [pc, #64]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	0a1b      	lsrs	r3, r3, #8
 8003f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	fb02 f203 	mul.w	r2, r2, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f40:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f42:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	0e5b      	lsrs	r3, r3, #25
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003f5c:	683b      	ldr	r3, [r7, #0]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	08008d50 	.word	0x08008d50
 8003f74:	00f42400 	.word	0x00f42400
 8003f78:	007a1200 	.word	0x007a1200

08003f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f84:	2300      	movs	r3, #0
 8003f86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f88:	2300      	movs	r3, #0
 8003f8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d03d      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	d00b      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003fa0:	2b40      	cmp	r3, #64	; 0x40
 8003fa2:	d804      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00e      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d015      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003fac:	e01d      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003fae:	2b60      	cmp	r3, #96	; 0x60
 8003fb0:	d01e      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003fb2:	2b80      	cmp	r3, #128	; 0x80
 8003fb4:	d01c      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003fb6:	e018      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fb8:	4b86      	ldr	r3, [pc, #536]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	4a85      	ldr	r2, [pc, #532]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fc4:	e015      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fafd 	bl	80045cc <RCCEx_PLLSAI1_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fd6:	e00c      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3320      	adds	r3, #32
 8003fdc:	2100      	movs	r1, #0
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fbe4 	bl	80047ac <RCCEx_PLLSAI2_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fe8:	e003      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	74fb      	strb	r3, [r7, #19]
      break;
 8003fee:	e000      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003ff0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ff8:	4b76      	ldr	r3, [pc, #472]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ffa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ffe:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004006:	4973      	ldr	r1, [pc, #460]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800400e:	e001      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004010:	7cfb      	ldrb	r3, [r7, #19]
 8004012:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d042      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004028:	d00f      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xce>
 800402a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800402e:	d805      	bhi.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8004030:	2b00      	cmp	r3, #0
 8004032:	d011      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004038:	d017      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xee>
 800403a:	e01f      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x100>
 800403c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004040:	d01f      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004046:	d01c      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004048:	e018      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800404a:	4b62      	ldr	r3, [pc, #392]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	4a61      	ldr	r2, [pc, #388]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004054:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004056:	e015      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	2100      	movs	r1, #0
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fab4 	bl	80045cc <RCCEx_PLLSAI1_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004068:	e00c      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3320      	adds	r3, #32
 800406e:	2100      	movs	r1, #0
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fb9b 	bl	80047ac <RCCEx_PLLSAI2_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800407a:	e003      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	74fb      	strb	r3, [r7, #19]
      break;
 8004080:	e000      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8004082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004084:	7cfb      	ldrb	r3, [r7, #19]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800408a:	4b52      	ldr	r3, [pc, #328]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800408c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	494e      	ldr	r1, [pc, #312]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80040a0:	e001      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a2:	7cfb      	ldrb	r3, [r7, #19]
 80040a4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 809f 	beq.w	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b4:	2300      	movs	r3, #0
 80040b6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040b8:	4b46      	ldr	r3, [pc, #280]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80040c8:	2300      	movs	r3, #0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00d      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ce:	4b41      	ldr	r3, [pc, #260]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	4a40      	ldr	r2, [pc, #256]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d8:	6593      	str	r3, [r2, #88]	; 0x58
 80040da:	4b3e      	ldr	r3, [pc, #248]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e6:	2301      	movs	r3, #1
 80040e8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040ea:	4b3b      	ldr	r3, [pc, #236]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a3a      	ldr	r2, [pc, #232]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80040f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040f6:	f7fd fdf7 	bl	8001ce8 <HAL_GetTick>
 80040fa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040fc:	e009      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040fe:	f7fd fdf3 	bl	8001ce8 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d902      	bls.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	74fb      	strb	r3, [r7, #19]
        break;
 8004110:	e005      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004112:	4b31      	ldr	r3, [pc, #196]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0ef      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800411e:	7cfb      	ldrb	r3, [r7, #19]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d15b      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004124:	4b2b      	ldr	r3, [pc, #172]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01f      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	429a      	cmp	r2, r3
 8004140:	d019      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004142:	4b24      	ldr	r3, [pc, #144]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800414e:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004154:	4a1f      	ldr	r2, [pc, #124]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800415e:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004164:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800416a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800416e:	4a19      	ldr	r2, [pc, #100]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d016      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fd fdb2 	bl	8001ce8 <HAL_GetTick>
 8004184:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004186:	e00b      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004188:	f7fd fdae 	bl	8001ce8 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	; 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d902      	bls.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	74fb      	strb	r3, [r7, #19]
            break;
 800419e:	e006      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0ec      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80041ae:	7cfb      	ldrb	r3, [r7, #19]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10c      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041b4:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c4:	4903      	ldr	r1, [pc, #12]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041cc:	e008      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041ce:	7cfb      	ldrb	r3, [r7, #19]
 80041d0:	74bb      	strb	r3, [r7, #18]
 80041d2:	e005      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80041d4:	40021000 	.word	0x40021000
 80041d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041dc:	7cfb      	ldrb	r3, [r7, #19]
 80041de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041e0:	7c7b      	ldrb	r3, [r7, #17]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d105      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e6:	4ba0      	ldr	r3, [pc, #640]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ea:	4a9f      	ldr	r2, [pc, #636]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041fe:	4b9a      	ldr	r3, [pc, #616]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004204:	f023 0203 	bic.w	r2, r3, #3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	4996      	ldr	r1, [pc, #600]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004220:	4b91      	ldr	r3, [pc, #580]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004226:	f023 020c 	bic.w	r2, r3, #12
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	498e      	ldr	r1, [pc, #568]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004242:	4b89      	ldr	r3, [pc, #548]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004248:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004250:	4985      	ldr	r1, [pc, #532]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004264:	4b80      	ldr	r3, [pc, #512]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004272:	497d      	ldr	r1, [pc, #500]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00a      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004286:	4b78      	ldr	r3, [pc, #480]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004294:	4974      	ldr	r1, [pc, #464]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00a      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042a8:	4b6f      	ldr	r3, [pc, #444]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b6:	496c      	ldr	r1, [pc, #432]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042ca:	4b67      	ldr	r3, [pc, #412]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042d8:	4963      	ldr	r1, [pc, #396]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00a      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042ec:	4b5e      	ldr	r3, [pc, #376]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042fa:	495b      	ldr	r1, [pc, #364]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800430e:	4b56      	ldr	r3, [pc, #344]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004314:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431c:	4952      	ldr	r1, [pc, #328]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004330:	4b4d      	ldr	r3, [pc, #308]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004336:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433e:	494a      	ldr	r1, [pc, #296]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00a      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004352:	4b45      	ldr	r3, [pc, #276]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004358:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004360:	4941      	ldr	r1, [pc, #260]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00a      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004374:	4b3c      	ldr	r3, [pc, #240]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004376:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800437a:	f023 0203 	bic.w	r2, r3, #3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004382:	4939      	ldr	r1, [pc, #228]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d028      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004396:	4b34      	ldr	r3, [pc, #208]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a4:	4930      	ldr	r1, [pc, #192]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043b4:	d106      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043b6:	4b2c      	ldr	r3, [pc, #176]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	4a2b      	ldr	r2, [pc, #172]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043c0:	60d3      	str	r3, [r2, #12]
 80043c2:	e011      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3304      	adds	r3, #4
 80043d2:	2101      	movs	r1, #1
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 f8f9 	bl	80045cc <RCCEx_PLLSAI1_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043de:	7cfb      	ldrb	r3, [r7, #19]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80043e4:	7cfb      	ldrb	r3, [r7, #19]
 80043e6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d04d      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043fc:	d108      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80043fe:	4b1a      	ldr	r3, [pc, #104]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004400:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004404:	4a18      	ldr	r2, [pc, #96]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800440a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800440e:	e012      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004410:	4b15      	ldr	r3, [pc, #84]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004416:	4a14      	ldr	r2, [pc, #80]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800441c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004420:	4b11      	ldr	r3, [pc, #68]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800442e:	490e      	ldr	r1, [pc, #56]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800443a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800443e:	d106      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004440:	4b09      	ldr	r3, [pc, #36]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4a08      	ldr	r2, [pc, #32]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800444a:	60d3      	str	r3, [r2, #12]
 800444c:	e020      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004456:	d109      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004458:	4b03      	ldr	r3, [pc, #12]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4a02      	ldr	r2, [pc, #8]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004462:	60d3      	str	r3, [r2, #12]
 8004464:	e014      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004470:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004474:	d10c      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3304      	adds	r3, #4
 800447a:	2101      	movs	r1, #1
 800447c:	4618      	mov	r0, r3
 800447e:	f000 f8a5 	bl	80045cc <RCCEx_PLLSAI1_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004486:	7cfb      	ldrb	r3, [r7, #19]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800448c:	7cfb      	ldrb	r3, [r7, #19]
 800448e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d028      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800449c:	4b4a      	ldr	r3, [pc, #296]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044aa:	4947      	ldr	r1, [pc, #284]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ba:	d106      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044bc:	4b42      	ldr	r3, [pc, #264]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4a41      	ldr	r2, [pc, #260]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044c6:	60d3      	str	r3, [r2, #12]
 80044c8:	e011      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044d2:	d10c      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3304      	adds	r3, #4
 80044d8:	2101      	movs	r1, #1
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 f876 	bl	80045cc <RCCEx_PLLSAI1_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044e4:	7cfb      	ldrb	r3, [r7, #19]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80044ea:	7cfb      	ldrb	r3, [r7, #19]
 80044ec:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d01e      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044fa:	4b33      	ldr	r3, [pc, #204]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004500:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800450a:	492f      	ldr	r1, [pc, #188]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800451c:	d10c      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	2102      	movs	r1, #2
 8004524:	4618      	mov	r0, r3
 8004526:	f000 f851 	bl	80045cc <RCCEx_PLLSAI1_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800452e:	7cfb      	ldrb	r3, [r7, #19]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004534:	7cfb      	ldrb	r3, [r7, #19]
 8004536:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00b      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004544:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800454a:	f023 0204 	bic.w	r2, r3, #4
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004554:	491c      	ldr	r1, [pc, #112]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00b      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004568:	4b17      	ldr	r3, [pc, #92]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800456a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800456e:	f023 0218 	bic.w	r2, r3, #24
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004578:	4913      	ldr	r1, [pc, #76]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d017      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800458c:	4b0e      	ldr	r3, [pc, #56]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800458e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004592:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800459c:	490a      	ldr	r1, [pc, #40]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045ae:	d105      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045b0:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4a04      	ldr	r2, [pc, #16]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80045b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40021000 	.word	0x40021000

080045cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045da:	4b70      	ldr	r3, [pc, #448]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00e      	beq.n	8004604 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045e6:	4b6d      	ldr	r3, [pc, #436]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0203 	and.w	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d103      	bne.n	80045fe <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
       ||
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d13f      	bne.n	800467e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
 8004602:	e03c      	b.n	800467e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d00c      	beq.n	8004626 <RCCEx_PLLSAI1_Config+0x5a>
 800460c:	2b03      	cmp	r3, #3
 800460e:	d013      	beq.n	8004638 <RCCEx_PLLSAI1_Config+0x6c>
 8004610:	2b01      	cmp	r3, #1
 8004612:	d120      	bne.n	8004656 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004614:	4b61      	ldr	r3, [pc, #388]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d11d      	bne.n	800465c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004624:	e01a      	b.n	800465c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004626:	4b5d      	ldr	r3, [pc, #372]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462e:	2b00      	cmp	r3, #0
 8004630:	d116      	bne.n	8004660 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004636:	e013      	b.n	8004660 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004638:	4b58      	ldr	r3, [pc, #352]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10f      	bne.n	8004664 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004644:	4b55      	ldr	r3, [pc, #340]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d109      	bne.n	8004664 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004654:	e006      	b.n	8004664 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
      break;
 800465a:	e004      	b.n	8004666 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800465c:	bf00      	nop
 800465e:	e002      	b.n	8004666 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004660:	bf00      	nop
 8004662:	e000      	b.n	8004666 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004664:	bf00      	nop
    }

    if(status == HAL_OK)
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d108      	bne.n	800467e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800466c:	4b4b      	ldr	r3, [pc, #300]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f023 0203 	bic.w	r2, r3, #3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4948      	ldr	r1, [pc, #288]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 800467a:	4313      	orrs	r3, r2
 800467c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	2b00      	cmp	r3, #0
 8004682:	f040 8086 	bne.w	8004792 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004686:	4b45      	ldr	r3, [pc, #276]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a44      	ldr	r2, [pc, #272]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 800468c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004692:	f7fd fb29 	bl	8001ce8 <HAL_GetTick>
 8004696:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004698:	e009      	b.n	80046ae <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800469a:	f7fd fb25 	bl	8001ce8 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d902      	bls.n	80046ae <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	73fb      	strb	r3, [r7, #15]
        break;
 80046ac:	e005      	b.n	80046ba <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046ae:	4b3b      	ldr	r3, [pc, #236]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1ef      	bne.n	800469a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d168      	bne.n	8004792 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d113      	bne.n	80046ee <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046c6:	4b35      	ldr	r3, [pc, #212]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	4b35      	ldr	r3, [pc, #212]	; (80047a0 <RCCEx_PLLSAI1_Config+0x1d4>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6892      	ldr	r2, [r2, #8]
 80046d2:	0211      	lsls	r1, r2, #8
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	68d2      	ldr	r2, [r2, #12]
 80046d8:	06d2      	lsls	r2, r2, #27
 80046da:	4311      	orrs	r1, r2
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6852      	ldr	r2, [r2, #4]
 80046e0:	3a01      	subs	r2, #1
 80046e2:	0112      	lsls	r2, r2, #4
 80046e4:	430a      	orrs	r2, r1
 80046e6:	492d      	ldr	r1, [pc, #180]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	610b      	str	r3, [r1, #16]
 80046ec:	e02d      	b.n	800474a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d115      	bne.n	8004720 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046f4:	4b29      	ldr	r3, [pc, #164]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	4b2a      	ldr	r3, [pc, #168]	; (80047a4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6892      	ldr	r2, [r2, #8]
 8004700:	0211      	lsls	r1, r2, #8
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6912      	ldr	r2, [r2, #16]
 8004706:	0852      	lsrs	r2, r2, #1
 8004708:	3a01      	subs	r2, #1
 800470a:	0552      	lsls	r2, r2, #21
 800470c:	4311      	orrs	r1, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6852      	ldr	r2, [r2, #4]
 8004712:	3a01      	subs	r2, #1
 8004714:	0112      	lsls	r2, r2, #4
 8004716:	430a      	orrs	r2, r1
 8004718:	4920      	ldr	r1, [pc, #128]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 800471a:	4313      	orrs	r3, r2
 800471c:	610b      	str	r3, [r1, #16]
 800471e:	e014      	b.n	800474a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004720:	4b1e      	ldr	r3, [pc, #120]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	4b20      	ldr	r3, [pc, #128]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004726:	4013      	ands	r3, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6892      	ldr	r2, [r2, #8]
 800472c:	0211      	lsls	r1, r2, #8
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6952      	ldr	r2, [r2, #20]
 8004732:	0852      	lsrs	r2, r2, #1
 8004734:	3a01      	subs	r2, #1
 8004736:	0652      	lsls	r2, r2, #25
 8004738:	4311      	orrs	r1, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6852      	ldr	r2, [r2, #4]
 800473e:	3a01      	subs	r2, #1
 8004740:	0112      	lsls	r2, r2, #4
 8004742:	430a      	orrs	r2, r1
 8004744:	4915      	ldr	r1, [pc, #84]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004746:	4313      	orrs	r3, r2
 8004748:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800474a:	4b14      	ldr	r3, [pc, #80]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a13      	ldr	r2, [pc, #76]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004750:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004754:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004756:	f7fd fac7 	bl	8001ce8 <HAL_GetTick>
 800475a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800475c:	e009      	b.n	8004772 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800475e:	f7fd fac3 	bl	8001ce8 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d902      	bls.n	8004772 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	73fb      	strb	r3, [r7, #15]
          break;
 8004770:	e005      	b.n	800477e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0ef      	beq.n	800475e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d106      	bne.n	8004792 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	4903      	ldr	r1, [pc, #12]	; (800479c <RCCEx_PLLSAI1_Config+0x1d0>)
 800478e:	4313      	orrs	r3, r2
 8004790:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004792:	7bfb      	ldrb	r3, [r7, #15]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	07ff800f 	.word	0x07ff800f
 80047a4:	ff9f800f 	.word	0xff9f800f
 80047a8:	f9ff800f 	.word	0xf9ff800f

080047ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047ba:	4b70      	ldr	r3, [pc, #448]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00e      	beq.n	80047e4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047c6:	4b6d      	ldr	r3, [pc, #436]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0203 	and.w	r2, r3, #3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d103      	bne.n	80047de <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
       ||
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d13f      	bne.n	800485e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	73fb      	strb	r3, [r7, #15]
 80047e2:	e03c      	b.n	800485e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d00c      	beq.n	8004806 <RCCEx_PLLSAI2_Config+0x5a>
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d013      	beq.n	8004818 <RCCEx_PLLSAI2_Config+0x6c>
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d120      	bne.n	8004836 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047f4:	4b61      	ldr	r3, [pc, #388]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d11d      	bne.n	800483c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004804:	e01a      	b.n	800483c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004806:	4b5d      	ldr	r3, [pc, #372]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480e:	2b00      	cmp	r3, #0
 8004810:	d116      	bne.n	8004840 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004816:	e013      	b.n	8004840 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004818:	4b58      	ldr	r3, [pc, #352]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10f      	bne.n	8004844 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004824:	4b55      	ldr	r3, [pc, #340]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d109      	bne.n	8004844 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004834:	e006      	b.n	8004844 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	73fb      	strb	r3, [r7, #15]
      break;
 800483a:	e004      	b.n	8004846 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800483c:	bf00      	nop
 800483e:	e002      	b.n	8004846 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004840:	bf00      	nop
 8004842:	e000      	b.n	8004846 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004844:	bf00      	nop
    }

    if(status == HAL_OK)
 8004846:	7bfb      	ldrb	r3, [r7, #15]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d108      	bne.n	800485e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800484c:	4b4b      	ldr	r3, [pc, #300]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f023 0203 	bic.w	r2, r3, #3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4948      	ldr	r1, [pc, #288]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 800485a:	4313      	orrs	r3, r2
 800485c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	2b00      	cmp	r3, #0
 8004862:	f040 8086 	bne.w	8004972 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004866:	4b45      	ldr	r3, [pc, #276]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a44      	ldr	r2, [pc, #272]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 800486c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004872:	f7fd fa39 	bl	8001ce8 <HAL_GetTick>
 8004876:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004878:	e009      	b.n	800488e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800487a:	f7fd fa35 	bl	8001ce8 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d902      	bls.n	800488e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	73fb      	strb	r3, [r7, #15]
        break;
 800488c:	e005      	b.n	800489a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800488e:	4b3b      	ldr	r3, [pc, #236]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1ef      	bne.n	800487a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d168      	bne.n	8004972 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d113      	bne.n	80048ce <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048a6:	4b35      	ldr	r3, [pc, #212]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 80048a8:	695a      	ldr	r2, [r3, #20]
 80048aa:	4b35      	ldr	r3, [pc, #212]	; (8004980 <RCCEx_PLLSAI2_Config+0x1d4>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6892      	ldr	r2, [r2, #8]
 80048b2:	0211      	lsls	r1, r2, #8
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	68d2      	ldr	r2, [r2, #12]
 80048b8:	06d2      	lsls	r2, r2, #27
 80048ba:	4311      	orrs	r1, r2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6852      	ldr	r2, [r2, #4]
 80048c0:	3a01      	subs	r2, #1
 80048c2:	0112      	lsls	r2, r2, #4
 80048c4:	430a      	orrs	r2, r1
 80048c6:	492d      	ldr	r1, [pc, #180]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	614b      	str	r3, [r1, #20]
 80048cc:	e02d      	b.n	800492a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d115      	bne.n	8004900 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048d4:	4b29      	ldr	r3, [pc, #164]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 80048d6:	695a      	ldr	r2, [r3, #20]
 80048d8:	4b2a      	ldr	r3, [pc, #168]	; (8004984 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048da:	4013      	ands	r3, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6892      	ldr	r2, [r2, #8]
 80048e0:	0211      	lsls	r1, r2, #8
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6912      	ldr	r2, [r2, #16]
 80048e6:	0852      	lsrs	r2, r2, #1
 80048e8:	3a01      	subs	r2, #1
 80048ea:	0552      	lsls	r2, r2, #21
 80048ec:	4311      	orrs	r1, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6852      	ldr	r2, [r2, #4]
 80048f2:	3a01      	subs	r2, #1
 80048f4:	0112      	lsls	r2, r2, #4
 80048f6:	430a      	orrs	r2, r1
 80048f8:	4920      	ldr	r1, [pc, #128]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	614b      	str	r3, [r1, #20]
 80048fe:	e014      	b.n	800492a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004900:	4b1e      	ldr	r3, [pc, #120]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004902:	695a      	ldr	r2, [r3, #20]
 8004904:	4b20      	ldr	r3, [pc, #128]	; (8004988 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004906:	4013      	ands	r3, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6892      	ldr	r2, [r2, #8]
 800490c:	0211      	lsls	r1, r2, #8
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6952      	ldr	r2, [r2, #20]
 8004912:	0852      	lsrs	r2, r2, #1
 8004914:	3a01      	subs	r2, #1
 8004916:	0652      	lsls	r2, r2, #25
 8004918:	4311      	orrs	r1, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6852      	ldr	r2, [r2, #4]
 800491e:	3a01      	subs	r2, #1
 8004920:	0112      	lsls	r2, r2, #4
 8004922:	430a      	orrs	r2, r1
 8004924:	4915      	ldr	r1, [pc, #84]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004926:	4313      	orrs	r3, r2
 8004928:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800492a:	4b14      	ldr	r3, [pc, #80]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a13      	ldr	r2, [pc, #76]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004934:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004936:	f7fd f9d7 	bl	8001ce8 <HAL_GetTick>
 800493a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800493c:	e009      	b.n	8004952 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800493e:	f7fd f9d3 	bl	8001ce8 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d902      	bls.n	8004952 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	73fb      	strb	r3, [r7, #15]
          break;
 8004950:	e005      	b.n	800495e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004952:	4b0a      	ldr	r3, [pc, #40]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0ef      	beq.n	800493e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d106      	bne.n	8004972 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004964:	4b05      	ldr	r3, [pc, #20]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004966:	695a      	ldr	r2, [r3, #20]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	4903      	ldr	r1, [pc, #12]	; (800497c <RCCEx_PLLSAI2_Config+0x1d0>)
 800496e:	4313      	orrs	r3, r2
 8004970:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004972:	7bfb      	ldrb	r3, [r7, #15]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40021000 	.word	0x40021000
 8004980:	07ff800f 	.word	0x07ff800f
 8004984:	ff9f800f 	.word	0xff9f800f
 8004988:	f9ff800f 	.word	0xf9ff800f

0800498c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e049      	b.n	8004a32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f841 	bl	8004a3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3304      	adds	r3, #4
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f000 f9f8 	bl	8004dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
	...

08004a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d001      	beq.n	8004a68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e04f      	b.n	8004b08 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a23      	ldr	r2, [pc, #140]	; (8004b14 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d01d      	beq.n	8004ac6 <HAL_TIM_Base_Start_IT+0x76>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a92:	d018      	beq.n	8004ac6 <HAL_TIM_Base_Start_IT+0x76>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a1f      	ldr	r2, [pc, #124]	; (8004b18 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d013      	beq.n	8004ac6 <HAL_TIM_Base_Start_IT+0x76>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a1e      	ldr	r2, [pc, #120]	; (8004b1c <HAL_TIM_Base_Start_IT+0xcc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00e      	beq.n	8004ac6 <HAL_TIM_Base_Start_IT+0x76>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a1c      	ldr	r2, [pc, #112]	; (8004b20 <HAL_TIM_Base_Start_IT+0xd0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d009      	beq.n	8004ac6 <HAL_TIM_Base_Start_IT+0x76>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a1b      	ldr	r2, [pc, #108]	; (8004b24 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d004      	beq.n	8004ac6 <HAL_TIM_Base_Start_IT+0x76>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a19      	ldr	r2, [pc, #100]	; (8004b28 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d115      	bne.n	8004af2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	4b17      	ldr	r3, [pc, #92]	; (8004b2c <HAL_TIM_Base_Start_IT+0xdc>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b06      	cmp	r3, #6
 8004ad6:	d015      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0xb4>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ade:	d011      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af0:	e008      	b.n	8004b04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0201 	orr.w	r2, r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	e000      	b.n	8004b06 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	40012c00 	.word	0x40012c00
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	40000800 	.word	0x40000800
 8004b20:	40000c00 	.word	0x40000c00
 8004b24:	40013400 	.word	0x40013400
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	00010007 	.word	0x00010007

08004b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d122      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d11b      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0202 	mvn.w	r2, #2
 8004b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f905 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 8004b78:	e005      	b.n	8004b86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f8f7 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f908 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d122      	bne.n	8004be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d11b      	bne.n	8004be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0204 	mvn.w	r2, #4
 8004bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f8db 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 8004bcc:	e005      	b.n	8004bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f8cd 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f8de 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d122      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d11b      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0208 	mvn.w	r2, #8
 8004c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2204      	movs	r2, #4
 8004c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f8b1 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 8004c20:	e005      	b.n	8004c2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f8a3 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f8b4 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f003 0310 	and.w	r3, r3, #16
 8004c3e:	2b10      	cmp	r3, #16
 8004c40:	d122      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d11b      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0210 	mvn.w	r2, #16
 8004c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f887 	bl	8004d82 <HAL_TIM_IC_CaptureCallback>
 8004c74:	e005      	b.n	8004c82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f879 	bl	8004d6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f88a 	bl	8004d96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d10e      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d107      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f06f 0201 	mvn.w	r2, #1
 8004cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fc fbb2 	bl	8001418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbe:	2b80      	cmp	r3, #128	; 0x80
 8004cc0:	d10e      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ccc:	2b80      	cmp	r3, #128	; 0x80
 8004cce:	d107      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f914 	bl	8004f08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cee:	d10e      	bne.n	8004d0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfa:	2b80      	cmp	r3, #128	; 0x80
 8004cfc:	d107      	bne.n	8004d0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f907 	bl	8004f1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d18:	2b40      	cmp	r3, #64	; 0x40
 8004d1a:	d10e      	bne.n	8004d3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d26:	2b40      	cmp	r3, #64	; 0x40
 8004d28:	d107      	bne.n	8004d3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f838 	bl	8004daa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d10e      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d107      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f06f 0220 	mvn.w	r2, #32
 8004d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f8c7 	bl	8004ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a40      	ldr	r2, [pc, #256]	; (8004ed4 <TIM_Base_SetConfig+0x114>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d013      	beq.n	8004e00 <TIM_Base_SetConfig+0x40>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dde:	d00f      	beq.n	8004e00 <TIM_Base_SetConfig+0x40>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a3d      	ldr	r2, [pc, #244]	; (8004ed8 <TIM_Base_SetConfig+0x118>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00b      	beq.n	8004e00 <TIM_Base_SetConfig+0x40>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a3c      	ldr	r2, [pc, #240]	; (8004edc <TIM_Base_SetConfig+0x11c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d007      	beq.n	8004e00 <TIM_Base_SetConfig+0x40>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a3b      	ldr	r2, [pc, #236]	; (8004ee0 <TIM_Base_SetConfig+0x120>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_Base_SetConfig+0x40>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a3a      	ldr	r2, [pc, #232]	; (8004ee4 <TIM_Base_SetConfig+0x124>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d108      	bne.n	8004e12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2f      	ldr	r2, [pc, #188]	; (8004ed4 <TIM_Base_SetConfig+0x114>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01f      	beq.n	8004e5a <TIM_Base_SetConfig+0x9a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e20:	d01b      	beq.n	8004e5a <TIM_Base_SetConfig+0x9a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a2c      	ldr	r2, [pc, #176]	; (8004ed8 <TIM_Base_SetConfig+0x118>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d017      	beq.n	8004e5a <TIM_Base_SetConfig+0x9a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2b      	ldr	r2, [pc, #172]	; (8004edc <TIM_Base_SetConfig+0x11c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d013      	beq.n	8004e5a <TIM_Base_SetConfig+0x9a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2a      	ldr	r2, [pc, #168]	; (8004ee0 <TIM_Base_SetConfig+0x120>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00f      	beq.n	8004e5a <TIM_Base_SetConfig+0x9a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a29      	ldr	r2, [pc, #164]	; (8004ee4 <TIM_Base_SetConfig+0x124>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00b      	beq.n	8004e5a <TIM_Base_SetConfig+0x9a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a28      	ldr	r2, [pc, #160]	; (8004ee8 <TIM_Base_SetConfig+0x128>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d007      	beq.n	8004e5a <TIM_Base_SetConfig+0x9a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a27      	ldr	r2, [pc, #156]	; (8004eec <TIM_Base_SetConfig+0x12c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d003      	beq.n	8004e5a <TIM_Base_SetConfig+0x9a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a26      	ldr	r2, [pc, #152]	; (8004ef0 <TIM_Base_SetConfig+0x130>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d108      	bne.n	8004e6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a10      	ldr	r2, [pc, #64]	; (8004ed4 <TIM_Base_SetConfig+0x114>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00f      	beq.n	8004eb8 <TIM_Base_SetConfig+0xf8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a12      	ldr	r2, [pc, #72]	; (8004ee4 <TIM_Base_SetConfig+0x124>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d00b      	beq.n	8004eb8 <TIM_Base_SetConfig+0xf8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a11      	ldr	r2, [pc, #68]	; (8004ee8 <TIM_Base_SetConfig+0x128>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d007      	beq.n	8004eb8 <TIM_Base_SetConfig+0xf8>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a10      	ldr	r2, [pc, #64]	; (8004eec <TIM_Base_SetConfig+0x12c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d003      	beq.n	8004eb8 <TIM_Base_SetConfig+0xf8>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a0f      	ldr	r2, [pc, #60]	; (8004ef0 <TIM_Base_SetConfig+0x130>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d103      	bne.n	8004ec0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	615a      	str	r2, [r3, #20]
}
 8004ec6:	bf00      	nop
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	40012c00 	.word	0x40012c00
 8004ed8:	40000400 	.word	0x40000400
 8004edc:	40000800 	.word	0x40000800
 8004ee0:	40000c00 	.word	0x40000c00
 8004ee4:	40013400 	.word	0x40013400
 8004ee8:	40014000 	.word	0x40014000
 8004eec:	40014400 	.word	0x40014400
 8004ef0:	40014800 	.word	0x40014800

08004ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e042      	b.n	8004fc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7fc fd4b 	bl	80019f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2224      	movs	r2, #36	; 0x24
 8004f5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0201 	bic.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f8c4 	bl	8005100 <UART_SetConfig>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e022      	b.n	8004fc8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fb8a 	bl	80056a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fc11 	bl	80057e8 <UART_CheckIdleState>
 8004fc6:	4603      	mov	r3, r0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08a      	sub	sp, #40	; 0x28
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fe6:	2b20      	cmp	r3, #32
 8004fe8:	f040 8084 	bne.w	80050f4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <HAL_UART_Transmit+0x28>
 8004ff2:	88fb      	ldrh	r3, [r7, #6]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e07c      	b.n	80050f6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_UART_Transmit+0x3a>
 8005006:	2302      	movs	r3, #2
 8005008:	e075      	b.n	80050f6 <HAL_UART_Transmit+0x126>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2221      	movs	r2, #33	; 0x21
 800501e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005022:	f7fc fe61 	bl	8001ce8 <HAL_GetTick>
 8005026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	88fa      	ldrh	r2, [r7, #6]
 800502c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	88fa      	ldrh	r2, [r7, #6]
 8005034:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005040:	d108      	bne.n	8005054 <HAL_UART_Transmit+0x84>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d104      	bne.n	8005054 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800504a:	2300      	movs	r3, #0
 800504c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	61bb      	str	r3, [r7, #24]
 8005052:	e003      	b.n	800505c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005058:	2300      	movs	r3, #0
 800505a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005064:	e02d      	b.n	80050c2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2200      	movs	r2, #0
 800506e:	2180      	movs	r1, #128	; 0x80
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 fc01 	bl	8005878 <UART_WaitOnFlagUntilTimeout>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e03a      	b.n	80050f6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10b      	bne.n	800509e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	881a      	ldrh	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005092:	b292      	uxth	r2, r2
 8005094:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	3302      	adds	r3, #2
 800509a:	61bb      	str	r3, [r7, #24]
 800509c:	e008      	b.n	80050b0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	781a      	ldrb	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	b292      	uxth	r2, r2
 80050a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	3301      	adds	r3, #1
 80050ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1cb      	bne.n	8005066 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2200      	movs	r2, #0
 80050d6:	2140      	movs	r1, #64	; 0x40
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 fbcd 	bl	8005878 <UART_WaitOnFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e006      	b.n	80050f6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80050f0:	2300      	movs	r3, #0
 80050f2:	e000      	b.n	80050f6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80050f4:	2302      	movs	r3, #2
  }
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3720      	adds	r7, #32
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005100:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005104:	b088      	sub	sp, #32
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	4313      	orrs	r3, r2
 8005124:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	4313      	orrs	r3, r2
 800512e:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	4bb1      	ldr	r3, [pc, #708]	; (80053fc <UART_SetConfig+0x2fc>)
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	69f9      	ldr	r1, [r7, #28]
 8005140:	430b      	orrs	r3, r1
 8005142:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4aa6      	ldr	r2, [pc, #664]	; (8005400 <UART_SetConfig+0x300>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d004      	beq.n	8005174 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	4313      	orrs	r3, r2
 8005172:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800517e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6812      	ldr	r2, [r2, #0]
 8005186:	69f9      	ldr	r1, [r7, #28]
 8005188:	430b      	orrs	r3, r1
 800518a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005192:	f023 010f 	bic.w	r1, r3, #15
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a97      	ldr	r2, [pc, #604]	; (8005404 <UART_SetConfig+0x304>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d121      	bne.n	80051f0 <UART_SetConfig+0xf0>
 80051ac:	4b96      	ldr	r3, [pc, #600]	; (8005408 <UART_SetConfig+0x308>)
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d816      	bhi.n	80051e8 <UART_SetConfig+0xe8>
 80051ba:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <UART_SetConfig+0xc0>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	080051d1 	.word	0x080051d1
 80051c4:	080051dd 	.word	0x080051dd
 80051c8:	080051d7 	.word	0x080051d7
 80051cc:	080051e3 	.word	0x080051e3
 80051d0:	2301      	movs	r3, #1
 80051d2:	76fb      	strb	r3, [r7, #27]
 80051d4:	e0e8      	b.n	80053a8 <UART_SetConfig+0x2a8>
 80051d6:	2302      	movs	r3, #2
 80051d8:	76fb      	strb	r3, [r7, #27]
 80051da:	e0e5      	b.n	80053a8 <UART_SetConfig+0x2a8>
 80051dc:	2304      	movs	r3, #4
 80051de:	76fb      	strb	r3, [r7, #27]
 80051e0:	e0e2      	b.n	80053a8 <UART_SetConfig+0x2a8>
 80051e2:	2308      	movs	r3, #8
 80051e4:	76fb      	strb	r3, [r7, #27]
 80051e6:	e0df      	b.n	80053a8 <UART_SetConfig+0x2a8>
 80051e8:	2310      	movs	r3, #16
 80051ea:	76fb      	strb	r3, [r7, #27]
 80051ec:	bf00      	nop
 80051ee:	e0db      	b.n	80053a8 <UART_SetConfig+0x2a8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a85      	ldr	r2, [pc, #532]	; (800540c <UART_SetConfig+0x30c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d134      	bne.n	8005264 <UART_SetConfig+0x164>
 80051fa:	4b83      	ldr	r3, [pc, #524]	; (8005408 <UART_SetConfig+0x308>)
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005200:	f003 030c 	and.w	r3, r3, #12
 8005204:	2b0c      	cmp	r3, #12
 8005206:	d829      	bhi.n	800525c <UART_SetConfig+0x15c>
 8005208:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <UART_SetConfig+0x110>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	08005245 	.word	0x08005245
 8005214:	0800525d 	.word	0x0800525d
 8005218:	0800525d 	.word	0x0800525d
 800521c:	0800525d 	.word	0x0800525d
 8005220:	08005251 	.word	0x08005251
 8005224:	0800525d 	.word	0x0800525d
 8005228:	0800525d 	.word	0x0800525d
 800522c:	0800525d 	.word	0x0800525d
 8005230:	0800524b 	.word	0x0800524b
 8005234:	0800525d 	.word	0x0800525d
 8005238:	0800525d 	.word	0x0800525d
 800523c:	0800525d 	.word	0x0800525d
 8005240:	08005257 	.word	0x08005257
 8005244:	2300      	movs	r3, #0
 8005246:	76fb      	strb	r3, [r7, #27]
 8005248:	e0ae      	b.n	80053a8 <UART_SetConfig+0x2a8>
 800524a:	2302      	movs	r3, #2
 800524c:	76fb      	strb	r3, [r7, #27]
 800524e:	e0ab      	b.n	80053a8 <UART_SetConfig+0x2a8>
 8005250:	2304      	movs	r3, #4
 8005252:	76fb      	strb	r3, [r7, #27]
 8005254:	e0a8      	b.n	80053a8 <UART_SetConfig+0x2a8>
 8005256:	2308      	movs	r3, #8
 8005258:	76fb      	strb	r3, [r7, #27]
 800525a:	e0a5      	b.n	80053a8 <UART_SetConfig+0x2a8>
 800525c:	2310      	movs	r3, #16
 800525e:	76fb      	strb	r3, [r7, #27]
 8005260:	bf00      	nop
 8005262:	e0a1      	b.n	80053a8 <UART_SetConfig+0x2a8>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a69      	ldr	r2, [pc, #420]	; (8005410 <UART_SetConfig+0x310>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d120      	bne.n	80052b0 <UART_SetConfig+0x1b0>
 800526e:	4b66      	ldr	r3, [pc, #408]	; (8005408 <UART_SetConfig+0x308>)
 8005270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005274:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005278:	2b10      	cmp	r3, #16
 800527a:	d00f      	beq.n	800529c <UART_SetConfig+0x19c>
 800527c:	2b10      	cmp	r3, #16
 800527e:	d802      	bhi.n	8005286 <UART_SetConfig+0x186>
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <UART_SetConfig+0x190>
 8005284:	e010      	b.n	80052a8 <UART_SetConfig+0x1a8>
 8005286:	2b20      	cmp	r3, #32
 8005288:	d005      	beq.n	8005296 <UART_SetConfig+0x196>
 800528a:	2b30      	cmp	r3, #48	; 0x30
 800528c:	d009      	beq.n	80052a2 <UART_SetConfig+0x1a2>
 800528e:	e00b      	b.n	80052a8 <UART_SetConfig+0x1a8>
 8005290:	2300      	movs	r3, #0
 8005292:	76fb      	strb	r3, [r7, #27]
 8005294:	e088      	b.n	80053a8 <UART_SetConfig+0x2a8>
 8005296:	2302      	movs	r3, #2
 8005298:	76fb      	strb	r3, [r7, #27]
 800529a:	e085      	b.n	80053a8 <UART_SetConfig+0x2a8>
 800529c:	2304      	movs	r3, #4
 800529e:	76fb      	strb	r3, [r7, #27]
 80052a0:	e082      	b.n	80053a8 <UART_SetConfig+0x2a8>
 80052a2:	2308      	movs	r3, #8
 80052a4:	76fb      	strb	r3, [r7, #27]
 80052a6:	e07f      	b.n	80053a8 <UART_SetConfig+0x2a8>
 80052a8:	2310      	movs	r3, #16
 80052aa:	76fb      	strb	r3, [r7, #27]
 80052ac:	bf00      	nop
 80052ae:	e07b      	b.n	80053a8 <UART_SetConfig+0x2a8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a57      	ldr	r2, [pc, #348]	; (8005414 <UART_SetConfig+0x314>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d120      	bne.n	80052fc <UART_SetConfig+0x1fc>
 80052ba:	4b53      	ldr	r3, [pc, #332]	; (8005408 <UART_SetConfig+0x308>)
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052c4:	2b40      	cmp	r3, #64	; 0x40
 80052c6:	d00f      	beq.n	80052e8 <UART_SetConfig+0x1e8>
 80052c8:	2b40      	cmp	r3, #64	; 0x40
 80052ca:	d802      	bhi.n	80052d2 <UART_SetConfig+0x1d2>
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <UART_SetConfig+0x1dc>
 80052d0:	e010      	b.n	80052f4 <UART_SetConfig+0x1f4>
 80052d2:	2b80      	cmp	r3, #128	; 0x80
 80052d4:	d005      	beq.n	80052e2 <UART_SetConfig+0x1e2>
 80052d6:	2bc0      	cmp	r3, #192	; 0xc0
 80052d8:	d009      	beq.n	80052ee <UART_SetConfig+0x1ee>
 80052da:	e00b      	b.n	80052f4 <UART_SetConfig+0x1f4>
 80052dc:	2300      	movs	r3, #0
 80052de:	76fb      	strb	r3, [r7, #27]
 80052e0:	e062      	b.n	80053a8 <UART_SetConfig+0x2a8>
 80052e2:	2302      	movs	r3, #2
 80052e4:	76fb      	strb	r3, [r7, #27]
 80052e6:	e05f      	b.n	80053a8 <UART_SetConfig+0x2a8>
 80052e8:	2304      	movs	r3, #4
 80052ea:	76fb      	strb	r3, [r7, #27]
 80052ec:	e05c      	b.n	80053a8 <UART_SetConfig+0x2a8>
 80052ee:	2308      	movs	r3, #8
 80052f0:	76fb      	strb	r3, [r7, #27]
 80052f2:	e059      	b.n	80053a8 <UART_SetConfig+0x2a8>
 80052f4:	2310      	movs	r3, #16
 80052f6:	76fb      	strb	r3, [r7, #27]
 80052f8:	bf00      	nop
 80052fa:	e055      	b.n	80053a8 <UART_SetConfig+0x2a8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a45      	ldr	r2, [pc, #276]	; (8005418 <UART_SetConfig+0x318>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d124      	bne.n	8005350 <UART_SetConfig+0x250>
 8005306:	4b40      	ldr	r3, [pc, #256]	; (8005408 <UART_SetConfig+0x308>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005314:	d012      	beq.n	800533c <UART_SetConfig+0x23c>
 8005316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800531a:	d802      	bhi.n	8005322 <UART_SetConfig+0x222>
 800531c:	2b00      	cmp	r3, #0
 800531e:	d007      	beq.n	8005330 <UART_SetConfig+0x230>
 8005320:	e012      	b.n	8005348 <UART_SetConfig+0x248>
 8005322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005326:	d006      	beq.n	8005336 <UART_SetConfig+0x236>
 8005328:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800532c:	d009      	beq.n	8005342 <UART_SetConfig+0x242>
 800532e:	e00b      	b.n	8005348 <UART_SetConfig+0x248>
 8005330:	2300      	movs	r3, #0
 8005332:	76fb      	strb	r3, [r7, #27]
 8005334:	e038      	b.n	80053a8 <UART_SetConfig+0x2a8>
 8005336:	2302      	movs	r3, #2
 8005338:	76fb      	strb	r3, [r7, #27]
 800533a:	e035      	b.n	80053a8 <UART_SetConfig+0x2a8>
 800533c:	2304      	movs	r3, #4
 800533e:	76fb      	strb	r3, [r7, #27]
 8005340:	e032      	b.n	80053a8 <UART_SetConfig+0x2a8>
 8005342:	2308      	movs	r3, #8
 8005344:	76fb      	strb	r3, [r7, #27]
 8005346:	e02f      	b.n	80053a8 <UART_SetConfig+0x2a8>
 8005348:	2310      	movs	r3, #16
 800534a:	76fb      	strb	r3, [r7, #27]
 800534c:	bf00      	nop
 800534e:	e02b      	b.n	80053a8 <UART_SetConfig+0x2a8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a2a      	ldr	r2, [pc, #168]	; (8005400 <UART_SetConfig+0x300>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d124      	bne.n	80053a4 <UART_SetConfig+0x2a4>
 800535a:	4b2b      	ldr	r3, [pc, #172]	; (8005408 <UART_SetConfig+0x308>)
 800535c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005360:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005368:	d012      	beq.n	8005390 <UART_SetConfig+0x290>
 800536a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536e:	d802      	bhi.n	8005376 <UART_SetConfig+0x276>
 8005370:	2b00      	cmp	r3, #0
 8005372:	d007      	beq.n	8005384 <UART_SetConfig+0x284>
 8005374:	e012      	b.n	800539c <UART_SetConfig+0x29c>
 8005376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800537a:	d006      	beq.n	800538a <UART_SetConfig+0x28a>
 800537c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005380:	d009      	beq.n	8005396 <UART_SetConfig+0x296>
 8005382:	e00b      	b.n	800539c <UART_SetConfig+0x29c>
 8005384:	2300      	movs	r3, #0
 8005386:	76fb      	strb	r3, [r7, #27]
 8005388:	e00e      	b.n	80053a8 <UART_SetConfig+0x2a8>
 800538a:	2302      	movs	r3, #2
 800538c:	76fb      	strb	r3, [r7, #27]
 800538e:	e00b      	b.n	80053a8 <UART_SetConfig+0x2a8>
 8005390:	2304      	movs	r3, #4
 8005392:	76fb      	strb	r3, [r7, #27]
 8005394:	e008      	b.n	80053a8 <UART_SetConfig+0x2a8>
 8005396:	2308      	movs	r3, #8
 8005398:	76fb      	strb	r3, [r7, #27]
 800539a:	e005      	b.n	80053a8 <UART_SetConfig+0x2a8>
 800539c:	2310      	movs	r3, #16
 800539e:	76fb      	strb	r3, [r7, #27]
 80053a0:	bf00      	nop
 80053a2:	e001      	b.n	80053a8 <UART_SetConfig+0x2a8>
 80053a4:	2310      	movs	r3, #16
 80053a6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a14      	ldr	r2, [pc, #80]	; (8005400 <UART_SetConfig+0x300>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	f040 80a1 	bne.w	80054f6 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053b4:	7efb      	ldrb	r3, [r7, #27]
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d836      	bhi.n	8005428 <UART_SetConfig+0x328>
 80053ba:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <UART_SetConfig+0x2c0>)
 80053bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c0:	080053e5 	.word	0x080053e5
 80053c4:	08005429 	.word	0x08005429
 80053c8:	080053ed 	.word	0x080053ed
 80053cc:	08005429 	.word	0x08005429
 80053d0:	080053f3 	.word	0x080053f3
 80053d4:	08005429 	.word	0x08005429
 80053d8:	08005429 	.word	0x08005429
 80053dc:	08005429 	.word	0x08005429
 80053e0:	08005421 	.word	0x08005421
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053e4:	f7fe fcaa 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 80053e8:	6178      	str	r0, [r7, #20]
        break;
 80053ea:	e022      	b.n	8005432 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053ec:	4b0b      	ldr	r3, [pc, #44]	; (800541c <UART_SetConfig+0x31c>)
 80053ee:	617b      	str	r3, [r7, #20]
        break;
 80053f0:	e01f      	b.n	8005432 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053f2:	f7fe fc0d 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 80053f6:	6178      	str	r0, [r7, #20]
        break;
 80053f8:	e01b      	b.n	8005432 <UART_SetConfig+0x332>
 80053fa:	bf00      	nop
 80053fc:	cfff69f3 	.word	0xcfff69f3
 8005400:	40008000 	.word	0x40008000
 8005404:	40013800 	.word	0x40013800
 8005408:	40021000 	.word	0x40021000
 800540c:	40004400 	.word	0x40004400
 8005410:	40004800 	.word	0x40004800
 8005414:	40004c00 	.word	0x40004c00
 8005418:	40005000 	.word	0x40005000
 800541c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005424:	617b      	str	r3, [r7, #20]
        break;
 8005426:	e004      	b.n	8005432 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	76bb      	strb	r3, [r7, #26]
        break;
 8005430:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 811d 	beq.w	8005674 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	4a97      	ldr	r2, [pc, #604]	; (800569c <UART_SetConfig+0x59c>)
 8005440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005444:	461a      	mov	r2, r3
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	fbb3 f3f2 	udiv	r3, r3, r2
 800544c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	4413      	add	r3, r2
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	429a      	cmp	r2, r3
 800545c:	d305      	bcc.n	800546a <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	429a      	cmp	r2, r3
 8005468:	d902      	bls.n	8005470 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	76bb      	strb	r3, [r7, #26]
 800546e:	e101      	b.n	8005674 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	4618      	mov	r0, r3
 8005474:	f04f 0100 	mov.w	r1, #0
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	4a87      	ldr	r2, [pc, #540]	; (800569c <UART_SetConfig+0x59c>)
 800547e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005482:	b29b      	uxth	r3, r3
 8005484:	f04f 0400 	mov.w	r4, #0
 8005488:	461a      	mov	r2, r3
 800548a:	4623      	mov	r3, r4
 800548c:	f7fa ff08 	bl	80002a0 <__aeabi_uldivmod>
 8005490:	4603      	mov	r3, r0
 8005492:	460c      	mov	r4, r1
 8005494:	4619      	mov	r1, r3
 8005496:	4622      	mov	r2, r4
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	f04f 0400 	mov.w	r4, #0
 80054a0:	0214      	lsls	r4, r2, #8
 80054a2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80054a6:	020b      	lsls	r3, r1, #8
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6852      	ldr	r2, [r2, #4]
 80054ac:	0852      	lsrs	r2, r2, #1
 80054ae:	4611      	mov	r1, r2
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	eb13 0b01 	adds.w	fp, r3, r1
 80054b8:	eb44 0c02 	adc.w	ip, r4, r2
 80054bc:	4658      	mov	r0, fp
 80054be:	4661      	mov	r1, ip
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f04f 0400 	mov.w	r4, #0
 80054c8:	461a      	mov	r2, r3
 80054ca:	4623      	mov	r3, r4
 80054cc:	f7fa fee8 	bl	80002a0 <__aeabi_uldivmod>
 80054d0:	4603      	mov	r3, r0
 80054d2:	460c      	mov	r4, r1
 80054d4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054dc:	d308      	bcc.n	80054f0 <UART_SetConfig+0x3f0>
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054e4:	d204      	bcs.n	80054f0 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	60da      	str	r2, [r3, #12]
 80054ee:	e0c1      	b.n	8005674 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	76bb      	strb	r3, [r7, #26]
 80054f4:	e0be      	b.n	8005674 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054fe:	d164      	bne.n	80055ca <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8005500:	7efb      	ldrb	r3, [r7, #27]
 8005502:	2b08      	cmp	r3, #8
 8005504:	d827      	bhi.n	8005556 <UART_SetConfig+0x456>
 8005506:	a201      	add	r2, pc, #4	; (adr r2, 800550c <UART_SetConfig+0x40c>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005531 	.word	0x08005531
 8005510:	08005539 	.word	0x08005539
 8005514:	08005541 	.word	0x08005541
 8005518:	08005557 	.word	0x08005557
 800551c:	08005547 	.word	0x08005547
 8005520:	08005557 	.word	0x08005557
 8005524:	08005557 	.word	0x08005557
 8005528:	08005557 	.word	0x08005557
 800552c:	0800554f 	.word	0x0800554f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005530:	f7fe fc04 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 8005534:	6178      	str	r0, [r7, #20]
        break;
 8005536:	e013      	b.n	8005560 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005538:	f7fe fc16 	bl	8003d68 <HAL_RCC_GetPCLK2Freq>
 800553c:	6178      	str	r0, [r7, #20]
        break;
 800553e:	e00f      	b.n	8005560 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005540:	4b57      	ldr	r3, [pc, #348]	; (80056a0 <UART_SetConfig+0x5a0>)
 8005542:	617b      	str	r3, [r7, #20]
        break;
 8005544:	e00c      	b.n	8005560 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005546:	f7fe fb63 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 800554a:	6178      	str	r0, [r7, #20]
        break;
 800554c:	e008      	b.n	8005560 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800554e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005552:	617b      	str	r3, [r7, #20]
        break;
 8005554:	e004      	b.n	8005560 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	76bb      	strb	r3, [r7, #26]
        break;
 800555e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 8086 	beq.w	8005674 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	4a4b      	ldr	r2, [pc, #300]	; (800569c <UART_SetConfig+0x59c>)
 800556e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005572:	461a      	mov	r2, r3
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	fbb3 f3f2 	udiv	r3, r3, r2
 800557a:	005a      	lsls	r2, r3, #1
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	085b      	lsrs	r3, r3, #1
 8005582:	441a      	add	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	fbb2 f3f3 	udiv	r3, r2, r3
 800558c:	b29b      	uxth	r3, r3
 800558e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	2b0f      	cmp	r3, #15
 8005594:	d916      	bls.n	80055c4 <UART_SetConfig+0x4c4>
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559c:	d212      	bcs.n	80055c4 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f023 030f 	bic.w	r3, r3, #15
 80055a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	085b      	lsrs	r3, r3, #1
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	89fb      	ldrh	r3, [r7, #14]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	89fa      	ldrh	r2, [r7, #14]
 80055c0:	60da      	str	r2, [r3, #12]
 80055c2:	e057      	b.n	8005674 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	76bb      	strb	r3, [r7, #26]
 80055c8:	e054      	b.n	8005674 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055ca:	7efb      	ldrb	r3, [r7, #27]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d828      	bhi.n	8005622 <UART_SetConfig+0x522>
 80055d0:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <UART_SetConfig+0x4d8>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	080055fd 	.word	0x080055fd
 80055dc:	08005605 	.word	0x08005605
 80055e0:	0800560d 	.word	0x0800560d
 80055e4:	08005623 	.word	0x08005623
 80055e8:	08005613 	.word	0x08005613
 80055ec:	08005623 	.word	0x08005623
 80055f0:	08005623 	.word	0x08005623
 80055f4:	08005623 	.word	0x08005623
 80055f8:	0800561b 	.word	0x0800561b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055fc:	f7fe fb9e 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 8005600:	6178      	str	r0, [r7, #20]
        break;
 8005602:	e013      	b.n	800562c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005604:	f7fe fbb0 	bl	8003d68 <HAL_RCC_GetPCLK2Freq>
 8005608:	6178      	str	r0, [r7, #20]
        break;
 800560a:	e00f      	b.n	800562c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800560c:	4b24      	ldr	r3, [pc, #144]	; (80056a0 <UART_SetConfig+0x5a0>)
 800560e:	617b      	str	r3, [r7, #20]
        break;
 8005610:	e00c      	b.n	800562c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005612:	f7fe fafd 	bl	8003c10 <HAL_RCC_GetSysClockFreq>
 8005616:	6178      	str	r0, [r7, #20]
        break;
 8005618:	e008      	b.n	800562c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800561a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800561e:	617b      	str	r3, [r7, #20]
        break;
 8005620:	e004      	b.n	800562c <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	76bb      	strb	r3, [r7, #26]
        break;
 800562a:	bf00      	nop
    }

    if (pclk != 0U)
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d020      	beq.n	8005674 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	4a19      	ldr	r2, [pc, #100]	; (800569c <UART_SetConfig+0x59c>)
 8005638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800563c:	461a      	mov	r2, r3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	fbb3 f2f2 	udiv	r2, r3, r2
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	085b      	lsrs	r3, r3, #1
 800564a:	441a      	add	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	fbb2 f3f3 	udiv	r3, r2, r3
 8005654:	b29b      	uxth	r3, r3
 8005656:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b0f      	cmp	r3, #15
 800565c:	d908      	bls.n	8005670 <UART_SetConfig+0x570>
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005664:	d204      	bcs.n	8005670 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	60da      	str	r2, [r3, #12]
 800566e:	e001      	b.n	8005674 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005690:	7ebb      	ldrb	r3, [r7, #26]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800569c:	08008d80 	.word	0x08008d80
 80056a0:	00f42400 	.word	0x00f42400

080056a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00a      	beq.n	8005712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01a      	beq.n	80057ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057a2:	d10a      	bne.n	80057ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	430a      	orrs	r2, r1
 80057da:	605a      	str	r2, [r3, #4]
  }
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80057f8:	f7fc fa76 	bl	8001ce8 <HAL_GetTick>
 80057fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b08      	cmp	r3, #8
 800580a:	d10e      	bne.n	800582a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800580c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f82c 	bl	8005878 <UART_WaitOnFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e022      	b.n	8005870 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b04      	cmp	r3, #4
 8005836:	d10e      	bne.n	8005856 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f816 	bl	8005878 <UART_WaitOnFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e00c      	b.n	8005870 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	4613      	mov	r3, r2
 8005886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005888:	e062      	b.n	8005950 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005890:	d05e      	beq.n	8005950 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005892:	f7fc fa29 	bl	8001ce8 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d302      	bcc.n	80058a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d11d      	bne.n	80058e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058b6:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0201 	bic.w	r2, r2, #1
 80058c6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e045      	b.n	8005970 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0304 	and.w	r3, r3, #4
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d02e      	beq.n	8005950 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005900:	d126      	bne.n	8005950 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800590a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800591a:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0201 	bic.w	r2, r2, #1
 800592a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2220      	movs	r2, #32
 8005938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2220      	movs	r2, #32
 8005940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e00f      	b.n	8005970 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	69da      	ldr	r2, [r3, #28]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4013      	ands	r3, r2
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	429a      	cmp	r2, r3
 800595e:	bf0c      	ite	eq
 8005960:	2301      	moveq	r3, #1
 8005962:	2300      	movne	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	429a      	cmp	r2, r3
 800596c:	d08d      	beq.n	800588a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_UARTEx_DisableFifoMode+0x16>
 800598a:	2302      	movs	r3, #2
 800598c:	e027      	b.n	80059de <HAL_UARTEx_DisableFifoMode+0x66>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2224      	movs	r2, #36	; 0x24
 800599a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0201 	bic.w	r2, r2, #1
 80059b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80059bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e02d      	b.n	8005a5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2224      	movs	r2, #36	; 0x24
 8005a0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0201 	bic.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f850 	bl	8005ae4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e02d      	b.n	8005ada <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2224      	movs	r2, #36	; 0x24
 8005a8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0201 	bic.w	r2, r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f812 	bl	8005ae4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b089      	sub	sp, #36	; 0x24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005aec:	4a2f      	ldr	r2, [pc, #188]	; (8005bac <UARTEx_SetNbDataToProcess+0xc8>)
 8005aee:	f107 0314 	add.w	r3, r7, #20
 8005af2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005af6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005afa:	4a2d      	ldr	r2, [pc, #180]	; (8005bb0 <UARTEx_SetNbDataToProcess+0xcc>)
 8005afc:	f107 030c 	add.w	r3, r7, #12
 8005b00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b04:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d108      	bne.n	8005b22 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b20:	e03d      	b.n	8005b9e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b22:	2308      	movs	r3, #8
 8005b24:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b26:	2308      	movs	r3, #8
 8005b28:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	0e5b      	lsrs	r3, r3, #25
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	0f5b      	lsrs	r3, r3, #29
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005b4a:	7fbb      	ldrb	r3, [r7, #30]
 8005b4c:	7f3a      	ldrb	r2, [r7, #28]
 8005b4e:	f107 0120 	add.w	r1, r7, #32
 8005b52:	440a      	add	r2, r1
 8005b54:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005b58:	fb02 f303 	mul.w	r3, r2, r3
 8005b5c:	7f3a      	ldrb	r2, [r7, #28]
 8005b5e:	f107 0120 	add.w	r1, r7, #32
 8005b62:	440a      	add	r2, r1
 8005b64:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005b68:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005b74:	7ffb      	ldrb	r3, [r7, #31]
 8005b76:	7f7a      	ldrb	r2, [r7, #29]
 8005b78:	f107 0120 	add.w	r1, r7, #32
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005b82:	fb02 f303 	mul.w	r3, r2, r3
 8005b86:	7f7a      	ldrb	r2, [r7, #29]
 8005b88:	f107 0120 	add.w	r1, r7, #32
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005b92:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005b9e:	bf00      	nop
 8005ba0:	3724      	adds	r7, #36	; 0x24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	08008d20 	.word	0x08008d20
 8005bb0:	08008d28 	.word	0x08008d28

08005bb4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bc6:	2b84      	cmp	r3, #132	; 0x84
 8005bc8:	d005      	beq.n	8005bd6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005bca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	3303      	adds	r3, #3
 8005bd4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bea:	f3ef 8305 	mrs	r3, IPSR
 8005bee:	607b      	str	r3, [r7, #4]
  return(result);
 8005bf0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	bf14      	ite	ne
 8005bf6:	2301      	movne	r3, #1
 8005bf8:	2300      	moveq	r3, #0
 8005bfa:	b2db      	uxtb	r3, r3
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005c0c:	f001 f92e 	bl	8006e6c <vTaskStartScheduler>
  
  return osOK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005c16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c18:	b089      	sub	sp, #36	; 0x24
 8005c1a:	af04      	add	r7, sp, #16
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d020      	beq.n	8005c6a <osThreadCreate+0x54>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01c      	beq.n	8005c6a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685c      	ldr	r4, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681d      	ldr	r5, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691e      	ldr	r6, [r3, #16]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff ffb6 	bl	8005bb4 <makeFreeRtosPriority>
 8005c48:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c52:	9202      	str	r2, [sp, #8]
 8005c54:	9301      	str	r3, [sp, #4]
 8005c56:	9100      	str	r1, [sp, #0]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	4632      	mov	r2, r6
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f000 ff41 	bl	8006ae6 <xTaskCreateStatic>
 8005c64:	4603      	mov	r3, r0
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	e01c      	b.n	8005ca4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685c      	ldr	r4, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c76:	b29e      	uxth	r6, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff ff98 	bl	8005bb4 <makeFreeRtosPriority>
 8005c84:	4602      	mov	r2, r0
 8005c86:	f107 030c 	add.w	r3, r7, #12
 8005c8a:	9301      	str	r3, [sp, #4]
 8005c8c:	9200      	str	r2, [sp, #0]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	4632      	mov	r2, r6
 8005c92:	4629      	mov	r1, r5
 8005c94:	4620      	mov	r0, r4
 8005c96:	f000 ff80 	bl	8006b9a <xTaskCreate>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d001      	beq.n	8005ca4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e000      	b.n	8005ca6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005cae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <osDelay+0x16>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	e000      	b.n	8005cc6 <osDelay+0x18>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f001 f89c 	bl	8006e04 <vTaskDelay>
  
  return osOK;
 8005ccc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	4619      	mov	r1, r3
 8005cec:	2001      	movs	r0, #1
 8005cee:	f000 faae 	bl	800624e <xQueueCreateMutexStatic>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	e003      	b.n	8005cfe <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005cf6:	2001      	movs	r0, #1
 8005cf8:	f000 fa91 	bl	800621e <xQueueCreateMutex>
 8005cfc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005d12:	2300      	movs	r3, #0
 8005d14:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <osMutexWait+0x18>
    return osErrorParameter;
 8005d1c:	2380      	movs	r3, #128	; 0x80
 8005d1e:	e03a      	b.n	8005d96 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d2a:	d103      	bne.n	8005d34 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	e009      	b.n	8005d48 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d006      	beq.n	8005d48 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <osMutexWait+0x40>
      ticks = 1;
 8005d44:	2301      	movs	r3, #1
 8005d46:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005d48:	f7ff ff4c 	bl	8005be4 <inHandlerMode>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d017      	beq.n	8005d82 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005d52:	f107 0308 	add.w	r3, r7, #8
 8005d56:	461a      	mov	r2, r3
 8005d58:	2100      	movs	r1, #0
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fd1e 	bl	800679c <xQueueReceiveFromISR>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d001      	beq.n	8005d6a <osMutexWait+0x62>
      return osErrorOS;
 8005d66:	23ff      	movs	r3, #255	; 0xff
 8005d68:	e015      	b.n	8005d96 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d011      	beq.n	8005d94 <osMutexWait+0x8c>
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <osMutexWait+0x98>)
 8005d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	e008      	b.n	8005d94 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005d82:	68f9      	ldr	r1, [r7, #12]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fc01 	bl	800658c <xQueueSemaphoreTake>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d001      	beq.n	8005d94 <osMutexWait+0x8c>
    return osErrorOS;
 8005d90:	23ff      	movs	r3, #255	; 0xff
 8005d92:	e000      	b.n	8005d96 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	e000ed04 	.word	0xe000ed04

08005da4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005db4:	f7ff ff16 	bl	8005be4 <inHandlerMode>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d016      	beq.n	8005dec <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005dbe:	f107 0308 	add.w	r3, r7, #8
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fb57 	bl	8006478 <xQueueGiveFromISR>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d001      	beq.n	8005dd4 <osMutexRelease+0x30>
      return osErrorOS;
 8005dd0:	23ff      	movs	r3, #255	; 0xff
 8005dd2:	e017      	b.n	8005e04 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d013      	beq.n	8005e02 <osMutexRelease+0x5e>
 8005dda:	4b0c      	ldr	r3, [pc, #48]	; (8005e0c <osMutexRelease+0x68>)
 8005ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	e00a      	b.n	8005e02 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005dec:	2300      	movs	r3, #0
 8005dee:	2200      	movs	r2, #0
 8005df0:	2100      	movs	r1, #0
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fa46 	bl	8006284 <xQueueGenericSend>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d001      	beq.n	8005e02 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005dfe:	23ff      	movs	r3, #255	; 0xff
 8005e00:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005e02:	68fb      	ldr	r3, [r7, #12]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	e000ed04 	.word	0xe000ed04

08005e10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f103 0208 	add.w	r2, r3, #8
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f103 0208 	add.w	r2, r3, #8
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f103 0208 	add.w	r2, r3, #8
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	601a      	str	r2, [r3, #0]
}
 8005ea6:	bf00      	nop
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec8:	d103      	bne.n	8005ed2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	e00c      	b.n	8005eec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	3308      	adds	r3, #8
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	e002      	b.n	8005ee0 <vListInsert+0x2e>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d2f6      	bcs.n	8005eda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	601a      	str	r2, [r3, #0]
}
 8005f18:	bf00      	nop
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6892      	ldr	r2, [r2, #8]
 8005f3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	6852      	ldr	r2, [r2, #4]
 8005f44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d103      	bne.n	8005f58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	1e5a      	subs	r2, r3, #1
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d109      	bne.n	8005fa0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	60bb      	str	r3, [r7, #8]
 8005f9e:	e7fe      	b.n	8005f9e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005fa0:	f001 feb4 	bl	8007d0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fac:	68f9      	ldr	r1, [r7, #12]
 8005fae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	441a      	add	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	68f9      	ldr	r1, [r7, #12]
 8005fd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fd6:	fb01 f303 	mul.w	r3, r1, r3
 8005fda:	441a      	add	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	22ff      	movs	r2, #255	; 0xff
 8005fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	22ff      	movs	r2, #255	; 0xff
 8005fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d114      	bne.n	8006020 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d01a      	beq.n	8006034 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3310      	adds	r3, #16
 8006002:	4618      	mov	r0, r3
 8006004:	f001 f970 	bl	80072e8 <xTaskRemoveFromEventList>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d012      	beq.n	8006034 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800600e:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <xQueueGenericReset+0xcc>)
 8006010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	e009      	b.n	8006034 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3310      	adds	r3, #16
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fef3 	bl	8005e10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3324      	adds	r3, #36	; 0x24
 800602e:	4618      	mov	r0, r3
 8006030:	f7ff feee 	bl	8005e10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006034:	f001 fe98 	bl	8007d68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006038:	2301      	movs	r3, #1
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	e000ed04 	.word	0xe000ed04

08006048 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08e      	sub	sp, #56	; 0x38
 800604c:	af02      	add	r7, sp, #8
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d109      	bne.n	8006070 <xQueueGenericCreateStatic+0x28>
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	62bb      	str	r3, [r7, #40]	; 0x28
 800606e:	e7fe      	b.n	800606e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d109      	bne.n	800608a <xQueueGenericCreateStatic+0x42>
 8006076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
 8006088:	e7fe      	b.n	8006088 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <xQueueGenericCreateStatic+0x4e>
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <xQueueGenericCreateStatic+0x52>
 8006096:	2301      	movs	r3, #1
 8006098:	e000      	b.n	800609c <xQueueGenericCreateStatic+0x54>
 800609a:	2300      	movs	r3, #0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d109      	bne.n	80060b4 <xQueueGenericCreateStatic+0x6c>
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	623b      	str	r3, [r7, #32]
 80060b2:	e7fe      	b.n	80060b2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d102      	bne.n	80060c0 <xQueueGenericCreateStatic+0x78>
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <xQueueGenericCreateStatic+0x7c>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e000      	b.n	80060c6 <xQueueGenericCreateStatic+0x7e>
 80060c4:	2300      	movs	r3, #0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d109      	bne.n	80060de <xQueueGenericCreateStatic+0x96>
 80060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	61fb      	str	r3, [r7, #28]
 80060dc:	e7fe      	b.n	80060dc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060de:	2348      	movs	r3, #72	; 0x48
 80060e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b48      	cmp	r3, #72	; 0x48
 80060e6:	d009      	beq.n	80060fc <xQueueGenericCreateStatic+0xb4>
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	e7fe      	b.n	80060fa <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00d      	beq.n	8006124 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006110:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	4613      	mov	r3, r2
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 f844 	bl	80061ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006126:	4618      	mov	r0, r3
 8006128:	3730      	adds	r7, #48	; 0x30
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800612e:	b580      	push	{r7, lr}
 8006130:	b08a      	sub	sp, #40	; 0x28
 8006132:	af02      	add	r7, sp, #8
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	4613      	mov	r3, r2
 800613a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d109      	bne.n	8006156 <xQueueGenericCreate+0x28>
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	613b      	str	r3, [r7, #16]
 8006154:	e7fe      	b.n	8006154 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d102      	bne.n	8006162 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800615c:	2300      	movs	r3, #0
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	e004      	b.n	800616c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	fb02 f303 	mul.w	r3, r2, r3
 800616a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	3348      	adds	r3, #72	; 0x48
 8006170:	4618      	mov	r0, r3
 8006172:	f001 fee5 	bl	8007f40 <pvPortMalloc>
 8006176:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d011      	beq.n	80061a2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	3348      	adds	r3, #72	; 0x48
 8006186:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006190:	79fa      	ldrb	r2, [r7, #7]
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	4613      	mov	r3, r2
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	68b9      	ldr	r1, [r7, #8]
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 f805 	bl	80061ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061a2:	69bb      	ldr	r3, [r7, #24]
	}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3720      	adds	r7, #32
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d103      	bne.n	80061c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	e002      	b.n	80061ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80061da:	2101      	movs	r1, #1
 80061dc:	69b8      	ldr	r0, [r7, #24]
 80061de:	f7ff fecb 	bl	8005f78 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80061e2:	bf00      	nop
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b082      	sub	sp, #8
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00e      	beq.n	8006216 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800620a:	2300      	movs	r3, #0
 800620c:	2200      	movs	r2, #0
 800620e:	2100      	movs	r1, #0
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f837 	bl	8006284 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006216:	bf00      	nop
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800621e:	b580      	push	{r7, lr}
 8006220:	b086      	sub	sp, #24
 8006222:	af00      	add	r7, sp, #0
 8006224:	4603      	mov	r3, r0
 8006226:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006228:	2301      	movs	r3, #1
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	2300      	movs	r3, #0
 800622e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	461a      	mov	r2, r3
 8006234:	6939      	ldr	r1, [r7, #16]
 8006236:	6978      	ldr	r0, [r7, #20]
 8006238:	f7ff ff79 	bl	800612e <xQueueGenericCreate>
 800623c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f7ff ffd3 	bl	80061ea <prvInitialiseMutex>

		return xNewQueue;
 8006244:	68fb      	ldr	r3, [r7, #12]
	}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800624e:	b580      	push	{r7, lr}
 8006250:	b088      	sub	sp, #32
 8006252:	af02      	add	r7, sp, #8
 8006254:	4603      	mov	r3, r0
 8006256:	6039      	str	r1, [r7, #0]
 8006258:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800625a:	2301      	movs	r3, #1
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	2300      	movs	r3, #0
 8006260:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2200      	movs	r2, #0
 800626a:	6939      	ldr	r1, [r7, #16]
 800626c:	6978      	ldr	r0, [r7, #20]
 800626e:	f7ff feeb 	bl	8006048 <xQueueGenericCreateStatic>
 8006272:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f7ff ffb8 	bl	80061ea <prvInitialiseMutex>

		return xNewQueue;
 800627a:	68fb      	ldr	r3, [r7, #12]
	}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08e      	sub	sp, #56	; 0x38
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006292:	2300      	movs	r3, #0
 8006294:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	2b00      	cmp	r3, #0
 800629e:	d109      	bne.n	80062b4 <xQueueGenericSend+0x30>
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80062b2:	e7fe      	b.n	80062b2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d103      	bne.n	80062c2 <xQueueGenericSend+0x3e>
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <xQueueGenericSend+0x42>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e000      	b.n	80062c8 <xQueueGenericSend+0x44>
 80062c6:	2300      	movs	r3, #0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d109      	bne.n	80062e0 <xQueueGenericSend+0x5c>
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
 80062de:	e7fe      	b.n	80062de <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d103      	bne.n	80062ee <xQueueGenericSend+0x6a>
 80062e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <xQueueGenericSend+0x6e>
 80062ee:	2301      	movs	r3, #1
 80062f0:	e000      	b.n	80062f4 <xQueueGenericSend+0x70>
 80062f2:	2300      	movs	r3, #0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d109      	bne.n	800630c <xQueueGenericSend+0x88>
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	623b      	str	r3, [r7, #32]
 800630a:	e7fe      	b.n	800630a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800630c:	f001 f9a2 	bl	8007654 <xTaskGetSchedulerState>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d102      	bne.n	800631c <xQueueGenericSend+0x98>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <xQueueGenericSend+0x9c>
 800631c:	2301      	movs	r3, #1
 800631e:	e000      	b.n	8006322 <xQueueGenericSend+0x9e>
 8006320:	2300      	movs	r3, #0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d109      	bne.n	800633a <xQueueGenericSend+0xb6>
 8006326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	61fb      	str	r3, [r7, #28]
 8006338:	e7fe      	b.n	8006338 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800633a:	f001 fce7 	bl	8007d0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006346:	429a      	cmp	r2, r3
 8006348:	d302      	bcc.n	8006350 <xQueueGenericSend+0xcc>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b02      	cmp	r3, #2
 800634e:	d129      	bne.n	80063a4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006356:	f000 fab6 	bl	80068c6 <prvCopyDataToQueue>
 800635a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	2b00      	cmp	r3, #0
 8006362:	d010      	beq.n	8006386 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	3324      	adds	r3, #36	; 0x24
 8006368:	4618      	mov	r0, r3
 800636a:	f000 ffbd 	bl	80072e8 <xTaskRemoveFromEventList>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d013      	beq.n	800639c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006374:	4b3f      	ldr	r3, [pc, #252]	; (8006474 <xQueueGenericSend+0x1f0>)
 8006376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	e00a      	b.n	800639c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d007      	beq.n	800639c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800638c:	4b39      	ldr	r3, [pc, #228]	; (8006474 <xQueueGenericSend+0x1f0>)
 800638e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800639c:	f001 fce4 	bl	8007d68 <vPortExitCritical>
				return pdPASS;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e063      	b.n	800646c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d103      	bne.n	80063b2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063aa:	f001 fcdd 	bl	8007d68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	e05c      	b.n	800646c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d106      	bne.n	80063c6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063b8:	f107 0314 	add.w	r3, r7, #20
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 fff5 	bl	80073ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063c2:	2301      	movs	r3, #1
 80063c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063c6:	f001 fccf 	bl	8007d68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063ca:	f000 fdad 	bl	8006f28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063ce:	f001 fc9d 	bl	8007d0c <vPortEnterCritical>
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063d8:	b25b      	sxtb	r3, r3
 80063da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063de:	d103      	bne.n	80063e8 <xQueueGenericSend+0x164>
 80063e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063ee:	b25b      	sxtb	r3, r3
 80063f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063f4:	d103      	bne.n	80063fe <xQueueGenericSend+0x17a>
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063fe:	f001 fcb3 	bl	8007d68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006402:	1d3a      	adds	r2, r7, #4
 8006404:	f107 0314 	add.w	r3, r7, #20
 8006408:	4611      	mov	r1, r2
 800640a:	4618      	mov	r0, r3
 800640c:	f000 ffe4 	bl	80073d8 <xTaskCheckForTimeOut>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d124      	bne.n	8006460 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006416:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006418:	f000 fb4d 	bl	8006ab6 <prvIsQueueFull>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d018      	beq.n	8006454 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	3310      	adds	r3, #16
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	4611      	mov	r1, r2
 800642a:	4618      	mov	r0, r3
 800642c:	f000 ff38 	bl	80072a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006432:	f000 fad8 	bl	80069e6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006436:	f000 fd85 	bl	8006f44 <xTaskResumeAll>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	f47f af7c 	bne.w	800633a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <xQueueGenericSend+0x1f0>)
 8006444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	e772      	b.n	800633a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006456:	f000 fac6 	bl	80069e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800645a:	f000 fd73 	bl	8006f44 <xTaskResumeAll>
 800645e:	e76c      	b.n	800633a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006462:	f000 fac0 	bl	80069e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006466:	f000 fd6d 	bl	8006f44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800646a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800646c:	4618      	mov	r0, r3
 800646e:	3738      	adds	r7, #56	; 0x38
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	e000ed04 	.word	0xe000ed04

08006478 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08e      	sub	sp, #56	; 0x38
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	2b00      	cmp	r3, #0
 800648a:	d109      	bne.n	80064a0 <xQueueGiveFromISR+0x28>
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	623b      	str	r3, [r7, #32]
 800649e:	e7fe      	b.n	800649e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80064a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d009      	beq.n	80064bc <xQueueGiveFromISR+0x44>
 80064a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	61fb      	str	r3, [r7, #28]
 80064ba:	e7fe      	b.n	80064ba <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d103      	bne.n	80064cc <xQueueGiveFromISR+0x54>
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <xQueueGiveFromISR+0x58>
 80064cc:	2301      	movs	r3, #1
 80064ce:	e000      	b.n	80064d2 <xQueueGiveFromISR+0x5a>
 80064d0:	2300      	movs	r3, #0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d109      	bne.n	80064ea <xQueueGiveFromISR+0x72>
 80064d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	e7fe      	b.n	80064e8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064ea:	f001 fceb 	bl	8007ec4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064ee:	f3ef 8211 	mrs	r2, BASEPRI
 80064f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	617a      	str	r2, [r7, #20]
 8006504:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006506:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006508:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006516:	429a      	cmp	r2, r3
 8006518:	d22b      	bcs.n	8006572 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800652c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006534:	d112      	bne.n	800655c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	2b00      	cmp	r3, #0
 800653c:	d016      	beq.n	800656c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	3324      	adds	r3, #36	; 0x24
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fed0 	bl	80072e8 <xTaskRemoveFromEventList>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00e      	beq.n	800656c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00b      	beq.n	800656c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2201      	movs	r2, #1
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	e007      	b.n	800656c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800655c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006560:	3301      	adds	r3, #1
 8006562:	b2db      	uxtb	r3, r3
 8006564:	b25a      	sxtb	r2, r3
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800656c:	2301      	movs	r3, #1
 800656e:	637b      	str	r3, [r7, #52]	; 0x34
 8006570:	e001      	b.n	8006576 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006572:	2300      	movs	r3, #0
 8006574:	637b      	str	r3, [r7, #52]	; 0x34
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006582:	4618      	mov	r0, r3
 8006584:	3738      	adds	r7, #56	; 0x38
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b08e      	sub	sp, #56	; 0x38
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006596:	2300      	movs	r3, #0
 8006598:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800659e:	2300      	movs	r3, #0
 80065a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d109      	bne.n	80065bc <xQueueSemaphoreTake+0x30>
	__asm volatile
 80065a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	623b      	str	r3, [r7, #32]
 80065ba:	e7fe      	b.n	80065ba <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80065bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d009      	beq.n	80065d8 <xQueueSemaphoreTake+0x4c>
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	61fb      	str	r3, [r7, #28]
 80065d6:	e7fe      	b.n	80065d6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065d8:	f001 f83c 	bl	8007654 <xTaskGetSchedulerState>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d102      	bne.n	80065e8 <xQueueSemaphoreTake+0x5c>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <xQueueSemaphoreTake+0x60>
 80065e8:	2301      	movs	r3, #1
 80065ea:	e000      	b.n	80065ee <xQueueSemaphoreTake+0x62>
 80065ec:	2300      	movs	r3, #0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d109      	bne.n	8006606 <xQueueSemaphoreTake+0x7a>
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	61bb      	str	r3, [r7, #24]
 8006604:	e7fe      	b.n	8006604 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006606:	f001 fb81 	bl	8007d0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	2b00      	cmp	r3, #0
 8006614:	d024      	beq.n	8006660 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	1e5a      	subs	r2, r3, #1
 800661a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d104      	bne.n	8006630 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006626:	f001 f9cf 	bl	80079c8 <pvTaskIncrementMutexHeldCount>
 800662a:	4602      	mov	r2, r0
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00f      	beq.n	8006658 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663a:	3310      	adds	r3, #16
 800663c:	4618      	mov	r0, r3
 800663e:	f000 fe53 	bl	80072e8 <xTaskRemoveFromEventList>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d007      	beq.n	8006658 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006648:	4b53      	ldr	r3, [pc, #332]	; (8006798 <xQueueSemaphoreTake+0x20c>)
 800664a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006658:	f001 fb86 	bl	8007d68 <vPortExitCritical>
				return pdPASS;
 800665c:	2301      	movs	r3, #1
 800665e:	e096      	b.n	800678e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d110      	bne.n	8006688 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	2b00      	cmp	r3, #0
 800666a:	d009      	beq.n	8006680 <xQueueSemaphoreTake+0xf4>
 800666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	617b      	str	r3, [r7, #20]
 800667e:	e7fe      	b.n	800667e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006680:	f001 fb72 	bl	8007d68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006684:	2300      	movs	r3, #0
 8006686:	e082      	b.n	800678e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668a:	2b00      	cmp	r3, #0
 800668c:	d106      	bne.n	800669c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800668e:	f107 030c 	add.w	r3, r7, #12
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fe8a 	bl	80073ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006698:	2301      	movs	r3, #1
 800669a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800669c:	f001 fb64 	bl	8007d68 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066a0:	f000 fc42 	bl	8006f28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066a4:	f001 fb32 	bl	8007d0c <vPortEnterCritical>
 80066a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066ae:	b25b      	sxtb	r3, r3
 80066b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066b4:	d103      	bne.n	80066be <xQueueSemaphoreTake+0x132>
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066c4:	b25b      	sxtb	r3, r3
 80066c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066ca:	d103      	bne.n	80066d4 <xQueueSemaphoreTake+0x148>
 80066cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066d4:	f001 fb48 	bl	8007d68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066d8:	463a      	mov	r2, r7
 80066da:	f107 030c 	add.w	r3, r7, #12
 80066de:	4611      	mov	r1, r2
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fe79 	bl	80073d8 <xTaskCheckForTimeOut>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d132      	bne.n	8006752 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066ee:	f000 f9cc 	bl	8006a8a <prvIsQueueEmpty>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d026      	beq.n	8006746 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d109      	bne.n	8006714 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006700:	f001 fb04 	bl	8007d0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	4618      	mov	r0, r3
 800670a:	f000 ffc1 	bl	8007690 <xTaskPriorityInherit>
 800670e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006710:	f001 fb2a 	bl	8007d68 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006716:	3324      	adds	r3, #36	; 0x24
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	4611      	mov	r1, r2
 800671c:	4618      	mov	r0, r3
 800671e:	f000 fdbf 	bl	80072a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006722:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006724:	f000 f95f 	bl	80069e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006728:	f000 fc0c 	bl	8006f44 <xTaskResumeAll>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	f47f af69 	bne.w	8006606 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006734:	4b18      	ldr	r3, [pc, #96]	; (8006798 <xQueueSemaphoreTake+0x20c>)
 8006736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	e75f      	b.n	8006606 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006746:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006748:	f000 f94d 	bl	80069e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800674c:	f000 fbfa 	bl	8006f44 <xTaskResumeAll>
 8006750:	e759      	b.n	8006606 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006752:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006754:	f000 f947 	bl	80069e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006758:	f000 fbf4 	bl	8006f44 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800675c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800675e:	f000 f994 	bl	8006a8a <prvIsQueueEmpty>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	f43f af4e 	beq.w	8006606 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00d      	beq.n	800678c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006770:	f001 facc 	bl	8007d0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006774:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006776:	f000 f88e 	bl	8006896 <prvGetDisinheritPriorityAfterTimeout>
 800677a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006782:	4618      	mov	r0, r3
 8006784:	f001 f888 	bl	8007898 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006788:	f001 faee 	bl	8007d68 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800678c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800678e:	4618      	mov	r0, r3
 8006790:	3738      	adds	r7, #56	; 0x38
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	e000ed04 	.word	0xe000ed04

0800679c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08e      	sub	sp, #56	; 0x38
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d109      	bne.n	80067c6 <xQueueReceiveFromISR+0x2a>
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	623b      	str	r3, [r7, #32]
 80067c4:	e7fe      	b.n	80067c4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d103      	bne.n	80067d4 <xQueueReceiveFromISR+0x38>
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <xQueueReceiveFromISR+0x3c>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <xQueueReceiveFromISR+0x3e>
 80067d8:	2300      	movs	r3, #0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d109      	bne.n	80067f2 <xQueueReceiveFromISR+0x56>
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	61fb      	str	r3, [r7, #28]
 80067f0:	e7fe      	b.n	80067f0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067f2:	f001 fb67 	bl	8007ec4 <vPortValidateInterruptPriority>
	__asm volatile
 80067f6:	f3ef 8211 	mrs	r2, BASEPRI
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	61ba      	str	r2, [r7, #24]
 800680c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800680e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006810:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006816:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681a:	2b00      	cmp	r3, #0
 800681c:	d02f      	beq.n	800687e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800682c:	f000 f8b5 	bl	800699a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006832:	1e5a      	subs	r2, r3, #1
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006838:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800683c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006840:	d112      	bne.n	8006868 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d016      	beq.n	8006878 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	3310      	adds	r3, #16
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fd4a 	bl	80072e8 <xTaskRemoveFromEventList>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00e      	beq.n	8006878 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00b      	beq.n	8006878 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	e007      	b.n	8006878 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800686c:	3301      	adds	r3, #1
 800686e:	b2db      	uxtb	r3, r3
 8006870:	b25a      	sxtb	r2, r3
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006878:	2301      	movs	r3, #1
 800687a:	637b      	str	r3, [r7, #52]	; 0x34
 800687c:	e001      	b.n	8006882 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800687e:	2300      	movs	r3, #0
 8006880:	637b      	str	r3, [r7, #52]	; 0x34
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800688c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800688e:	4618      	mov	r0, r3
 8006890:	3738      	adds	r7, #56	; 0x38
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006896:	b480      	push	{r7}
 8006898:	b085      	sub	sp, #20
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d006      	beq.n	80068b4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f1c3 0307 	rsb	r3, r3, #7
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	e001      	b.n	80068b8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80068b8:	68fb      	ldr	r3, [r7, #12]
	}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b086      	sub	sp, #24
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068d2:	2300      	movs	r3, #0
 80068d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10d      	bne.n	8006900 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d14d      	bne.n	8006988 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 ff4d 	bl	8007790 <xTaskPriorityDisinherit>
 80068f6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	609a      	str	r2, [r3, #8]
 80068fe:	e043      	b.n	8006988 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d119      	bne.n	800693a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6858      	ldr	r0, [r3, #4]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	461a      	mov	r2, r3
 8006910:	68b9      	ldr	r1, [r7, #8]
 8006912:	f001 fd15 	bl	8008340 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	441a      	add	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	429a      	cmp	r2, r3
 800692e:	d32b      	bcc.n	8006988 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	605a      	str	r2, [r3, #4]
 8006938:	e026      	b.n	8006988 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	68d8      	ldr	r0, [r3, #12]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	461a      	mov	r2, r3
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	f001 fcfb 	bl	8008340 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	425b      	negs	r3, r3
 8006954:	441a      	add	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d207      	bcs.n	8006976 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	425b      	negs	r3, r3
 8006970:	441a      	add	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b02      	cmp	r3, #2
 800697a:	d105      	bne.n	8006988 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	3b01      	subs	r3, #1
 8006986:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006990:	697b      	ldr	r3, [r7, #20]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d018      	beq.n	80069de <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b4:	441a      	add	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d303      	bcc.n	80069ce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68d9      	ldr	r1, [r3, #12]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	461a      	mov	r2, r3
 80069d8:	6838      	ldr	r0, [r7, #0]
 80069da:	f001 fcb1 	bl	8008340 <memcpy>
	}
}
 80069de:	bf00      	nop
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069ee:	f001 f98d 	bl	8007d0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069f8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069fa:	e011      	b.n	8006a20 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d012      	beq.n	8006a2a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3324      	adds	r3, #36	; 0x24
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fc6d 	bl	80072e8 <xTaskRemoveFromEventList>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a14:	f000 fd40 	bl	8007498 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	dce9      	bgt.n	80069fc <prvUnlockQueue+0x16>
 8006a28:	e000      	b.n	8006a2c <prvUnlockQueue+0x46>
					break;
 8006a2a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	22ff      	movs	r2, #255	; 0xff
 8006a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a34:	f001 f998 	bl	8007d68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a38:	f001 f968 	bl	8007d0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a42:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a44:	e011      	b.n	8006a6a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d012      	beq.n	8006a74 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	3310      	adds	r3, #16
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fc48 	bl	80072e8 <xTaskRemoveFromEventList>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a5e:	f000 fd1b 	bl	8007498 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a62:	7bbb      	ldrb	r3, [r7, #14]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	dce9      	bgt.n	8006a46 <prvUnlockQueue+0x60>
 8006a72:	e000      	b.n	8006a76 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a74:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	22ff      	movs	r2, #255	; 0xff
 8006a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a7e:	f001 f973 	bl	8007d68 <vPortExitCritical>
}
 8006a82:	bf00      	nop
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a92:	f001 f93b 	bl	8007d0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d102      	bne.n	8006aa4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	e001      	b.n	8006aa8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aa8:	f001 f95e 	bl	8007d68 <vPortExitCritical>

	return xReturn;
 8006aac:	68fb      	ldr	r3, [r7, #12]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b084      	sub	sp, #16
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006abe:	f001 f925 	bl	8007d0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d102      	bne.n	8006ad4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	60fb      	str	r3, [r7, #12]
 8006ad2:	e001      	b.n	8006ad8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ad8:	f001 f946 	bl	8007d68 <vPortExitCritical>

	return xReturn;
 8006adc:	68fb      	ldr	r3, [r7, #12]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b08e      	sub	sp, #56	; 0x38
 8006aea:	af04      	add	r7, sp, #16
 8006aec:	60f8      	str	r0, [r7, #12]
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	607a      	str	r2, [r7, #4]
 8006af2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d109      	bne.n	8006b0e <xTaskCreateStatic+0x28>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	623b      	str	r3, [r7, #32]
 8006b0c:	e7fe      	b.n	8006b0c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d109      	bne.n	8006b28 <xTaskCreateStatic+0x42>
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	61fb      	str	r3, [r7, #28]
 8006b26:	e7fe      	b.n	8006b26 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b28:	2354      	movs	r3, #84	; 0x54
 8006b2a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2b54      	cmp	r3, #84	; 0x54
 8006b30:	d009      	beq.n	8006b46 <xTaskCreateStatic+0x60>
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	e7fe      	b.n	8006b44 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d01e      	beq.n	8006b8c <xTaskCreateStatic+0xa6>
 8006b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01b      	beq.n	8006b8c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	2202      	movs	r2, #2
 8006b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b66:	2300      	movs	r3, #0
 8006b68:	9303      	str	r3, [sp, #12]
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	9302      	str	r3, [sp, #8]
 8006b6e:	f107 0314 	add.w	r3, r7, #20
 8006b72:	9301      	str	r3, [sp, #4]
 8006b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	68b9      	ldr	r1, [r7, #8]
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f000 f850 	bl	8006c24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b86:	f000 f8d3 	bl	8006d30 <prvAddNewTaskToReadyList>
 8006b8a:	e001      	b.n	8006b90 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b90:	697b      	ldr	r3, [r7, #20]
	}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3728      	adds	r7, #40	; 0x28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b08c      	sub	sp, #48	; 0x30
 8006b9e:	af04      	add	r7, sp, #16
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	603b      	str	r3, [r7, #0]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006baa:	88fb      	ldrh	r3, [r7, #6]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f001 f9c6 	bl	8007f40 <pvPortMalloc>
 8006bb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00e      	beq.n	8006bda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bbc:	2054      	movs	r0, #84	; 0x54
 8006bbe:	f001 f9bf 	bl	8007f40 <pvPortMalloc>
 8006bc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	631a      	str	r2, [r3, #48]	; 0x30
 8006bd0:	e005      	b.n	8006bde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bd2:	6978      	ldr	r0, [r7, #20]
 8006bd4:	f001 fa76 	bl	80080c4 <vPortFree>
 8006bd8:	e001      	b.n	8006bde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d017      	beq.n	8006c14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006bec:	88fa      	ldrh	r2, [r7, #6]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	9303      	str	r3, [sp, #12]
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	9302      	str	r3, [sp, #8]
 8006bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68b9      	ldr	r1, [r7, #8]
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 f80e 	bl	8006c24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c08:	69f8      	ldr	r0, [r7, #28]
 8006c0a:	f000 f891 	bl	8006d30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	61bb      	str	r3, [r7, #24]
 8006c12:	e002      	b.n	8006c1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c1a:	69bb      	ldr	r3, [r7, #24]
	}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3720      	adds	r7, #32
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
 8006c30:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	f023 0307 	bic.w	r3, r3, #7
 8006c4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	f003 0307 	and.w	r3, r3, #7
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d009      	beq.n	8006c6a <prvInitialiseNewTask+0x46>
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	e7fe      	b.n	8006c68 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d01f      	beq.n	8006cb0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c70:	2300      	movs	r3, #0
 8006c72:	61fb      	str	r3, [r7, #28]
 8006c74:	e012      	b.n	8006c9c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	7819      	ldrb	r1, [r3, #0]
 8006c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	4413      	add	r3, r2
 8006c84:	3334      	adds	r3, #52	; 0x34
 8006c86:	460a      	mov	r2, r1
 8006c88:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	4413      	add	r3, r2
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d006      	beq.n	8006ca4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	2b0f      	cmp	r3, #15
 8006ca0:	d9e9      	bls.n	8006c76 <prvInitialiseNewTask+0x52>
 8006ca2:	e000      	b.n	8006ca6 <prvInitialiseNewTask+0x82>
			{
				break;
 8006ca4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cae:	e003      	b.n	8006cb8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	2b06      	cmp	r3, #6
 8006cbc:	d901      	bls.n	8006cc2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006cbe:	2306      	movs	r3, #6
 8006cc0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cc6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ccc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff f8b9 	bl	8005e50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	3318      	adds	r3, #24
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7ff f8b4 	bl	8005e50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	f1c3 0207 	rsb	r2, r3, #7
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cfc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d00:	2200      	movs	r2, #0
 8006d02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	68f9      	ldr	r1, [r7, #12]
 8006d10:	69b8      	ldr	r0, [r7, #24]
 8006d12:	f000 fed3 	bl	8007abc <pxPortInitialiseStack>
 8006d16:	4602      	mov	r2, r0
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d002      	beq.n	8006d28 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d28:	bf00      	nop
 8006d2a:	3720      	adds	r7, #32
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d38:	f000 ffe8 	bl	8007d0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d3c:	4b2a      	ldr	r3, [pc, #168]	; (8006de8 <prvAddNewTaskToReadyList+0xb8>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3301      	adds	r3, #1
 8006d42:	4a29      	ldr	r2, [pc, #164]	; (8006de8 <prvAddNewTaskToReadyList+0xb8>)
 8006d44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d46:	4b29      	ldr	r3, [pc, #164]	; (8006dec <prvAddNewTaskToReadyList+0xbc>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d109      	bne.n	8006d62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d4e:	4a27      	ldr	r2, [pc, #156]	; (8006dec <prvAddNewTaskToReadyList+0xbc>)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d54:	4b24      	ldr	r3, [pc, #144]	; (8006de8 <prvAddNewTaskToReadyList+0xb8>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d110      	bne.n	8006d7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d5c:	f000 fbc0 	bl	80074e0 <prvInitialiseTaskLists>
 8006d60:	e00d      	b.n	8006d7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d62:	4b23      	ldr	r3, [pc, #140]	; (8006df0 <prvAddNewTaskToReadyList+0xc0>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d109      	bne.n	8006d7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d6a:	4b20      	ldr	r3, [pc, #128]	; (8006dec <prvAddNewTaskToReadyList+0xbc>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d802      	bhi.n	8006d7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d78:	4a1c      	ldr	r2, [pc, #112]	; (8006dec <prvAddNewTaskToReadyList+0xbc>)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d7e:	4b1d      	ldr	r3, [pc, #116]	; (8006df4 <prvAddNewTaskToReadyList+0xc4>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3301      	adds	r3, #1
 8006d84:	4a1b      	ldr	r2, [pc, #108]	; (8006df4 <prvAddNewTaskToReadyList+0xc4>)
 8006d86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	409a      	lsls	r2, r3
 8006d90:	4b19      	ldr	r3, [pc, #100]	; (8006df8 <prvAddNewTaskToReadyList+0xc8>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	4a18      	ldr	r2, [pc, #96]	; (8006df8 <prvAddNewTaskToReadyList+0xc8>)
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9e:	4613      	mov	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4a15      	ldr	r2, [pc, #84]	; (8006dfc <prvAddNewTaskToReadyList+0xcc>)
 8006da8:	441a      	add	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	3304      	adds	r3, #4
 8006dae:	4619      	mov	r1, r3
 8006db0:	4610      	mov	r0, r2
 8006db2:	f7ff f85a 	bl	8005e6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006db6:	f000 ffd7 	bl	8007d68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006dba:	4b0d      	ldr	r3, [pc, #52]	; (8006df0 <prvAddNewTaskToReadyList+0xc0>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00e      	beq.n	8006de0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006dc2:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <prvAddNewTaskToReadyList+0xbc>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d207      	bcs.n	8006de0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006dd0:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <prvAddNewTaskToReadyList+0xd0>)
 8006dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006de0:	bf00      	nop
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	2000047c 	.word	0x2000047c
 8006dec:	2000037c 	.word	0x2000037c
 8006df0:	20000488 	.word	0x20000488
 8006df4:	20000498 	.word	0x20000498
 8006df8:	20000484 	.word	0x20000484
 8006dfc:	20000380 	.word	0x20000380
 8006e00:	e000ed04 	.word	0xe000ed04

08006e04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d016      	beq.n	8006e44 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e16:	4b13      	ldr	r3, [pc, #76]	; (8006e64 <vTaskDelay+0x60>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d009      	beq.n	8006e32 <vTaskDelay+0x2e>
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	60bb      	str	r3, [r7, #8]
 8006e30:	e7fe      	b.n	8006e30 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006e32:	f000 f879 	bl	8006f28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e36:	2100      	movs	r1, #0
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fdd9 	bl	80079f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e3e:	f000 f881 	bl	8006f44 <xTaskResumeAll>
 8006e42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d107      	bne.n	8006e5a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006e4a:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <vTaskDelay+0x64>)
 8006e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e5a:	bf00      	nop
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	200004a4 	.word	0x200004a4
 8006e68:	e000ed04 	.word	0xe000ed04

08006e6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08a      	sub	sp, #40	; 0x28
 8006e70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e76:	2300      	movs	r3, #0
 8006e78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e7a:	463a      	mov	r2, r7
 8006e7c:	1d39      	adds	r1, r7, #4
 8006e7e:	f107 0308 	add.w	r3, r7, #8
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7f9 ff40 	bl	8000d08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	9202      	str	r2, [sp, #8]
 8006e90:	9301      	str	r3, [sp, #4]
 8006e92:	2300      	movs	r3, #0
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	2300      	movs	r3, #0
 8006e98:	460a      	mov	r2, r1
 8006e9a:	491d      	ldr	r1, [pc, #116]	; (8006f10 <vTaskStartScheduler+0xa4>)
 8006e9c:	481d      	ldr	r0, [pc, #116]	; (8006f14 <vTaskStartScheduler+0xa8>)
 8006e9e:	f7ff fe22 	bl	8006ae6 <xTaskCreateStatic>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	4b1c      	ldr	r3, [pc, #112]	; (8006f18 <vTaskStartScheduler+0xac>)
 8006ea6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ea8:	4b1b      	ldr	r3, [pc, #108]	; (8006f18 <vTaskStartScheduler+0xac>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	e001      	b.n	8006eba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d115      	bne.n	8006eec <vTaskStartScheduler+0x80>
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ed2:	4b12      	ldr	r3, [pc, #72]	; (8006f1c <vTaskStartScheduler+0xb0>)
 8006ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ed8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006eda:	4b11      	ldr	r3, [pc, #68]	; (8006f20 <vTaskStartScheduler+0xb4>)
 8006edc:	2201      	movs	r2, #1
 8006ede:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ee0:	4b10      	ldr	r3, [pc, #64]	; (8006f24 <vTaskStartScheduler+0xb8>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ee6:	f000 fe73 	bl	8007bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006eea:	e00d      	b.n	8006f08 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ef2:	d109      	bne.n	8006f08 <vTaskStartScheduler+0x9c>
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	60fb      	str	r3, [r7, #12]
 8006f06:	e7fe      	b.n	8006f06 <vTaskStartScheduler+0x9a>
}
 8006f08:	bf00      	nop
 8006f0a:	3718      	adds	r7, #24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	08008d30 	.word	0x08008d30
 8006f14:	080074b1 	.word	0x080074b1
 8006f18:	200004a0 	.word	0x200004a0
 8006f1c:	2000049c 	.word	0x2000049c
 8006f20:	20000488 	.word	0x20000488
 8006f24:	20000480 	.word	0x20000480

08006f28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006f2c:	4b04      	ldr	r3, [pc, #16]	; (8006f40 <vTaskSuspendAll+0x18>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3301      	adds	r3, #1
 8006f32:	4a03      	ldr	r2, [pc, #12]	; (8006f40 <vTaskSuspendAll+0x18>)
 8006f34:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006f36:	bf00      	nop
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	200004a4 	.word	0x200004a4

08006f44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f52:	4b41      	ldr	r3, [pc, #260]	; (8007058 <xTaskResumeAll+0x114>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d109      	bne.n	8006f6e <xTaskResumeAll+0x2a>
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	603b      	str	r3, [r7, #0]
 8006f6c:	e7fe      	b.n	8006f6c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f6e:	f000 fecd 	bl	8007d0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f72:	4b39      	ldr	r3, [pc, #228]	; (8007058 <xTaskResumeAll+0x114>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	4a37      	ldr	r2, [pc, #220]	; (8007058 <xTaskResumeAll+0x114>)
 8006f7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f7c:	4b36      	ldr	r3, [pc, #216]	; (8007058 <xTaskResumeAll+0x114>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d161      	bne.n	8007048 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f84:	4b35      	ldr	r3, [pc, #212]	; (800705c <xTaskResumeAll+0x118>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d05d      	beq.n	8007048 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f8c:	e02e      	b.n	8006fec <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f8e:	4b34      	ldr	r3, [pc, #208]	; (8007060 <xTaskResumeAll+0x11c>)
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3318      	adds	r3, #24
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fe ffc2 	bl	8005f24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fe ffbd 	bl	8005f24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fae:	2201      	movs	r2, #1
 8006fb0:	409a      	lsls	r2, r3
 8006fb2:	4b2c      	ldr	r3, [pc, #176]	; (8007064 <xTaskResumeAll+0x120>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	4a2a      	ldr	r2, [pc, #168]	; (8007064 <xTaskResumeAll+0x120>)
 8006fba:	6013      	str	r3, [r2, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4a27      	ldr	r2, [pc, #156]	; (8007068 <xTaskResumeAll+0x124>)
 8006fca:	441a      	add	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	f7fe ff49 	bl	8005e6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fdc:	4b23      	ldr	r3, [pc, #140]	; (800706c <xTaskResumeAll+0x128>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d302      	bcc.n	8006fec <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006fe6:	4b22      	ldr	r3, [pc, #136]	; (8007070 <xTaskResumeAll+0x12c>)
 8006fe8:	2201      	movs	r2, #1
 8006fea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fec:	4b1c      	ldr	r3, [pc, #112]	; (8007060 <xTaskResumeAll+0x11c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1cc      	bne.n	8006f8e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ffa:	f000 fb0b 	bl	8007614 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006ffe:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <xTaskResumeAll+0x130>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d010      	beq.n	800702c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800700a:	f000 f837 	bl	800707c <xTaskIncrementTick>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007014:	4b16      	ldr	r3, [pc, #88]	; (8007070 <xTaskResumeAll+0x12c>)
 8007016:	2201      	movs	r2, #1
 8007018:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	3b01      	subs	r3, #1
 800701e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1f1      	bne.n	800700a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007026:	4b13      	ldr	r3, [pc, #76]	; (8007074 <xTaskResumeAll+0x130>)
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800702c:	4b10      	ldr	r3, [pc, #64]	; (8007070 <xTaskResumeAll+0x12c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d009      	beq.n	8007048 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007034:	2301      	movs	r3, #1
 8007036:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007038:	4b0f      	ldr	r3, [pc, #60]	; (8007078 <xTaskResumeAll+0x134>)
 800703a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	f3bf 8f4f 	dsb	sy
 8007044:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007048:	f000 fe8e 	bl	8007d68 <vPortExitCritical>

	return xAlreadyYielded;
 800704c:	68bb      	ldr	r3, [r7, #8]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	200004a4 	.word	0x200004a4
 800705c:	2000047c 	.word	0x2000047c
 8007060:	2000043c 	.word	0x2000043c
 8007064:	20000484 	.word	0x20000484
 8007068:	20000380 	.word	0x20000380
 800706c:	2000037c 	.word	0x2000037c
 8007070:	20000490 	.word	0x20000490
 8007074:	2000048c 	.word	0x2000048c
 8007078:	e000ed04 	.word	0xe000ed04

0800707c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007082:	2300      	movs	r3, #0
 8007084:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007086:	4b4e      	ldr	r3, [pc, #312]	; (80071c0 <xTaskIncrementTick+0x144>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	f040 8087 	bne.w	800719e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007090:	4b4c      	ldr	r3, [pc, #304]	; (80071c4 <xTaskIncrementTick+0x148>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3301      	adds	r3, #1
 8007096:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007098:	4a4a      	ldr	r2, [pc, #296]	; (80071c4 <xTaskIncrementTick+0x148>)
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d11f      	bne.n	80070e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80070a4:	4b48      	ldr	r3, [pc, #288]	; (80071c8 <xTaskIncrementTick+0x14c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d009      	beq.n	80070c2 <xTaskIncrementTick+0x46>
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	603b      	str	r3, [r7, #0]
 80070c0:	e7fe      	b.n	80070c0 <xTaskIncrementTick+0x44>
 80070c2:	4b41      	ldr	r3, [pc, #260]	; (80071c8 <xTaskIncrementTick+0x14c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	4b40      	ldr	r3, [pc, #256]	; (80071cc <xTaskIncrementTick+0x150>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a3e      	ldr	r2, [pc, #248]	; (80071c8 <xTaskIncrementTick+0x14c>)
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	4a3e      	ldr	r2, [pc, #248]	; (80071cc <xTaskIncrementTick+0x150>)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6013      	str	r3, [r2, #0]
 80070d6:	4b3e      	ldr	r3, [pc, #248]	; (80071d0 <xTaskIncrementTick+0x154>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3301      	adds	r3, #1
 80070dc:	4a3c      	ldr	r2, [pc, #240]	; (80071d0 <xTaskIncrementTick+0x154>)
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	f000 fa98 	bl	8007614 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070e4:	4b3b      	ldr	r3, [pc, #236]	; (80071d4 <xTaskIncrementTick+0x158>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d348      	bcc.n	8007180 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070ee:	4b36      	ldr	r3, [pc, #216]	; (80071c8 <xTaskIncrementTick+0x14c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d104      	bne.n	8007102 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070f8:	4b36      	ldr	r3, [pc, #216]	; (80071d4 <xTaskIncrementTick+0x158>)
 80070fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070fe:	601a      	str	r2, [r3, #0]
					break;
 8007100:	e03e      	b.n	8007180 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007102:	4b31      	ldr	r3, [pc, #196]	; (80071c8 <xTaskIncrementTick+0x14c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	429a      	cmp	r2, r3
 8007118:	d203      	bcs.n	8007122 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800711a:	4a2e      	ldr	r2, [pc, #184]	; (80071d4 <xTaskIncrementTick+0x158>)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007120:	e02e      	b.n	8007180 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	3304      	adds	r3, #4
 8007126:	4618      	mov	r0, r3
 8007128:	f7fe fefc 	bl	8005f24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007130:	2b00      	cmp	r3, #0
 8007132:	d004      	beq.n	800713e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	3318      	adds	r3, #24
 8007138:	4618      	mov	r0, r3
 800713a:	f7fe fef3 	bl	8005f24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007142:	2201      	movs	r2, #1
 8007144:	409a      	lsls	r2, r3
 8007146:	4b24      	ldr	r3, [pc, #144]	; (80071d8 <xTaskIncrementTick+0x15c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4313      	orrs	r3, r2
 800714c:	4a22      	ldr	r2, [pc, #136]	; (80071d8 <xTaskIncrementTick+0x15c>)
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007154:	4613      	mov	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4a1f      	ldr	r2, [pc, #124]	; (80071dc <xTaskIncrementTick+0x160>)
 800715e:	441a      	add	r2, r3
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	3304      	adds	r3, #4
 8007164:	4619      	mov	r1, r3
 8007166:	4610      	mov	r0, r2
 8007168:	f7fe fe7f 	bl	8005e6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007170:	4b1b      	ldr	r3, [pc, #108]	; (80071e0 <xTaskIncrementTick+0x164>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007176:	429a      	cmp	r2, r3
 8007178:	d3b9      	bcc.n	80070ee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800717a:	2301      	movs	r3, #1
 800717c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800717e:	e7b6      	b.n	80070ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007180:	4b17      	ldr	r3, [pc, #92]	; (80071e0 <xTaskIncrementTick+0x164>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007186:	4915      	ldr	r1, [pc, #84]	; (80071dc <xTaskIncrementTick+0x160>)
 8007188:	4613      	mov	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	440b      	add	r3, r1
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d907      	bls.n	80071a8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007198:	2301      	movs	r3, #1
 800719a:	617b      	str	r3, [r7, #20]
 800719c:	e004      	b.n	80071a8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800719e:	4b11      	ldr	r3, [pc, #68]	; (80071e4 <xTaskIncrementTick+0x168>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3301      	adds	r3, #1
 80071a4:	4a0f      	ldr	r2, [pc, #60]	; (80071e4 <xTaskIncrementTick+0x168>)
 80071a6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80071a8:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <xTaskIncrementTick+0x16c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80071b0:	2301      	movs	r3, #1
 80071b2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80071b4:	697b      	ldr	r3, [r7, #20]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	200004a4 	.word	0x200004a4
 80071c4:	20000480 	.word	0x20000480
 80071c8:	20000434 	.word	0x20000434
 80071cc:	20000438 	.word	0x20000438
 80071d0:	20000494 	.word	0x20000494
 80071d4:	2000049c 	.word	0x2000049c
 80071d8:	20000484 	.word	0x20000484
 80071dc:	20000380 	.word	0x20000380
 80071e0:	2000037c 	.word	0x2000037c
 80071e4:	2000048c 	.word	0x2000048c
 80071e8:	20000490 	.word	0x20000490

080071ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071f2:	4b26      	ldr	r3, [pc, #152]	; (800728c <vTaskSwitchContext+0xa0>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071fa:	4b25      	ldr	r3, [pc, #148]	; (8007290 <vTaskSwitchContext+0xa4>)
 80071fc:	2201      	movs	r2, #1
 80071fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007200:	e03e      	b.n	8007280 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007202:	4b23      	ldr	r3, [pc, #140]	; (8007290 <vTaskSwitchContext+0xa4>)
 8007204:	2200      	movs	r2, #0
 8007206:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007208:	4b22      	ldr	r3, [pc, #136]	; (8007294 <vTaskSwitchContext+0xa8>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	fab3 f383 	clz	r3, r3
 8007214:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007216:	7afb      	ldrb	r3, [r7, #11]
 8007218:	f1c3 031f 	rsb	r3, r3, #31
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	491e      	ldr	r1, [pc, #120]	; (8007298 <vTaskSwitchContext+0xac>)
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	4613      	mov	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	440b      	add	r3, r1
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d109      	bne.n	8007246 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	607b      	str	r3, [r7, #4]
 8007244:	e7fe      	b.n	8007244 <vTaskSwitchContext+0x58>
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4613      	mov	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4a11      	ldr	r2, [pc, #68]	; (8007298 <vTaskSwitchContext+0xac>)
 8007252:	4413      	add	r3, r2
 8007254:	613b      	str	r3, [r7, #16]
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	605a      	str	r2, [r3, #4]
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	3308      	adds	r3, #8
 8007268:	429a      	cmp	r2, r3
 800726a:	d104      	bne.n	8007276 <vTaskSwitchContext+0x8a>
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	605a      	str	r2, [r3, #4]
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	4a07      	ldr	r2, [pc, #28]	; (800729c <vTaskSwitchContext+0xb0>)
 800727e:	6013      	str	r3, [r2, #0]
}
 8007280:	bf00      	nop
 8007282:	371c      	adds	r7, #28
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	200004a4 	.word	0x200004a4
 8007290:	20000490 	.word	0x20000490
 8007294:	20000484 	.word	0x20000484
 8007298:	20000380 	.word	0x20000380
 800729c:	2000037c 	.word	0x2000037c

080072a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d109      	bne.n	80072c4 <vTaskPlaceOnEventList+0x24>
 80072b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	e7fe      	b.n	80072c2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072c4:	4b07      	ldr	r3, [pc, #28]	; (80072e4 <vTaskPlaceOnEventList+0x44>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3318      	adds	r3, #24
 80072ca:	4619      	mov	r1, r3
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f7fe fdf0 	bl	8005eb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072d2:	2101      	movs	r1, #1
 80072d4:	6838      	ldr	r0, [r7, #0]
 80072d6:	f000 fb8b 	bl	80079f0 <prvAddCurrentTaskToDelayedList>
}
 80072da:	bf00      	nop
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	2000037c 	.word	0x2000037c

080072e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d109      	bne.n	8007312 <xTaskRemoveFromEventList+0x2a>
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	e7fe      	b.n	8007310 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	3318      	adds	r3, #24
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe fe04 	bl	8005f24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800731c:	4b1d      	ldr	r3, [pc, #116]	; (8007394 <xTaskRemoveFromEventList+0xac>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d11c      	bne.n	800735e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	3304      	adds	r3, #4
 8007328:	4618      	mov	r0, r3
 800732a:	f7fe fdfb 	bl	8005f24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007332:	2201      	movs	r2, #1
 8007334:	409a      	lsls	r2, r3
 8007336:	4b18      	ldr	r3, [pc, #96]	; (8007398 <xTaskRemoveFromEventList+0xb0>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4313      	orrs	r3, r2
 800733c:	4a16      	ldr	r2, [pc, #88]	; (8007398 <xTaskRemoveFromEventList+0xb0>)
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007344:	4613      	mov	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4a13      	ldr	r2, [pc, #76]	; (800739c <xTaskRemoveFromEventList+0xb4>)
 800734e:	441a      	add	r2, r3
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	3304      	adds	r3, #4
 8007354:	4619      	mov	r1, r3
 8007356:	4610      	mov	r0, r2
 8007358:	f7fe fd87 	bl	8005e6a <vListInsertEnd>
 800735c:	e005      	b.n	800736a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	3318      	adds	r3, #24
 8007362:	4619      	mov	r1, r3
 8007364:	480e      	ldr	r0, [pc, #56]	; (80073a0 <xTaskRemoveFromEventList+0xb8>)
 8007366:	f7fe fd80 	bl	8005e6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736e:	4b0d      	ldr	r3, [pc, #52]	; (80073a4 <xTaskRemoveFromEventList+0xbc>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	429a      	cmp	r2, r3
 8007376:	d905      	bls.n	8007384 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007378:	2301      	movs	r3, #1
 800737a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800737c:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <xTaskRemoveFromEventList+0xc0>)
 800737e:	2201      	movs	r2, #1
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	e001      	b.n	8007388 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007384:	2300      	movs	r3, #0
 8007386:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007388:	697b      	ldr	r3, [r7, #20]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	200004a4 	.word	0x200004a4
 8007398:	20000484 	.word	0x20000484
 800739c:	20000380 	.word	0x20000380
 80073a0:	2000043c 	.word	0x2000043c
 80073a4:	2000037c 	.word	0x2000037c
 80073a8:	20000490 	.word	0x20000490

080073ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073b4:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <vTaskInternalSetTimeOutState+0x24>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073bc:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <vTaskInternalSetTimeOutState+0x28>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	605a      	str	r2, [r3, #4]
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	20000494 	.word	0x20000494
 80073d4:	20000480 	.word	0x20000480

080073d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d109      	bne.n	80073fc <xTaskCheckForTimeOut+0x24>
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	613b      	str	r3, [r7, #16]
 80073fa:	e7fe      	b.n	80073fa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d109      	bne.n	8007416 <xTaskCheckForTimeOut+0x3e>
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	e7fe      	b.n	8007414 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007416:	f000 fc79 	bl	8007d0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800741a:	4b1d      	ldr	r3, [pc, #116]	; (8007490 <xTaskCheckForTimeOut+0xb8>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007432:	d102      	bne.n	800743a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007434:	2300      	movs	r3, #0
 8007436:	61fb      	str	r3, [r7, #28]
 8007438:	e023      	b.n	8007482 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	4b15      	ldr	r3, [pc, #84]	; (8007494 <xTaskCheckForTimeOut+0xbc>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d007      	beq.n	8007456 <xTaskCheckForTimeOut+0x7e>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	429a      	cmp	r2, r3
 800744e:	d302      	bcc.n	8007456 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007450:	2301      	movs	r3, #1
 8007452:	61fb      	str	r3, [r7, #28]
 8007454:	e015      	b.n	8007482 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	429a      	cmp	r2, r3
 800745e:	d20b      	bcs.n	8007478 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	1ad2      	subs	r2, r2, r3
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7ff ff9d 	bl	80073ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007472:	2300      	movs	r3, #0
 8007474:	61fb      	str	r3, [r7, #28]
 8007476:	e004      	b.n	8007482 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2200      	movs	r2, #0
 800747c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800747e:	2301      	movs	r3, #1
 8007480:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007482:	f000 fc71 	bl	8007d68 <vPortExitCritical>

	return xReturn;
 8007486:	69fb      	ldr	r3, [r7, #28]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3720      	adds	r7, #32
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	20000480 	.word	0x20000480
 8007494:	20000494 	.word	0x20000494

08007498 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800749c:	4b03      	ldr	r3, [pc, #12]	; (80074ac <vTaskMissedYield+0x14>)
 800749e:	2201      	movs	r2, #1
 80074a0:	601a      	str	r2, [r3, #0]
}
 80074a2:	bf00      	nop
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	20000490 	.word	0x20000490

080074b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074b8:	f000 f852 	bl	8007560 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074bc:	4b06      	ldr	r3, [pc, #24]	; (80074d8 <prvIdleTask+0x28>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d9f9      	bls.n	80074b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074c4:	4b05      	ldr	r3, [pc, #20]	; (80074dc <prvIdleTask+0x2c>)
 80074c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074d4:	e7f0      	b.n	80074b8 <prvIdleTask+0x8>
 80074d6:	bf00      	nop
 80074d8:	20000380 	.word	0x20000380
 80074dc:	e000ed04 	.word	0xe000ed04

080074e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074e6:	2300      	movs	r3, #0
 80074e8:	607b      	str	r3, [r7, #4]
 80074ea:	e00c      	b.n	8007506 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4a12      	ldr	r2, [pc, #72]	; (8007540 <prvInitialiseTaskLists+0x60>)
 80074f8:	4413      	add	r3, r2
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe fc88 	bl	8005e10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3301      	adds	r3, #1
 8007504:	607b      	str	r3, [r7, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b06      	cmp	r3, #6
 800750a:	d9ef      	bls.n	80074ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800750c:	480d      	ldr	r0, [pc, #52]	; (8007544 <prvInitialiseTaskLists+0x64>)
 800750e:	f7fe fc7f 	bl	8005e10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007512:	480d      	ldr	r0, [pc, #52]	; (8007548 <prvInitialiseTaskLists+0x68>)
 8007514:	f7fe fc7c 	bl	8005e10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007518:	480c      	ldr	r0, [pc, #48]	; (800754c <prvInitialiseTaskLists+0x6c>)
 800751a:	f7fe fc79 	bl	8005e10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800751e:	480c      	ldr	r0, [pc, #48]	; (8007550 <prvInitialiseTaskLists+0x70>)
 8007520:	f7fe fc76 	bl	8005e10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007524:	480b      	ldr	r0, [pc, #44]	; (8007554 <prvInitialiseTaskLists+0x74>)
 8007526:	f7fe fc73 	bl	8005e10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800752a:	4b0b      	ldr	r3, [pc, #44]	; (8007558 <prvInitialiseTaskLists+0x78>)
 800752c:	4a05      	ldr	r2, [pc, #20]	; (8007544 <prvInitialiseTaskLists+0x64>)
 800752e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007530:	4b0a      	ldr	r3, [pc, #40]	; (800755c <prvInitialiseTaskLists+0x7c>)
 8007532:	4a05      	ldr	r2, [pc, #20]	; (8007548 <prvInitialiseTaskLists+0x68>)
 8007534:	601a      	str	r2, [r3, #0]
}
 8007536:	bf00      	nop
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	20000380 	.word	0x20000380
 8007544:	2000040c 	.word	0x2000040c
 8007548:	20000420 	.word	0x20000420
 800754c:	2000043c 	.word	0x2000043c
 8007550:	20000450 	.word	0x20000450
 8007554:	20000468 	.word	0x20000468
 8007558:	20000434 	.word	0x20000434
 800755c:	20000438 	.word	0x20000438

08007560 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007566:	e019      	b.n	800759c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007568:	f000 fbd0 	bl	8007d0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800756c:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <prvCheckTasksWaitingTermination+0x4c>)
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3304      	adds	r3, #4
 8007578:	4618      	mov	r0, r3
 800757a:	f7fe fcd3 	bl	8005f24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800757e:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <prvCheckTasksWaitingTermination+0x50>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3b01      	subs	r3, #1
 8007584:	4a0a      	ldr	r2, [pc, #40]	; (80075b0 <prvCheckTasksWaitingTermination+0x50>)
 8007586:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007588:	4b0a      	ldr	r3, [pc, #40]	; (80075b4 <prvCheckTasksWaitingTermination+0x54>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	3b01      	subs	r3, #1
 800758e:	4a09      	ldr	r2, [pc, #36]	; (80075b4 <prvCheckTasksWaitingTermination+0x54>)
 8007590:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007592:	f000 fbe9 	bl	8007d68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f80e 	bl	80075b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800759c:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <prvCheckTasksWaitingTermination+0x54>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e1      	bne.n	8007568 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20000450 	.word	0x20000450
 80075b0:	2000047c 	.word	0x2000047c
 80075b4:	20000464 	.word	0x20000464

080075b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d108      	bne.n	80075dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fd78 	bl	80080c4 <vPortFree>
				vPortFree( pxTCB );
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fd75 	bl	80080c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075da:	e017      	b.n	800760c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d103      	bne.n	80075ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fd6c 	bl	80080c4 <vPortFree>
	}
 80075ec:	e00e      	b.n	800760c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d009      	beq.n	800760c <prvDeleteTCB+0x54>
 80075f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	60fb      	str	r3, [r7, #12]
 800760a:	e7fe      	b.n	800760a <prvDeleteTCB+0x52>
	}
 800760c:	bf00      	nop
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800761a:	4b0c      	ldr	r3, [pc, #48]	; (800764c <prvResetNextTaskUnblockTime+0x38>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d104      	bne.n	800762e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007624:	4b0a      	ldr	r3, [pc, #40]	; (8007650 <prvResetNextTaskUnblockTime+0x3c>)
 8007626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800762a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800762c:	e008      	b.n	8007640 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800762e:	4b07      	ldr	r3, [pc, #28]	; (800764c <prvResetNextTaskUnblockTime+0x38>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	4a04      	ldr	r2, [pc, #16]	; (8007650 <prvResetNextTaskUnblockTime+0x3c>)
 800763e:	6013      	str	r3, [r2, #0]
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	20000434 	.word	0x20000434
 8007650:	2000049c 	.word	0x2000049c

08007654 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800765a:	4b0b      	ldr	r3, [pc, #44]	; (8007688 <xTaskGetSchedulerState+0x34>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d102      	bne.n	8007668 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007662:	2301      	movs	r3, #1
 8007664:	607b      	str	r3, [r7, #4]
 8007666:	e008      	b.n	800767a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007668:	4b08      	ldr	r3, [pc, #32]	; (800768c <xTaskGetSchedulerState+0x38>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d102      	bne.n	8007676 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007670:	2302      	movs	r3, #2
 8007672:	607b      	str	r3, [r7, #4]
 8007674:	e001      	b.n	800767a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007676:	2300      	movs	r3, #0
 8007678:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800767a:	687b      	ldr	r3, [r7, #4]
	}
 800767c:	4618      	mov	r0, r3
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	20000488 	.word	0x20000488
 800768c:	200004a4 	.word	0x200004a4

08007690 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800769c:	2300      	movs	r3, #0
 800769e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d069      	beq.n	800777a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076aa:	4b36      	ldr	r3, [pc, #216]	; (8007784 <xTaskPriorityInherit+0xf4>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d259      	bcs.n	8007768 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	db06      	blt.n	80076ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076bc:	4b31      	ldr	r3, [pc, #196]	; (8007784 <xTaskPriorityInherit+0xf4>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c2:	f1c3 0207 	rsb	r2, r3, #7
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	6959      	ldr	r1, [r3, #20]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d2:	4613      	mov	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4a2b      	ldr	r2, [pc, #172]	; (8007788 <xTaskPriorityInherit+0xf8>)
 80076dc:	4413      	add	r3, r2
 80076de:	4299      	cmp	r1, r3
 80076e0:	d13a      	bne.n	8007758 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	3304      	adds	r3, #4
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe fc1c 	bl	8005f24 <uxListRemove>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d115      	bne.n	800771e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f6:	4924      	ldr	r1, [pc, #144]	; (8007788 <xTaskPriorityInherit+0xf8>)
 80076f8:	4613      	mov	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	440b      	add	r3, r1
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10a      	bne.n	800771e <xTaskPriorityInherit+0x8e>
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770c:	2201      	movs	r2, #1
 800770e:	fa02 f303 	lsl.w	r3, r2, r3
 8007712:	43da      	mvns	r2, r3
 8007714:	4b1d      	ldr	r3, [pc, #116]	; (800778c <xTaskPriorityInherit+0xfc>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4013      	ands	r3, r2
 800771a:	4a1c      	ldr	r2, [pc, #112]	; (800778c <xTaskPriorityInherit+0xfc>)
 800771c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800771e:	4b19      	ldr	r3, [pc, #100]	; (8007784 <xTaskPriorityInherit+0xf4>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	2201      	movs	r2, #1
 800772e:	409a      	lsls	r2, r3
 8007730:	4b16      	ldr	r3, [pc, #88]	; (800778c <xTaskPriorityInherit+0xfc>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4313      	orrs	r3, r2
 8007736:	4a15      	ldr	r2, [pc, #84]	; (800778c <xTaskPriorityInherit+0xfc>)
 8007738:	6013      	str	r3, [r2, #0]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800773e:	4613      	mov	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4a10      	ldr	r2, [pc, #64]	; (8007788 <xTaskPriorityInherit+0xf8>)
 8007748:	441a      	add	r2, r3
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	3304      	adds	r3, #4
 800774e:	4619      	mov	r1, r3
 8007750:	4610      	mov	r0, r2
 8007752:	f7fe fb8a 	bl	8005e6a <vListInsertEnd>
 8007756:	e004      	b.n	8007762 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007758:	4b0a      	ldr	r3, [pc, #40]	; (8007784 <xTaskPriorityInherit+0xf4>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007762:	2301      	movs	r3, #1
 8007764:	60fb      	str	r3, [r7, #12]
 8007766:	e008      	b.n	800777a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800776c:	4b05      	ldr	r3, [pc, #20]	; (8007784 <xTaskPriorityInherit+0xf4>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007772:	429a      	cmp	r2, r3
 8007774:	d201      	bcs.n	800777a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007776:	2301      	movs	r3, #1
 8007778:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800777a:	68fb      	ldr	r3, [r7, #12]
	}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	2000037c 	.word	0x2000037c
 8007788:	20000380 	.word	0x20000380
 800778c:	20000484 	.word	0x20000484

08007790 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800779c:	2300      	movs	r3, #0
 800779e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d06c      	beq.n	8007880 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077a6:	4b39      	ldr	r3, [pc, #228]	; (800788c <xTaskPriorityDisinherit+0xfc>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d009      	beq.n	80077c4 <xTaskPriorityDisinherit+0x34>
 80077b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	60fb      	str	r3, [r7, #12]
 80077c2:	e7fe      	b.n	80077c2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d109      	bne.n	80077e0 <xTaskPriorityDisinherit+0x50>
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	60bb      	str	r3, [r7, #8]
 80077de:	e7fe      	b.n	80077de <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e4:	1e5a      	subs	r2, r3, #1
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d044      	beq.n	8007880 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d140      	bne.n	8007880 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	3304      	adds	r3, #4
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe fb8e 	bl	8005f24 <uxListRemove>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d115      	bne.n	800783a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007812:	491f      	ldr	r1, [pc, #124]	; (8007890 <xTaskPriorityDisinherit+0x100>)
 8007814:	4613      	mov	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	440b      	add	r3, r1
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10a      	bne.n	800783a <xTaskPriorityDisinherit+0xaa>
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007828:	2201      	movs	r2, #1
 800782a:	fa02 f303 	lsl.w	r3, r2, r3
 800782e:	43da      	mvns	r2, r3
 8007830:	4b18      	ldr	r3, [pc, #96]	; (8007894 <xTaskPriorityDisinherit+0x104>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4013      	ands	r3, r2
 8007836:	4a17      	ldr	r2, [pc, #92]	; (8007894 <xTaskPriorityDisinherit+0x104>)
 8007838:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007846:	f1c3 0207 	rsb	r2, r3, #7
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007852:	2201      	movs	r2, #1
 8007854:	409a      	lsls	r2, r3
 8007856:	4b0f      	ldr	r3, [pc, #60]	; (8007894 <xTaskPriorityDisinherit+0x104>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4313      	orrs	r3, r2
 800785c:	4a0d      	ldr	r2, [pc, #52]	; (8007894 <xTaskPriorityDisinherit+0x104>)
 800785e:	6013      	str	r3, [r2, #0]
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007864:	4613      	mov	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	4413      	add	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4a08      	ldr	r2, [pc, #32]	; (8007890 <xTaskPriorityDisinherit+0x100>)
 800786e:	441a      	add	r2, r3
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	3304      	adds	r3, #4
 8007874:	4619      	mov	r1, r3
 8007876:	4610      	mov	r0, r2
 8007878:	f7fe faf7 	bl	8005e6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800787c:	2301      	movs	r3, #1
 800787e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007880:	697b      	ldr	r3, [r7, #20]
	}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	2000037c 	.word	0x2000037c
 8007890:	20000380 	.word	0x20000380
 8007894:	20000484 	.word	0x20000484

08007898 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80078a6:	2301      	movs	r3, #1
 80078a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 8081 	beq.w	80079b4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d109      	bne.n	80078ce <vTaskPriorityDisinheritAfterTimeout+0x36>
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	e7fe      	b.n	80078cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d902      	bls.n	80078de <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	61fb      	str	r3, [r7, #28]
 80078dc:	e002      	b.n	80078e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	69fa      	ldr	r2, [r7, #28]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d062      	beq.n	80079b4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d15d      	bne.n	80079b4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80078f8:	4b30      	ldr	r3, [pc, #192]	; (80079bc <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	69ba      	ldr	r2, [r7, #24]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d109      	bne.n	8007916 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	60bb      	str	r3, [r7, #8]
 8007914:	e7fe      	b.n	8007914 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	69fa      	ldr	r2, [r7, #28]
 8007920:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	2b00      	cmp	r3, #0
 8007928:	db04      	blt.n	8007934 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	f1c3 0207 	rsb	r2, r3, #7
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	6959      	ldr	r1, [r3, #20]
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	4613      	mov	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4a1f      	ldr	r2, [pc, #124]	; (80079c0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007944:	4413      	add	r3, r2
 8007946:	4299      	cmp	r1, r3
 8007948:	d134      	bne.n	80079b4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	3304      	adds	r3, #4
 800794e:	4618      	mov	r0, r3
 8007950:	f7fe fae8 	bl	8005f24 <uxListRemove>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d115      	bne.n	8007986 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795e:	4918      	ldr	r1, [pc, #96]	; (80079c0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007960:	4613      	mov	r3, r2
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4413      	add	r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	440b      	add	r3, r1
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10a      	bne.n	8007986 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007974:	2201      	movs	r2, #1
 8007976:	fa02 f303 	lsl.w	r3, r2, r3
 800797a:	43da      	mvns	r2, r3
 800797c:	4b11      	ldr	r3, [pc, #68]	; (80079c4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4013      	ands	r3, r2
 8007982:	4a10      	ldr	r2, [pc, #64]	; (80079c4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007984:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	2201      	movs	r2, #1
 800798c:	409a      	lsls	r2, r3
 800798e:	4b0d      	ldr	r3, [pc, #52]	; (80079c4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4313      	orrs	r3, r2
 8007994:	4a0b      	ldr	r2, [pc, #44]	; (80079c4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007996:	6013      	str	r3, [r2, #0]
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4a06      	ldr	r2, [pc, #24]	; (80079c0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80079a6:	441a      	add	r2, r3
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	3304      	adds	r3, #4
 80079ac:	4619      	mov	r1, r3
 80079ae:	4610      	mov	r0, r2
 80079b0:	f7fe fa5b 	bl	8005e6a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079b4:	bf00      	nop
 80079b6:	3720      	adds	r7, #32
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	2000037c 	.word	0x2000037c
 80079c0:	20000380 	.word	0x20000380
 80079c4:	20000484 	.word	0x20000484

080079c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80079cc:	4b07      	ldr	r3, [pc, #28]	; (80079ec <pvTaskIncrementMutexHeldCount+0x24>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d004      	beq.n	80079de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80079d4:	4b05      	ldr	r3, [pc, #20]	; (80079ec <pvTaskIncrementMutexHeldCount+0x24>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079da:	3201      	adds	r2, #1
 80079dc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80079de:	4b03      	ldr	r3, [pc, #12]	; (80079ec <pvTaskIncrementMutexHeldCount+0x24>)
 80079e0:	681b      	ldr	r3, [r3, #0]
	}
 80079e2:	4618      	mov	r0, r3
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr
 80079ec:	2000037c 	.word	0x2000037c

080079f0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079fa:	4b29      	ldr	r3, [pc, #164]	; (8007aa0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a00:	4b28      	ldr	r3, [pc, #160]	; (8007aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3304      	adds	r3, #4
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fe fa8c 	bl	8005f24 <uxListRemove>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10b      	bne.n	8007a2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a12:	4b24      	ldr	r3, [pc, #144]	; (8007aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	2201      	movs	r2, #1
 8007a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1e:	43da      	mvns	r2, r3
 8007a20:	4b21      	ldr	r3, [pc, #132]	; (8007aa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4013      	ands	r3, r2
 8007a26:	4a20      	ldr	r2, [pc, #128]	; (8007aa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a30:	d10a      	bne.n	8007a48 <prvAddCurrentTaskToDelayedList+0x58>
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d007      	beq.n	8007a48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a38:	4b1a      	ldr	r3, [pc, #104]	; (8007aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4619      	mov	r1, r3
 8007a40:	481a      	ldr	r0, [pc, #104]	; (8007aac <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a42:	f7fe fa12 	bl	8005e6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a46:	e026      	b.n	8007a96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a50:	4b14      	ldr	r3, [pc, #80]	; (8007aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d209      	bcs.n	8007a74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a60:	4b13      	ldr	r3, [pc, #76]	; (8007ab0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	4b0f      	ldr	r3, [pc, #60]	; (8007aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3304      	adds	r3, #4
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	f7fe fa20 	bl	8005eb2 <vListInsert>
}
 8007a72:	e010      	b.n	8007a96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a74:	4b0f      	ldr	r3, [pc, #60]	; (8007ab4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	4b0a      	ldr	r3, [pc, #40]	; (8007aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	4619      	mov	r1, r3
 8007a80:	4610      	mov	r0, r2
 8007a82:	f7fe fa16 	bl	8005eb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a86:	4b0c      	ldr	r3, [pc, #48]	; (8007ab8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d202      	bcs.n	8007a96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007a90:	4a09      	ldr	r2, [pc, #36]	; (8007ab8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	6013      	str	r3, [r2, #0]
}
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000480 	.word	0x20000480
 8007aa4:	2000037c 	.word	0x2000037c
 8007aa8:	20000484 	.word	0x20000484
 8007aac:	20000468 	.word	0x20000468
 8007ab0:	20000438 	.word	0x20000438
 8007ab4:	20000434 	.word	0x20000434
 8007ab8:	2000049c 	.word	0x2000049c

08007abc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	3b04      	subs	r3, #4
 8007acc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3b04      	subs	r3, #4
 8007ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	f023 0201 	bic.w	r2, r3, #1
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	3b04      	subs	r3, #4
 8007aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007aec:	4a0c      	ldr	r2, [pc, #48]	; (8007b20 <pxPortInitialiseStack+0x64>)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3b14      	subs	r3, #20
 8007af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	3b04      	subs	r3, #4
 8007b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f06f 0202 	mvn.w	r2, #2
 8007b0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3b20      	subs	r3, #32
 8007b10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b12:	68fb      	ldr	r3, [r7, #12]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	08007b25 	.word	0x08007b25

08007b24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b2e:	4b11      	ldr	r3, [pc, #68]	; (8007b74 <prvTaskExitError+0x50>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b36:	d009      	beq.n	8007b4c <prvTaskExitError+0x28>
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	60fb      	str	r3, [r7, #12]
 8007b4a:	e7fe      	b.n	8007b4a <prvTaskExitError+0x26>
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b5e:	bf00      	nop
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d0fc      	beq.n	8007b60 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b66:	bf00      	nop
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	2000008c 	.word	0x2000008c
	...

08007b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b80:	4b07      	ldr	r3, [pc, #28]	; (8007ba0 <pxCurrentTCBConst2>)
 8007b82:	6819      	ldr	r1, [r3, #0]
 8007b84:	6808      	ldr	r0, [r1, #0]
 8007b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8a:	f380 8809 	msr	PSP, r0
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f04f 0000 	mov.w	r0, #0
 8007b96:	f380 8811 	msr	BASEPRI, r0
 8007b9a:	4770      	bx	lr
 8007b9c:	f3af 8000 	nop.w

08007ba0 <pxCurrentTCBConst2>:
 8007ba0:	2000037c 	.word	0x2000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop

08007ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ba8:	4808      	ldr	r0, [pc, #32]	; (8007bcc <prvPortStartFirstTask+0x24>)
 8007baa:	6800      	ldr	r0, [r0, #0]
 8007bac:	6800      	ldr	r0, [r0, #0]
 8007bae:	f380 8808 	msr	MSP, r0
 8007bb2:	f04f 0000 	mov.w	r0, #0
 8007bb6:	f380 8814 	msr	CONTROL, r0
 8007bba:	b662      	cpsie	i
 8007bbc:	b661      	cpsie	f
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	df00      	svc	0
 8007bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bca:	bf00      	nop
 8007bcc:	e000ed08 	.word	0xe000ed08

08007bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007bd6:	4b44      	ldr	r3, [pc, #272]	; (8007ce8 <xPortStartScheduler+0x118>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a44      	ldr	r2, [pc, #272]	; (8007cec <xPortStartScheduler+0x11c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d109      	bne.n	8007bf4 <xPortStartScheduler+0x24>
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	613b      	str	r3, [r7, #16]
 8007bf2:	e7fe      	b.n	8007bf2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007bf4:	4b3c      	ldr	r3, [pc, #240]	; (8007ce8 <xPortStartScheduler+0x118>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a3d      	ldr	r2, [pc, #244]	; (8007cf0 <xPortStartScheduler+0x120>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d109      	bne.n	8007c12 <xPortStartScheduler+0x42>
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	e7fe      	b.n	8007c10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c12:	4b38      	ldr	r3, [pc, #224]	; (8007cf4 <xPortStartScheduler+0x124>)
 8007c14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	22ff      	movs	r2, #255	; 0xff
 8007c22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c2c:	78fb      	ldrb	r3, [r7, #3]
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	4b30      	ldr	r3, [pc, #192]	; (8007cf8 <xPortStartScheduler+0x128>)
 8007c38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c3a:	4b30      	ldr	r3, [pc, #192]	; (8007cfc <xPortStartScheduler+0x12c>)
 8007c3c:	2207      	movs	r2, #7
 8007c3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c40:	e009      	b.n	8007c56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007c42:	4b2e      	ldr	r3, [pc, #184]	; (8007cfc <xPortStartScheduler+0x12c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	4a2c      	ldr	r2, [pc, #176]	; (8007cfc <xPortStartScheduler+0x12c>)
 8007c4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c4c:	78fb      	ldrb	r3, [r7, #3]
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c56:	78fb      	ldrb	r3, [r7, #3]
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c5e:	2b80      	cmp	r3, #128	; 0x80
 8007c60:	d0ef      	beq.n	8007c42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c62:	4b26      	ldr	r3, [pc, #152]	; (8007cfc <xPortStartScheduler+0x12c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f1c3 0307 	rsb	r3, r3, #7
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d009      	beq.n	8007c82 <xPortStartScheduler+0xb2>
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	60bb      	str	r3, [r7, #8]
 8007c80:	e7fe      	b.n	8007c80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c82:	4b1e      	ldr	r3, [pc, #120]	; (8007cfc <xPortStartScheduler+0x12c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	021b      	lsls	r3, r3, #8
 8007c88:	4a1c      	ldr	r2, [pc, #112]	; (8007cfc <xPortStartScheduler+0x12c>)
 8007c8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c8c:	4b1b      	ldr	r3, [pc, #108]	; (8007cfc <xPortStartScheduler+0x12c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c94:	4a19      	ldr	r2, [pc, #100]	; (8007cfc <xPortStartScheduler+0x12c>)
 8007c96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ca0:	4b17      	ldr	r3, [pc, #92]	; (8007d00 <xPortStartScheduler+0x130>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a16      	ldr	r2, [pc, #88]	; (8007d00 <xPortStartScheduler+0x130>)
 8007ca6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007caa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cac:	4b14      	ldr	r3, [pc, #80]	; (8007d00 <xPortStartScheduler+0x130>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a13      	ldr	r2, [pc, #76]	; (8007d00 <xPortStartScheduler+0x130>)
 8007cb2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007cb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cb8:	f000 f8d6 	bl	8007e68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007cbc:	4b11      	ldr	r3, [pc, #68]	; (8007d04 <xPortStartScheduler+0x134>)
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007cc2:	f000 f8f5 	bl	8007eb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cc6:	4b10      	ldr	r3, [pc, #64]	; (8007d08 <xPortStartScheduler+0x138>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a0f      	ldr	r2, [pc, #60]	; (8007d08 <xPortStartScheduler+0x138>)
 8007ccc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007cd0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cd2:	f7ff ff69 	bl	8007ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cd6:	f7ff fa89 	bl	80071ec <vTaskSwitchContext>
	prvTaskExitError();
 8007cda:	f7ff ff23 	bl	8007b24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	e000ed00 	.word	0xe000ed00
 8007cec:	410fc271 	.word	0x410fc271
 8007cf0:	410fc270 	.word	0x410fc270
 8007cf4:	e000e400 	.word	0xe000e400
 8007cf8:	200004a8 	.word	0x200004a8
 8007cfc:	200004ac 	.word	0x200004ac
 8007d00:	e000ed20 	.word	0xe000ed20
 8007d04:	2000008c 	.word	0x2000008c
 8007d08:	e000ef34 	.word	0xe000ef34

08007d0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d24:	4b0e      	ldr	r3, [pc, #56]	; (8007d60 <vPortEnterCritical+0x54>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	4a0d      	ldr	r2, [pc, #52]	; (8007d60 <vPortEnterCritical+0x54>)
 8007d2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d2e:	4b0c      	ldr	r3, [pc, #48]	; (8007d60 <vPortEnterCritical+0x54>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d10e      	bne.n	8007d54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d36:	4b0b      	ldr	r3, [pc, #44]	; (8007d64 <vPortEnterCritical+0x58>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d009      	beq.n	8007d54 <vPortEnterCritical+0x48>
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	603b      	str	r3, [r7, #0]
 8007d52:	e7fe      	b.n	8007d52 <vPortEnterCritical+0x46>
	}
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	2000008c 	.word	0x2000008c
 8007d64:	e000ed04 	.word	0xe000ed04

08007d68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d6e:	4b11      	ldr	r3, [pc, #68]	; (8007db4 <vPortExitCritical+0x4c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d109      	bne.n	8007d8a <vPortExitCritical+0x22>
 8007d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	607b      	str	r3, [r7, #4]
 8007d88:	e7fe      	b.n	8007d88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007d8a:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <vPortExitCritical+0x4c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	4a08      	ldr	r2, [pc, #32]	; (8007db4 <vPortExitCritical+0x4c>)
 8007d92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d94:	4b07      	ldr	r3, [pc, #28]	; (8007db4 <vPortExitCritical+0x4c>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d104      	bne.n	8007da6 <vPortExitCritical+0x3e>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	2000008c 	.word	0x2000008c
	...

08007dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007dc0:	f3ef 8009 	mrs	r0, PSP
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	4b15      	ldr	r3, [pc, #84]	; (8007e20 <pxCurrentTCBConst>)
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	f01e 0f10 	tst.w	lr, #16
 8007dd0:	bf08      	it	eq
 8007dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dda:	6010      	str	r0, [r2, #0]
 8007ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007de4:	f380 8811 	msr	BASEPRI, r0
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f7ff f9fc 	bl	80071ec <vTaskSwitchContext>
 8007df4:	f04f 0000 	mov.w	r0, #0
 8007df8:	f380 8811 	msr	BASEPRI, r0
 8007dfc:	bc09      	pop	{r0, r3}
 8007dfe:	6819      	ldr	r1, [r3, #0]
 8007e00:	6808      	ldr	r0, [r1, #0]
 8007e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e06:	f01e 0f10 	tst.w	lr, #16
 8007e0a:	bf08      	it	eq
 8007e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e10:	f380 8809 	msr	PSP, r0
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	f3af 8000 	nop.w

08007e20 <pxCurrentTCBConst>:
 8007e20:	2000037c 	.word	0x2000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop

08007e28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e40:	f7ff f91c 	bl	800707c <xTaskIncrementTick>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d003      	beq.n	8007e52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e4a:	4b06      	ldr	r3, [pc, #24]	; (8007e64 <SysTick_Handler+0x3c>)
 8007e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	2300      	movs	r3, #0
 8007e54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e5c:	bf00      	nop
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	e000ed04 	.word	0xe000ed04

08007e68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e68:	b480      	push	{r7}
 8007e6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e6c:	4b0b      	ldr	r3, [pc, #44]	; (8007e9c <vPortSetupTimerInterrupt+0x34>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e72:	4b0b      	ldr	r3, [pc, #44]	; (8007ea0 <vPortSetupTimerInterrupt+0x38>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e78:	4b0a      	ldr	r3, [pc, #40]	; (8007ea4 <vPortSetupTimerInterrupt+0x3c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a0a      	ldr	r2, [pc, #40]	; (8007ea8 <vPortSetupTimerInterrupt+0x40>)
 8007e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e82:	099b      	lsrs	r3, r3, #6
 8007e84:	4a09      	ldr	r2, [pc, #36]	; (8007eac <vPortSetupTimerInterrupt+0x44>)
 8007e86:	3b01      	subs	r3, #1
 8007e88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e8a:	4b04      	ldr	r3, [pc, #16]	; (8007e9c <vPortSetupTimerInterrupt+0x34>)
 8007e8c:	2207      	movs	r2, #7
 8007e8e:	601a      	str	r2, [r3, #0]
}
 8007e90:	bf00      	nop
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	e000e010 	.word	0xe000e010
 8007ea0:	e000e018 	.word	0xe000e018
 8007ea4:	20000080 	.word	0x20000080
 8007ea8:	10624dd3 	.word	0x10624dd3
 8007eac:	e000e014 	.word	0xe000e014

08007eb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007eb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ec0 <vPortEnableVFP+0x10>
 8007eb4:	6801      	ldr	r1, [r0, #0]
 8007eb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007eba:	6001      	str	r1, [r0, #0]
 8007ebc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ebe:	bf00      	nop
 8007ec0:	e000ed88 	.word	0xe000ed88

08007ec4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007eca:	f3ef 8305 	mrs	r3, IPSR
 8007ece:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2b0f      	cmp	r3, #15
 8007ed4:	d913      	bls.n	8007efe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ed6:	4a16      	ldr	r2, [pc, #88]	; (8007f30 <vPortValidateInterruptPriority+0x6c>)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	4413      	add	r3, r2
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ee0:	4b14      	ldr	r3, [pc, #80]	; (8007f34 <vPortValidateInterruptPriority+0x70>)
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	7afa      	ldrb	r2, [r7, #11]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d209      	bcs.n	8007efe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	607b      	str	r3, [r7, #4]
 8007efc:	e7fe      	b.n	8007efc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007efe:	4b0e      	ldr	r3, [pc, #56]	; (8007f38 <vPortValidateInterruptPriority+0x74>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f06:	4b0d      	ldr	r3, [pc, #52]	; (8007f3c <vPortValidateInterruptPriority+0x78>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d909      	bls.n	8007f22 <vPortValidateInterruptPriority+0x5e>
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	603b      	str	r3, [r7, #0]
 8007f20:	e7fe      	b.n	8007f20 <vPortValidateInterruptPriority+0x5c>
	}
 8007f22:	bf00      	nop
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	e000e3f0 	.word	0xe000e3f0
 8007f34:	200004a8 	.word	0x200004a8
 8007f38:	e000ed0c 	.word	0xe000ed0c
 8007f3c:	200004ac 	.word	0x200004ac

08007f40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b08a      	sub	sp, #40	; 0x28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f4c:	f7fe ffec 	bl	8006f28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f50:	4b57      	ldr	r3, [pc, #348]	; (80080b0 <pvPortMalloc+0x170>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f58:	f000 f90c 	bl	8008174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f5c:	4b55      	ldr	r3, [pc, #340]	; (80080b4 <pvPortMalloc+0x174>)
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4013      	ands	r3, r2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f040 808c 	bne.w	8008082 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d01c      	beq.n	8007faa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007f70:	2208      	movs	r2, #8
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4413      	add	r3, r2
 8007f76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d013      	beq.n	8007faa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f023 0307 	bic.w	r3, r3, #7
 8007f88:	3308      	adds	r3, #8
 8007f8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f003 0307 	and.w	r3, r3, #7
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d009      	beq.n	8007faa <pvPortMalloc+0x6a>
 8007f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	e7fe      	b.n	8007fa8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d068      	beq.n	8008082 <pvPortMalloc+0x142>
 8007fb0:	4b41      	ldr	r3, [pc, #260]	; (80080b8 <pvPortMalloc+0x178>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d863      	bhi.n	8008082 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007fba:	4b40      	ldr	r3, [pc, #256]	; (80080bc <pvPortMalloc+0x17c>)
 8007fbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fbe:	4b3f      	ldr	r3, [pc, #252]	; (80080bc <pvPortMalloc+0x17c>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fc4:	e004      	b.n	8007fd0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d903      	bls.n	8007fe2 <pvPortMalloc+0xa2>
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1f1      	bne.n	8007fc6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fe2:	4b33      	ldr	r3, [pc, #204]	; (80080b0 <pvPortMalloc+0x170>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d04a      	beq.n	8008082 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	4413      	add	r3, r2
 8007ff4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	1ad2      	subs	r2, r2, r3
 8008006:	2308      	movs	r3, #8
 8008008:	005b      	lsls	r3, r3, #1
 800800a:	429a      	cmp	r2, r3
 800800c:	d91e      	bls.n	800804c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800800e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4413      	add	r3, r2
 8008014:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	f003 0307 	and.w	r3, r3, #7
 800801c:	2b00      	cmp	r3, #0
 800801e:	d009      	beq.n	8008034 <pvPortMalloc+0xf4>
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	613b      	str	r3, [r7, #16]
 8008032:	e7fe      	b.n	8008032 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	1ad2      	subs	r2, r2, r3
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008046:	69b8      	ldr	r0, [r7, #24]
 8008048:	f000 f8f6 	bl	8008238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800804c:	4b1a      	ldr	r3, [pc, #104]	; (80080b8 <pvPortMalloc+0x178>)
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	4a18      	ldr	r2, [pc, #96]	; (80080b8 <pvPortMalloc+0x178>)
 8008058:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800805a:	4b17      	ldr	r3, [pc, #92]	; (80080b8 <pvPortMalloc+0x178>)
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	4b18      	ldr	r3, [pc, #96]	; (80080c0 <pvPortMalloc+0x180>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	429a      	cmp	r2, r3
 8008064:	d203      	bcs.n	800806e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008066:	4b14      	ldr	r3, [pc, #80]	; (80080b8 <pvPortMalloc+0x178>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a15      	ldr	r2, [pc, #84]	; (80080c0 <pvPortMalloc+0x180>)
 800806c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	4b10      	ldr	r3, [pc, #64]	; (80080b4 <pvPortMalloc+0x174>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	431a      	orrs	r2, r3
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	2200      	movs	r2, #0
 8008080:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008082:	f7fe ff5f 	bl	8006f44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	2b00      	cmp	r3, #0
 800808e:	d009      	beq.n	80080a4 <pvPortMalloc+0x164>
 8008090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	60fb      	str	r3, [r7, #12]
 80080a2:	e7fe      	b.n	80080a2 <pvPortMalloc+0x162>
	return pvReturn;
 80080a4:	69fb      	ldr	r3, [r7, #28]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3728      	adds	r7, #40	; 0x28
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	20001070 	.word	0x20001070
 80080b4:	2000107c 	.word	0x2000107c
 80080b8:	20001074 	.word	0x20001074
 80080bc:	20001068 	.word	0x20001068
 80080c0:	20001078 	.word	0x20001078

080080c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d046      	beq.n	8008164 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080d6:	2308      	movs	r3, #8
 80080d8:	425b      	negs	r3, r3
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	4413      	add	r3, r2
 80080de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	4b20      	ldr	r3, [pc, #128]	; (800816c <vPortFree+0xa8>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4013      	ands	r3, r2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d109      	bne.n	8008106 <vPortFree+0x42>
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	e7fe      	b.n	8008104 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d009      	beq.n	8008122 <vPortFree+0x5e>
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	60bb      	str	r3, [r7, #8]
 8008120:	e7fe      	b.n	8008120 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	4b11      	ldr	r3, [pc, #68]	; (800816c <vPortFree+0xa8>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4013      	ands	r3, r2
 800812c:	2b00      	cmp	r3, #0
 800812e:	d019      	beq.n	8008164 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d115      	bne.n	8008164 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	4b0b      	ldr	r3, [pc, #44]	; (800816c <vPortFree+0xa8>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	43db      	mvns	r3, r3
 8008142:	401a      	ands	r2, r3
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008148:	f7fe feee 	bl	8006f28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	4b07      	ldr	r3, [pc, #28]	; (8008170 <vPortFree+0xac>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4413      	add	r3, r2
 8008156:	4a06      	ldr	r2, [pc, #24]	; (8008170 <vPortFree+0xac>)
 8008158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800815a:	6938      	ldr	r0, [r7, #16]
 800815c:	f000 f86c 	bl	8008238 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008160:	f7fe fef0 	bl	8006f44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008164:	bf00      	nop
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	2000107c 	.word	0x2000107c
 8008170:	20001074 	.word	0x20001074

08008174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800817a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800817e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008180:	4b27      	ldr	r3, [pc, #156]	; (8008220 <prvHeapInit+0xac>)
 8008182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f003 0307 	and.w	r3, r3, #7
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00c      	beq.n	80081a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	3307      	adds	r3, #7
 8008192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f023 0307 	bic.w	r3, r3, #7
 800819a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	4a1f      	ldr	r2, [pc, #124]	; (8008220 <prvHeapInit+0xac>)
 80081a4:	4413      	add	r3, r2
 80081a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081ac:	4a1d      	ldr	r2, [pc, #116]	; (8008224 <prvHeapInit+0xb0>)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081b2:	4b1c      	ldr	r3, [pc, #112]	; (8008224 <prvHeapInit+0xb0>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	4413      	add	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081c0:	2208      	movs	r2, #8
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	1a9b      	subs	r3, r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f023 0307 	bic.w	r3, r3, #7
 80081ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	4a15      	ldr	r2, [pc, #84]	; (8008228 <prvHeapInit+0xb4>)
 80081d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081d6:	4b14      	ldr	r3, [pc, #80]	; (8008228 <prvHeapInit+0xb4>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2200      	movs	r2, #0
 80081dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081de:	4b12      	ldr	r3, [pc, #72]	; (8008228 <prvHeapInit+0xb4>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2200      	movs	r2, #0
 80081e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	1ad2      	subs	r2, r2, r3
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081f4:	4b0c      	ldr	r3, [pc, #48]	; (8008228 <prvHeapInit+0xb4>)
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	4a0a      	ldr	r2, [pc, #40]	; (800822c <prvHeapInit+0xb8>)
 8008202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	4a09      	ldr	r2, [pc, #36]	; (8008230 <prvHeapInit+0xbc>)
 800820a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800820c:	4b09      	ldr	r3, [pc, #36]	; (8008234 <prvHeapInit+0xc0>)
 800820e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008212:	601a      	str	r2, [r3, #0]
}
 8008214:	bf00      	nop
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	200004b0 	.word	0x200004b0
 8008224:	20001068 	.word	0x20001068
 8008228:	20001070 	.word	0x20001070
 800822c:	20001078 	.word	0x20001078
 8008230:	20001074 	.word	0x20001074
 8008234:	2000107c 	.word	0x2000107c

08008238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008240:	4b28      	ldr	r3, [pc, #160]	; (80082e4 <prvInsertBlockIntoFreeList+0xac>)
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	e002      	b.n	800824c <prvInsertBlockIntoFreeList+0x14>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	429a      	cmp	r2, r3
 8008254:	d8f7      	bhi.n	8008246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	4413      	add	r3, r2
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	429a      	cmp	r2, r3
 8008266:	d108      	bne.n	800827a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	441a      	add	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	441a      	add	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	429a      	cmp	r2, r3
 800828c:	d118      	bne.n	80082c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	4b15      	ldr	r3, [pc, #84]	; (80082e8 <prvInsertBlockIntoFreeList+0xb0>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	429a      	cmp	r2, r3
 8008298:	d00d      	beq.n	80082b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	441a      	add	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	e008      	b.n	80082c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082b6:	4b0c      	ldr	r3, [pc, #48]	; (80082e8 <prvInsertBlockIntoFreeList+0xb0>)
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	e003      	b.n	80082c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d002      	beq.n	80082d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082d6:	bf00      	nop
 80082d8:	3714      	adds	r7, #20
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	20001068 	.word	0x20001068
 80082e8:	20001070 	.word	0x20001070

080082ec <__errno>:
 80082ec:	4b01      	ldr	r3, [pc, #4]	; (80082f4 <__errno+0x8>)
 80082ee:	6818      	ldr	r0, [r3, #0]
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	20000090 	.word	0x20000090

080082f8 <__libc_init_array>:
 80082f8:	b570      	push	{r4, r5, r6, lr}
 80082fa:	4e0d      	ldr	r6, [pc, #52]	; (8008330 <__libc_init_array+0x38>)
 80082fc:	4c0d      	ldr	r4, [pc, #52]	; (8008334 <__libc_init_array+0x3c>)
 80082fe:	1ba4      	subs	r4, r4, r6
 8008300:	10a4      	asrs	r4, r4, #2
 8008302:	2500      	movs	r5, #0
 8008304:	42a5      	cmp	r5, r4
 8008306:	d109      	bne.n	800831c <__libc_init_array+0x24>
 8008308:	4e0b      	ldr	r6, [pc, #44]	; (8008338 <__libc_init_array+0x40>)
 800830a:	4c0c      	ldr	r4, [pc, #48]	; (800833c <__libc_init_array+0x44>)
 800830c:	f000 fc28 	bl	8008b60 <_init>
 8008310:	1ba4      	subs	r4, r4, r6
 8008312:	10a4      	asrs	r4, r4, #2
 8008314:	2500      	movs	r5, #0
 8008316:	42a5      	cmp	r5, r4
 8008318:	d105      	bne.n	8008326 <__libc_init_array+0x2e>
 800831a:	bd70      	pop	{r4, r5, r6, pc}
 800831c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008320:	4798      	blx	r3
 8008322:	3501      	adds	r5, #1
 8008324:	e7ee      	b.n	8008304 <__libc_init_array+0xc>
 8008326:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800832a:	4798      	blx	r3
 800832c:	3501      	adds	r5, #1
 800832e:	e7f2      	b.n	8008316 <__libc_init_array+0x1e>
 8008330:	08008dd4 	.word	0x08008dd4
 8008334:	08008dd4 	.word	0x08008dd4
 8008338:	08008dd4 	.word	0x08008dd4
 800833c:	08008dd8 	.word	0x08008dd8

08008340 <memcpy>:
 8008340:	b510      	push	{r4, lr}
 8008342:	1e43      	subs	r3, r0, #1
 8008344:	440a      	add	r2, r1
 8008346:	4291      	cmp	r1, r2
 8008348:	d100      	bne.n	800834c <memcpy+0xc>
 800834a:	bd10      	pop	{r4, pc}
 800834c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008350:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008354:	e7f7      	b.n	8008346 <memcpy+0x6>

08008356 <memset>:
 8008356:	4402      	add	r2, r0
 8008358:	4603      	mov	r3, r0
 800835a:	4293      	cmp	r3, r2
 800835c:	d100      	bne.n	8008360 <memset+0xa>
 800835e:	4770      	bx	lr
 8008360:	f803 1b01 	strb.w	r1, [r3], #1
 8008364:	e7f9      	b.n	800835a <memset+0x4>
	...

08008368 <siprintf>:
 8008368:	b40e      	push	{r1, r2, r3}
 800836a:	b500      	push	{lr}
 800836c:	b09c      	sub	sp, #112	; 0x70
 800836e:	ab1d      	add	r3, sp, #116	; 0x74
 8008370:	9002      	str	r0, [sp, #8]
 8008372:	9006      	str	r0, [sp, #24]
 8008374:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008378:	4809      	ldr	r0, [pc, #36]	; (80083a0 <siprintf+0x38>)
 800837a:	9107      	str	r1, [sp, #28]
 800837c:	9104      	str	r1, [sp, #16]
 800837e:	4909      	ldr	r1, [pc, #36]	; (80083a4 <siprintf+0x3c>)
 8008380:	f853 2b04 	ldr.w	r2, [r3], #4
 8008384:	9105      	str	r1, [sp, #20]
 8008386:	6800      	ldr	r0, [r0, #0]
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	a902      	add	r1, sp, #8
 800838c:	f000 f866 	bl	800845c <_svfiprintf_r>
 8008390:	9b02      	ldr	r3, [sp, #8]
 8008392:	2200      	movs	r2, #0
 8008394:	701a      	strb	r2, [r3, #0]
 8008396:	b01c      	add	sp, #112	; 0x70
 8008398:	f85d eb04 	ldr.w	lr, [sp], #4
 800839c:	b003      	add	sp, #12
 800839e:	4770      	bx	lr
 80083a0:	20000090 	.word	0x20000090
 80083a4:	ffff0208 	.word	0xffff0208

080083a8 <__ssputs_r>:
 80083a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083ac:	688e      	ldr	r6, [r1, #8]
 80083ae:	429e      	cmp	r6, r3
 80083b0:	4682      	mov	sl, r0
 80083b2:	460c      	mov	r4, r1
 80083b4:	4690      	mov	r8, r2
 80083b6:	4699      	mov	r9, r3
 80083b8:	d837      	bhi.n	800842a <__ssputs_r+0x82>
 80083ba:	898a      	ldrh	r2, [r1, #12]
 80083bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083c0:	d031      	beq.n	8008426 <__ssputs_r+0x7e>
 80083c2:	6825      	ldr	r5, [r4, #0]
 80083c4:	6909      	ldr	r1, [r1, #16]
 80083c6:	1a6f      	subs	r7, r5, r1
 80083c8:	6965      	ldr	r5, [r4, #20]
 80083ca:	2302      	movs	r3, #2
 80083cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80083d4:	f109 0301 	add.w	r3, r9, #1
 80083d8:	443b      	add	r3, r7
 80083da:	429d      	cmp	r5, r3
 80083dc:	bf38      	it	cc
 80083de:	461d      	movcc	r5, r3
 80083e0:	0553      	lsls	r3, r2, #21
 80083e2:	d530      	bpl.n	8008446 <__ssputs_r+0x9e>
 80083e4:	4629      	mov	r1, r5
 80083e6:	f000 fb21 	bl	8008a2c <_malloc_r>
 80083ea:	4606      	mov	r6, r0
 80083ec:	b950      	cbnz	r0, 8008404 <__ssputs_r+0x5c>
 80083ee:	230c      	movs	r3, #12
 80083f0:	f8ca 3000 	str.w	r3, [sl]
 80083f4:	89a3      	ldrh	r3, [r4, #12]
 80083f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083fa:	81a3      	strh	r3, [r4, #12]
 80083fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008404:	463a      	mov	r2, r7
 8008406:	6921      	ldr	r1, [r4, #16]
 8008408:	f7ff ff9a 	bl	8008340 <memcpy>
 800840c:	89a3      	ldrh	r3, [r4, #12]
 800840e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008416:	81a3      	strh	r3, [r4, #12]
 8008418:	6126      	str	r6, [r4, #16]
 800841a:	6165      	str	r5, [r4, #20]
 800841c:	443e      	add	r6, r7
 800841e:	1bed      	subs	r5, r5, r7
 8008420:	6026      	str	r6, [r4, #0]
 8008422:	60a5      	str	r5, [r4, #8]
 8008424:	464e      	mov	r6, r9
 8008426:	454e      	cmp	r6, r9
 8008428:	d900      	bls.n	800842c <__ssputs_r+0x84>
 800842a:	464e      	mov	r6, r9
 800842c:	4632      	mov	r2, r6
 800842e:	4641      	mov	r1, r8
 8008430:	6820      	ldr	r0, [r4, #0]
 8008432:	f000 fa93 	bl	800895c <memmove>
 8008436:	68a3      	ldr	r3, [r4, #8]
 8008438:	1b9b      	subs	r3, r3, r6
 800843a:	60a3      	str	r3, [r4, #8]
 800843c:	6823      	ldr	r3, [r4, #0]
 800843e:	441e      	add	r6, r3
 8008440:	6026      	str	r6, [r4, #0]
 8008442:	2000      	movs	r0, #0
 8008444:	e7dc      	b.n	8008400 <__ssputs_r+0x58>
 8008446:	462a      	mov	r2, r5
 8008448:	f000 fb4a 	bl	8008ae0 <_realloc_r>
 800844c:	4606      	mov	r6, r0
 800844e:	2800      	cmp	r0, #0
 8008450:	d1e2      	bne.n	8008418 <__ssputs_r+0x70>
 8008452:	6921      	ldr	r1, [r4, #16]
 8008454:	4650      	mov	r0, sl
 8008456:	f000 fa9b 	bl	8008990 <_free_r>
 800845a:	e7c8      	b.n	80083ee <__ssputs_r+0x46>

0800845c <_svfiprintf_r>:
 800845c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008460:	461d      	mov	r5, r3
 8008462:	898b      	ldrh	r3, [r1, #12]
 8008464:	061f      	lsls	r7, r3, #24
 8008466:	b09d      	sub	sp, #116	; 0x74
 8008468:	4680      	mov	r8, r0
 800846a:	460c      	mov	r4, r1
 800846c:	4616      	mov	r6, r2
 800846e:	d50f      	bpl.n	8008490 <_svfiprintf_r+0x34>
 8008470:	690b      	ldr	r3, [r1, #16]
 8008472:	b96b      	cbnz	r3, 8008490 <_svfiprintf_r+0x34>
 8008474:	2140      	movs	r1, #64	; 0x40
 8008476:	f000 fad9 	bl	8008a2c <_malloc_r>
 800847a:	6020      	str	r0, [r4, #0]
 800847c:	6120      	str	r0, [r4, #16]
 800847e:	b928      	cbnz	r0, 800848c <_svfiprintf_r+0x30>
 8008480:	230c      	movs	r3, #12
 8008482:	f8c8 3000 	str.w	r3, [r8]
 8008486:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800848a:	e0c8      	b.n	800861e <_svfiprintf_r+0x1c2>
 800848c:	2340      	movs	r3, #64	; 0x40
 800848e:	6163      	str	r3, [r4, #20]
 8008490:	2300      	movs	r3, #0
 8008492:	9309      	str	r3, [sp, #36]	; 0x24
 8008494:	2320      	movs	r3, #32
 8008496:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800849a:	2330      	movs	r3, #48	; 0x30
 800849c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084a0:	9503      	str	r5, [sp, #12]
 80084a2:	f04f 0b01 	mov.w	fp, #1
 80084a6:	4637      	mov	r7, r6
 80084a8:	463d      	mov	r5, r7
 80084aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80084ae:	b10b      	cbz	r3, 80084b4 <_svfiprintf_r+0x58>
 80084b0:	2b25      	cmp	r3, #37	; 0x25
 80084b2:	d13e      	bne.n	8008532 <_svfiprintf_r+0xd6>
 80084b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80084b8:	d00b      	beq.n	80084d2 <_svfiprintf_r+0x76>
 80084ba:	4653      	mov	r3, sl
 80084bc:	4632      	mov	r2, r6
 80084be:	4621      	mov	r1, r4
 80084c0:	4640      	mov	r0, r8
 80084c2:	f7ff ff71 	bl	80083a8 <__ssputs_r>
 80084c6:	3001      	adds	r0, #1
 80084c8:	f000 80a4 	beq.w	8008614 <_svfiprintf_r+0x1b8>
 80084cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ce:	4453      	add	r3, sl
 80084d0:	9309      	str	r3, [sp, #36]	; 0x24
 80084d2:	783b      	ldrb	r3, [r7, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 809d 	beq.w	8008614 <_svfiprintf_r+0x1b8>
 80084da:	2300      	movs	r3, #0
 80084dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084e4:	9304      	str	r3, [sp, #16]
 80084e6:	9307      	str	r3, [sp, #28]
 80084e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084ec:	931a      	str	r3, [sp, #104]	; 0x68
 80084ee:	462f      	mov	r7, r5
 80084f0:	2205      	movs	r2, #5
 80084f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80084f6:	4850      	ldr	r0, [pc, #320]	; (8008638 <_svfiprintf_r+0x1dc>)
 80084f8:	f7f7 fe82 	bl	8000200 <memchr>
 80084fc:	9b04      	ldr	r3, [sp, #16]
 80084fe:	b9d0      	cbnz	r0, 8008536 <_svfiprintf_r+0xda>
 8008500:	06d9      	lsls	r1, r3, #27
 8008502:	bf44      	itt	mi
 8008504:	2220      	movmi	r2, #32
 8008506:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800850a:	071a      	lsls	r2, r3, #28
 800850c:	bf44      	itt	mi
 800850e:	222b      	movmi	r2, #43	; 0x2b
 8008510:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008514:	782a      	ldrb	r2, [r5, #0]
 8008516:	2a2a      	cmp	r2, #42	; 0x2a
 8008518:	d015      	beq.n	8008546 <_svfiprintf_r+0xea>
 800851a:	9a07      	ldr	r2, [sp, #28]
 800851c:	462f      	mov	r7, r5
 800851e:	2000      	movs	r0, #0
 8008520:	250a      	movs	r5, #10
 8008522:	4639      	mov	r1, r7
 8008524:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008528:	3b30      	subs	r3, #48	; 0x30
 800852a:	2b09      	cmp	r3, #9
 800852c:	d94d      	bls.n	80085ca <_svfiprintf_r+0x16e>
 800852e:	b1b8      	cbz	r0, 8008560 <_svfiprintf_r+0x104>
 8008530:	e00f      	b.n	8008552 <_svfiprintf_r+0xf6>
 8008532:	462f      	mov	r7, r5
 8008534:	e7b8      	b.n	80084a8 <_svfiprintf_r+0x4c>
 8008536:	4a40      	ldr	r2, [pc, #256]	; (8008638 <_svfiprintf_r+0x1dc>)
 8008538:	1a80      	subs	r0, r0, r2
 800853a:	fa0b f000 	lsl.w	r0, fp, r0
 800853e:	4318      	orrs	r0, r3
 8008540:	9004      	str	r0, [sp, #16]
 8008542:	463d      	mov	r5, r7
 8008544:	e7d3      	b.n	80084ee <_svfiprintf_r+0x92>
 8008546:	9a03      	ldr	r2, [sp, #12]
 8008548:	1d11      	adds	r1, r2, #4
 800854a:	6812      	ldr	r2, [r2, #0]
 800854c:	9103      	str	r1, [sp, #12]
 800854e:	2a00      	cmp	r2, #0
 8008550:	db01      	blt.n	8008556 <_svfiprintf_r+0xfa>
 8008552:	9207      	str	r2, [sp, #28]
 8008554:	e004      	b.n	8008560 <_svfiprintf_r+0x104>
 8008556:	4252      	negs	r2, r2
 8008558:	f043 0302 	orr.w	r3, r3, #2
 800855c:	9207      	str	r2, [sp, #28]
 800855e:	9304      	str	r3, [sp, #16]
 8008560:	783b      	ldrb	r3, [r7, #0]
 8008562:	2b2e      	cmp	r3, #46	; 0x2e
 8008564:	d10c      	bne.n	8008580 <_svfiprintf_r+0x124>
 8008566:	787b      	ldrb	r3, [r7, #1]
 8008568:	2b2a      	cmp	r3, #42	; 0x2a
 800856a:	d133      	bne.n	80085d4 <_svfiprintf_r+0x178>
 800856c:	9b03      	ldr	r3, [sp, #12]
 800856e:	1d1a      	adds	r2, r3, #4
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	9203      	str	r2, [sp, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	bfb8      	it	lt
 8008578:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800857c:	3702      	adds	r7, #2
 800857e:	9305      	str	r3, [sp, #20]
 8008580:	4d2e      	ldr	r5, [pc, #184]	; (800863c <_svfiprintf_r+0x1e0>)
 8008582:	7839      	ldrb	r1, [r7, #0]
 8008584:	2203      	movs	r2, #3
 8008586:	4628      	mov	r0, r5
 8008588:	f7f7 fe3a 	bl	8000200 <memchr>
 800858c:	b138      	cbz	r0, 800859e <_svfiprintf_r+0x142>
 800858e:	2340      	movs	r3, #64	; 0x40
 8008590:	1b40      	subs	r0, r0, r5
 8008592:	fa03 f000 	lsl.w	r0, r3, r0
 8008596:	9b04      	ldr	r3, [sp, #16]
 8008598:	4303      	orrs	r3, r0
 800859a:	3701      	adds	r7, #1
 800859c:	9304      	str	r3, [sp, #16]
 800859e:	7839      	ldrb	r1, [r7, #0]
 80085a0:	4827      	ldr	r0, [pc, #156]	; (8008640 <_svfiprintf_r+0x1e4>)
 80085a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085a6:	2206      	movs	r2, #6
 80085a8:	1c7e      	adds	r6, r7, #1
 80085aa:	f7f7 fe29 	bl	8000200 <memchr>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d038      	beq.n	8008624 <_svfiprintf_r+0x1c8>
 80085b2:	4b24      	ldr	r3, [pc, #144]	; (8008644 <_svfiprintf_r+0x1e8>)
 80085b4:	bb13      	cbnz	r3, 80085fc <_svfiprintf_r+0x1a0>
 80085b6:	9b03      	ldr	r3, [sp, #12]
 80085b8:	3307      	adds	r3, #7
 80085ba:	f023 0307 	bic.w	r3, r3, #7
 80085be:	3308      	adds	r3, #8
 80085c0:	9303      	str	r3, [sp, #12]
 80085c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c4:	444b      	add	r3, r9
 80085c6:	9309      	str	r3, [sp, #36]	; 0x24
 80085c8:	e76d      	b.n	80084a6 <_svfiprintf_r+0x4a>
 80085ca:	fb05 3202 	mla	r2, r5, r2, r3
 80085ce:	2001      	movs	r0, #1
 80085d0:	460f      	mov	r7, r1
 80085d2:	e7a6      	b.n	8008522 <_svfiprintf_r+0xc6>
 80085d4:	2300      	movs	r3, #0
 80085d6:	3701      	adds	r7, #1
 80085d8:	9305      	str	r3, [sp, #20]
 80085da:	4619      	mov	r1, r3
 80085dc:	250a      	movs	r5, #10
 80085de:	4638      	mov	r0, r7
 80085e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085e4:	3a30      	subs	r2, #48	; 0x30
 80085e6:	2a09      	cmp	r2, #9
 80085e8:	d903      	bls.n	80085f2 <_svfiprintf_r+0x196>
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d0c8      	beq.n	8008580 <_svfiprintf_r+0x124>
 80085ee:	9105      	str	r1, [sp, #20]
 80085f0:	e7c6      	b.n	8008580 <_svfiprintf_r+0x124>
 80085f2:	fb05 2101 	mla	r1, r5, r1, r2
 80085f6:	2301      	movs	r3, #1
 80085f8:	4607      	mov	r7, r0
 80085fa:	e7f0      	b.n	80085de <_svfiprintf_r+0x182>
 80085fc:	ab03      	add	r3, sp, #12
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	4622      	mov	r2, r4
 8008602:	4b11      	ldr	r3, [pc, #68]	; (8008648 <_svfiprintf_r+0x1ec>)
 8008604:	a904      	add	r1, sp, #16
 8008606:	4640      	mov	r0, r8
 8008608:	f3af 8000 	nop.w
 800860c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008610:	4681      	mov	r9, r0
 8008612:	d1d6      	bne.n	80085c2 <_svfiprintf_r+0x166>
 8008614:	89a3      	ldrh	r3, [r4, #12]
 8008616:	065b      	lsls	r3, r3, #25
 8008618:	f53f af35 	bmi.w	8008486 <_svfiprintf_r+0x2a>
 800861c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800861e:	b01d      	add	sp, #116	; 0x74
 8008620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008624:	ab03      	add	r3, sp, #12
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	4622      	mov	r2, r4
 800862a:	4b07      	ldr	r3, [pc, #28]	; (8008648 <_svfiprintf_r+0x1ec>)
 800862c:	a904      	add	r1, sp, #16
 800862e:	4640      	mov	r0, r8
 8008630:	f000 f882 	bl	8008738 <_printf_i>
 8008634:	e7ea      	b.n	800860c <_svfiprintf_r+0x1b0>
 8008636:	bf00      	nop
 8008638:	08008d98 	.word	0x08008d98
 800863c:	08008d9e 	.word	0x08008d9e
 8008640:	08008da2 	.word	0x08008da2
 8008644:	00000000 	.word	0x00000000
 8008648:	080083a9 	.word	0x080083a9

0800864c <_printf_common>:
 800864c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008650:	4691      	mov	r9, r2
 8008652:	461f      	mov	r7, r3
 8008654:	688a      	ldr	r2, [r1, #8]
 8008656:	690b      	ldr	r3, [r1, #16]
 8008658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800865c:	4293      	cmp	r3, r2
 800865e:	bfb8      	it	lt
 8008660:	4613      	movlt	r3, r2
 8008662:	f8c9 3000 	str.w	r3, [r9]
 8008666:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800866a:	4606      	mov	r6, r0
 800866c:	460c      	mov	r4, r1
 800866e:	b112      	cbz	r2, 8008676 <_printf_common+0x2a>
 8008670:	3301      	adds	r3, #1
 8008672:	f8c9 3000 	str.w	r3, [r9]
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	0699      	lsls	r1, r3, #26
 800867a:	bf42      	ittt	mi
 800867c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008680:	3302      	addmi	r3, #2
 8008682:	f8c9 3000 	strmi.w	r3, [r9]
 8008686:	6825      	ldr	r5, [r4, #0]
 8008688:	f015 0506 	ands.w	r5, r5, #6
 800868c:	d107      	bne.n	800869e <_printf_common+0x52>
 800868e:	f104 0a19 	add.w	sl, r4, #25
 8008692:	68e3      	ldr	r3, [r4, #12]
 8008694:	f8d9 2000 	ldr.w	r2, [r9]
 8008698:	1a9b      	subs	r3, r3, r2
 800869a:	42ab      	cmp	r3, r5
 800869c:	dc28      	bgt.n	80086f0 <_printf_common+0xa4>
 800869e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80086a2:	6822      	ldr	r2, [r4, #0]
 80086a4:	3300      	adds	r3, #0
 80086a6:	bf18      	it	ne
 80086a8:	2301      	movne	r3, #1
 80086aa:	0692      	lsls	r2, r2, #26
 80086ac:	d42d      	bmi.n	800870a <_printf_common+0xbe>
 80086ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086b2:	4639      	mov	r1, r7
 80086b4:	4630      	mov	r0, r6
 80086b6:	47c0      	blx	r8
 80086b8:	3001      	adds	r0, #1
 80086ba:	d020      	beq.n	80086fe <_printf_common+0xb2>
 80086bc:	6823      	ldr	r3, [r4, #0]
 80086be:	68e5      	ldr	r5, [r4, #12]
 80086c0:	f8d9 2000 	ldr.w	r2, [r9]
 80086c4:	f003 0306 	and.w	r3, r3, #6
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	bf08      	it	eq
 80086cc:	1aad      	subeq	r5, r5, r2
 80086ce:	68a3      	ldr	r3, [r4, #8]
 80086d0:	6922      	ldr	r2, [r4, #16]
 80086d2:	bf0c      	ite	eq
 80086d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086d8:	2500      	movne	r5, #0
 80086da:	4293      	cmp	r3, r2
 80086dc:	bfc4      	itt	gt
 80086de:	1a9b      	subgt	r3, r3, r2
 80086e0:	18ed      	addgt	r5, r5, r3
 80086e2:	f04f 0900 	mov.w	r9, #0
 80086e6:	341a      	adds	r4, #26
 80086e8:	454d      	cmp	r5, r9
 80086ea:	d11a      	bne.n	8008722 <_printf_common+0xd6>
 80086ec:	2000      	movs	r0, #0
 80086ee:	e008      	b.n	8008702 <_printf_common+0xb6>
 80086f0:	2301      	movs	r3, #1
 80086f2:	4652      	mov	r2, sl
 80086f4:	4639      	mov	r1, r7
 80086f6:	4630      	mov	r0, r6
 80086f8:	47c0      	blx	r8
 80086fa:	3001      	adds	r0, #1
 80086fc:	d103      	bne.n	8008706 <_printf_common+0xba>
 80086fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008706:	3501      	adds	r5, #1
 8008708:	e7c3      	b.n	8008692 <_printf_common+0x46>
 800870a:	18e1      	adds	r1, r4, r3
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	2030      	movs	r0, #48	; 0x30
 8008710:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008714:	4422      	add	r2, r4
 8008716:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800871a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800871e:	3302      	adds	r3, #2
 8008720:	e7c5      	b.n	80086ae <_printf_common+0x62>
 8008722:	2301      	movs	r3, #1
 8008724:	4622      	mov	r2, r4
 8008726:	4639      	mov	r1, r7
 8008728:	4630      	mov	r0, r6
 800872a:	47c0      	blx	r8
 800872c:	3001      	adds	r0, #1
 800872e:	d0e6      	beq.n	80086fe <_printf_common+0xb2>
 8008730:	f109 0901 	add.w	r9, r9, #1
 8008734:	e7d8      	b.n	80086e8 <_printf_common+0x9c>
	...

08008738 <_printf_i>:
 8008738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800873c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008740:	460c      	mov	r4, r1
 8008742:	7e09      	ldrb	r1, [r1, #24]
 8008744:	b085      	sub	sp, #20
 8008746:	296e      	cmp	r1, #110	; 0x6e
 8008748:	4617      	mov	r7, r2
 800874a:	4606      	mov	r6, r0
 800874c:	4698      	mov	r8, r3
 800874e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008750:	f000 80b3 	beq.w	80088ba <_printf_i+0x182>
 8008754:	d822      	bhi.n	800879c <_printf_i+0x64>
 8008756:	2963      	cmp	r1, #99	; 0x63
 8008758:	d036      	beq.n	80087c8 <_printf_i+0x90>
 800875a:	d80a      	bhi.n	8008772 <_printf_i+0x3a>
 800875c:	2900      	cmp	r1, #0
 800875e:	f000 80b9 	beq.w	80088d4 <_printf_i+0x19c>
 8008762:	2958      	cmp	r1, #88	; 0x58
 8008764:	f000 8083 	beq.w	800886e <_printf_i+0x136>
 8008768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800876c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008770:	e032      	b.n	80087d8 <_printf_i+0xa0>
 8008772:	2964      	cmp	r1, #100	; 0x64
 8008774:	d001      	beq.n	800877a <_printf_i+0x42>
 8008776:	2969      	cmp	r1, #105	; 0x69
 8008778:	d1f6      	bne.n	8008768 <_printf_i+0x30>
 800877a:	6820      	ldr	r0, [r4, #0]
 800877c:	6813      	ldr	r3, [r2, #0]
 800877e:	0605      	lsls	r5, r0, #24
 8008780:	f103 0104 	add.w	r1, r3, #4
 8008784:	d52a      	bpl.n	80087dc <_printf_i+0xa4>
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6011      	str	r1, [r2, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	da03      	bge.n	8008796 <_printf_i+0x5e>
 800878e:	222d      	movs	r2, #45	; 0x2d
 8008790:	425b      	negs	r3, r3
 8008792:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008796:	486f      	ldr	r0, [pc, #444]	; (8008954 <_printf_i+0x21c>)
 8008798:	220a      	movs	r2, #10
 800879a:	e039      	b.n	8008810 <_printf_i+0xd8>
 800879c:	2973      	cmp	r1, #115	; 0x73
 800879e:	f000 809d 	beq.w	80088dc <_printf_i+0x1a4>
 80087a2:	d808      	bhi.n	80087b6 <_printf_i+0x7e>
 80087a4:	296f      	cmp	r1, #111	; 0x6f
 80087a6:	d020      	beq.n	80087ea <_printf_i+0xb2>
 80087a8:	2970      	cmp	r1, #112	; 0x70
 80087aa:	d1dd      	bne.n	8008768 <_printf_i+0x30>
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	f043 0320 	orr.w	r3, r3, #32
 80087b2:	6023      	str	r3, [r4, #0]
 80087b4:	e003      	b.n	80087be <_printf_i+0x86>
 80087b6:	2975      	cmp	r1, #117	; 0x75
 80087b8:	d017      	beq.n	80087ea <_printf_i+0xb2>
 80087ba:	2978      	cmp	r1, #120	; 0x78
 80087bc:	d1d4      	bne.n	8008768 <_printf_i+0x30>
 80087be:	2378      	movs	r3, #120	; 0x78
 80087c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087c4:	4864      	ldr	r0, [pc, #400]	; (8008958 <_printf_i+0x220>)
 80087c6:	e055      	b.n	8008874 <_printf_i+0x13c>
 80087c8:	6813      	ldr	r3, [r2, #0]
 80087ca:	1d19      	adds	r1, r3, #4
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	6011      	str	r1, [r2, #0]
 80087d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087d8:	2301      	movs	r3, #1
 80087da:	e08c      	b.n	80088f6 <_printf_i+0x1be>
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	6011      	str	r1, [r2, #0]
 80087e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087e4:	bf18      	it	ne
 80087e6:	b21b      	sxthne	r3, r3
 80087e8:	e7cf      	b.n	800878a <_printf_i+0x52>
 80087ea:	6813      	ldr	r3, [r2, #0]
 80087ec:	6825      	ldr	r5, [r4, #0]
 80087ee:	1d18      	adds	r0, r3, #4
 80087f0:	6010      	str	r0, [r2, #0]
 80087f2:	0628      	lsls	r0, r5, #24
 80087f4:	d501      	bpl.n	80087fa <_printf_i+0xc2>
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	e002      	b.n	8008800 <_printf_i+0xc8>
 80087fa:	0668      	lsls	r0, r5, #25
 80087fc:	d5fb      	bpl.n	80087f6 <_printf_i+0xbe>
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	4854      	ldr	r0, [pc, #336]	; (8008954 <_printf_i+0x21c>)
 8008802:	296f      	cmp	r1, #111	; 0x6f
 8008804:	bf14      	ite	ne
 8008806:	220a      	movne	r2, #10
 8008808:	2208      	moveq	r2, #8
 800880a:	2100      	movs	r1, #0
 800880c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008810:	6865      	ldr	r5, [r4, #4]
 8008812:	60a5      	str	r5, [r4, #8]
 8008814:	2d00      	cmp	r5, #0
 8008816:	f2c0 8095 	blt.w	8008944 <_printf_i+0x20c>
 800881a:	6821      	ldr	r1, [r4, #0]
 800881c:	f021 0104 	bic.w	r1, r1, #4
 8008820:	6021      	str	r1, [r4, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d13d      	bne.n	80088a2 <_printf_i+0x16a>
 8008826:	2d00      	cmp	r5, #0
 8008828:	f040 808e 	bne.w	8008948 <_printf_i+0x210>
 800882c:	4665      	mov	r5, ip
 800882e:	2a08      	cmp	r2, #8
 8008830:	d10b      	bne.n	800884a <_printf_i+0x112>
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	07db      	lsls	r3, r3, #31
 8008836:	d508      	bpl.n	800884a <_printf_i+0x112>
 8008838:	6923      	ldr	r3, [r4, #16]
 800883a:	6862      	ldr	r2, [r4, #4]
 800883c:	429a      	cmp	r2, r3
 800883e:	bfde      	ittt	le
 8008840:	2330      	movle	r3, #48	; 0x30
 8008842:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008846:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800884a:	ebac 0305 	sub.w	r3, ip, r5
 800884e:	6123      	str	r3, [r4, #16]
 8008850:	f8cd 8000 	str.w	r8, [sp]
 8008854:	463b      	mov	r3, r7
 8008856:	aa03      	add	r2, sp, #12
 8008858:	4621      	mov	r1, r4
 800885a:	4630      	mov	r0, r6
 800885c:	f7ff fef6 	bl	800864c <_printf_common>
 8008860:	3001      	adds	r0, #1
 8008862:	d14d      	bne.n	8008900 <_printf_i+0x1c8>
 8008864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008868:	b005      	add	sp, #20
 800886a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800886e:	4839      	ldr	r0, [pc, #228]	; (8008954 <_printf_i+0x21c>)
 8008870:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008874:	6813      	ldr	r3, [r2, #0]
 8008876:	6821      	ldr	r1, [r4, #0]
 8008878:	1d1d      	adds	r5, r3, #4
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6015      	str	r5, [r2, #0]
 800887e:	060a      	lsls	r2, r1, #24
 8008880:	d50b      	bpl.n	800889a <_printf_i+0x162>
 8008882:	07ca      	lsls	r2, r1, #31
 8008884:	bf44      	itt	mi
 8008886:	f041 0120 	orrmi.w	r1, r1, #32
 800888a:	6021      	strmi	r1, [r4, #0]
 800888c:	b91b      	cbnz	r3, 8008896 <_printf_i+0x15e>
 800888e:	6822      	ldr	r2, [r4, #0]
 8008890:	f022 0220 	bic.w	r2, r2, #32
 8008894:	6022      	str	r2, [r4, #0]
 8008896:	2210      	movs	r2, #16
 8008898:	e7b7      	b.n	800880a <_printf_i+0xd2>
 800889a:	064d      	lsls	r5, r1, #25
 800889c:	bf48      	it	mi
 800889e:	b29b      	uxthmi	r3, r3
 80088a0:	e7ef      	b.n	8008882 <_printf_i+0x14a>
 80088a2:	4665      	mov	r5, ip
 80088a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80088a8:	fb02 3311 	mls	r3, r2, r1, r3
 80088ac:	5cc3      	ldrb	r3, [r0, r3]
 80088ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80088b2:	460b      	mov	r3, r1
 80088b4:	2900      	cmp	r1, #0
 80088b6:	d1f5      	bne.n	80088a4 <_printf_i+0x16c>
 80088b8:	e7b9      	b.n	800882e <_printf_i+0xf6>
 80088ba:	6813      	ldr	r3, [r2, #0]
 80088bc:	6825      	ldr	r5, [r4, #0]
 80088be:	6961      	ldr	r1, [r4, #20]
 80088c0:	1d18      	adds	r0, r3, #4
 80088c2:	6010      	str	r0, [r2, #0]
 80088c4:	0628      	lsls	r0, r5, #24
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	d501      	bpl.n	80088ce <_printf_i+0x196>
 80088ca:	6019      	str	r1, [r3, #0]
 80088cc:	e002      	b.n	80088d4 <_printf_i+0x19c>
 80088ce:	066a      	lsls	r2, r5, #25
 80088d0:	d5fb      	bpl.n	80088ca <_printf_i+0x192>
 80088d2:	8019      	strh	r1, [r3, #0]
 80088d4:	2300      	movs	r3, #0
 80088d6:	6123      	str	r3, [r4, #16]
 80088d8:	4665      	mov	r5, ip
 80088da:	e7b9      	b.n	8008850 <_printf_i+0x118>
 80088dc:	6813      	ldr	r3, [r2, #0]
 80088de:	1d19      	adds	r1, r3, #4
 80088e0:	6011      	str	r1, [r2, #0]
 80088e2:	681d      	ldr	r5, [r3, #0]
 80088e4:	6862      	ldr	r2, [r4, #4]
 80088e6:	2100      	movs	r1, #0
 80088e8:	4628      	mov	r0, r5
 80088ea:	f7f7 fc89 	bl	8000200 <memchr>
 80088ee:	b108      	cbz	r0, 80088f4 <_printf_i+0x1bc>
 80088f0:	1b40      	subs	r0, r0, r5
 80088f2:	6060      	str	r0, [r4, #4]
 80088f4:	6863      	ldr	r3, [r4, #4]
 80088f6:	6123      	str	r3, [r4, #16]
 80088f8:	2300      	movs	r3, #0
 80088fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088fe:	e7a7      	b.n	8008850 <_printf_i+0x118>
 8008900:	6923      	ldr	r3, [r4, #16]
 8008902:	462a      	mov	r2, r5
 8008904:	4639      	mov	r1, r7
 8008906:	4630      	mov	r0, r6
 8008908:	47c0      	blx	r8
 800890a:	3001      	adds	r0, #1
 800890c:	d0aa      	beq.n	8008864 <_printf_i+0x12c>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	079b      	lsls	r3, r3, #30
 8008912:	d413      	bmi.n	800893c <_printf_i+0x204>
 8008914:	68e0      	ldr	r0, [r4, #12]
 8008916:	9b03      	ldr	r3, [sp, #12]
 8008918:	4298      	cmp	r0, r3
 800891a:	bfb8      	it	lt
 800891c:	4618      	movlt	r0, r3
 800891e:	e7a3      	b.n	8008868 <_printf_i+0x130>
 8008920:	2301      	movs	r3, #1
 8008922:	464a      	mov	r2, r9
 8008924:	4639      	mov	r1, r7
 8008926:	4630      	mov	r0, r6
 8008928:	47c0      	blx	r8
 800892a:	3001      	adds	r0, #1
 800892c:	d09a      	beq.n	8008864 <_printf_i+0x12c>
 800892e:	3501      	adds	r5, #1
 8008930:	68e3      	ldr	r3, [r4, #12]
 8008932:	9a03      	ldr	r2, [sp, #12]
 8008934:	1a9b      	subs	r3, r3, r2
 8008936:	42ab      	cmp	r3, r5
 8008938:	dcf2      	bgt.n	8008920 <_printf_i+0x1e8>
 800893a:	e7eb      	b.n	8008914 <_printf_i+0x1dc>
 800893c:	2500      	movs	r5, #0
 800893e:	f104 0919 	add.w	r9, r4, #25
 8008942:	e7f5      	b.n	8008930 <_printf_i+0x1f8>
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1ac      	bne.n	80088a2 <_printf_i+0x16a>
 8008948:	7803      	ldrb	r3, [r0, #0]
 800894a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800894e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008952:	e76c      	b.n	800882e <_printf_i+0xf6>
 8008954:	08008da9 	.word	0x08008da9
 8008958:	08008dba 	.word	0x08008dba

0800895c <memmove>:
 800895c:	4288      	cmp	r0, r1
 800895e:	b510      	push	{r4, lr}
 8008960:	eb01 0302 	add.w	r3, r1, r2
 8008964:	d807      	bhi.n	8008976 <memmove+0x1a>
 8008966:	1e42      	subs	r2, r0, #1
 8008968:	4299      	cmp	r1, r3
 800896a:	d00a      	beq.n	8008982 <memmove+0x26>
 800896c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008970:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008974:	e7f8      	b.n	8008968 <memmove+0xc>
 8008976:	4283      	cmp	r3, r0
 8008978:	d9f5      	bls.n	8008966 <memmove+0xa>
 800897a:	1881      	adds	r1, r0, r2
 800897c:	1ad2      	subs	r2, r2, r3
 800897e:	42d3      	cmn	r3, r2
 8008980:	d100      	bne.n	8008984 <memmove+0x28>
 8008982:	bd10      	pop	{r4, pc}
 8008984:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008988:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800898c:	e7f7      	b.n	800897e <memmove+0x22>
	...

08008990 <_free_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4605      	mov	r5, r0
 8008994:	2900      	cmp	r1, #0
 8008996:	d045      	beq.n	8008a24 <_free_r+0x94>
 8008998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800899c:	1f0c      	subs	r4, r1, #4
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bfb8      	it	lt
 80089a2:	18e4      	addlt	r4, r4, r3
 80089a4:	f000 f8d2 	bl	8008b4c <__malloc_lock>
 80089a8:	4a1f      	ldr	r2, [pc, #124]	; (8008a28 <_free_r+0x98>)
 80089aa:	6813      	ldr	r3, [r2, #0]
 80089ac:	4610      	mov	r0, r2
 80089ae:	b933      	cbnz	r3, 80089be <_free_r+0x2e>
 80089b0:	6063      	str	r3, [r4, #4]
 80089b2:	6014      	str	r4, [r2, #0]
 80089b4:	4628      	mov	r0, r5
 80089b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ba:	f000 b8c8 	b.w	8008b4e <__malloc_unlock>
 80089be:	42a3      	cmp	r3, r4
 80089c0:	d90c      	bls.n	80089dc <_free_r+0x4c>
 80089c2:	6821      	ldr	r1, [r4, #0]
 80089c4:	1862      	adds	r2, r4, r1
 80089c6:	4293      	cmp	r3, r2
 80089c8:	bf04      	itt	eq
 80089ca:	681a      	ldreq	r2, [r3, #0]
 80089cc:	685b      	ldreq	r3, [r3, #4]
 80089ce:	6063      	str	r3, [r4, #4]
 80089d0:	bf04      	itt	eq
 80089d2:	1852      	addeq	r2, r2, r1
 80089d4:	6022      	streq	r2, [r4, #0]
 80089d6:	6004      	str	r4, [r0, #0]
 80089d8:	e7ec      	b.n	80089b4 <_free_r+0x24>
 80089da:	4613      	mov	r3, r2
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	b10a      	cbz	r2, 80089e4 <_free_r+0x54>
 80089e0:	42a2      	cmp	r2, r4
 80089e2:	d9fa      	bls.n	80089da <_free_r+0x4a>
 80089e4:	6819      	ldr	r1, [r3, #0]
 80089e6:	1858      	adds	r0, r3, r1
 80089e8:	42a0      	cmp	r0, r4
 80089ea:	d10b      	bne.n	8008a04 <_free_r+0x74>
 80089ec:	6820      	ldr	r0, [r4, #0]
 80089ee:	4401      	add	r1, r0
 80089f0:	1858      	adds	r0, r3, r1
 80089f2:	4282      	cmp	r2, r0
 80089f4:	6019      	str	r1, [r3, #0]
 80089f6:	d1dd      	bne.n	80089b4 <_free_r+0x24>
 80089f8:	6810      	ldr	r0, [r2, #0]
 80089fa:	6852      	ldr	r2, [r2, #4]
 80089fc:	605a      	str	r2, [r3, #4]
 80089fe:	4401      	add	r1, r0
 8008a00:	6019      	str	r1, [r3, #0]
 8008a02:	e7d7      	b.n	80089b4 <_free_r+0x24>
 8008a04:	d902      	bls.n	8008a0c <_free_r+0x7c>
 8008a06:	230c      	movs	r3, #12
 8008a08:	602b      	str	r3, [r5, #0]
 8008a0a:	e7d3      	b.n	80089b4 <_free_r+0x24>
 8008a0c:	6820      	ldr	r0, [r4, #0]
 8008a0e:	1821      	adds	r1, r4, r0
 8008a10:	428a      	cmp	r2, r1
 8008a12:	bf04      	itt	eq
 8008a14:	6811      	ldreq	r1, [r2, #0]
 8008a16:	6852      	ldreq	r2, [r2, #4]
 8008a18:	6062      	str	r2, [r4, #4]
 8008a1a:	bf04      	itt	eq
 8008a1c:	1809      	addeq	r1, r1, r0
 8008a1e:	6021      	streq	r1, [r4, #0]
 8008a20:	605c      	str	r4, [r3, #4]
 8008a22:	e7c7      	b.n	80089b4 <_free_r+0x24>
 8008a24:	bd38      	pop	{r3, r4, r5, pc}
 8008a26:	bf00      	nop
 8008a28:	20001080 	.word	0x20001080

08008a2c <_malloc_r>:
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	1ccd      	adds	r5, r1, #3
 8008a30:	f025 0503 	bic.w	r5, r5, #3
 8008a34:	3508      	adds	r5, #8
 8008a36:	2d0c      	cmp	r5, #12
 8008a38:	bf38      	it	cc
 8008a3a:	250c      	movcc	r5, #12
 8008a3c:	2d00      	cmp	r5, #0
 8008a3e:	4606      	mov	r6, r0
 8008a40:	db01      	blt.n	8008a46 <_malloc_r+0x1a>
 8008a42:	42a9      	cmp	r1, r5
 8008a44:	d903      	bls.n	8008a4e <_malloc_r+0x22>
 8008a46:	230c      	movs	r3, #12
 8008a48:	6033      	str	r3, [r6, #0]
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	bd70      	pop	{r4, r5, r6, pc}
 8008a4e:	f000 f87d 	bl	8008b4c <__malloc_lock>
 8008a52:	4a21      	ldr	r2, [pc, #132]	; (8008ad8 <_malloc_r+0xac>)
 8008a54:	6814      	ldr	r4, [r2, #0]
 8008a56:	4621      	mov	r1, r4
 8008a58:	b991      	cbnz	r1, 8008a80 <_malloc_r+0x54>
 8008a5a:	4c20      	ldr	r4, [pc, #128]	; (8008adc <_malloc_r+0xb0>)
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	b91b      	cbnz	r3, 8008a68 <_malloc_r+0x3c>
 8008a60:	4630      	mov	r0, r6
 8008a62:	f000 f863 	bl	8008b2c <_sbrk_r>
 8008a66:	6020      	str	r0, [r4, #0]
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f000 f85e 	bl	8008b2c <_sbrk_r>
 8008a70:	1c43      	adds	r3, r0, #1
 8008a72:	d124      	bne.n	8008abe <_malloc_r+0x92>
 8008a74:	230c      	movs	r3, #12
 8008a76:	6033      	str	r3, [r6, #0]
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f000 f868 	bl	8008b4e <__malloc_unlock>
 8008a7e:	e7e4      	b.n	8008a4a <_malloc_r+0x1e>
 8008a80:	680b      	ldr	r3, [r1, #0]
 8008a82:	1b5b      	subs	r3, r3, r5
 8008a84:	d418      	bmi.n	8008ab8 <_malloc_r+0x8c>
 8008a86:	2b0b      	cmp	r3, #11
 8008a88:	d90f      	bls.n	8008aaa <_malloc_r+0x7e>
 8008a8a:	600b      	str	r3, [r1, #0]
 8008a8c:	50cd      	str	r5, [r1, r3]
 8008a8e:	18cc      	adds	r4, r1, r3
 8008a90:	4630      	mov	r0, r6
 8008a92:	f000 f85c 	bl	8008b4e <__malloc_unlock>
 8008a96:	f104 000b 	add.w	r0, r4, #11
 8008a9a:	1d23      	adds	r3, r4, #4
 8008a9c:	f020 0007 	bic.w	r0, r0, #7
 8008aa0:	1ac3      	subs	r3, r0, r3
 8008aa2:	d0d3      	beq.n	8008a4c <_malloc_r+0x20>
 8008aa4:	425a      	negs	r2, r3
 8008aa6:	50e2      	str	r2, [r4, r3]
 8008aa8:	e7d0      	b.n	8008a4c <_malloc_r+0x20>
 8008aaa:	428c      	cmp	r4, r1
 8008aac:	684b      	ldr	r3, [r1, #4]
 8008aae:	bf16      	itet	ne
 8008ab0:	6063      	strne	r3, [r4, #4]
 8008ab2:	6013      	streq	r3, [r2, #0]
 8008ab4:	460c      	movne	r4, r1
 8008ab6:	e7eb      	b.n	8008a90 <_malloc_r+0x64>
 8008ab8:	460c      	mov	r4, r1
 8008aba:	6849      	ldr	r1, [r1, #4]
 8008abc:	e7cc      	b.n	8008a58 <_malloc_r+0x2c>
 8008abe:	1cc4      	adds	r4, r0, #3
 8008ac0:	f024 0403 	bic.w	r4, r4, #3
 8008ac4:	42a0      	cmp	r0, r4
 8008ac6:	d005      	beq.n	8008ad4 <_malloc_r+0xa8>
 8008ac8:	1a21      	subs	r1, r4, r0
 8008aca:	4630      	mov	r0, r6
 8008acc:	f000 f82e 	bl	8008b2c <_sbrk_r>
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	d0cf      	beq.n	8008a74 <_malloc_r+0x48>
 8008ad4:	6025      	str	r5, [r4, #0]
 8008ad6:	e7db      	b.n	8008a90 <_malloc_r+0x64>
 8008ad8:	20001080 	.word	0x20001080
 8008adc:	20001084 	.word	0x20001084

08008ae0 <_realloc_r>:
 8008ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae2:	4607      	mov	r7, r0
 8008ae4:	4614      	mov	r4, r2
 8008ae6:	460e      	mov	r6, r1
 8008ae8:	b921      	cbnz	r1, 8008af4 <_realloc_r+0x14>
 8008aea:	4611      	mov	r1, r2
 8008aec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008af0:	f7ff bf9c 	b.w	8008a2c <_malloc_r>
 8008af4:	b922      	cbnz	r2, 8008b00 <_realloc_r+0x20>
 8008af6:	f7ff ff4b 	bl	8008990 <_free_r>
 8008afa:	4625      	mov	r5, r4
 8008afc:	4628      	mov	r0, r5
 8008afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b00:	f000 f826 	bl	8008b50 <_malloc_usable_size_r>
 8008b04:	42a0      	cmp	r0, r4
 8008b06:	d20f      	bcs.n	8008b28 <_realloc_r+0x48>
 8008b08:	4621      	mov	r1, r4
 8008b0a:	4638      	mov	r0, r7
 8008b0c:	f7ff ff8e 	bl	8008a2c <_malloc_r>
 8008b10:	4605      	mov	r5, r0
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d0f2      	beq.n	8008afc <_realloc_r+0x1c>
 8008b16:	4631      	mov	r1, r6
 8008b18:	4622      	mov	r2, r4
 8008b1a:	f7ff fc11 	bl	8008340 <memcpy>
 8008b1e:	4631      	mov	r1, r6
 8008b20:	4638      	mov	r0, r7
 8008b22:	f7ff ff35 	bl	8008990 <_free_r>
 8008b26:	e7e9      	b.n	8008afc <_realloc_r+0x1c>
 8008b28:	4635      	mov	r5, r6
 8008b2a:	e7e7      	b.n	8008afc <_realloc_r+0x1c>

08008b2c <_sbrk_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	4c06      	ldr	r4, [pc, #24]	; (8008b48 <_sbrk_r+0x1c>)
 8008b30:	2300      	movs	r3, #0
 8008b32:	4605      	mov	r5, r0
 8008b34:	4608      	mov	r0, r1
 8008b36:	6023      	str	r3, [r4, #0]
 8008b38:	f7f9 f814 	bl	8001b64 <_sbrk>
 8008b3c:	1c43      	adds	r3, r0, #1
 8008b3e:	d102      	bne.n	8008b46 <_sbrk_r+0x1a>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	b103      	cbz	r3, 8008b46 <_sbrk_r+0x1a>
 8008b44:	602b      	str	r3, [r5, #0]
 8008b46:	bd38      	pop	{r3, r4, r5, pc}
 8008b48:	2000130c 	.word	0x2000130c

08008b4c <__malloc_lock>:
 8008b4c:	4770      	bx	lr

08008b4e <__malloc_unlock>:
 8008b4e:	4770      	bx	lr

08008b50 <_malloc_usable_size_r>:
 8008b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b54:	1f18      	subs	r0, r3, #4
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	bfbc      	itt	lt
 8008b5a:	580b      	ldrlt	r3, [r1, r0]
 8008b5c:	18c0      	addlt	r0, r0, r3
 8008b5e:	4770      	bx	lr

08008b60 <_init>:
 8008b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b62:	bf00      	nop
 8008b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b66:	bc08      	pop	{r3}
 8008b68:	469e      	mov	lr, r3
 8008b6a:	4770      	bx	lr

08008b6c <_fini>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	bf00      	nop
 8008b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b72:	bc08      	pop	{r3}
 8008b74:	469e      	mov	lr, r3
 8008b76:	4770      	bx	lr
