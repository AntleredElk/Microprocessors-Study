
444ProjectToneMeasure_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b4c  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013a3c  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017748  08017748  00030074  2**0
                  CONTENTS
  4 .ARM          00000000  08017748  08017748  00030074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08017748  08017748  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017748  08017748  00027748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801774c  0801774c  0002774c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08017750  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000074  080177c4  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080177c4  000300a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d11  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000216b  00000000  00000000  00040db5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006d0  00000000  00000000  00042f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005c0  00000000  00000000  000435f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029279  00000000  00000000  00043bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a84  00000000  00000000  0006ce29  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fc758  00000000  00000000  000748ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  00171005  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cc8  00000000  00000000  001710f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000303b  00000000  00000000  00172dc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000074 	.word	0x20000074
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08003cf4 	.word	0x08003cf4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000078 	.word	0x20000078
 80001fc:	08003cf4 	.word	0x08003cf4

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033e:	f1a4 0401 	sub.w	r4, r4, #1
 8000342:	d1e9      	bne.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2iz>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae0:	d215      	bcs.n	8000b0e <__aeabi_d2iz+0x36>
 8000ae2:	d511      	bpl.n	8000b08 <__aeabi_d2iz+0x30>
 8000ae4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aec:	d912      	bls.n	8000b14 <__aeabi_d2iz+0x3c>
 8000aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d105      	bne.n	8000b20 <__aeabi_d2iz+0x48>
 8000b14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	bf08      	it	eq
 8000b1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_d2f>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b30:	bf24      	itt	cs
 8000b32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3a:	d90d      	bls.n	8000b58 <__aeabi_d2f+0x30>
 8000b3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b50:	bf08      	it	eq
 8000b52:	f020 0001 	biceq.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b5c:	d121      	bne.n	8000ba2 <__aeabi_d2f+0x7a>
 8000b5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b62:	bfbc      	itt	lt
 8000b64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	4770      	bxlt	lr
 8000b6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b72:	f1c2 0218 	rsb	r2, r2, #24
 8000b76:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b82:	bf18      	it	ne
 8000b84:	f040 0001 	orrne.w	r0, r0, #1
 8000b88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b94:	ea40 000c 	orr.w	r0, r0, ip
 8000b98:	fa23 f302 	lsr.w	r3, r3, r2
 8000b9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba0:	e7cc      	b.n	8000b3c <__aeabi_d2f+0x14>
 8000ba2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba6:	d107      	bne.n	8000bb8 <__aeabi_d2f+0x90>
 8000ba8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bac:	bf1e      	ittt	ne
 8000bae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb6:	4770      	bxne	lr
 8000bb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <getFrequencies>:
/* USER CODE BEGIN 0 */
//############################################################################################################################################



int getFrequencies(arm_rfft_fast_instance_f32* handler, int sampling_rate ,float* buffer_in, float* buffer_out) {
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8000bce:	b087      	sub	sp, #28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	f107 0418 	add.w	r4, r7, #24
 8000bd6:	3c0c      	subs	r4, #12
 8000bd8:	6020      	str	r0, [r4, #0]
 8000bda:	f107 0018 	add.w	r0, r7, #24
 8000bde:	3810      	subs	r0, #16
 8000be0:	6001      	str	r1, [r0, #0]
 8000be2:	f107 0118 	add.w	r1, r7, #24
 8000be6:	3914      	subs	r1, #20
 8000be8:	600a      	str	r2, [r1, #0]
 8000bea:	f107 0218 	add.w	r2, r7, #24
 8000bee:	3a18      	subs	r2, #24
 8000bf0:	6013      	str	r3, [r2, #0]

	arm_rfft_fast_f32(handler, buffer_in, buffer_out,0);
 8000bf2:	f107 0218 	add.w	r2, r7, #24
 8000bf6:	3a18      	subs	r2, #24
 8000bf8:	f107 0118 	add.w	r1, r7, #24
 8000bfc:	3914      	subs	r1, #20
 8000bfe:	f107 0018 	add.w	r0, r7, #24
 8000c02:	380c      	subs	r0, #12
 8000c04:	2300      	movs	r3, #0
 8000c06:	6812      	ldr	r2, [r2, #0]
 8000c08:	6809      	ldr	r1, [r1, #0]
 8000c0a:	6800      	ldr	r0, [r0, #0]
 8000c0c:	f001 fe0e 	bl	800282c <arm_rfft_fast_f32>

	int frequencies[1024];
	int frequency_index = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000c16:	f102 0214 	add.w	r2, r2, #20
 8000c1a:	6013      	str	r3, [r2, #0]
	int noise = 150; //variable noise offset
 8000c1c:	2396      	movs	r3, #150	; 0x96
 8000c1e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000c22:	f102 0204 	add.w	r2, r2, #4
 8000c26:	6013      	str	r3, [r2, #0]
	int max = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000c2e:	f102 0210 	add.w	r2, r2, #16
 8000c32:	6013      	str	r3, [r2, #0]
	int temp_max = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000c3a:	6013      	str	r3, [r2, #0]
	int frequency = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000c42:	f102 020c 	add.w	r2, r2, #12
 8000c46:	6013      	str	r3, [r2, #0]
	//calculate abs values and linear-to-dB
	for (int i=0; i<2048; i=i+2) {
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000c4e:	f102 0208 	add.w	r2, r2, #8
 8000c52:	6013      	str	r3, [r2, #0]
 8000c54:	e0e3      	b.n	8000e1e <getFrequencies+0x256>

		int real = buffer_out[i];
 8000c56:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000c5a:	f103 0308 	add.w	r3, r3, #8
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	009a      	lsls	r2, r3, #2
 8000c62:	f107 0318 	add.w	r3, r7, #24
 8000c66:	3b18      	subs	r3, #24
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	edd3 7a00 	vldr	s15, [r3]
 8000c70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c74:	ee17 3a90 	vmov	r3, s15
 8000c78:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000c7c:	f102 021c 	add.w	r2, r2, #28
 8000c80:	6013      	str	r3, [r2, #0]
		int complex = buffer_out[i+1];
 8000c82:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000c86:	f103 0308 	add.w	r3, r3, #8
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	009a      	lsls	r2, r3, #2
 8000c90:	f107 0318 	add.w	r3, r7, #24
 8000c94:	3b18      	subs	r3, #24
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4413      	add	r3, r2
 8000c9a:	edd3 7a00 	vldr	s15, [r3]
 8000c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ca2:	ee17 3a90 	vmov	r3, s15
 8000ca6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000caa:	f102 0218 	add.w	r2, r2, #24
 8000cae:	6013      	str	r3, [r2, #0]
		int result = sqrt(real*real+complex*complex);
 8000cb0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000cb4:	f103 031c 	add.w	r3, r3, #28
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000cbe:	f102 021c 	add.w	r2, r2, #28
 8000cc2:	6812      	ldr	r2, [r2, #0]
 8000cc4:	fb02 f203 	mul.w	r2, r2, r3
 8000cc8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000ccc:	f103 0318 	add.w	r3, r3, #24
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8000cd6:	f101 0118 	add.w	r1, r1, #24
 8000cda:	6809      	ldr	r1, [r1, #0]
 8000cdc:	fb01 f303 	mul.w	r3, r1, r3
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fbde 	bl	80004a4 <__aeabi_i2d>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	460c      	mov	r4, r1
 8000cec:	ec44 3b10 	vmov	d0, r3, r4
 8000cf0:	f002 fd32 	bl	8003758 <sqrt>
 8000cf4:	ec54 3b10 	vmov	r3, r4, d0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	4621      	mov	r1, r4
 8000cfc:	f7ff feec 	bl	8000ad8 <__aeabi_d2iz>
 8000d00:	4603      	mov	r3, r0
 8000d02:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000d06:	f102 0214 	add.w	r2, r2, #20
 8000d0a:	6013      	str	r3, [r2, #0]

		frequencies[frequency_index] = (int)(20*log10f(result));
 8000d0c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000d10:	f103 0314 	add.w	r3, r3, #20
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	ee07 3a90 	vmov	s15, r3
 8000d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d22:	f002 fd73 	bl	800380c <log10f>
 8000d26:	eeb0 7a40 	vmov.f32	s14, s0
 8000d2a:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8000d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d36:	ee17 1a90 	vmov	r1, s15
 8000d3a:	f107 0318 	add.w	r3, r7, #24
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000d44:	f102 0214 	add.w	r2, r2, #20
 8000d48:	6812      	ldr	r2, [r2, #0]
 8000d4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if (frequencies[frequency_index]<0) frequencies[frequency_index]=0;
 8000d4e:	f107 0318 	add.w	r3, r7, #24
 8000d52:	3b04      	subs	r3, #4
 8000d54:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000d58:	f102 0214 	add.w	r2, r2, #20
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	da0a      	bge.n	8000d7c <getFrequencies+0x1b4>
 8000d66:	f107 0318 	add.w	r3, r7, #24
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000d70:	f102 0214 	add.w	r2, r2, #20
 8000d74:	6812      	ldr	r2, [r2, #0]
 8000d76:	2100      	movs	r1, #0
 8000d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		temp_max = frequencies[frequency_index];
 8000d7c:	f107 0318 	add.w	r3, r7, #24
 8000d80:	3b04      	subs	r3, #4
 8000d82:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000d86:	f102 0214 	add.w	r2, r2, #20
 8000d8a:	6812      	ldr	r2, [r2, #0]
 8000d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d90:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000d94:	6013      	str	r3, [r2, #0]

		if(frequency_index > 0 && temp_max > max){
 8000d96:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000d9a:	f103 0314 	add.w	r3, r3, #20
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	dd26      	ble.n	8000df2 <getFrequencies+0x22a>
 8000da4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000dae:	f103 0310 	add.w	r3, r3, #16
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	dd1c      	ble.n	8000df2 <getFrequencies+0x22a>
			max = temp_max;
 8000db8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000dc2:	f102 0210 	add.w	r2, r2, #16
 8000dc6:	6013      	str	r3, [r2, #0]
			frequency = (int) frequency_index*sampling_rate/2048;
 8000dc8:	f107 0318 	add.w	r3, r7, #24
 8000dcc:	3b10      	subs	r3, #16
 8000dce:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000dd2:	f102 0214 	add.w	r2, r2, #20
 8000dd6:	6812      	ldr	r2, [r2, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	fb03 f302 	mul.w	r3, r3, r2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	da01      	bge.n	8000de6 <getFrequencies+0x21e>
 8000de2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000de6:	12db      	asrs	r3, r3, #11
 8000de8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000dec:	f102 020c 	add.w	r2, r2, #12
 8000df0:	6013      	str	r3, [r2, #0]
		}
		frequency_index++;
 8000df2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000df6:	f103 0314 	add.w	r3, r3, #20
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000e02:	f102 0214 	add.w	r2, r2, #20
 8000e06:	6013      	str	r3, [r2, #0]
	for (int i=0; i<2048; i=i+2) {
 8000e08:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000e0c:	f103 0308 	add.w	r3, r3, #8
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	3302      	adds	r3, #2
 8000e14:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000e18:	f102 0208 	add.w	r2, r2, #8
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000e22:	f103 0308 	add.w	r3, r3, #8
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e2c:	f6ff af13 	blt.w	8000c56 <getFrequencies+0x8e>
	}
	return frequency;
 8000e30:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000e34:	f103 030c 	add.w	r3, r3, #12
 8000e38:	681b      	ldr	r3, [r3, #0]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8000e40:	371c      	adds	r7, #28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd90      	pop	{r4, r7, pc}
	...

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b5b0      	push	{r4, r5, r7, lr}
 8000e4a:	f5ad 4d84 	sub.w	sp, sp, #16896	; 0x4200
 8000e4e:	b090      	sub	sp, #64	; 0x40
 8000e50:	af00      	add	r7, sp, #0
//############################################################################################################################################

	/*
	 * SET FREQUENCY FOR TESTING HERE
	 */
	int test_frequency = 750;
 8000e52:	f240 23ee 	movw	r3, #750	; 0x2ee
 8000e56:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000e5a:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000e5e:	6013      	str	r3, [r2, #0]
	// USE this to test array
	int arraySize = 48000/test_frequency;
 8000e60:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000e64:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8000e68:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e72:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000e76:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8000e7a:	6013      	str	r3, [r2, #0]
	int test_size = arraySize*sizeof(int);
 8000e7c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8000e80:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000e8c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8000e90:	6013      	str	r3, [r2, #0]
	int* test = malloc(arraySize*sizeof(int));
 8000e92:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8000e96:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 fbd2 	bl	8003648 <malloc>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000eaa:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000eae:	6013      	str	r3, [r2, #0]

	for (int i = 0; i < arraySize; i++) {
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000eb6:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	e04f      	b.n	8000f5e <main+0x116>
		test[i] = (int)((arm_sin_f32(i*2*pi/arraySize) + 1)*(4095/2));
 8000ebe:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8000ec2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff faea 	bl	80004a4 <__aeabi_i2d>
 8000ed0:	a377      	add	r3, pc, #476	; (adr r3, 80010b0 <main+0x268>)
 8000ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed6:	f7ff fb4f 	bl	8000578 <__aeabi_dmul>
 8000eda:	4603      	mov	r3, r0
 8000edc:	460c      	mov	r4, r1
 8000ede:	4625      	mov	r5, r4
 8000ee0:	461c      	mov	r4, r3
 8000ee2:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8000ee6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	f7ff fada 	bl	80004a4 <__aeabi_i2d>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	4629      	mov	r1, r5
 8000ef8:	f7ff fc68 	bl	80007cc <__aeabi_ddiv>
 8000efc:	4603      	mov	r3, r0
 8000efe:	460c      	mov	r4, r1
 8000f00:	4618      	mov	r0, r3
 8000f02:	4621      	mov	r1, r4
 8000f04:	f7ff fe10 	bl	8000b28 <__aeabi_d2f>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	ee00 3a10 	vmov	s0, r3
 8000f0e:	f002 f86b 	bl	8002fe8 <arm_sin_f32>
 8000f12:	eeb0 7a40 	vmov.f32	s14, s0
 8000f16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f1e:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80010a0 <main+0x258>
 8000f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f26:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8000f2a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000f36:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000f3a:	6812      	ldr	r2, [r2, #0]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f42:	ee17 2a90 	vmov	r2, s15
 8000f46:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < arraySize; i++) {
 8000f48:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8000f4c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	3301      	adds	r3, #1
 8000f54:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000f58:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8000f62:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8000f6c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	dba3      	blt.n	8000ebe <main+0x76>
	}

	float use_this_signal[] = {-0.193207, -0.169879, -0.14191, -0.11115, -0.0769944, -0.041726, -0.00486888, 0.0326922, 0.0682754, 0.100679, 0.132158, 0.163183, 0.190152, 0.215109, 0.238101, 0.255922, 0.269523, 0.277578, 0.281176, 0.280139, 0.274308, 0.26411, 0.247938, 0.226575, 0.201794, 0.1741, 0.143944, 0.113993, 0.0815677, 0.0450895, 0.00824386, -0.0285772, -0.0655515, -0.101127, -0.133882, -0.164063, -0.189885, -0.211087, -0.229038, -0.243586, -0.254433, -0.259993, -0.260314, -0.256299, -0.246047, -0.231419, -0.21384, -0.191256, -0.164803, -0.135724, -0.104817, -0.0725117, -0.0385573, -0.0037286, 0.0308825, 0.0668126, 0.102778, 0.135459, 0.166302, 0.194233, 0.217749, 0.23817, 0.252831, 0.264449, 0.272086, 0.27487, 0.27346, 0.265665, 0.254301, 0.239376, 0.219844, 0.195846, 0.168488, 0.137393, 0.103867, 0.0695678, 0.033984, -0.000156238, -0.0346218, -0.0678978, -0.0992622, -0.130934, -0.158279, -0.184168, -0.208552, -0.225724, -0.239788, -0.248848, -0.251982, -0.251309, -0.245821, -0.237838, -0.224257, -0.205344, -0.18453, -0.159445, -0.130611, -0.100406, -0.0679403, -0.0347117, -0.00101715, 0.0352383, 0.0697805, 0.102933, 0.135169, 0.164305, 0.191134, 0.213796, 0.233196, 0.250029, 0.263132, 0.272763, 0.276325, 0.273514, 0.265775, 0.253712, 0.237029, 0.216982, 0.194876, 0.168322, 0.139089, 0.106883, 0.0723815, 0.0376486, 0.00120259, -0.0346571, -0.0679164, -0.101604, -0.134166};
 8000f76:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8000f7a:	f103 0318 	add.w	r3, r3, #24
 8000f7e:	4a49      	ldr	r2, [pc, #292]	; (80010a4 <main+0x25c>)
 8000f80:	4618      	mov	r0, r3
 8000f82:	4611      	mov	r1, r2
 8000f84:	f44f 7301 	mov.w	r3, #516	; 0x204
 8000f88:	461a      	mov	r2, r3
 8000f8a:	f002 fb65 	bl	8003658 <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8e:	f000 f9e4 	bl	800135a <HAL_Init>
  /* USER CODE BEGIN Init */
  float fft_in_buf[2048];
  float fft_out_buf[2048];

  arm_rfft_fast_instance_f32 fft_handler;
  arm_rfft_fast_init_f32(&fft_handler, 2048);
 8000f92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f96:	3b40      	subs	r3, #64	; 0x40
 8000f98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f001 fb61 	bl	8002664 <arm_rfft_fast_init_f32>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa2:	f000 f889 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa6:	f000 f8d9 	bl	800115c <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ITM_Port32(1);
 8000faa:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <main+0x260>)
 8000fac:	681b      	ldr	r3, [r3, #0]
	  int fft_in_ptr = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000fb4:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8000fb8:	6013      	str	r3, [r2, #0]

	  for(int point = 0; point < 2048; point++){
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000fc0:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e04c      	b.n	8001062 <main+0x21a>
		  int max_index = test_size/sizeof(test[0]);
 8000fc8:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8000fcc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000fd8:	f102 021c 	add.w	r2, r2, #28
 8000fdc:	6013      	str	r3, [r2, #0]
		  fft_in_buf[fft_in_ptr] = test[point%max_index];
 8000fde:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8000fe2:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000fec:	f102 021c 	add.w	r2, r2, #28
 8000ff0:	6812      	ldr	r2, [r2, #0]
 8000ff2:	fb93 f2f2 	sdiv	r2, r3, r2
 8000ff6:	f507 4184 	add.w	r1, r7, #16896	; 0x4200
 8000ffa:	f101 011c 	add.w	r1, r1, #28
 8000ffe:	6809      	ldr	r1, [r1, #0]
 8001000:	fb01 f202 	mul.w	r2, r1, r2
 8001004:	1a9b      	subs	r3, r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 800100c:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001010:	6812      	ldr	r2, [r2, #0]
 8001012:	4413      	add	r3, r2
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001022:	3b28      	subs	r3, #40	; 0x28
 8001024:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8001028:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800102c:	6812      	ldr	r2, [r2, #0]
 800102e:	0092      	lsls	r2, r2, #2
 8001030:	4413      	add	r3, r2
 8001032:	edc3 7a00 	vstr	s15, [r3]
		  fft_in_ptr++;
 8001036:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 800103a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8001046:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800104a:	6013      	str	r3, [r2, #0]
	  for(int point = 0; point < 2048; point++){
 800104c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001050:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3301      	adds	r3, #1
 8001058:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 800105c:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001066:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001070:	dbaa      	blt.n	8000fc8 <main+0x180>
	  }
	  int frequency = getFrequencies(&fft_handler, 48000, fft_in_buf, fft_out_buf);
 8001072:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001076:	3b28      	subs	r3, #40	; 0x28
 8001078:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800107c:	3a28      	subs	r2, #40	; 0x28
 800107e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001082:	3840      	subs	r0, #64	; 0x40
 8001084:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8001088:	f7ff fd9e 	bl	8000bc8 <getFrequencies>
 800108c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001090:	f103 0320 	add.w	r3, r3, #32
 8001094:	6018      	str	r0, [r3, #0]
	  ITM_Port32(2);
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <main+0x264>)
 8001098:	681b      	ldr	r3, [r3, #0]
  {
 800109a:	e786      	b.n	8000faa <main+0x162>
 800109c:	f3af 8000 	nop.w
 80010a0:	44ffe000 	.word	0x44ffe000
 80010a4:	08003d0c 	.word	0x08003d0c
 80010a8:	e0000004 	.word	0xe0000004
 80010ac:	e0000008 	.word	0xe0000008
 80010b0:	54442d18 	.word	0x54442d18
 80010b4:	400921fb 	.word	0x400921fb

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b096      	sub	sp, #88	; 0x58
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	2244      	movs	r2, #68	; 0x44
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 fad1 	bl	800366e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 fab8 	bl	8001650 <HAL_PWREx_ControlVoltageScaling>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0x32>
  {
    Error_Handler();
 80010e6:	f000 f851 	bl	800118c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010ea:	2310      	movs	r3, #16
 80010ec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010ee:	2301      	movs	r3, #1
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010f6:	2360      	movs	r3, #96	; 0x60
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fa:	2302      	movs	r3, #2
 80010fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010fe:	2301      	movs	r3, #1
 8001100:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001102:	2301      	movs	r3, #1
 8001104:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001106:	233c      	movs	r3, #60	; 0x3c
 8001108:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800110a:	2302      	movs	r3, #2
 800110c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800110e:	2302      	movs	r3, #2
 8001110:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001112:	2302      	movs	r3, #2
 8001114:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fb3c 	bl	8001798 <HAL_RCC_OscConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001126:	f000 f831 	bl	800118c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112a:	230f      	movs	r3, #15
 800112c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112e:	2303      	movs	r3, #3
 8001130:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800113e:	463b      	mov	r3, r7
 8001140:	2105      	movs	r1, #5
 8001142:	4618      	mov	r0, r3
 8001144:	f000 ff4e 	bl	8001fe4 <HAL_RCC_ClockConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800114e:	f000 f81d 	bl	800118c <Error_Handler>
  }
}
 8001152:	bf00      	nop
 8001154:	3758      	adds	r7, #88	; 0x58
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_GPIO_Init+0x2c>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a08      	ldr	r2, [pc, #32]	; (8001188 <MX_GPIO_Init+0x2c>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_GPIO_Init+0x2c>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]

}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000

0800118c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001190:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001192:	e7fe      	b.n	8001192 <Error_Handler+0x6>

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_MspInit+0x44>)
 800119c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_MspInit+0x44>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6613      	str	r3, [r2, #96]	; 0x60
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_MspInit+0x44>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_MspInit+0x44>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b6:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <HAL_MspInit+0x44>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	6593      	str	r3, [r2, #88]	; 0x58
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_MspInit+0x44>)
 80011c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000

080011dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <NMI_Handler+0x4>

080011e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <HardFault_Handler+0x4>

080011e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <MemManage_Handler+0x4>

080011ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <BusFault_Handler+0x4>

080011f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <UsageFault_Handler+0x4>

080011fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001228:	f000 f8ec 	bl	8001404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001238:	4a14      	ldr	r2, [pc, #80]	; (800128c <_sbrk+0x5c>)
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <_sbrk+0x60>)
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <_sbrk+0x64>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <_sbrk+0x64>)
 800124e:	4a12      	ldr	r2, [pc, #72]	; (8001298 <_sbrk+0x68>)
 8001250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	429a      	cmp	r2, r3
 800125e:	d207      	bcs.n	8001270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001260:	f002 f9c8 	bl	80035f4 <__errno>
 8001264:	4602      	mov	r2, r0
 8001266:	230c      	movs	r3, #12
 8001268:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800126a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800126e:	e009      	b.n	8001284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <_sbrk+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <_sbrk+0x64>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <_sbrk+0x64>)
 8001280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001282:	68fb      	ldr	r3, [r7, #12]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200a0000 	.word	0x200a0000
 8001290:	00000400 	.word	0x00000400
 8001294:	20000090 	.word	0x20000090
 8001298:	200000a8 	.word	0x200000a8

0800129c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <SystemInit+0x64>)
 80012a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a6:	4a16      	ldr	r2, [pc, #88]	; (8001300 <SystemInit+0x64>)
 80012a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <SystemInit+0x68>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a13      	ldr	r2, [pc, #76]	; (8001304 <SystemInit+0x68>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <SystemInit+0x68>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <SystemInit+0x68>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <SystemInit+0x68>)
 80012c8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80012cc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80012d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <SystemInit+0x68>)
 80012d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012d8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <SystemInit+0x68>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <SystemInit+0x68>)
 80012e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <SystemInit+0x68>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <SystemInit+0x64>)
 80012ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012f2:	609a      	str	r2, [r3, #8]
#endif
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00
 8001304:	40021000 	.word	0x40021000

08001308 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800130c:	f7ff ffc6 	bl	800129c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001310:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001312:	e003      	b.n	800131c <LoopCopyDataInit>

08001314 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001316:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001318:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800131a:	3104      	adds	r1, #4

0800131c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800131c:	480a      	ldr	r0, [pc, #40]	; (8001348 <LoopForever+0xa>)
	ldr	r3, =_edata
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001320:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001322:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001324:	d3f6      	bcc.n	8001314 <CopyDataInit>
	ldr	r2, =_sbss
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001328:	e002      	b.n	8001330 <LoopFillZerobss>

0800132a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800132a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800132c:	f842 3b04 	str.w	r3, [r2], #4

08001330 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <LoopForever+0x16>)
	cmp	r2, r3
 8001332:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001334:	d3f9      	bcc.n	800132a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001336:	f002 f963 	bl	8003600 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800133a:	f7ff fd85 	bl	8000e48 <main>

0800133e <LoopForever>:

LoopForever:
    b LoopForever
 800133e:	e7fe      	b.n	800133e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001340:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001344:	08017750 	.word	0x08017750
	ldr	r0, =_sdata
 8001348:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800134c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001350:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001354:	200000a4 	.word	0x200000a4

08001358 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC1_IRQHandler>

0800135a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001364:	2003      	movs	r0, #3
 8001366:	f000 f91f 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800136a:	2000      	movs	r0, #0
 800136c:	f000 f80e 	bl	800138c <HAL_InitTick>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	71fb      	strb	r3, [r7, #7]
 800137a:	e001      	b.n	8001380 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800137c:	f7ff ff0a 	bl	8001194 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001380:	79fb      	ldrb	r3, [r7, #7]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_InitTick+0x6c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d023      	beq.n	80013e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_InitTick+0x70>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_InitTick+0x6c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f91d 	bl	80015f6 <HAL_SYSTICK_Config>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10f      	bne.n	80013e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d809      	bhi.n	80013dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d0:	f000 f8f5 	bl	80015be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <HAL_InitTick+0x74>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e007      	b.n	80013ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	e004      	b.n	80013ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	e001      	b.n	80013ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000008 	.word	0x20000008
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000004 	.word	0x20000004

08001404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_IncTick+0x20>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_IncTick+0x24>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4413      	add	r3, r2
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_IncTick+0x24>)
 8001416:	6013      	str	r3, [r2, #0]
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000008 	.word	0x20000008
 8001428:	2000009c 	.word	0x2000009c

0800142c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <HAL_GetTick+0x14>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	2000009c 	.word	0x2000009c

08001444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001460:	4013      	ands	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800146c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001476:	4a04      	ldr	r2, [pc, #16]	; (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	60d3      	str	r3, [r2, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f003 0307 	and.w	r3, r3, #7
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	; (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	; (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001588:	f7ff ff8e 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff47 	bl	8001444 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff5c 	bl	800148c <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff8e 	bl	80014fc <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5d 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffb0 	bl	8001564 <SysTick_Config>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800161c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001620:	d102      	bne.n	8001628 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001626:	e00b      	b.n	8001640 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_PWREx_GetVoltageRange+0x3c>)
 800162a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800162e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001636:	d102      	bne.n	800163e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800163c:	e000      	b.n	8001640 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800163e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40007000 	.word	0x40007000

08001650 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d141      	bne.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800165e:	4b4b      	ldr	r3, [pc, #300]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166a:	d131      	bne.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800166c:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001672:	4a46      	ldr	r2, [pc, #280]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001678:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800167c:	4b43      	ldr	r3, [pc, #268]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001684:	4a41      	ldr	r2, [pc, #260]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800168c:	4b40      	ldr	r3, [pc, #256]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2232      	movs	r2, #50	; 0x32
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	4a3f      	ldr	r2, [pc, #252]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	0c9b      	lsrs	r3, r3, #18
 800169e:	3301      	adds	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a2:	e002      	b.n	80016aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016aa:	4b38      	ldr	r3, [pc, #224]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b6:	d102      	bne.n	80016be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f2      	bne.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016be:	4b33      	ldr	r3, [pc, #204]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ca:	d158      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e057      	b.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016d0:	4b2e      	ldr	r3, [pc, #184]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016d6:	4a2d      	ldr	r2, [pc, #180]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016e0:	e04d      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e8:	d141      	bne.n	800176e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ea:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f6:	d131      	bne.n	800175c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016fe:	4a23      	ldr	r2, [pc, #140]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001704:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001710:	4a1e      	ldr	r2, [pc, #120]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001716:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2232      	movs	r2, #50	; 0x32
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	0c9b      	lsrs	r3, r3, #18
 800172a:	3301      	adds	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800172e:	e002      	b.n	8001736 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3b01      	subs	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	d102      	bne.n	800174a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f2      	bne.n	8001730 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001756:	d112      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e011      	b.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800176c:	e007      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001778:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800177c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40007000 	.word	0x40007000
 8001790:	20000000 	.word	0x20000000
 8001794:	431bde83 	.word	0x431bde83

08001798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	f000 bc16 	b.w	8001fd8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ac:	4ba0      	ldr	r3, [pc, #640]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017b6:	4b9e      	ldr	r3, [pc, #632]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80e4 	beq.w	8001996 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d007      	beq.n	80017e4 <HAL_RCC_OscConfig+0x4c>
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2b0c      	cmp	r3, #12
 80017d8:	f040 808b 	bne.w	80018f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	f040 8087 	bne.w	80018f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017e4:	4b92      	ldr	r3, [pc, #584]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_OscConfig+0x64>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e3ed      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1a      	ldr	r2, [r3, #32]
 8001800:	4b8b      	ldr	r3, [pc, #556]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <HAL_RCC_OscConfig+0x7e>
 800180c:	4b88      	ldr	r3, [pc, #544]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001814:	e005      	b.n	8001822 <HAL_RCC_OscConfig+0x8a>
 8001816:	4b86      	ldr	r3, [pc, #536]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001822:	4293      	cmp	r3, r2
 8001824:	d223      	bcs.n	800186e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4618      	mov	r0, r3
 800182c:	f000 fd90 	bl	8002350 <RCC_SetFlashLatencyFromMSIRange>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e3ce      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800183a:	4b7d      	ldr	r3, [pc, #500]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a7c      	ldr	r2, [pc, #496]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001840:	f043 0308 	orr.w	r3, r3, #8
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b7a      	ldr	r3, [pc, #488]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4977      	ldr	r1, [pc, #476]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001858:	4b75      	ldr	r3, [pc, #468]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	4972      	ldr	r1, [pc, #456]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
 800186c:	e025      	b.n	80018ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800186e:	4b70      	ldr	r3, [pc, #448]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a6f      	ldr	r2, [pc, #444]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001874:	f043 0308 	orr.w	r3, r3, #8
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b6d      	ldr	r3, [pc, #436]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	496a      	ldr	r1, [pc, #424]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800188c:	4b68      	ldr	r3, [pc, #416]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	4965      	ldr	r1, [pc, #404]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 fd50 	bl	8002350 <RCC_SetFlashLatencyFromMSIRange>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e38e      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018ba:	f000 fcbf 	bl	800223c <HAL_RCC_GetSysClockFreq>
 80018be:	4601      	mov	r1, r0
 80018c0:	4b5b      	ldr	r3, [pc, #364]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	4a5a      	ldr	r2, [pc, #360]	; (8001a34 <HAL_RCC_OscConfig+0x29c>)
 80018cc:	5cd3      	ldrb	r3, [r2, r3]
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	fa21 f303 	lsr.w	r3, r1, r3
 80018d6:	4a58      	ldr	r2, [pc, #352]	; (8001a38 <HAL_RCC_OscConfig+0x2a0>)
 80018d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018da:	4b58      	ldr	r3, [pc, #352]	; (8001a3c <HAL_RCC_OscConfig+0x2a4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fd54 	bl	800138c <HAL_InitTick>
 80018e4:	4603      	mov	r3, r0
 80018e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d052      	beq.n	8001994 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	e372      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d032      	beq.n	8001960 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018fa:	4b4d      	ldr	r3, [pc, #308]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a4c      	ldr	r2, [pc, #304]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001906:	f7ff fd91 	bl	800142c <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800190e:	f7ff fd8d 	bl	800142c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e35b      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001920:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800192c:	4b40      	ldr	r3, [pc, #256]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a3f      	ldr	r2, [pc, #252]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001932:	f043 0308 	orr.w	r3, r3, #8
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	493a      	ldr	r1, [pc, #232]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800194a:	4b39      	ldr	r3, [pc, #228]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	4935      	ldr	r1, [pc, #212]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]
 800195e:	e01a      	b.n	8001996 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001960:	4b33      	ldr	r3, [pc, #204]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a32      	ldr	r2, [pc, #200]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800196c:	f7ff fd5e 	bl	800142c <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001974:	f7ff fd5a 	bl	800142c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e328      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001986:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x1dc>
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001994:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d073      	beq.n	8001a8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_OscConfig+0x21c>
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	2b0c      	cmp	r3, #12
 80019ac:	d10e      	bne.n	80019cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d10b      	bne.n	80019cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d063      	beq.n	8001a88 <HAL_RCC_OscConfig+0x2f0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d15f      	bne.n	8001a88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e305      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d4:	d106      	bne.n	80019e4 <HAL_RCC_OscConfig+0x24c>
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e01d      	b.n	8001a20 <HAL_RCC_OscConfig+0x288>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x270>
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a0f      	ldr	r2, [pc, #60]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 80019f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a0c      	ldr	r2, [pc, #48]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e00b      	b.n	8001a20 <HAL_RCC_OscConfig+0x288>
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <HAL_RCC_OscConfig+0x298>)
 8001a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff fd00 	bl	800142c <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a2e:	e010      	b.n	8001a52 <HAL_RCC_OscConfig+0x2ba>
 8001a30:	40021000 	.word	0x40021000
 8001a34:	08003f10 	.word	0x08003f10
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff fcf4 	bl	800142c <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	; 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e2c2      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a52:	4baf      	ldr	r3, [pc, #700]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x2a8>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff fce4 	bl	800142c <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff fce0 	bl	800142c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e2ae      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a7a:	4ba5      	ldr	r3, [pc, #660]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2d0>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d060      	beq.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x310>
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d119      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d116      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa8:	4b99      	ldr	r3, [pc, #612]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x328>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e28b      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	4b93      	ldr	r3, [pc, #588]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	061b      	lsls	r3, r3, #24
 8001ace:	4990      	ldr	r1, [pc, #576]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad4:	e040      	b.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d023      	beq.n	8001b26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ade:	4b8c      	ldr	r3, [pc, #560]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a8b      	ldr	r2, [pc, #556]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff fc9f 	bl	800142c <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff fc9b 	bl	800142c <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e269      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b04:	4b82      	ldr	r3, [pc, #520]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b10:	4b7f      	ldr	r3, [pc, #508]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	061b      	lsls	r3, r3, #24
 8001b1e:	497c      	ldr	r1, [pc, #496]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
 8001b24:	e018      	b.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b26:	4b7a      	ldr	r3, [pc, #488]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a79      	ldr	r2, [pc, #484]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b32:	f7ff fc7b 	bl	800142c <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3a:	f7ff fc77 	bl	800142c <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e245      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b4c:	4b70      	ldr	r3, [pc, #448]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d03c      	beq.n	8001bde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01c      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6c:	4b68      	ldr	r3, [pc, #416]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b72:	4a67      	ldr	r2, [pc, #412]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7c:	f7ff fc56 	bl	800142c <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b84:	f7ff fc52 	bl	800142c <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e220      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b96:	4b5e      	ldr	r3, [pc, #376]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ef      	beq.n	8001b84 <HAL_RCC_OscConfig+0x3ec>
 8001ba4:	e01b      	b.n	8001bde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba6:	4b5a      	ldr	r3, [pc, #360]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bac:	4a58      	ldr	r2, [pc, #352]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fc39 	bl	800142c <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbe:	f7ff fc35 	bl	800142c <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e203      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd0:	4b4f      	ldr	r3, [pc, #316]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1ef      	bne.n	8001bbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80a6 	beq.w	8001d38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bec:	2300      	movs	r3, #0
 8001bee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bf0:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10d      	bne.n	8001c18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfc:	4b44      	ldr	r3, [pc, #272]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c00:	4a43      	ldr	r2, [pc, #268]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c06:	6593      	str	r3, [r2, #88]	; 0x58
 8001c08:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c14:	2301      	movs	r3, #1
 8001c16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c18:	4b3e      	ldr	r3, [pc, #248]	; (8001d14 <HAL_RCC_OscConfig+0x57c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d118      	bne.n	8001c56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c24:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <HAL_RCC_OscConfig+0x57c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a3a      	ldr	r2, [pc, #232]	; (8001d14 <HAL_RCC_OscConfig+0x57c>)
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c30:	f7ff fbfc 	bl	800142c <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c38:	f7ff fbf8 	bl	800142c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e1c6      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4a:	4b32      	ldr	r3, [pc, #200]	; (8001d14 <HAL_RCC_OscConfig+0x57c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d108      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4d8>
 8001c5e:	4b2c      	ldr	r3, [pc, #176]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c64:	4a2a      	ldr	r2, [pc, #168]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c6e:	e024      	b.n	8001cba <HAL_RCC_OscConfig+0x522>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d110      	bne.n	8001c9a <HAL_RCC_OscConfig+0x502>
 8001c78:	4b25      	ldr	r3, [pc, #148]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	4a24      	ldr	r2, [pc, #144]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c88:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8e:	4a20      	ldr	r2, [pc, #128]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c98:	e00f      	b.n	8001cba <HAL_RCC_OscConfig+0x522>
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca0:	4a1b      	ldr	r2, [pc, #108]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001caa:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb0:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001cb2:	f023 0304 	bic.w	r3, r3, #4
 8001cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d016      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc2:	f7ff fbb3 	bl	800142c <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cc8:	e00a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cca:	f7ff fbaf 	bl	800142c <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e17b      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_RCC_OscConfig+0x578>)
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0ed      	beq.n	8001cca <HAL_RCC_OscConfig+0x532>
 8001cee:	e01a      	b.n	8001d26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf0:	f7ff fb9c 	bl	800142c <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cf6:	e00f      	b.n	8001d18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf8:	f7ff fb98 	bl	800142c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d906      	bls.n	8001d18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e164      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4ba8      	ldr	r3, [pc, #672]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1e8      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4ba3      	ldr	r3, [pc, #652]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4aa2      	ldr	r2, [pc, #648]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b9b      	ldr	r3, [pc, #620]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a9a      	ldr	r2, [pc, #616]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff fb66 	bl	800142c <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff fb62 	bl	800142c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e130      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b91      	ldr	r3, [pc, #580]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x5cc>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b8d      	ldr	r3, [pc, #564]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a8b      	ldr	r2, [pc, #556]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff fb49 	bl	800142c <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff fb45 	bl	800142c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e113      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b82      	ldr	r3, [pc, #520]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8107 	beq.w	8001fd6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	f040 80cb 	bne.w	8001f68 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dd2:	4b7a      	ldr	r3, [pc, #488]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f003 0203 	and.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d12c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	3b01      	subs	r3, #1
 8001df2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d123      	bne.n	8001e40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d11b      	bne.n	8001e40 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e12:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d113      	bne.n	8001e40 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	3b01      	subs	r3, #1
 8001e26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d109      	bne.n	8001e40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	085b      	lsrs	r3, r3, #1
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d06d      	beq.n	8001f1c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d068      	beq.n	8001f18 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e46:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d105      	bne.n	8001e5e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e52:	4b5a      	ldr	r3, [pc, #360]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e0ba      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e62:	4b56      	ldr	r3, [pc, #344]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a55      	ldr	r2, [pc, #340]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001e68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e6c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e6e:	f7ff fadd 	bl	800142c <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e76:	f7ff fad9 	bl	800142c <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e0a7      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e88:	4b4c      	ldr	r3, [pc, #304]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f0      	bne.n	8001e76 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e94:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	4b49      	ldr	r3, [pc, #292]	; (8001fc0 <HAL_RCC_OscConfig+0x828>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ea4:	3a01      	subs	r2, #1
 8001ea6:	0112      	lsls	r2, r2, #4
 8001ea8:	4311      	orrs	r1, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001eae:	0212      	lsls	r2, r2, #8
 8001eb0:	4311      	orrs	r1, r2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001eb6:	0852      	lsrs	r2, r2, #1
 8001eb8:	3a01      	subs	r2, #1
 8001eba:	0552      	lsls	r2, r2, #21
 8001ebc:	4311      	orrs	r1, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ec2:	0852      	lsrs	r2, r2, #1
 8001ec4:	3a01      	subs	r2, #1
 8001ec6:	0652      	lsls	r2, r2, #25
 8001ec8:	4311      	orrs	r1, r2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ece:	06d2      	lsls	r2, r2, #27
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	493a      	ldr	r1, [pc, #232]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ed8:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a37      	ldr	r2, [pc, #220]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ee4:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4a34      	ldr	r2, [pc, #208]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ef0:	f7ff fa9c 	bl	800142c <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7ff fa98 	bl	800142c <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e066      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0a:	4b2c      	ldr	r3, [pc, #176]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f16:	e05e      	b.n	8001fd6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e05d      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d156      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a23      	ldr	r2, [pc, #140]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4a20      	ldr	r2, [pc, #128]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f40:	f7ff fa74 	bl	800142c <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f48:	f7ff fa70 	bl	800142c <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e03e      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x7b0>
 8001f66:	e036      	b.n	8001fd6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	d031      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a12      	ldr	r2, [pc, #72]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001f74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f78:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d105      	bne.n	8001f92 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001f8c:	f023 0303 	bic.w	r3, r3, #3
 8001f90:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <HAL_RCC_OscConfig+0x824>)
 8001f98:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7ff fa43 	bl	800142c <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa8:	e00c      	b.n	8001fc4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001faa:	f7ff fa3f 	bl	800142c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d905      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e00d      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_RCC_OscConfig+0x848>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ec      	bne.n	8001faa <HAL_RCC_OscConfig+0x812>
 8001fd0:	e001      	b.n	8001fd6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3720      	adds	r7, #32
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e10f      	b.n	800221c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b89      	ldr	r3, [pc, #548]	; (8002224 <HAL_RCC_ClockConfig+0x240>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d910      	bls.n	800202c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b86      	ldr	r3, [pc, #536]	; (8002224 <HAL_RCC_ClockConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 020f 	bic.w	r2, r3, #15
 8002012:	4984      	ldr	r1, [pc, #528]	; (8002224 <HAL_RCC_ClockConfig+0x240>)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b82      	ldr	r3, [pc, #520]	; (8002224 <HAL_RCC_ClockConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0f7      	b.n	800221c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 8089 	beq.w	800214c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d133      	bne.n	80020aa <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002042:	4b79      	ldr	r3, [pc, #484]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0e4      	b.n	800221c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002052:	f000 f9d7 	bl	8002404 <RCC_GetSysClockFreqFromPLLSource>
 8002056:	4602      	mov	r2, r0
 8002058:	4b74      	ldr	r3, [pc, #464]	; (800222c <HAL_RCC_ClockConfig+0x248>)
 800205a:	429a      	cmp	r2, r3
 800205c:	d955      	bls.n	800210a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800205e:	4b72      	ldr	r3, [pc, #456]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10a      	bne.n	8002080 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800206a:	4b6f      	ldr	r3, [pc, #444]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002072:	4a6d      	ldr	r2, [pc, #436]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 8002074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002078:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	e044      	b.n	800210a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d03e      	beq.n	800210a <HAL_RCC_ClockConfig+0x126>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d13a      	bne.n	800210a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002094:	4b64      	ldr	r3, [pc, #400]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800209c:	4a62      	ldr	r2, [pc, #392]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 800209e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e02f      	b.n	800210a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b2:	4b5d      	ldr	r3, [pc, #372]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d115      	bne.n	80020ea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0ac      	b.n	800221c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020ca:	4b57      	ldr	r3, [pc, #348]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d109      	bne.n	80020ea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0a0      	b.n	800221c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020da:	4b53      	ldr	r3, [pc, #332]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e098      	b.n	800221c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80020ea:	f000 f8a7 	bl	800223c <HAL_RCC_GetSysClockFreq>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4b4e      	ldr	r3, [pc, #312]	; (800222c <HAL_RCC_ClockConfig+0x248>)
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d909      	bls.n	800210a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020f6:	4b4c      	ldr	r3, [pc, #304]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020fe:	4a4a      	ldr	r2, [pc, #296]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 8002100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002104:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800210a:	4b47      	ldr	r3, [pc, #284]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f023 0203 	bic.w	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4944      	ldr	r1, [pc, #272]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 8002118:	4313      	orrs	r3, r2
 800211a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800211c:	f7ff f986 	bl	800142c <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	e00a      	b.n	800213a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002124:	f7ff f982 	bl	800142c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e070      	b.n	800221c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 020c 	and.w	r2, r3, #12
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	429a      	cmp	r2, r3
 800214a:	d1eb      	bne.n	8002124 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d009      	beq.n	800216c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002158:	4b33      	ldr	r3, [pc, #204]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4930      	ldr	r1, [pc, #192]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
 800216a:	e008      	b.n	800217e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2b80      	cmp	r3, #128	; 0x80
 8002170:	d105      	bne.n	800217e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002172:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	4a2c      	ldr	r2, [pc, #176]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 8002178:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800217c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800217e:	4b29      	ldr	r3, [pc, #164]	; (8002224 <HAL_RCC_ClockConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d210      	bcs.n	80021ae <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218c:	4b25      	ldr	r3, [pc, #148]	; (8002224 <HAL_RCC_ClockConfig+0x240>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 020f 	bic.w	r2, r3, #15
 8002194:	4923      	ldr	r1, [pc, #140]	; (8002224 <HAL_RCC_ClockConfig+0x240>)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	4313      	orrs	r3, r2
 800219a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219c:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_RCC_ClockConfig+0x240>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d001      	beq.n	80021ae <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e036      	b.n	800221c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ba:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	4918      	ldr	r1, [pc, #96]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d009      	beq.n	80021ec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4910      	ldr	r1, [pc, #64]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ec:	f000 f826 	bl	800223c <HAL_RCC_GetSysClockFreq>
 80021f0:	4601      	mov	r1, r0
 80021f2:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <HAL_RCC_ClockConfig+0x244>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	4a0c      	ldr	r2, [pc, #48]	; (8002230 <HAL_RCC_ClockConfig+0x24c>)
 80021fe:	5cd3      	ldrb	r3, [r2, r3]
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	fa21 f303 	lsr.w	r3, r1, r3
 8002208:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <HAL_RCC_ClockConfig+0x250>)
 800220a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_RCC_ClockConfig+0x254>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff f8bb 	bl	800138c <HAL_InitTick>
 8002216:	4603      	mov	r3, r0
 8002218:	73fb      	strb	r3, [r7, #15]

  return status;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40022000 	.word	0x40022000
 8002228:	40021000 	.word	0x40021000
 800222c:	04c4b400 	.word	0x04c4b400
 8002230:	08003f10 	.word	0x08003f10
 8002234:	20000000 	.word	0x20000000
 8002238:	20000004 	.word	0x20000004

0800223c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	; 0x24
 8002240:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	2300      	movs	r3, #0
 8002248:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800224a:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <HAL_RCC_GetSysClockFreq+0x104>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002254:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <HAL_RCC_GetSysClockFreq+0x104>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x34>
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	2b0c      	cmp	r3, #12
 8002268:	d121      	bne.n	80022ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d11e      	bne.n	80022ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002270:	4b33      	ldr	r3, [pc, #204]	; (8002340 <HAL_RCC_GetSysClockFreq+0x104>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d107      	bne.n	800228c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800227c:	4b30      	ldr	r3, [pc, #192]	; (8002340 <HAL_RCC_GetSysClockFreq+0x104>)
 800227e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	f003 030f 	and.w	r3, r3, #15
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	e005      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800228c:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <HAL_RCC_GetSysClockFreq+0x104>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002298:	4a2a      	ldr	r2, [pc, #168]	; (8002344 <HAL_RCC_GetSysClockFreq+0x108>)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10d      	bne.n	80022c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ac:	e00a      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d102      	bne.n	80022ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022b4:	4b24      	ldr	r3, [pc, #144]	; (8002348 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	e004      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022c0:	4b22      	ldr	r3, [pc, #136]	; (800234c <HAL_RCC_GetSysClockFreq+0x110>)
 80022c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2b0c      	cmp	r3, #12
 80022c8:	d133      	bne.n	8002332 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022ca:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_RCC_GetSysClockFreq+0x104>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d002      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0xa4>
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d003      	beq.n	80022e6 <HAL_RCC_GetSysClockFreq+0xaa>
 80022de:	e005      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022e2:	617b      	str	r3, [r7, #20]
      break;
 80022e4:	e005      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022e6:	4b19      	ldr	r3, [pc, #100]	; (800234c <HAL_RCC_GetSysClockFreq+0x110>)
 80022e8:	617b      	str	r3, [r7, #20]
      break;
 80022ea:	e002      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	617b      	str	r3, [r7, #20]
      break;
 80022f0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022f2:	4b13      	ldr	r3, [pc, #76]	; (8002340 <HAL_RCC_GetSysClockFreq+0x104>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	3301      	adds	r3, #1
 80022fe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002300:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <HAL_RCC_GetSysClockFreq+0x104>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	fb02 f203 	mul.w	r2, r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	fbb2 f3f3 	udiv	r3, r2, r3
 8002316:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_RCC_GetSysClockFreq+0x104>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	0e5b      	lsrs	r3, r3, #25
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	3301      	adds	r3, #1
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002330:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002332:	69bb      	ldr	r3, [r7, #24]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3724      	adds	r7, #36	; 0x24
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40021000 	.word	0x40021000
 8002344:	08003f20 	.word	0x08003f20
 8002348:	00f42400 	.word	0x00f42400
 800234c:	007a1200 	.word	0x007a1200

08002350 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800235c:	4b27      	ldr	r3, [pc, #156]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002368:	f7ff f952 	bl	8001610 <HAL_PWREx_GetVoltageRange>
 800236c:	6178      	str	r0, [r7, #20]
 800236e:	e014      	b.n	800239a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002370:	4b22      	ldr	r3, [pc, #136]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	4a21      	ldr	r2, [pc, #132]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237a:	6593      	str	r3, [r2, #88]	; 0x58
 800237c:	4b1f      	ldr	r3, [pc, #124]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002388:	f7ff f942 	bl	8001610 <HAL_PWREx_GetVoltageRange>
 800238c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002392:	4a1a      	ldr	r2, [pc, #104]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002398:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023a0:	d10b      	bne.n	80023ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b80      	cmp	r3, #128	; 0x80
 80023a6:	d913      	bls.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2ba0      	cmp	r3, #160	; 0xa0
 80023ac:	d902      	bls.n	80023b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023ae:	2302      	movs	r3, #2
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	e00d      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023b4:	2301      	movs	r3, #1
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	e00a      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b7f      	cmp	r3, #127	; 0x7f
 80023be:	d902      	bls.n	80023c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80023c0:	2302      	movs	r3, #2
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	e004      	b.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b70      	cmp	r3, #112	; 0x70
 80023ca:	d101      	bne.n	80023d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023cc:	2301      	movs	r3, #1
 80023ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 020f 	bic.w	r2, r3, #15
 80023d8:	4909      	ldr	r1, [pc, #36]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023e0:	4b07      	ldr	r3, [pc, #28]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d001      	beq.n	80023f2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	40022000 	.word	0x40022000

08002404 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800240e:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b01      	cmp	r3, #1
 8002418:	d118      	bne.n	800244c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800241a:	4b2a      	ldr	r3, [pc, #168]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d107      	bne.n	8002436 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002426:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	e005      	b.n	8002442 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002436:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002442:	4a21      	ldr	r2, [pc, #132]	; (80024c8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800244c:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d002      	beq.n	8002462 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800245c:	2b03      	cmp	r3, #3
 800245e:	d003      	beq.n	8002468 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002460:	e005      	b.n	800246e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002462:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002464:	613b      	str	r3, [r7, #16]
    break;
 8002466:	e005      	b.n	8002474 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800246a:	613b      	str	r3, [r7, #16]
    break;
 800246c:	e002      	b.n	8002474 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	613b      	str	r3, [r7, #16]
    break;
 8002472:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	3301      	adds	r3, #1
 8002480:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	fb02 f203 	mul.w	r2, r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	fbb2 f3f3 	udiv	r3, r2, r3
 8002498:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	0e5b      	lsrs	r3, r3, #25
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	3301      	adds	r3, #1
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80024b4:	683b      	ldr	r3, [r7, #0]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	371c      	adds	r7, #28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000
 80024c8:	08003f20 	.word	0x08003f20
 80024cc:	00f42400 	.word	0x00f42400
 80024d0:	007a1200 	.word	0x007a1200

080024d4 <arm_rfft_32_fast_init_f32>:
 80024d4:	b178      	cbz	r0, 80024f6 <arm_rfft_32_fast_init_f32+0x22>
 80024d6:	b430      	push	{r4, r5}
 80024d8:	4908      	ldr	r1, [pc, #32]	; (80024fc <arm_rfft_32_fast_init_f32+0x28>)
 80024da:	4a09      	ldr	r2, [pc, #36]	; (8002500 <arm_rfft_32_fast_init_f32+0x2c>)
 80024dc:	2310      	movs	r3, #16
 80024de:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80024e2:	8003      	strh	r3, [r0, #0]
 80024e4:	2520      	movs	r5, #32
 80024e6:	2414      	movs	r4, #20
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <arm_rfft_32_fast_init_f32+0x30>)
 80024ea:	8205      	strh	r5, [r0, #16]
 80024ec:	8184      	strh	r4, [r0, #12]
 80024ee:	6143      	str	r3, [r0, #20]
 80024f0:	bc30      	pop	{r4, r5}
 80024f2:	2000      	movs	r0, #0
 80024f4:	4770      	bx	lr
 80024f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024fa:	4770      	bx	lr
 80024fc:	08004f00 	.word	0x08004f00
 8002500:	0800a03c 	.word	0x0800a03c
 8002504:	08012dbc 	.word	0x08012dbc

08002508 <arm_rfft_64_fast_init_f32>:
 8002508:	b178      	cbz	r0, 800252a <arm_rfft_64_fast_init_f32+0x22>
 800250a:	b430      	push	{r4, r5}
 800250c:	4908      	ldr	r1, [pc, #32]	; (8002530 <arm_rfft_64_fast_init_f32+0x28>)
 800250e:	4a09      	ldr	r2, [pc, #36]	; (8002534 <arm_rfft_64_fast_init_f32+0x2c>)
 8002510:	2320      	movs	r3, #32
 8002512:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8002516:	8003      	strh	r3, [r0, #0]
 8002518:	2540      	movs	r5, #64	; 0x40
 800251a:	2430      	movs	r4, #48	; 0x30
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <arm_rfft_64_fast_init_f32+0x30>)
 800251e:	8205      	strh	r5, [r0, #16]
 8002520:	8184      	strh	r4, [r0, #12]
 8002522:	6143      	str	r3, [r0, #20]
 8002524:	bc30      	pop	{r4, r5}
 8002526:	2000      	movs	r0, #0
 8002528:	4770      	bx	lr
 800252a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800252e:	4770      	bx	lr
 8002530:	08007058 	.word	0x08007058
 8002534:	0800e8bc 	.word	0x0800e8bc
 8002538:	0801763c 	.word	0x0801763c

0800253c <arm_rfft_256_fast_init_f32>:
 800253c:	b180      	cbz	r0, 8002560 <arm_rfft_256_fast_init_f32+0x24>
 800253e:	b430      	push	{r4, r5}
 8002540:	4909      	ldr	r1, [pc, #36]	; (8002568 <arm_rfft_256_fast_init_f32+0x2c>)
 8002542:	4a0a      	ldr	r2, [pc, #40]	; (800256c <arm_rfft_256_fast_init_f32+0x30>)
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800254a:	8003      	strh	r3, [r0, #0]
 800254c:	f44f 7580 	mov.w	r5, #256	; 0x100
 8002550:	24d0      	movs	r4, #208	; 0xd0
 8002552:	4b07      	ldr	r3, [pc, #28]	; (8002570 <arm_rfft_256_fast_init_f32+0x34>)
 8002554:	8205      	strh	r5, [r0, #16]
 8002556:	8184      	strh	r4, [r0, #12]
 8002558:	6143      	str	r3, [r0, #20]
 800255a:	bc30      	pop	{r4, r5}
 800255c:	2000      	movs	r0, #0
 800255e:	4770      	bx	lr
 8002560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	08004d60 	.word	0x08004d60
 800256c:	08009c3c 	.word	0x08009c3c
 8002570:	080129bc 	.word	0x080129bc

08002574 <arm_rfft_512_fast_init_f32>:
 8002574:	b190      	cbz	r0, 800259c <arm_rfft_512_fast_init_f32+0x28>
 8002576:	b430      	push	{r4, r5}
 8002578:	490a      	ldr	r1, [pc, #40]	; (80025a4 <arm_rfft_512_fast_init_f32+0x30>)
 800257a:	4a0b      	ldr	r2, [pc, #44]	; (80025a8 <arm_rfft_512_fast_init_f32+0x34>)
 800257c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002580:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8002584:	8003      	strh	r3, [r0, #0]
 8002586:	f44f 7500 	mov.w	r5, #512	; 0x200
 800258a:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800258e:	4b07      	ldr	r3, [pc, #28]	; (80025ac <arm_rfft_512_fast_init_f32+0x38>)
 8002590:	8205      	strh	r5, [r0, #16]
 8002592:	8184      	strh	r4, [r0, #12]
 8002594:	6143      	str	r3, [r0, #20]
 8002596:	bc30      	pop	{r4, r5}
 8002598:	2000      	movs	r0, #0
 800259a:	4770      	bx	lr
 800259c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	08006ce8 	.word	0x08006ce8
 80025a8:	0800e0bc 	.word	0x0800e0bc
 80025ac:	08016e3c 	.word	0x08016e3c

080025b0 <arm_rfft_1024_fast_init_f32>:
 80025b0:	b190      	cbz	r0, 80025d8 <arm_rfft_1024_fast_init_f32+0x28>
 80025b2:	b430      	push	{r4, r5}
 80025b4:	490a      	ldr	r1, [pc, #40]	; (80025e0 <arm_rfft_1024_fast_init_f32+0x30>)
 80025b6:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <arm_rfft_1024_fast_init_f32+0x34>)
 80025b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025bc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80025c0:	8003      	strh	r3, [r0, #0]
 80025c2:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80025c6:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <arm_rfft_1024_fast_init_f32+0x38>)
 80025cc:	8205      	strh	r5, [r0, #16]
 80025ce:	8184      	strh	r4, [r0, #12]
 80025d0:	6143      	str	r3, [r0, #20]
 80025d2:	bc30      	pop	{r4, r5}
 80025d4:	2000      	movs	r0, #0
 80025d6:	4770      	bx	lr
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	080070b8 	.word	0x080070b8
 80025e4:	0800e9bc 	.word	0x0800e9bc
 80025e8:	0800f9bc 	.word	0x0800f9bc

080025ec <arm_rfft_2048_fast_init_f32>:
 80025ec:	b190      	cbz	r0, 8002614 <arm_rfft_2048_fast_init_f32+0x28>
 80025ee:	b430      	push	{r4, r5}
 80025f0:	490a      	ldr	r1, [pc, #40]	; (800261c <arm_rfft_2048_fast_init_f32+0x30>)
 80025f2:	4a0b      	ldr	r2, [pc, #44]	; (8002620 <arm_rfft_2048_fast_init_f32+0x34>)
 80025f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025f8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80025fc:	8003      	strh	r3, [r0, #0]
 80025fe:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8002602:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <arm_rfft_2048_fast_init_f32+0x38>)
 8002608:	8205      	strh	r5, [r0, #16]
 800260a:	8184      	strh	r4, [r0, #12]
 800260c:	6143      	str	r3, [r0, #20]
 800260e:	bc30      	pop	{r4, r5}
 8002610:	2000      	movs	r0, #0
 8002612:	4770      	bx	lr
 8002614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	08003f50 	.word	0x08003f50
 8002620:	08007c3c 	.word	0x08007c3c
 8002624:	080109bc 	.word	0x080109bc

08002628 <arm_rfft_4096_fast_init_f32>:
 8002628:	b190      	cbz	r0, 8002650 <arm_rfft_4096_fast_init_f32+0x28>
 800262a:	b430      	push	{r4, r5}
 800262c:	490a      	ldr	r1, [pc, #40]	; (8002658 <arm_rfft_4096_fast_init_f32+0x30>)
 800262e:	4a0b      	ldr	r2, [pc, #44]	; (800265c <arm_rfft_4096_fast_init_f32+0x34>)
 8002630:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002634:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8002638:	8003      	strh	r3, [r0, #0]
 800263a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800263e:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8002642:	4b07      	ldr	r3, [pc, #28]	; (8002660 <arm_rfft_4096_fast_init_f32+0x38>)
 8002644:	8205      	strh	r5, [r0, #16]
 8002646:	8184      	strh	r4, [r0, #12]
 8002648:	6143      	str	r3, [r0, #20]
 800264a:	bc30      	pop	{r4, r5}
 800264c:	2000      	movs	r0, #0
 800264e:	4770      	bx	lr
 8002650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	08004f28 	.word	0x08004f28
 800265c:	0800a0bc 	.word	0x0800a0bc
 8002660:	08012e3c 	.word	0x08012e3c

08002664 <arm_rfft_fast_init_f32>:
 8002664:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002668:	d01f      	beq.n	80026aa <arm_rfft_fast_init_f32+0x46>
 800266a:	d90b      	bls.n	8002684 <arm_rfft_fast_init_f32+0x20>
 800266c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002670:	d019      	beq.n	80026a6 <arm_rfft_fast_init_f32+0x42>
 8002672:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002676:	d012      	beq.n	800269e <arm_rfft_fast_init_f32+0x3a>
 8002678:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800267c:	d00d      	beq.n	800269a <arm_rfft_fast_init_f32+0x36>
 800267e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002682:	4770      	bx	lr
 8002684:	2940      	cmp	r1, #64	; 0x40
 8002686:	d00c      	beq.n	80026a2 <arm_rfft_fast_init_f32+0x3e>
 8002688:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800268c:	d003      	beq.n	8002696 <arm_rfft_fast_init_f32+0x32>
 800268e:	2920      	cmp	r1, #32
 8002690:	d1f5      	bne.n	800267e <arm_rfft_fast_init_f32+0x1a>
 8002692:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <arm_rfft_fast_init_f32+0x4c>)
 8002694:	4718      	bx	r3
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <arm_rfft_fast_init_f32+0x50>)
 8002698:	4718      	bx	r3
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <arm_rfft_fast_init_f32+0x54>)
 800269c:	4718      	bx	r3
 800269e:	4b07      	ldr	r3, [pc, #28]	; (80026bc <arm_rfft_fast_init_f32+0x58>)
 80026a0:	4718      	bx	r3
 80026a2:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <arm_rfft_fast_init_f32+0x5c>)
 80026a4:	e7f6      	b.n	8002694 <arm_rfft_fast_init_f32+0x30>
 80026a6:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <arm_rfft_fast_init_f32+0x60>)
 80026a8:	e7f4      	b.n	8002694 <arm_rfft_fast_init_f32+0x30>
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <arm_rfft_fast_init_f32+0x64>)
 80026ac:	e7f2      	b.n	8002694 <arm_rfft_fast_init_f32+0x30>
 80026ae:	bf00      	nop
 80026b0:	080024d5 	.word	0x080024d5
 80026b4:	0800253d 	.word	0x0800253d
 80026b8:	080025b1 	.word	0x080025b1
 80026bc:	08002629 	.word	0x08002629
 80026c0:	08002509 	.word	0x08002509
 80026c4:	080025ed 	.word	0x080025ed
 80026c8:	08002575 	.word	0x08002575

080026cc <stage_rfft_f32>:
 80026cc:	b410      	push	{r4}
 80026ce:	edd1 7a00 	vldr	s15, [r1]
 80026d2:	ed91 7a01 	vldr	s14, [r1, #4]
 80026d6:	8804      	ldrh	r4, [r0, #0]
 80026d8:	6940      	ldr	r0, [r0, #20]
 80026da:	ee37 7a07 	vadd.f32	s14, s14, s14
 80026de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026e2:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80026e6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80026ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026ee:	3c01      	subs	r4, #1
 80026f0:	ee26 7a84 	vmul.f32	s14, s13, s8
 80026f4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80026f8:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 80026fc:	ed82 7a00 	vstr	s14, [r2]
 8002700:	edc2 7a01 	vstr	s15, [r2, #4]
 8002704:	3010      	adds	r0, #16
 8002706:	3210      	adds	r2, #16
 8002708:	3b08      	subs	r3, #8
 800270a:	3110      	adds	r1, #16
 800270c:	ed11 5a02 	vldr	s10, [r1, #-8]
 8002710:	ed93 7a02 	vldr	s14, [r3, #8]
 8002714:	ed50 6a02 	vldr	s13, [r0, #-8]
 8002718:	edd3 4a03 	vldr	s9, [r3, #12]
 800271c:	ed51 7a01 	vldr	s15, [r1, #-4]
 8002720:	ed10 6a01 	vldr	s12, [r0, #-4]
 8002724:	ee77 5a45 	vsub.f32	s11, s14, s10
 8002728:	ee37 7a05 	vadd.f32	s14, s14, s10
 800272c:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8002730:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8002734:	ee66 5a25 	vmul.f32	s11, s12, s11
 8002738:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800273c:	ee37 7a23 	vadd.f32	s14, s14, s7
 8002740:	ee66 6a85 	vmul.f32	s13, s13, s10
 8002744:	ee26 6a05 	vmul.f32	s12, s12, s10
 8002748:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800274c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002750:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002754:	ee27 7a04 	vmul.f32	s14, s14, s8
 8002758:	ee67 7a84 	vmul.f32	s15, s15, s8
 800275c:	3c01      	subs	r4, #1
 800275e:	ed02 7a02 	vstr	s14, [r2, #-8]
 8002762:	ed42 7a01 	vstr	s15, [r2, #-4]
 8002766:	f1a3 0308 	sub.w	r3, r3, #8
 800276a:	f101 0108 	add.w	r1, r1, #8
 800276e:	f100 0008 	add.w	r0, r0, #8
 8002772:	f102 0208 	add.w	r2, r2, #8
 8002776:	d1c9      	bne.n	800270c <stage_rfft_f32+0x40>
 8002778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop

08002780 <merge_rfft_f32>:
 8002780:	b410      	push	{r4}
 8002782:	edd1 7a00 	vldr	s15, [r1]
 8002786:	edd1 6a01 	vldr	s13, [r1, #4]
 800278a:	8804      	ldrh	r4, [r0, #0]
 800278c:	6940      	ldr	r0, [r0, #20]
 800278e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002792:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002796:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800279a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800279e:	ee67 7a84 	vmul.f32	s15, s15, s8
 80027a2:	3c01      	subs	r4, #1
 80027a4:	ed82 7a00 	vstr	s14, [r2]
 80027a8:	edc2 7a01 	vstr	s15, [r2, #4]
 80027ac:	b3dc      	cbz	r4, 8002826 <merge_rfft_f32+0xa6>
 80027ae:	00e3      	lsls	r3, r4, #3
 80027b0:	3b08      	subs	r3, #8
 80027b2:	440b      	add	r3, r1
 80027b4:	3010      	adds	r0, #16
 80027b6:	3210      	adds	r2, #16
 80027b8:	3110      	adds	r1, #16
 80027ba:	ed11 5a02 	vldr	s10, [r1, #-8]
 80027be:	ed93 7a02 	vldr	s14, [r3, #8]
 80027c2:	ed50 6a02 	vldr	s13, [r0, #-8]
 80027c6:	edd3 4a03 	vldr	s9, [r3, #12]
 80027ca:	ed51 7a01 	vldr	s15, [r1, #-4]
 80027ce:	ed10 6a01 	vldr	s12, [r0, #-4]
 80027d2:	ee75 5a47 	vsub.f32	s11, s10, s14
 80027d6:	ee37 7a05 	vadd.f32	s14, s14, s10
 80027da:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80027de:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80027e2:	ee66 5a25 	vmul.f32	s11, s12, s11
 80027e6:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80027ea:	ee37 7a63 	vsub.f32	s14, s14, s7
 80027ee:	ee66 6a85 	vmul.f32	s13, s13, s10
 80027f2:	ee26 6a05 	vmul.f32	s12, s12, s10
 80027f6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80027fa:	ee37 7a46 	vsub.f32	s14, s14, s12
 80027fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002802:	ee27 7a04 	vmul.f32	s14, s14, s8
 8002806:	ee67 7a84 	vmul.f32	s15, s15, s8
 800280a:	3c01      	subs	r4, #1
 800280c:	ed02 7a02 	vstr	s14, [r2, #-8]
 8002810:	ed42 7a01 	vstr	s15, [r2, #-4]
 8002814:	f1a3 0308 	sub.w	r3, r3, #8
 8002818:	f101 0108 	add.w	r1, r1, #8
 800281c:	f100 0008 	add.w	r0, r0, #8
 8002820:	f102 0208 	add.w	r2, r2, #8
 8002824:	d1c9      	bne.n	80027ba <merge_rfft_f32+0x3a>
 8002826:	f85d 4b04 	ldr.w	r4, [sp], #4
 800282a:	4770      	bx	lr

0800282c <arm_rfft_fast_f32>:
 800282c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002830:	8a05      	ldrh	r5, [r0, #16]
 8002832:	086d      	lsrs	r5, r5, #1
 8002834:	8005      	strh	r5, [r0, #0]
 8002836:	4604      	mov	r4, r0
 8002838:	4616      	mov	r6, r2
 800283a:	461d      	mov	r5, r3
 800283c:	b14b      	cbz	r3, 8002852 <arm_rfft_fast_f32+0x26>
 800283e:	f7ff ff9f 	bl	8002780 <merge_rfft_f32>
 8002842:	462a      	mov	r2, r5
 8002844:	4631      	mov	r1, r6
 8002846:	4620      	mov	r0, r4
 8002848:	2301      	movs	r3, #1
 800284a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800284e:	f000 bb33 	b.w	8002eb8 <arm_cfft_f32>
 8002852:	460f      	mov	r7, r1
 8002854:	461a      	mov	r2, r3
 8002856:	2301      	movs	r3, #1
 8002858:	f000 fb2e 	bl	8002eb8 <arm_cfft_f32>
 800285c:	4632      	mov	r2, r6
 800285e:	4639      	mov	r1, r7
 8002860:	4620      	mov	r0, r4
 8002862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002866:	f7ff bf31 	b.w	80026cc <stage_rfft_f32>
 800286a:	bf00      	nop

0800286c <arm_cfft_radix8by2_f32>:
 800286c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002870:	ed2d 8b08 	vpush	{d8-d11}
 8002874:	4607      	mov	r7, r0
 8002876:	4608      	mov	r0, r1
 8002878:	f8b7 c000 	ldrh.w	ip, [r7]
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8002882:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8002886:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800288a:	f000 80b0 	beq.w	80029ee <arm_cfft_radix8by2_f32+0x182>
 800288e:	008c      	lsls	r4, r1, #2
 8002890:	3410      	adds	r4, #16
 8002892:	f100 0310 	add.w	r3, r0, #16
 8002896:	1906      	adds	r6, r0, r4
 8002898:	3210      	adds	r2, #16
 800289a:	4444      	add	r4, r8
 800289c:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80028a0:	f108 0510 	add.w	r5, r8, #16
 80028a4:	ed15 2a04 	vldr	s4, [r5, #-16]
 80028a8:	ed55 2a03 	vldr	s5, [r5, #-12]
 80028ac:	ed54 4a04 	vldr	s9, [r4, #-16]
 80028b0:	ed14 4a03 	vldr	s8, [r4, #-12]
 80028b4:	ed14 6a02 	vldr	s12, [r4, #-8]
 80028b8:	ed54 5a01 	vldr	s11, [r4, #-4]
 80028bc:	ed53 3a04 	vldr	s7, [r3, #-16]
 80028c0:	ed15 0a02 	vldr	s0, [r5, #-8]
 80028c4:	ed55 0a01 	vldr	s1, [r5, #-4]
 80028c8:	ed56 6a04 	vldr	s13, [r6, #-16]
 80028cc:	ed16 3a03 	vldr	s6, [r6, #-12]
 80028d0:	ed13 7a03 	vldr	s14, [r3, #-12]
 80028d4:	ed13 5a02 	vldr	s10, [r3, #-8]
 80028d8:	ed53 7a01 	vldr	s15, [r3, #-4]
 80028dc:	ed16 1a02 	vldr	s2, [r6, #-8]
 80028e0:	ed56 1a01 	vldr	s3, [r6, #-4]
 80028e4:	ee73 ba82 	vadd.f32	s23, s7, s4
 80028e8:	ee37 ba22 	vadd.f32	s22, s14, s5
 80028ec:	ee76 9aa4 	vadd.f32	s19, s13, s9
 80028f0:	ee33 9a04 	vadd.f32	s18, s6, s8
 80028f4:	ee31 8aa5 	vadd.f32	s16, s3, s11
 80028f8:	ee75 aa00 	vadd.f32	s21, s10, s0
 80028fc:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8002900:	ee71 8a06 	vadd.f32	s17, s2, s12
 8002904:	ed43 ba04 	vstr	s23, [r3, #-16]
 8002908:	ed03 ba03 	vstr	s22, [r3, #-12]
 800290c:	ed43 aa02 	vstr	s21, [r3, #-8]
 8002910:	ed03 aa01 	vstr	s20, [r3, #-4]
 8002914:	ed06 8a01 	vstr	s16, [r6, #-4]
 8002918:	ed46 9a04 	vstr	s19, [r6, #-16]
 800291c:	ed06 9a03 	vstr	s18, [r6, #-12]
 8002920:	ed46 8a02 	vstr	s17, [r6, #-8]
 8002924:	ee37 7a62 	vsub.f32	s14, s14, s5
 8002928:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800292c:	ee34 4a43 	vsub.f32	s8, s8, s6
 8002930:	ed52 6a03 	vldr	s13, [r2, #-12]
 8002934:	ed12 3a04 	vldr	s6, [r2, #-16]
 8002938:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800293c:	ee27 8a26 	vmul.f32	s16, s14, s13
 8002940:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8002944:	ee23 2a83 	vmul.f32	s4, s7, s6
 8002948:	ee64 4a83 	vmul.f32	s9, s9, s6
 800294c:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8002950:	ee27 7a03 	vmul.f32	s14, s14, s6
 8002954:	ee64 6a26 	vmul.f32	s13, s8, s13
 8002958:	ee24 4a03 	vmul.f32	s8, s8, s6
 800295c:	ee37 7a63 	vsub.f32	s14, s14, s7
 8002960:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8002964:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8002968:	ee32 3a08 	vadd.f32	s6, s4, s16
 800296c:	ed05 7a03 	vstr	s14, [r5, #-12]
 8002970:	ed05 3a04 	vstr	s6, [r5, #-16]
 8002974:	ed04 4a04 	vstr	s8, [r4, #-16]
 8002978:	ed44 6a03 	vstr	s13, [r4, #-12]
 800297c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8002980:	ee76 6a41 	vsub.f32	s13, s12, s2
 8002984:	ee35 5a40 	vsub.f32	s10, s10, s0
 8002988:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800298c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8002990:	ed52 5a02 	vldr	s11, [r2, #-8]
 8002994:	ee67 3a87 	vmul.f32	s7, s15, s14
 8002998:	ee66 4a87 	vmul.f32	s9, s13, s14
 800299c:	ee25 4a25 	vmul.f32	s8, s10, s11
 80029a0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80029a4:	ee25 5a07 	vmul.f32	s10, s10, s14
 80029a8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80029ac:	ee26 7a07 	vmul.f32	s14, s12, s14
 80029b0:	ee26 6a25 	vmul.f32	s12, s12, s11
 80029b4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80029b8:	ee74 5a23 	vadd.f32	s11, s8, s7
 80029bc:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80029c0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80029c4:	3310      	adds	r3, #16
 80029c6:	4563      	cmp	r3, ip
 80029c8:	ed45 5a02 	vstr	s11, [r5, #-8]
 80029cc:	f106 0610 	add.w	r6, r6, #16
 80029d0:	ed45 7a01 	vstr	s15, [r5, #-4]
 80029d4:	f102 0210 	add.w	r2, r2, #16
 80029d8:	ed04 6a02 	vstr	s12, [r4, #-8]
 80029dc:	ed04 7a01 	vstr	s14, [r4, #-4]
 80029e0:	f105 0510 	add.w	r5, r5, #16
 80029e4:	f104 0410 	add.w	r4, r4, #16
 80029e8:	f47f af5c 	bne.w	80028a4 <arm_cfft_radix8by2_f32+0x38>
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	b28c      	uxth	r4, r1
 80029f0:	4621      	mov	r1, r4
 80029f2:	2302      	movs	r3, #2
 80029f4:	f000 fb3e 	bl	8003074 <arm_radix8_butterfly_f32>
 80029f8:	ecbd 8b08 	vpop	{d8-d11}
 80029fc:	4621      	mov	r1, r4
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4640      	mov	r0, r8
 8002a02:	2302      	movs	r3, #2
 8002a04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a08:	f000 bb34 	b.w	8003074 <arm_radix8_butterfly_f32>

08002a0c <arm_cfft_radix8by4_f32>:
 8002a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a10:	ed2d 8b0a 	vpush	{d8-d12}
 8002a14:	b08d      	sub	sp, #52	; 0x34
 8002a16:	460d      	mov	r5, r1
 8002a18:	910b      	str	r1, [sp, #44]	; 0x2c
 8002a1a:	8801      	ldrh	r1, [r0, #0]
 8002a1c:	6842      	ldr	r2, [r0, #4]
 8002a1e:	900a      	str	r0, [sp, #40]	; 0x28
 8002a20:	0849      	lsrs	r1, r1, #1
 8002a22:	008b      	lsls	r3, r1, #2
 8002a24:	18ee      	adds	r6, r5, r3
 8002a26:	18f0      	adds	r0, r6, r3
 8002a28:	edd0 5a00 	vldr	s11, [r0]
 8002a2c:	edd5 7a00 	vldr	s15, [r5]
 8002a30:	ed96 7a00 	vldr	s14, [r6]
 8002a34:	edd0 3a01 	vldr	s7, [r0, #4]
 8002a38:	ed96 4a01 	vldr	s8, [r6, #4]
 8002a3c:	ed95 5a01 	vldr	s10, [r5, #4]
 8002a40:	9008      	str	r0, [sp, #32]
 8002a42:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8002a46:	18c7      	adds	r7, r0, r3
 8002a48:	edd7 4a00 	vldr	s9, [r7]
 8002a4c:	ed97 3a01 	vldr	s6, [r7, #4]
 8002a50:	9701      	str	r7, [sp, #4]
 8002a52:	ee77 6a06 	vadd.f32	s13, s14, s12
 8002a56:	462c      	mov	r4, r5
 8002a58:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8002a5c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8002a60:	ee16 ca90 	vmov	ip, s13
 8002a64:	f844 cb08 	str.w	ip, [r4], #8
 8002a68:	ee75 6a23 	vadd.f32	s13, s10, s7
 8002a6c:	edd6 5a01 	vldr	s11, [r6, #4]
 8002a70:	edd7 2a01 	vldr	s5, [r7, #4]
 8002a74:	9404      	str	r4, [sp, #16]
 8002a76:	ee35 5a63 	vsub.f32	s10, s10, s7
 8002a7a:	ee74 3a27 	vadd.f32	s7, s8, s15
 8002a7e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8002a82:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8002a86:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8002a8a:	0849      	lsrs	r1, r1, #1
 8002a8c:	f102 0e08 	add.w	lr, r2, #8
 8002a90:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8002a94:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8002a98:	9109      	str	r1, [sp, #36]	; 0x24
 8002a9a:	ee35 4a47 	vsub.f32	s8, s10, s14
 8002a9e:	f1a1 0902 	sub.w	r9, r1, #2
 8002aa2:	f8cd e00c 	str.w	lr, [sp, #12]
 8002aa6:	4631      	mov	r1, r6
 8002aa8:	ee13 ea90 	vmov	lr, s7
 8002aac:	ee36 6a64 	vsub.f32	s12, s12, s9
 8002ab0:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8002ab4:	4604      	mov	r4, r0
 8002ab6:	edc5 5a01 	vstr	s11, [r5, #4]
 8002aba:	ee37 7a05 	vadd.f32	s14, s14, s10
 8002abe:	f841 eb08 	str.w	lr, [r1], #8
 8002ac2:	ee34 5a24 	vadd.f32	s10, s8, s9
 8002ac6:	ee16 ea10 	vmov	lr, s12
 8002aca:	ed86 5a01 	vstr	s10, [r6, #4]
 8002ace:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8002ad2:	f844 eb08 	str.w	lr, [r4], #8
 8002ad6:	ee77 7a83 	vadd.f32	s15, s15, s6
 8002ada:	edc0 6a01 	vstr	s13, [r0, #4]
 8002ade:	9405      	str	r4, [sp, #20]
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	ee17 0a90 	vmov	r0, s15
 8002ae6:	9106      	str	r1, [sp, #24]
 8002ae8:	ee37 7a64 	vsub.f32	s14, s14, s9
 8002aec:	f102 0110 	add.w	r1, r2, #16
 8002af0:	46bc      	mov	ip, r7
 8002af2:	9100      	str	r1, [sp, #0]
 8002af4:	f847 0b08 	str.w	r0, [r7], #8
 8002af8:	f102 0118 	add.w	r1, r2, #24
 8002afc:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8002b00:	9102      	str	r1, [sp, #8]
 8002b02:	ed8c 7a01 	vstr	s14, [ip, #4]
 8002b06:	9007      	str	r0, [sp, #28]
 8002b08:	f000 8134 	beq.w	8002d74 <arm_cfft_radix8by4_f32+0x368>
 8002b0c:	f102 0920 	add.w	r9, r2, #32
 8002b10:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8002b14:	9a01      	ldr	r2, [sp, #4]
 8002b16:	f8dd a000 	ldr.w	sl, [sp]
 8002b1a:	3b0c      	subs	r3, #12
 8002b1c:	4683      	mov	fp, r0
 8002b1e:	4463      	add	r3, ip
 8002b20:	f105 0e10 	add.w	lr, r5, #16
 8002b24:	f1a4 010c 	sub.w	r1, r4, #12
 8002b28:	f104 0510 	add.w	r5, r4, #16
 8002b2c:	f1a6 0c0c 	sub.w	ip, r6, #12
 8002b30:	f1a2 040c 	sub.w	r4, r2, #12
 8002b34:	f106 0010 	add.w	r0, r6, #16
 8002b38:	3210      	adds	r2, #16
 8002b3a:	ed1e 5a02 	vldr	s10, [lr, #-8]
 8002b3e:	ed55 5a02 	vldr	s11, [r5, #-8]
 8002b42:	ed50 7a02 	vldr	s15, [r0, #-8]
 8002b46:	ed52 1a02 	vldr	s3, [r2, #-8]
 8002b4a:	ed55 6a01 	vldr	s13, [r5, #-4]
 8002b4e:	ed1e 0a01 	vldr	s0, [lr, #-4]
 8002b52:	ed12 1a01 	vldr	s2, [r2, #-4]
 8002b56:	ed10 8a01 	vldr	s16, [r0, #-4]
 8002b5a:	ee35 4a25 	vadd.f32	s8, s10, s11
 8002b5e:	ee30 6a26 	vadd.f32	s12, s0, s13
 8002b62:	ee37 7a84 	vadd.f32	s14, s15, s8
 8002b66:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002b6a:	ee37 7a21 	vadd.f32	s14, s14, s3
 8002b6e:	ee75 5a65 	vsub.f32	s11, s10, s11
 8002b72:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8002b76:	ed10 7a01 	vldr	s14, [r0, #-4]
 8002b7a:	ed52 6a01 	vldr	s13, [r2, #-4]
 8002b7e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8002b82:	ee78 aa25 	vadd.f32	s21, s16, s11
 8002b86:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002b8a:	ee70 3a67 	vsub.f32	s7, s0, s15
 8002b8e:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8002b92:	ed94 7a02 	vldr	s14, [r4, #8]
 8002b96:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002b9a:	ed91 ba02 	vldr	s22, [r1, #8]
 8002b9e:	edd3 9a02 	vldr	s19, [r3, #8]
 8002ba2:	edd4 2a01 	vldr	s5, [r4, #4]
 8002ba6:	ed9c 9a01 	vldr	s18, [ip, #4]
 8002baa:	ed93 5a01 	vldr	s10, [r3, #4]
 8002bae:	edd1 0a01 	vldr	s1, [r1, #4]
 8002bb2:	ee72 6a07 	vadd.f32	s13, s4, s14
 8002bb6:	ee32 2a47 	vsub.f32	s4, s4, s14
 8002bba:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8002bbe:	ee79 4a22 	vadd.f32	s9, s18, s5
 8002bc2:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8002bc6:	ee79 2a62 	vsub.f32	s5, s18, s5
 8002bca:	ed8c 7a02 	vstr	s14, [ip, #8]
 8002bce:	ed91 7a01 	vldr	s14, [r1, #4]
 8002bd2:	edd3 8a01 	vldr	s17, [r3, #4]
 8002bd6:	ee34 7a87 	vadd.f32	s14, s9, s14
 8002bda:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8002bde:	ee37 7a28 	vadd.f32	s14, s14, s17
 8002be2:	ee32 9a60 	vsub.f32	s18, s4, s1
 8002be6:	ed8c 7a01 	vstr	s14, [ip, #4]
 8002bea:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8002bee:	ed1a aa02 	vldr	s20, [sl, #-8]
 8002bf2:	ee73 8a22 	vadd.f32	s17, s6, s5
 8002bf6:	ee39 9a05 	vadd.f32	s18, s18, s10
 8002bfa:	ee7a aac1 	vsub.f32	s21, s21, s2
 8002bfe:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8002c02:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8002c06:	ee69 ba07 	vmul.f32	s23, s18, s14
 8002c0a:	ee6a aa87 	vmul.f32	s21, s21, s14
 8002c0e:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8002c12:	ee63 ca87 	vmul.f32	s25, s7, s14
 8002c16:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8002c1a:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8002c1e:	ee68 8a87 	vmul.f32	s17, s17, s14
 8002c22:	ee73 3aea 	vsub.f32	s7, s7, s21
 8002c26:	ee78 8a89 	vadd.f32	s17, s17, s18
 8002c2a:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8002c2e:	ee3b aaca 	vsub.f32	s20, s23, s20
 8002c32:	ee34 4a67 	vsub.f32	s8, s8, s15
 8002c36:	ee76 6acb 	vsub.f32	s13, s13, s22
 8002c3a:	ee36 6a48 	vsub.f32	s12, s12, s16
 8002c3e:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8002c42:	ed00 7a02 	vstr	s14, [r0, #-8]
 8002c46:	ed40 3a01 	vstr	s7, [r0, #-4]
 8002c4a:	edc1 8a01 	vstr	s17, [r1, #4]
 8002c4e:	ed81 aa02 	vstr	s20, [r1, #8]
 8002c52:	ed59 3a04 	vldr	s7, [r9, #-16]
 8002c56:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8002c5a:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8002c5e:	ed59 6a03 	vldr	s13, [r9, #-12]
 8002c62:	ee34 4a61 	vsub.f32	s8, s8, s3
 8002c66:	ee36 6a41 	vsub.f32	s12, s12, s2
 8002c6a:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8002c6e:	ee66 9a26 	vmul.f32	s19, s12, s13
 8002c72:	ee24 9a23 	vmul.f32	s18, s8, s7
 8002c76:	ee26 6a23 	vmul.f32	s12, s12, s7
 8002c7a:	ee24 4a26 	vmul.f32	s8, s8, s13
 8002c7e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002c82:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8002c86:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8002c8a:	ee36 6a44 	vsub.f32	s12, s12, s8
 8002c8e:	ee37 7a64 	vsub.f32	s14, s14, s9
 8002c92:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8002c96:	ee79 3a29 	vadd.f32	s7, s18, s19
 8002c9a:	ee75 6a60 	vsub.f32	s13, s10, s1
 8002c9e:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8002ca2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8002ca6:	ed45 3a02 	vstr	s7, [r5, #-8]
 8002caa:	ed05 6a01 	vstr	s12, [r5, #-4]
 8002cae:	ed84 7a01 	vstr	s14, [r4, #4]
 8002cb2:	ed84 4a02 	vstr	s8, [r4, #8]
 8002cb6:	ee35 6a81 	vadd.f32	s12, s11, s2
 8002cba:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8002cbe:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8002cc2:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8002cc6:	ee33 3a62 	vsub.f32	s6, s6, s5
 8002cca:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8002cce:	ee67 2a26 	vmul.f32	s5, s14, s13
 8002cd2:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8002cd6:	ee26 5a25 	vmul.f32	s10, s12, s11
 8002cda:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002cde:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002ce2:	ee27 7a25 	vmul.f32	s14, s14, s11
 8002ce6:	ee63 6a26 	vmul.f32	s13, s6, s13
 8002cea:	ee23 3a25 	vmul.f32	s6, s6, s11
 8002cee:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002cf2:	ee75 5a24 	vadd.f32	s11, s10, s9
 8002cf6:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8002cfa:	ee36 7a87 	vadd.f32	s14, s13, s14
 8002cfe:	f1bb 0b01 	subs.w	fp, fp, #1
 8002d02:	ed42 5a02 	vstr	s11, [r2, #-8]
 8002d06:	ed42 7a01 	vstr	s15, [r2, #-4]
 8002d0a:	f10e 0e08 	add.w	lr, lr, #8
 8002d0e:	ed83 3a02 	vstr	s6, [r3, #8]
 8002d12:	ed83 7a01 	vstr	s14, [r3, #4]
 8002d16:	f1ac 0c08 	sub.w	ip, ip, #8
 8002d1a:	f10a 0a08 	add.w	sl, sl, #8
 8002d1e:	f100 0008 	add.w	r0, r0, #8
 8002d22:	f1a1 0108 	sub.w	r1, r1, #8
 8002d26:	f109 0910 	add.w	r9, r9, #16
 8002d2a:	f105 0508 	add.w	r5, r5, #8
 8002d2e:	f1a4 0408 	sub.w	r4, r4, #8
 8002d32:	f108 0818 	add.w	r8, r8, #24
 8002d36:	f102 0208 	add.w	r2, r2, #8
 8002d3a:	f1a3 0308 	sub.w	r3, r3, #8
 8002d3e:	f47f aefc 	bne.w	8002b3a <arm_cfft_radix8by4_f32+0x12e>
 8002d42:	9907      	ldr	r1, [sp, #28]
 8002d44:	9800      	ldr	r0, [sp, #0]
 8002d46:	00cb      	lsls	r3, r1, #3
 8002d48:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8002d4c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8002d50:	9100      	str	r1, [sp, #0]
 8002d52:	9904      	ldr	r1, [sp, #16]
 8002d54:	4419      	add	r1, r3
 8002d56:	9104      	str	r1, [sp, #16]
 8002d58:	9903      	ldr	r1, [sp, #12]
 8002d5a:	4419      	add	r1, r3
 8002d5c:	9103      	str	r1, [sp, #12]
 8002d5e:	9906      	ldr	r1, [sp, #24]
 8002d60:	4419      	add	r1, r3
 8002d62:	9106      	str	r1, [sp, #24]
 8002d64:	9905      	ldr	r1, [sp, #20]
 8002d66:	441f      	add	r7, r3
 8002d68:	4419      	add	r1, r3
 8002d6a:	9b02      	ldr	r3, [sp, #8]
 8002d6c:	9105      	str	r1, [sp, #20]
 8002d6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d72:	9302      	str	r3, [sp, #8]
 8002d74:	9904      	ldr	r1, [sp, #16]
 8002d76:	9805      	ldr	r0, [sp, #20]
 8002d78:	ed91 4a00 	vldr	s8, [r1]
 8002d7c:	edd0 6a00 	vldr	s13, [r0]
 8002d80:	9b06      	ldr	r3, [sp, #24]
 8002d82:	ed97 3a00 	vldr	s6, [r7]
 8002d86:	edd3 7a00 	vldr	s15, [r3]
 8002d8a:	edd0 4a01 	vldr	s9, [r0, #4]
 8002d8e:	edd1 3a01 	vldr	s7, [r1, #4]
 8002d92:	ed97 2a01 	vldr	s4, [r7, #4]
 8002d96:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d9a:	9a03      	ldr	r2, [sp, #12]
 8002d9c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8002da0:	ee34 6a26 	vadd.f32	s12, s8, s13
 8002da4:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8002da8:	ee37 5a86 	vadd.f32	s10, s15, s12
 8002dac:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8002db0:	ee35 5a03 	vadd.f32	s10, s10, s6
 8002db4:	ee74 6a66 	vsub.f32	s13, s8, s13
 8002db8:	ed81 5a00 	vstr	s10, [r1]
 8002dbc:	ed93 5a01 	vldr	s10, [r3, #4]
 8002dc0:	edd7 4a01 	vldr	s9, [r7, #4]
 8002dc4:	ee35 5a85 	vadd.f32	s10, s11, s10
 8002dc8:	ee37 4a26 	vadd.f32	s8, s14, s13
 8002dcc:	ee35 5a24 	vadd.f32	s10, s10, s9
 8002dd0:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8002dd4:	ed81 5a01 	vstr	s10, [r1, #4]
 8002dd8:	edd2 1a00 	vldr	s3, [r2]
 8002ddc:	edd2 2a01 	vldr	s5, [r2, #4]
 8002de0:	ee34 5a83 	vadd.f32	s10, s9, s6
 8002de4:	ee34 4a42 	vsub.f32	s8, s8, s4
 8002de8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002dec:	ee64 4a21 	vmul.f32	s9, s8, s3
 8002df0:	ee24 4a22 	vmul.f32	s8, s8, s5
 8002df4:	ee65 2a22 	vmul.f32	s5, s10, s5
 8002df8:	ee25 5a21 	vmul.f32	s10, s10, s3
 8002dfc:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8002e00:	ee35 5a44 	vsub.f32	s10, s10, s8
 8002e04:	edc3 2a00 	vstr	s5, [r3]
 8002e08:	ed83 5a01 	vstr	s10, [r3, #4]
 8002e0c:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8002e10:	9b00      	ldr	r3, [sp, #0]
 8002e12:	ee36 6a43 	vsub.f32	s12, s12, s6
 8002e16:	ed93 4a01 	vldr	s8, [r3, #4]
 8002e1a:	ed93 5a00 	vldr	s10, [r3]
 8002e1e:	9b02      	ldr	r3, [sp, #8]
 8002e20:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8002e24:	ee66 4a05 	vmul.f32	s9, s12, s10
 8002e28:	ee25 5a85 	vmul.f32	s10, s11, s10
 8002e2c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8002e30:	ee65 5a84 	vmul.f32	s11, s11, s8
 8002e34:	ee35 6a46 	vsub.f32	s12, s10, s12
 8002e38:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8002e3c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8002e40:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8002e44:	ed80 6a01 	vstr	s12, [r0, #4]
 8002e48:	edc0 5a00 	vstr	s11, [r0]
 8002e4c:	edd3 5a01 	vldr	s11, [r3, #4]
 8002e50:	edd3 6a00 	vldr	s13, [r3]
 8002e54:	ee37 7a02 	vadd.f32	s14, s14, s4
 8002e58:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8002e5c:	ee27 6a26 	vmul.f32	s12, s14, s13
 8002e60:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002e64:	ee27 7a25 	vmul.f32	s14, s14, s11
 8002e68:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002e6c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8002e70:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002e74:	ed87 7a01 	vstr	s14, [r7, #4]
 8002e78:	edc7 7a00 	vstr	s15, [r7]
 8002e7c:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8002e80:	4621      	mov	r1, r4
 8002e82:	686a      	ldr	r2, [r5, #4]
 8002e84:	2304      	movs	r3, #4
 8002e86:	f000 f8f5 	bl	8003074 <arm_radix8_butterfly_f32>
 8002e8a:	4630      	mov	r0, r6
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	686a      	ldr	r2, [r5, #4]
 8002e90:	2304      	movs	r3, #4
 8002e92:	f000 f8ef 	bl	8003074 <arm_radix8_butterfly_f32>
 8002e96:	9808      	ldr	r0, [sp, #32]
 8002e98:	686a      	ldr	r2, [r5, #4]
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	f000 f8e9 	bl	8003074 <arm_radix8_butterfly_f32>
 8002ea2:	686a      	ldr	r2, [r5, #4]
 8002ea4:	9801      	ldr	r0, [sp, #4]
 8002ea6:	4621      	mov	r1, r4
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	b00d      	add	sp, #52	; 0x34
 8002eac:	ecbd 8b0a 	vpop	{d8-d12}
 8002eb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eb4:	f000 b8de 	b.w	8003074 <arm_radix8_butterfly_f32>

08002eb8 <arm_cfft_f32>:
 8002eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ebc:	2a01      	cmp	r2, #1
 8002ebe:	4606      	mov	r6, r0
 8002ec0:	4617      	mov	r7, r2
 8002ec2:	460c      	mov	r4, r1
 8002ec4:	4698      	mov	r8, r3
 8002ec6:	8805      	ldrh	r5, [r0, #0]
 8002ec8:	d056      	beq.n	8002f78 <arm_cfft_f32+0xc0>
 8002eca:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002ece:	d063      	beq.n	8002f98 <arm_cfft_f32+0xe0>
 8002ed0:	d916      	bls.n	8002f00 <arm_cfft_f32+0x48>
 8002ed2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8002ed6:	d01a      	beq.n	8002f0e <arm_cfft_f32+0x56>
 8002ed8:	d947      	bls.n	8002f6a <arm_cfft_f32+0xb2>
 8002eda:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002ede:	d05b      	beq.n	8002f98 <arm_cfft_f32+0xe0>
 8002ee0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8002ee4:	d105      	bne.n	8002ef2 <arm_cfft_f32+0x3a>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	6872      	ldr	r2, [r6, #4]
 8002eea:	4629      	mov	r1, r5
 8002eec:	4620      	mov	r0, r4
 8002eee:	f000 f8c1 	bl	8003074 <arm_radix8_butterfly_f32>
 8002ef2:	f1b8 0f00 	cmp.w	r8, #0
 8002ef6:	d111      	bne.n	8002f1c <arm_cfft_f32+0x64>
 8002ef8:	2f01      	cmp	r7, #1
 8002efa:	d016      	beq.n	8002f2a <arm_cfft_f32+0x72>
 8002efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f00:	2d20      	cmp	r5, #32
 8002f02:	d049      	beq.n	8002f98 <arm_cfft_f32+0xe0>
 8002f04:	d935      	bls.n	8002f72 <arm_cfft_f32+0xba>
 8002f06:	2d40      	cmp	r5, #64	; 0x40
 8002f08:	d0ed      	beq.n	8002ee6 <arm_cfft_f32+0x2e>
 8002f0a:	2d80      	cmp	r5, #128	; 0x80
 8002f0c:	d1f1      	bne.n	8002ef2 <arm_cfft_f32+0x3a>
 8002f0e:	4621      	mov	r1, r4
 8002f10:	4630      	mov	r0, r6
 8002f12:	f7ff fcab 	bl	800286c <arm_cfft_radix8by2_f32>
 8002f16:	f1b8 0f00 	cmp.w	r8, #0
 8002f1a:	d0ed      	beq.n	8002ef8 <arm_cfft_f32+0x40>
 8002f1c:	68b2      	ldr	r2, [r6, #8]
 8002f1e:	89b1      	ldrh	r1, [r6, #12]
 8002f20:	4620      	mov	r0, r4
 8002f22:	f000 f841 	bl	8002fa8 <arm_bitreversal_32>
 8002f26:	2f01      	cmp	r7, #1
 8002f28:	d1e8      	bne.n	8002efc <arm_cfft_f32+0x44>
 8002f2a:	ee07 5a90 	vmov	s15, r5
 8002f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f36:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f3a:	2d00      	cmp	r5, #0
 8002f3c:	d0de      	beq.n	8002efc <arm_cfft_f32+0x44>
 8002f3e:	f104 0108 	add.w	r1, r4, #8
 8002f42:	2300      	movs	r3, #0
 8002f44:	3301      	adds	r3, #1
 8002f46:	429d      	cmp	r5, r3
 8002f48:	f101 0108 	add.w	r1, r1, #8
 8002f4c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8002f50:	ed51 7a03 	vldr	s15, [r1, #-12]
 8002f54:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002f58:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8002f5c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8002f60:	ed41 7a03 	vstr	s15, [r1, #-12]
 8002f64:	d1ee      	bne.n	8002f44 <arm_cfft_f32+0x8c>
 8002f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f6a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8002f6e:	d0ba      	beq.n	8002ee6 <arm_cfft_f32+0x2e>
 8002f70:	e7bf      	b.n	8002ef2 <arm_cfft_f32+0x3a>
 8002f72:	2d10      	cmp	r5, #16
 8002f74:	d0cb      	beq.n	8002f0e <arm_cfft_f32+0x56>
 8002f76:	e7bc      	b.n	8002ef2 <arm_cfft_f32+0x3a>
 8002f78:	b19d      	cbz	r5, 8002fa2 <arm_cfft_f32+0xea>
 8002f7a:	f101 030c 	add.w	r3, r1, #12
 8002f7e:	2200      	movs	r2, #0
 8002f80:	ed53 7a02 	vldr	s15, [r3, #-8]
 8002f84:	3201      	adds	r2, #1
 8002f86:	eef1 7a67 	vneg.f32	s15, s15
 8002f8a:	4295      	cmp	r5, r2
 8002f8c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8002f90:	f103 0308 	add.w	r3, r3, #8
 8002f94:	d1f4      	bne.n	8002f80 <arm_cfft_f32+0xc8>
 8002f96:	e798      	b.n	8002eca <arm_cfft_f32+0x12>
 8002f98:	4621      	mov	r1, r4
 8002f9a:	4630      	mov	r0, r6
 8002f9c:	f7ff fd36 	bl	8002a0c <arm_cfft_radix8by4_f32>
 8002fa0:	e7a7      	b.n	8002ef2 <arm_cfft_f32+0x3a>
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0aa      	beq.n	8002efc <arm_cfft_f32+0x44>
 8002fa6:	e7b9      	b.n	8002f1c <arm_cfft_f32+0x64>

08002fa8 <arm_bitreversal_32>:
 8002fa8:	b1e9      	cbz	r1, 8002fe6 <arm_bitreversal_32+0x3e>
 8002faa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fac:	2500      	movs	r5, #0
 8002fae:	f102 0e02 	add.w	lr, r2, #2
 8002fb2:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8002fb6:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8002fba:	08a4      	lsrs	r4, r4, #2
 8002fbc:	089b      	lsrs	r3, r3, #2
 8002fbe:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8002fc2:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8002fc6:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8002fca:	00a6      	lsls	r6, r4, #2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	1d34      	adds	r4, r6, #4
 8002fd6:	3502      	adds	r5, #2
 8002fd8:	58c6      	ldr	r6, [r0, r3]
 8002fda:	5907      	ldr	r7, [r0, r4]
 8002fdc:	50c7      	str	r7, [r0, r3]
 8002fde:	428d      	cmp	r5, r1
 8002fe0:	5106      	str	r6, [r0, r4]
 8002fe2:	d3e6      	bcc.n	8002fb2 <arm_bitreversal_32+0xa>
 8002fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe6:	4770      	bx	lr

08002fe8 <arm_sin_f32>:
 8002fe8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003068 <arm_sin_f32+0x80>
 8002fec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002ff0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002ffc:	d504      	bpl.n	8003008 <arm_sin_f32+0x20>
 8002ffe:	ee17 3a90 	vmov	r3, s15
 8003002:	3b01      	subs	r3, #1
 8003004:	ee07 3a90 	vmov	s15, r3
 8003008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800300c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800306c <arm_sin_f32+0x84>
 8003010:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003014:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003018:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800301c:	ee17 3a90 	vmov	r3, s15
 8003020:	b29b      	uxth	r3, r3
 8003022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003026:	d21a      	bcs.n	800305e <arm_sin_f32+0x76>
 8003028:	ee07 3a90 	vmov	s15, r3
 800302c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003030:	1c59      	adds	r1, r3, #1
 8003032:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003036:	4a0e      	ldr	r2, [pc, #56]	; (8003070 <arm_sin_f32+0x88>)
 8003038:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800303c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003040:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003044:	ed93 7a00 	vldr	s14, [r3]
 8003048:	edd2 6a00 	vldr	s13, [r2]
 800304c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003050:	ee20 0a26 	vmul.f32	s0, s0, s13
 8003054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003058:	ee37 0a80 	vadd.f32	s0, s15, s0
 800305c:	4770      	bx	lr
 800305e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003062:	2101      	movs	r1, #1
 8003064:	2300      	movs	r3, #0
 8003066:	e7e6      	b.n	8003036 <arm_sin_f32+0x4e>
 8003068:	3e22f983 	.word	0x3e22f983
 800306c:	44000000 	.word	0x44000000
 8003070:	08007438 	.word	0x08007438

08003074 <arm_radix8_butterfly_f32>:
 8003074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003078:	ed2d 8b10 	vpush	{d8-d15}
 800307c:	b095      	sub	sp, #84	; 0x54
 800307e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8003082:	4603      	mov	r3, r0
 8003084:	3304      	adds	r3, #4
 8003086:	ed9f bab9 	vldr	s22, [pc, #740]	; 800336c <arm_radix8_butterfly_f32+0x2f8>
 800308a:	9012      	str	r0, [sp, #72]	; 0x48
 800308c:	468b      	mov	fp, r1
 800308e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003090:	4689      	mov	r9, r1
 8003092:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8003096:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003098:	960f      	str	r6, [sp, #60]	; 0x3c
 800309a:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800309e:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 80030a2:	eb03 0508 	add.w	r5, r3, r8
 80030a6:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 80030aa:	eb05 040e 	add.w	r4, r5, lr
 80030ae:	0137      	lsls	r7, r6, #4
 80030b0:	eba6 030a 	sub.w	r3, r6, sl
 80030b4:	eb04 000e 	add.w	r0, r4, lr
 80030b8:	44b2      	add	sl, r6
 80030ba:	1d3a      	adds	r2, r7, #4
 80030bc:	9702      	str	r7, [sp, #8]
 80030be:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80030c2:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 80030c6:	ebae 0c06 	sub.w	ip, lr, r6
 80030ca:	9703      	str	r7, [sp, #12]
 80030cc:	eb03 0708 	add.w	r7, r3, r8
 80030d0:	9701      	str	r7, [sp, #4]
 80030d2:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 80030d6:	9706      	str	r7, [sp, #24]
 80030d8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80030da:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80030de:	f10e 0104 	add.w	r1, lr, #4
 80030e2:	4439      	add	r1, r7
 80030e4:	443a      	add	r2, r7
 80030e6:	0137      	lsls	r7, r6, #4
 80030e8:	00f6      	lsls	r6, r6, #3
 80030ea:	9704      	str	r7, [sp, #16]
 80030ec:	9605      	str	r6, [sp, #20]
 80030ee:	9f01      	ldr	r7, [sp, #4]
 80030f0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80030f2:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 80030f6:	f04f 0c00 	mov.w	ip, #0
 80030fa:	edd4 6a00 	vldr	s13, [r4]
 80030fe:	edd7 1a00 	vldr	s3, [r7]
 8003102:	ed16 aa01 	vldr	s20, [r6, #-4]
 8003106:	edd5 5a00 	vldr	s11, [r5]
 800310a:	ed52 9a01 	vldr	s19, [r2, #-4]
 800310e:	ed90 6a00 	vldr	s12, [r0]
 8003112:	ed51 7a01 	vldr	s15, [r1, #-4]
 8003116:	ed93 3a00 	vldr	s6, [r3]
 800311a:	ee39 0a86 	vadd.f32	s0, s19, s12
 800311e:	ee33 2a21 	vadd.f32	s4, s6, s3
 8003122:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8003126:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800312a:	ee35 7a02 	vadd.f32	s14, s10, s4
 800312e:	ee34 4a80 	vadd.f32	s8, s9, s0
 8003132:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003136:	ee74 6a07 	vadd.f32	s13, s8, s14
 800313a:	ee34 4a47 	vsub.f32	s8, s8, s14
 800313e:	ed46 6a01 	vstr	s13, [r6, #-4]
 8003142:	ed85 4a00 	vstr	s8, [r5]
 8003146:	edd1 6a00 	vldr	s13, [r1]
 800314a:	ed94 9a01 	vldr	s18, [r4, #4]
 800314e:	edd3 2a01 	vldr	s5, [r3, #4]
 8003152:	edd7 8a01 	vldr	s17, [r7, #4]
 8003156:	edd6 0a00 	vldr	s1, [r6]
 800315a:	edd5 3a01 	vldr	s7, [r5, #4]
 800315e:	ed90 8a01 	vldr	s16, [r0, #4]
 8003162:	ed92 7a00 	vldr	s14, [r2]
 8003166:	ee33 3a61 	vsub.f32	s6, s6, s3
 800316a:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800316e:	ee72 aae8 	vsub.f32	s21, s5, s17
 8003172:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8003176:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800317a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800317e:	ee34 4a6a 	vsub.f32	s8, s8, s21
 8003182:	ee30 3aa3 	vadd.f32	s6, s1, s7
 8003186:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800318a:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800318e:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8003192:	ee77 0a08 	vadd.f32	s1, s14, s16
 8003196:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800319a:	ee37 7a48 	vsub.f32	s14, s14, s16
 800319e:	ee61 1a8b 	vmul.f32	s3, s3, s22
 80031a2:	ee7a 5a65 	vsub.f32	s11, s20, s11
 80031a6:	ee76 6a89 	vadd.f32	s13, s13, s18
 80031aa:	ee24 4a0b 	vmul.f32	s8, s8, s22
 80031ae:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80031b2:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80031b6:	ee35 5a42 	vsub.f32	s10, s10, s4
 80031ba:	ee36 0aa2 	vadd.f32	s0, s13, s5
 80031be:	ee33 2a20 	vadd.f32	s4, s6, s1
 80031c2:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80031c6:	ee33 3a60 	vsub.f32	s6, s6, s1
 80031ca:	ee75 2aa1 	vadd.f32	s5, s11, s3
 80031ce:	ee77 0a01 	vadd.f32	s1, s14, s2
 80031d2:	ee75 5ae1 	vsub.f32	s11, s11, s3
 80031d6:	ee37 7a41 	vsub.f32	s14, s14, s2
 80031da:	ee73 1a84 	vadd.f32	s3, s7, s8
 80031de:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80031e2:	ee76 3a27 	vadd.f32	s7, s12, s15
 80031e6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80031ea:	ee32 8a00 	vadd.f32	s16, s4, s0
 80031ee:	ee33 1a45 	vsub.f32	s2, s6, s10
 80031f2:	ee32 2a40 	vsub.f32	s4, s4, s0
 80031f6:	ee35 5a03 	vadd.f32	s10, s10, s6
 80031fa:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80031fe:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8003202:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8003206:	ee34 6a67 	vsub.f32	s12, s8, s15
 800320a:	ee75 4a87 	vadd.f32	s9, s11, s14
 800320e:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8003212:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8003216:	ee77 7a84 	vadd.f32	s15, s15, s8
 800321a:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800321e:	44dc      	add	ip, fp
 8003220:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8003224:	45e1      	cmp	r9, ip
 8003226:	ed86 8a00 	vstr	s16, [r6]
 800322a:	ed85 2a01 	vstr	s4, [r5, #4]
 800322e:	4456      	add	r6, sl
 8003230:	ed02 0a01 	vstr	s0, [r2, #-4]
 8003234:	4455      	add	r5, sl
 8003236:	edc0 6a00 	vstr	s13, [r0]
 800323a:	ed82 1a00 	vstr	s2, [r2]
 800323e:	ed80 5a01 	vstr	s10, [r0, #4]
 8003242:	4452      	add	r2, sl
 8003244:	ed01 3a01 	vstr	s6, [r1, #-4]
 8003248:	4450      	add	r0, sl
 800324a:	edc7 2a00 	vstr	s5, [r7]
 800324e:	edc4 4a00 	vstr	s9, [r4]
 8003252:	ed83 7a00 	vstr	s14, [r3]
 8003256:	edc1 5a00 	vstr	s11, [r1]
 800325a:	edc7 3a01 	vstr	s7, [r7, #4]
 800325e:	4451      	add	r1, sl
 8003260:	ed84 6a01 	vstr	s12, [r4, #4]
 8003264:	4457      	add	r7, sl
 8003266:	edc3 7a01 	vstr	s15, [r3, #4]
 800326a:	4454      	add	r4, sl
 800326c:	4453      	add	r3, sl
 800326e:	f63f af44 	bhi.w	80030fa <arm_radix8_butterfly_f32+0x86>
 8003272:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003274:	2b07      	cmp	r3, #7
 8003276:	f240 81b7 	bls.w	80035e8 <arm_radix8_butterfly_f32+0x574>
 800327a:	9b06      	ldr	r3, [sp, #24]
 800327c:	9903      	ldr	r1, [sp, #12]
 800327e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003280:	9e05      	ldr	r6, [sp, #20]
 8003282:	9a04      	ldr	r2, [sp, #16]
 8003284:	f103 0c08 	add.w	ip, r3, #8
 8003288:	9b02      	ldr	r3, [sp, #8]
 800328a:	3108      	adds	r1, #8
 800328c:	f108 0808 	add.w	r8, r8, #8
 8003290:	1841      	adds	r1, r0, r1
 8003292:	3608      	adds	r6, #8
 8003294:	330c      	adds	r3, #12
 8003296:	4604      	mov	r4, r0
 8003298:	4444      	add	r4, r8
 800329a:	18c3      	adds	r3, r0, r3
 800329c:	9109      	str	r1, [sp, #36]	; 0x24
 800329e:	1981      	adds	r1, r0, r6
 80032a0:	f10e 0e08 	add.w	lr, lr, #8
 80032a4:	3208      	adds	r2, #8
 80032a6:	940b      	str	r4, [sp, #44]	; 0x2c
 80032a8:	9107      	str	r1, [sp, #28]
 80032aa:	4604      	mov	r4, r0
 80032ac:	4601      	mov	r1, r0
 80032ae:	9304      	str	r3, [sp, #16]
 80032b0:	f100 030c 	add.w	r3, r0, #12
 80032b4:	4474      	add	r4, lr
 80032b6:	f04f 0801 	mov.w	r8, #1
 80032ba:	1882      	adds	r2, r0, r2
 80032bc:	4461      	add	r1, ip
 80032be:	9305      	str	r3, [sp, #20]
 80032c0:	464b      	mov	r3, r9
 80032c2:	940a      	str	r4, [sp, #40]	; 0x28
 80032c4:	46c1      	mov	r9, r8
 80032c6:	9208      	str	r2, [sp, #32]
 80032c8:	46d8      	mov	r8, fp
 80032ca:	9106      	str	r1, [sp, #24]
 80032cc:	f04f 0e00 	mov.w	lr, #0
 80032d0:	469b      	mov	fp, r3
 80032d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80032d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80032d6:	449e      	add	lr, r3
 80032d8:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80032dc:	441a      	add	r2, r3
 80032de:	920e      	str	r2, [sp, #56]	; 0x38
 80032e0:	441a      	add	r2, r3
 80032e2:	18d4      	adds	r4, r2, r3
 80032e4:	18e5      	adds	r5, r4, r3
 80032e6:	18ee      	adds	r6, r5, r3
 80032e8:	18f7      	adds	r7, r6, r3
 80032ea:	eb07 0c03 	add.w	ip, r7, r3
 80032ee:	920d      	str	r2, [sp, #52]	; 0x34
 80032f0:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 80032f4:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 80032f8:	910c      	str	r1, [sp, #48]	; 0x30
 80032fa:	4419      	add	r1, r3
 80032fc:	9103      	str	r1, [sp, #12]
 80032fe:	4419      	add	r1, r3
 8003300:	18ca      	adds	r2, r1, r3
 8003302:	9202      	str	r2, [sp, #8]
 8003304:	441a      	add	r2, r3
 8003306:	18d0      	adds	r0, r2, r3
 8003308:	ed92 ea01 	vldr	s28, [r2, #4]
 800330c:	9a02      	ldr	r2, [sp, #8]
 800330e:	edd4 7a00 	vldr	s15, [r4]
 8003312:	edd2 da01 	vldr	s27, [r2, #4]
 8003316:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003318:	ed91 da01 	vldr	s26, [r1, #4]
 800331c:	ed92 ca01 	vldr	s24, [r2, #4]
 8003320:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003322:	9903      	ldr	r1, [sp, #12]
 8003324:	edcd 7a03 	vstr	s15, [sp, #12]
 8003328:	edd2 7a00 	vldr	s15, [r2]
 800332c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800332e:	edcd 7a02 	vstr	s15, [sp, #8]
 8003332:	edd2 7a00 	vldr	s15, [r2]
 8003336:	edd0 ea01 	vldr	s29, [r0, #4]
 800333a:	edd1 ca01 	vldr	s25, [r1, #4]
 800333e:	eddc ba00 	vldr	s23, [ip]
 8003342:	edd7 aa00 	vldr	s21, [r7]
 8003346:	ed96 aa00 	vldr	s20, [r6]
 800334a:	edd5 9a00 	vldr	s19, [r5]
 800334e:	edcd 7a01 	vstr	s15, [sp, #4]
 8003352:	4403      	add	r3, r0
 8003354:	ed93 fa01 	vldr	s30, [r3, #4]
 8003358:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800335c:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8003360:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003364:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003368:	46cc      	mov	ip, r9
 800336a:	e001      	b.n	8003370 <arm_radix8_butterfly_f32+0x2fc>
 800336c:	3f3504f3 	.word	0x3f3504f3
 8003370:	ed91 6a00 	vldr	s12, [r1]
 8003374:	ed93 5a00 	vldr	s10, [r3]
 8003378:	edd0 fa00 	vldr	s31, [r0]
 800337c:	edd4 7a00 	vldr	s15, [r4]
 8003380:	ed95 7a00 	vldr	s14, [r5]
 8003384:	ed56 3a01 	vldr	s7, [r6, #-4]
 8003388:	ed17 3a01 	vldr	s6, [r7, #-4]
 800338c:	ed92 2a00 	vldr	s4, [r2]
 8003390:	ed96 0a00 	vldr	s0, [r6]
 8003394:	ee33 8a85 	vadd.f32	s16, s7, s10
 8003398:	ee32 1a06 	vadd.f32	s2, s4, s12
 800339c:	ee33 4a2f 	vadd.f32	s8, s6, s31
 80033a0:	ee77 4a87 	vadd.f32	s9, s15, s14
 80033a4:	ee78 1a04 	vadd.f32	s3, s16, s8
 80033a8:	ee71 6a24 	vadd.f32	s13, s2, s9
 80033ac:	ee32 2a46 	vsub.f32	s4, s4, s12
 80033b0:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80033b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033b8:	ed06 6a01 	vstr	s12, [r6, #-4]
 80033bc:	edd4 8a01 	vldr	s17, [r4, #4]
 80033c0:	ed92 9a01 	vldr	s18, [r2, #4]
 80033c4:	edd7 0a00 	vldr	s1, [r7]
 80033c8:	edd1 2a01 	vldr	s5, [r1, #4]
 80033cc:	ed95 7a01 	vldr	s14, [r5, #4]
 80033d0:	ed93 6a01 	vldr	s12, [r3, #4]
 80033d4:	edd0 5a01 	vldr	s11, [r0, #4]
 80033d8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80033dc:	ee33 3a6f 	vsub.f32	s6, s6, s31
 80033e0:	ee39 5a62 	vsub.f32	s10, s18, s5
 80033e4:	ee78 fac7 	vsub.f32	s31, s17, s14
 80033e8:	ee38 4a44 	vsub.f32	s8, s16, s8
 80033ec:	ee38 7a87 	vadd.f32	s14, s17, s14
 80033f0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80033f4:	ee79 2a22 	vadd.f32	s5, s18, s5
 80033f8:	ee32 9a27 	vadd.f32	s18, s4, s15
 80033fc:	ee72 7a67 	vsub.f32	s15, s4, s15
 8003400:	ee30 2a06 	vadd.f32	s4, s0, s12
 8003404:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8003408:	ee71 4a64 	vsub.f32	s9, s2, s9
 800340c:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8003410:	ee32 1a08 	vadd.f32	s2, s4, s16
 8003414:	ee72 fa87 	vadd.f32	s31, s5, s14
 8003418:	ee32 2a48 	vsub.f32	s4, s4, s16
 800341c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8003420:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8003424:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8003428:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800342c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8003430:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8003434:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8003438:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800343c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8003440:	ee74 0a22 	vadd.f32	s1, s8, s5
 8003444:	ee36 0a28 	vadd.f32	s0, s12, s17
 8003448:	ee74 2a62 	vsub.f32	s5, s8, s5
 800344c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8003450:	ee32 4a64 	vsub.f32	s8, s4, s9
 8003454:	ee73 8a09 	vadd.f32	s17, s6, s18
 8003458:	ee74 4a82 	vadd.f32	s9, s9, s4
 800345c:	ee33 9a49 	vsub.f32	s18, s6, s18
 8003460:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8003464:	ee35 3a85 	vadd.f32	s6, s11, s10
 8003468:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800346c:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8003470:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8003474:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8003478:	ee30 7a68 	vsub.f32	s14, s0, s17
 800347c:	ee35 8a03 	vadd.f32	s16, s10, s6
 8003480:	ee38 0a80 	vadd.f32	s0, s17, s0
 8003484:	ee73 3a82 	vadd.f32	s7, s7, s4
 8003488:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800348c:	ed9d 2a01 	vldr	s4, [sp, #4]
 8003490:	eddd 1a02 	vldr	s3, [sp, #8]
 8003494:	ee35 5a43 	vsub.f32	s10, s10, s6
 8003498:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800349c:	ee37 3aa5 	vadd.f32	s6, s15, s11
 80034a0:	ee21 1aa0 	vmul.f32	s2, s3, s1
 80034a4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80034a8:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 80034ac:	ee76 5a49 	vsub.f32	s11, s12, s18
 80034b0:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 80034b4:	ee39 6a06 	vadd.f32	s12, s18, s12
 80034b8:	ee2c 9a84 	vmul.f32	s18, s25, s8
 80034bc:	ee21 4a84 	vmul.f32	s8, s3, s8
 80034c0:	ee6c 1a07 	vmul.f32	s3, s24, s14
 80034c4:	ee22 7a07 	vmul.f32	s14, s4, s14
 80034c8:	ee22 2a08 	vmul.f32	s4, s4, s16
 80034cc:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80034d0:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80034d4:	ee31 1a09 	vadd.f32	s2, s2, s18
 80034d8:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 80034dc:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 80034e0:	ee74 0a60 	vsub.f32	s1, s8, s1
 80034e4:	ee37 7a48 	vsub.f32	s14, s14, s16
 80034e8:	ee2f 4a00 	vmul.f32	s8, s30, s0
 80034ec:	ee2b 8a85 	vmul.f32	s16, s23, s10
 80034f0:	ee72 1a21 	vadd.f32	s3, s4, s3
 80034f4:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 80034f8:	ee38 2a89 	vadd.f32	s4, s17, s18
 80034fc:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8003500:	ee38 8a04 	vadd.f32	s16, s16, s8
 8003504:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8003508:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800350c:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8003510:	eddd 5a03 	vldr	s11, [sp, #12]
 8003514:	edc6 fa00 	vstr	s31, [r6]
 8003518:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800351c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8003520:	ee30 0a45 	vsub.f32	s0, s0, s10
 8003524:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8003528:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800352c:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8003530:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8003534:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8003538:	ee25 6a86 	vmul.f32	s12, s11, s12
 800353c:	ee74 4a89 	vadd.f32	s9, s9, s18
 8003540:	ee34 3a43 	vsub.f32	s6, s8, s6
 8003544:	ee78 8a85 	vadd.f32	s17, s17, s10
 8003548:	ee36 6a67 	vsub.f32	s12, s12, s15
 800354c:	44c4      	add	ip, r8
 800354e:	45e3      	cmp	fp, ip
 8003550:	edc3 3a00 	vstr	s7, [r3]
 8003554:	edc3 6a01 	vstr	s13, [r3, #4]
 8003558:	4456      	add	r6, sl
 800355a:	ed07 1a01 	vstr	s2, [r7, #-4]
 800355e:	edc7 0a00 	vstr	s1, [r7]
 8003562:	4453      	add	r3, sl
 8003564:	ed80 2a00 	vstr	s4, [r0]
 8003568:	edc0 2a01 	vstr	s5, [r0, #4]
 800356c:	4457      	add	r7, sl
 800356e:	edc2 1a00 	vstr	s3, [r2]
 8003572:	ed82 7a01 	vstr	s14, [r2, #4]
 8003576:	4450      	add	r0, sl
 8003578:	ed85 8a00 	vstr	s16, [r5]
 800357c:	ed85 0a01 	vstr	s0, [r5, #4]
 8003580:	4452      	add	r2, sl
 8003582:	edc1 4a00 	vstr	s9, [r1]
 8003586:	4455      	add	r5, sl
 8003588:	ed81 3a01 	vstr	s6, [r1, #4]
 800358c:	edc4 8a00 	vstr	s17, [r4]
 8003590:	ed84 6a01 	vstr	s12, [r4, #4]
 8003594:	4451      	add	r1, sl
 8003596:	4454      	add	r4, sl
 8003598:	f63f aeea 	bhi.w	8003370 <arm_radix8_butterfly_f32+0x2fc>
 800359c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800359e:	3308      	adds	r3, #8
 80035a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80035a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035a4:	3308      	adds	r3, #8
 80035a6:	930a      	str	r3, [sp, #40]	; 0x28
 80035a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035aa:	3308      	adds	r3, #8
 80035ac:	9309      	str	r3, [sp, #36]	; 0x24
 80035ae:	9b08      	ldr	r3, [sp, #32]
 80035b0:	3308      	adds	r3, #8
 80035b2:	9308      	str	r3, [sp, #32]
 80035b4:	9b07      	ldr	r3, [sp, #28]
 80035b6:	3308      	adds	r3, #8
 80035b8:	9307      	str	r3, [sp, #28]
 80035ba:	9b06      	ldr	r3, [sp, #24]
 80035bc:	3308      	adds	r3, #8
 80035be:	9306      	str	r3, [sp, #24]
 80035c0:	9b05      	ldr	r3, [sp, #20]
 80035c2:	3308      	adds	r3, #8
 80035c4:	9305      	str	r3, [sp, #20]
 80035c6:	9b04      	ldr	r3, [sp, #16]
 80035c8:	3308      	adds	r3, #8
 80035ca:	9304      	str	r3, [sp, #16]
 80035cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80035ce:	f109 0901 	add.w	r9, r9, #1
 80035d2:	454b      	cmp	r3, r9
 80035d4:	f47f ae7d 	bne.w	80032d2 <arm_radix8_butterfly_f32+0x25e>
 80035d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	b29b      	uxth	r3, r3
 80035de:	46d9      	mov	r9, fp
 80035e0:	9310      	str	r3, [sp, #64]	; 0x40
 80035e2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80035e6:	e554      	b.n	8003092 <arm_radix8_butterfly_f32+0x1e>
 80035e8:	b015      	add	sp, #84	; 0x54
 80035ea:	ecbd 8b10 	vpop	{d8-d15}
 80035ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035f2:	bf00      	nop

080035f4 <__errno>:
 80035f4:	4b01      	ldr	r3, [pc, #4]	; (80035fc <__errno+0x8>)
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	2000000c 	.word	0x2000000c

08003600 <__libc_init_array>:
 8003600:	b570      	push	{r4, r5, r6, lr}
 8003602:	4e0d      	ldr	r6, [pc, #52]	; (8003638 <__libc_init_array+0x38>)
 8003604:	4c0d      	ldr	r4, [pc, #52]	; (800363c <__libc_init_array+0x3c>)
 8003606:	1ba4      	subs	r4, r4, r6
 8003608:	10a4      	asrs	r4, r4, #2
 800360a:	2500      	movs	r5, #0
 800360c:	42a5      	cmp	r5, r4
 800360e:	d109      	bne.n	8003624 <__libc_init_array+0x24>
 8003610:	4e0b      	ldr	r6, [pc, #44]	; (8003640 <__libc_init_array+0x40>)
 8003612:	4c0c      	ldr	r4, [pc, #48]	; (8003644 <__libc_init_array+0x44>)
 8003614:	f000 fb6e 	bl	8003cf4 <_init>
 8003618:	1ba4      	subs	r4, r4, r6
 800361a:	10a4      	asrs	r4, r4, #2
 800361c:	2500      	movs	r5, #0
 800361e:	42a5      	cmp	r5, r4
 8003620:	d105      	bne.n	800362e <__libc_init_array+0x2e>
 8003622:	bd70      	pop	{r4, r5, r6, pc}
 8003624:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003628:	4798      	blx	r3
 800362a:	3501      	adds	r5, #1
 800362c:	e7ee      	b.n	800360c <__libc_init_array+0xc>
 800362e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003632:	4798      	blx	r3
 8003634:	3501      	adds	r5, #1
 8003636:	e7f2      	b.n	800361e <__libc_init_array+0x1e>
 8003638:	08017748 	.word	0x08017748
 800363c:	08017748 	.word	0x08017748
 8003640:	08017748 	.word	0x08017748
 8003644:	0801774c 	.word	0x0801774c

08003648 <malloc>:
 8003648:	4b02      	ldr	r3, [pc, #8]	; (8003654 <malloc+0xc>)
 800364a:	4601      	mov	r1, r0
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	f000 b817 	b.w	8003680 <_malloc_r>
 8003652:	bf00      	nop
 8003654:	2000000c 	.word	0x2000000c

08003658 <memcpy>:
 8003658:	b510      	push	{r4, lr}
 800365a:	1e43      	subs	r3, r0, #1
 800365c:	440a      	add	r2, r1
 800365e:	4291      	cmp	r1, r2
 8003660:	d100      	bne.n	8003664 <memcpy+0xc>
 8003662:	bd10      	pop	{r4, pc}
 8003664:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003668:	f803 4f01 	strb.w	r4, [r3, #1]!
 800366c:	e7f7      	b.n	800365e <memcpy+0x6>

0800366e <memset>:
 800366e:	4402      	add	r2, r0
 8003670:	4603      	mov	r3, r0
 8003672:	4293      	cmp	r3, r2
 8003674:	d100      	bne.n	8003678 <memset+0xa>
 8003676:	4770      	bx	lr
 8003678:	f803 1b01 	strb.w	r1, [r3], #1
 800367c:	e7f9      	b.n	8003672 <memset+0x4>
	...

08003680 <_malloc_r>:
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	1ccd      	adds	r5, r1, #3
 8003684:	f025 0503 	bic.w	r5, r5, #3
 8003688:	3508      	adds	r5, #8
 800368a:	2d0c      	cmp	r5, #12
 800368c:	bf38      	it	cc
 800368e:	250c      	movcc	r5, #12
 8003690:	2d00      	cmp	r5, #0
 8003692:	4606      	mov	r6, r0
 8003694:	db01      	blt.n	800369a <_malloc_r+0x1a>
 8003696:	42a9      	cmp	r1, r5
 8003698:	d903      	bls.n	80036a2 <_malloc_r+0x22>
 800369a:	230c      	movs	r3, #12
 800369c:	6033      	str	r3, [r6, #0]
 800369e:	2000      	movs	r0, #0
 80036a0:	bd70      	pop	{r4, r5, r6, pc}
 80036a2:	f000 f857 	bl	8003754 <__malloc_lock>
 80036a6:	4a21      	ldr	r2, [pc, #132]	; (800372c <_malloc_r+0xac>)
 80036a8:	6814      	ldr	r4, [r2, #0]
 80036aa:	4621      	mov	r1, r4
 80036ac:	b991      	cbnz	r1, 80036d4 <_malloc_r+0x54>
 80036ae:	4c20      	ldr	r4, [pc, #128]	; (8003730 <_malloc_r+0xb0>)
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	b91b      	cbnz	r3, 80036bc <_malloc_r+0x3c>
 80036b4:	4630      	mov	r0, r6
 80036b6:	f000 f83d 	bl	8003734 <_sbrk_r>
 80036ba:	6020      	str	r0, [r4, #0]
 80036bc:	4629      	mov	r1, r5
 80036be:	4630      	mov	r0, r6
 80036c0:	f000 f838 	bl	8003734 <_sbrk_r>
 80036c4:	1c43      	adds	r3, r0, #1
 80036c6:	d124      	bne.n	8003712 <_malloc_r+0x92>
 80036c8:	230c      	movs	r3, #12
 80036ca:	6033      	str	r3, [r6, #0]
 80036cc:	4630      	mov	r0, r6
 80036ce:	f000 f842 	bl	8003756 <__malloc_unlock>
 80036d2:	e7e4      	b.n	800369e <_malloc_r+0x1e>
 80036d4:	680b      	ldr	r3, [r1, #0]
 80036d6:	1b5b      	subs	r3, r3, r5
 80036d8:	d418      	bmi.n	800370c <_malloc_r+0x8c>
 80036da:	2b0b      	cmp	r3, #11
 80036dc:	d90f      	bls.n	80036fe <_malloc_r+0x7e>
 80036de:	600b      	str	r3, [r1, #0]
 80036e0:	50cd      	str	r5, [r1, r3]
 80036e2:	18cc      	adds	r4, r1, r3
 80036e4:	4630      	mov	r0, r6
 80036e6:	f000 f836 	bl	8003756 <__malloc_unlock>
 80036ea:	f104 000b 	add.w	r0, r4, #11
 80036ee:	1d23      	adds	r3, r4, #4
 80036f0:	f020 0007 	bic.w	r0, r0, #7
 80036f4:	1ac3      	subs	r3, r0, r3
 80036f6:	d0d3      	beq.n	80036a0 <_malloc_r+0x20>
 80036f8:	425a      	negs	r2, r3
 80036fa:	50e2      	str	r2, [r4, r3]
 80036fc:	e7d0      	b.n	80036a0 <_malloc_r+0x20>
 80036fe:	428c      	cmp	r4, r1
 8003700:	684b      	ldr	r3, [r1, #4]
 8003702:	bf16      	itet	ne
 8003704:	6063      	strne	r3, [r4, #4]
 8003706:	6013      	streq	r3, [r2, #0]
 8003708:	460c      	movne	r4, r1
 800370a:	e7eb      	b.n	80036e4 <_malloc_r+0x64>
 800370c:	460c      	mov	r4, r1
 800370e:	6849      	ldr	r1, [r1, #4]
 8003710:	e7cc      	b.n	80036ac <_malloc_r+0x2c>
 8003712:	1cc4      	adds	r4, r0, #3
 8003714:	f024 0403 	bic.w	r4, r4, #3
 8003718:	42a0      	cmp	r0, r4
 800371a:	d005      	beq.n	8003728 <_malloc_r+0xa8>
 800371c:	1a21      	subs	r1, r4, r0
 800371e:	4630      	mov	r0, r6
 8003720:	f000 f808 	bl	8003734 <_sbrk_r>
 8003724:	3001      	adds	r0, #1
 8003726:	d0cf      	beq.n	80036c8 <_malloc_r+0x48>
 8003728:	6025      	str	r5, [r4, #0]
 800372a:	e7db      	b.n	80036e4 <_malloc_r+0x64>
 800372c:	20000094 	.word	0x20000094
 8003730:	20000098 	.word	0x20000098

08003734 <_sbrk_r>:
 8003734:	b538      	push	{r3, r4, r5, lr}
 8003736:	4c06      	ldr	r4, [pc, #24]	; (8003750 <_sbrk_r+0x1c>)
 8003738:	2300      	movs	r3, #0
 800373a:	4605      	mov	r5, r0
 800373c:	4608      	mov	r0, r1
 800373e:	6023      	str	r3, [r4, #0]
 8003740:	f7fd fd76 	bl	8001230 <_sbrk>
 8003744:	1c43      	adds	r3, r0, #1
 8003746:	d102      	bne.n	800374e <_sbrk_r+0x1a>
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	b103      	cbz	r3, 800374e <_sbrk_r+0x1a>
 800374c:	602b      	str	r3, [r5, #0]
 800374e:	bd38      	pop	{r3, r4, r5, pc}
 8003750:	200000a0 	.word	0x200000a0

08003754 <__malloc_lock>:
 8003754:	4770      	bx	lr

08003756 <__malloc_unlock>:
 8003756:	4770      	bx	lr

08003758 <sqrt>:
 8003758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800375c:	ed2d 8b02 	vpush	{d8}
 8003760:	b08b      	sub	sp, #44	; 0x2c
 8003762:	ec55 4b10 	vmov	r4, r5, d0
 8003766:	f000 f8c7 	bl	80038f8 <__ieee754_sqrt>
 800376a:	4b26      	ldr	r3, [pc, #152]	; (8003804 <sqrt+0xac>)
 800376c:	eeb0 8a40 	vmov.f32	s16, s0
 8003770:	eef0 8a60 	vmov.f32	s17, s1
 8003774:	f993 6000 	ldrsb.w	r6, [r3]
 8003778:	1c73      	adds	r3, r6, #1
 800377a:	d02a      	beq.n	80037d2 <sqrt+0x7a>
 800377c:	4622      	mov	r2, r4
 800377e:	462b      	mov	r3, r5
 8003780:	4620      	mov	r0, r4
 8003782:	4629      	mov	r1, r5
 8003784:	f7fd f992 	bl	8000aac <__aeabi_dcmpun>
 8003788:	4607      	mov	r7, r0
 800378a:	bb10      	cbnz	r0, 80037d2 <sqrt+0x7a>
 800378c:	f04f 0800 	mov.w	r8, #0
 8003790:	f04f 0900 	mov.w	r9, #0
 8003794:	4642      	mov	r2, r8
 8003796:	464b      	mov	r3, r9
 8003798:	4620      	mov	r0, r4
 800379a:	4629      	mov	r1, r5
 800379c:	f7fd f95e 	bl	8000a5c <__aeabi_dcmplt>
 80037a0:	b1b8      	cbz	r0, 80037d2 <sqrt+0x7a>
 80037a2:	2301      	movs	r3, #1
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	4b18      	ldr	r3, [pc, #96]	; (8003808 <sqrt+0xb0>)
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	9708      	str	r7, [sp, #32]
 80037ac:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80037b0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80037b4:	b9b6      	cbnz	r6, 80037e4 <sqrt+0x8c>
 80037b6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80037ba:	4668      	mov	r0, sp
 80037bc:	f000 f9a2 	bl	8003b04 <matherr>
 80037c0:	b1d0      	cbz	r0, 80037f8 <sqrt+0xa0>
 80037c2:	9b08      	ldr	r3, [sp, #32]
 80037c4:	b11b      	cbz	r3, 80037ce <sqrt+0x76>
 80037c6:	f7ff ff15 	bl	80035f4 <__errno>
 80037ca:	9b08      	ldr	r3, [sp, #32]
 80037cc:	6003      	str	r3, [r0, #0]
 80037ce:	ed9d 8b06 	vldr	d8, [sp, #24]
 80037d2:	eeb0 0a48 	vmov.f32	s0, s16
 80037d6:	eef0 0a68 	vmov.f32	s1, s17
 80037da:	b00b      	add	sp, #44	; 0x2c
 80037dc:	ecbd 8b02 	vpop	{d8}
 80037e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037e4:	4642      	mov	r2, r8
 80037e6:	464b      	mov	r3, r9
 80037e8:	4640      	mov	r0, r8
 80037ea:	4649      	mov	r1, r9
 80037ec:	f7fc ffee 	bl	80007cc <__aeabi_ddiv>
 80037f0:	2e02      	cmp	r6, #2
 80037f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80037f6:	d1e0      	bne.n	80037ba <sqrt+0x62>
 80037f8:	f7ff fefc 	bl	80035f4 <__errno>
 80037fc:	2321      	movs	r3, #33	; 0x21
 80037fe:	6003      	str	r3, [r0, #0]
 8003800:	e7df      	b.n	80037c2 <sqrt+0x6a>
 8003802:	bf00      	nop
 8003804:	20000070 	.word	0x20000070
 8003808:	0801773c 	.word	0x0801773c

0800380c <log10f>:
 800380c:	b510      	push	{r4, lr}
 800380e:	ed2d 8b02 	vpush	{d8}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	eeb0 8a40 	vmov.f32	s16, s0
 8003818:	f000 f91e 	bl	8003a58 <__ieee754_log10f>
 800381c:	4b31      	ldr	r3, [pc, #196]	; (80038e4 <log10f+0xd8>)
 800381e:	f993 4000 	ldrsb.w	r4, [r3]
 8003822:	1c63      	adds	r3, r4, #1
 8003824:	d059      	beq.n	80038da <log10f+0xce>
 8003826:	eeb4 8a48 	vcmp.f32	s16, s16
 800382a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382e:	d654      	bvs.n	80038da <log10f+0xce>
 8003830:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003838:	d84f      	bhi.n	80038da <log10f+0xce>
 800383a:	4b2b      	ldr	r3, [pc, #172]	; (80038e8 <log10f+0xdc>)
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	ee18 0a10 	vmov	r0, s16
 8003842:	2300      	movs	r3, #0
 8003844:	9308      	str	r3, [sp, #32]
 8003846:	f7fc fe3f 	bl	80004c8 <__aeabi_f2d>
 800384a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800384e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003852:	b994      	cbnz	r4, 800387a <log10f+0x6e>
 8003854:	4b25      	ldr	r3, [pc, #148]	; (80038ec <log10f+0xe0>)
 8003856:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800385a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800385e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003862:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003866:	d025      	beq.n	80038b4 <log10f+0xa8>
 8003868:	2301      	movs	r3, #1
 800386a:	2c02      	cmp	r4, #2
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	d116      	bne.n	800389e <log10f+0x92>
 8003870:	f7ff fec0 	bl	80035f4 <__errno>
 8003874:	2321      	movs	r3, #33	; 0x21
 8003876:	6003      	str	r3, [r0, #0]
 8003878:	e016      	b.n	80038a8 <log10f+0x9c>
 800387a:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <log10f+0xe4>)
 800387c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003880:	2200      	movs	r2, #0
 8003882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003886:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800388a:	d1ed      	bne.n	8003868 <log10f+0x5c>
 800388c:	2302      	movs	r3, #2
 800388e:	429c      	cmp	r4, r3
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	d111      	bne.n	80038b8 <log10f+0xac>
 8003894:	f7ff feae 	bl	80035f4 <__errno>
 8003898:	2322      	movs	r3, #34	; 0x22
 800389a:	6003      	str	r3, [r0, #0]
 800389c:	e011      	b.n	80038c2 <log10f+0xb6>
 800389e:	4668      	mov	r0, sp
 80038a0:	f000 f930 	bl	8003b04 <matherr>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d0e3      	beq.n	8003870 <log10f+0x64>
 80038a8:	4812      	ldr	r0, [pc, #72]	; (80038f4 <log10f+0xe8>)
 80038aa:	f000 f92d 	bl	8003b08 <nan>
 80038ae:	ed8d 0b06 	vstr	d0, [sp, #24]
 80038b2:	e006      	b.n	80038c2 <log10f+0xb6>
 80038b4:	2302      	movs	r3, #2
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	4668      	mov	r0, sp
 80038ba:	f000 f923 	bl	8003b04 <matherr>
 80038be:	2800      	cmp	r0, #0
 80038c0:	d0e8      	beq.n	8003894 <log10f+0x88>
 80038c2:	9b08      	ldr	r3, [sp, #32]
 80038c4:	b11b      	cbz	r3, 80038ce <log10f+0xc2>
 80038c6:	f7ff fe95 	bl	80035f4 <__errno>
 80038ca:	9b08      	ldr	r3, [sp, #32]
 80038cc:	6003      	str	r3, [r0, #0]
 80038ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80038d2:	f7fd f929 	bl	8000b28 <__aeabi_d2f>
 80038d6:	ee00 0a10 	vmov	s0, r0
 80038da:	b00a      	add	sp, #40	; 0x28
 80038dc:	ecbd 8b02 	vpop	{d8}
 80038e0:	bd10      	pop	{r4, pc}
 80038e2:	bf00      	nop
 80038e4:	20000070 	.word	0x20000070
 80038e8:	08017741 	.word	0x08017741
 80038ec:	c7efffff 	.word	0xc7efffff
 80038f0:	fff00000 	.word	0xfff00000
 80038f4:	08017747 	.word	0x08017747

080038f8 <__ieee754_sqrt>:
 80038f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038fc:	4955      	ldr	r1, [pc, #340]	; (8003a54 <__ieee754_sqrt+0x15c>)
 80038fe:	ec55 4b10 	vmov	r4, r5, d0
 8003902:	43a9      	bics	r1, r5
 8003904:	462b      	mov	r3, r5
 8003906:	462a      	mov	r2, r5
 8003908:	d112      	bne.n	8003930 <__ieee754_sqrt+0x38>
 800390a:	ee10 2a10 	vmov	r2, s0
 800390e:	ee10 0a10 	vmov	r0, s0
 8003912:	4629      	mov	r1, r5
 8003914:	f7fc fe30 	bl	8000578 <__aeabi_dmul>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4620      	mov	r0, r4
 800391e:	4629      	mov	r1, r5
 8003920:	f7fc fc74 	bl	800020c <__adddf3>
 8003924:	4604      	mov	r4, r0
 8003926:	460d      	mov	r5, r1
 8003928:	ec45 4b10 	vmov	d0, r4, r5
 800392c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003930:	2d00      	cmp	r5, #0
 8003932:	ee10 0a10 	vmov	r0, s0
 8003936:	4621      	mov	r1, r4
 8003938:	dc0f      	bgt.n	800395a <__ieee754_sqrt+0x62>
 800393a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800393e:	4330      	orrs	r0, r6
 8003940:	d0f2      	beq.n	8003928 <__ieee754_sqrt+0x30>
 8003942:	b155      	cbz	r5, 800395a <__ieee754_sqrt+0x62>
 8003944:	ee10 2a10 	vmov	r2, s0
 8003948:	4620      	mov	r0, r4
 800394a:	4629      	mov	r1, r5
 800394c:	f7fc fc5c 	bl	8000208 <__aeabi_dsub>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	f7fc ff3a 	bl	80007cc <__aeabi_ddiv>
 8003958:	e7e4      	b.n	8003924 <__ieee754_sqrt+0x2c>
 800395a:	151b      	asrs	r3, r3, #20
 800395c:	d073      	beq.n	8003a46 <__ieee754_sqrt+0x14e>
 800395e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003962:	07dd      	lsls	r5, r3, #31
 8003964:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003968:	bf48      	it	mi
 800396a:	0fc8      	lsrmi	r0, r1, #31
 800396c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003970:	bf44      	itt	mi
 8003972:	0049      	lslmi	r1, r1, #1
 8003974:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8003978:	2500      	movs	r5, #0
 800397a:	1058      	asrs	r0, r3, #1
 800397c:	0fcb      	lsrs	r3, r1, #31
 800397e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8003982:	0049      	lsls	r1, r1, #1
 8003984:	2316      	movs	r3, #22
 8003986:	462c      	mov	r4, r5
 8003988:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800398c:	19a7      	adds	r7, r4, r6
 800398e:	4297      	cmp	r7, r2
 8003990:	bfde      	ittt	le
 8003992:	19bc      	addle	r4, r7, r6
 8003994:	1bd2      	suble	r2, r2, r7
 8003996:	19ad      	addle	r5, r5, r6
 8003998:	0fcf      	lsrs	r7, r1, #31
 800399a:	3b01      	subs	r3, #1
 800399c:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80039a0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80039a4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80039a8:	d1f0      	bne.n	800398c <__ieee754_sqrt+0x94>
 80039aa:	f04f 0c20 	mov.w	ip, #32
 80039ae:	469e      	mov	lr, r3
 80039b0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80039b4:	42a2      	cmp	r2, r4
 80039b6:	eb06 070e 	add.w	r7, r6, lr
 80039ba:	dc02      	bgt.n	80039c2 <__ieee754_sqrt+0xca>
 80039bc:	d112      	bne.n	80039e4 <__ieee754_sqrt+0xec>
 80039be:	428f      	cmp	r7, r1
 80039c0:	d810      	bhi.n	80039e4 <__ieee754_sqrt+0xec>
 80039c2:	2f00      	cmp	r7, #0
 80039c4:	eb07 0e06 	add.w	lr, r7, r6
 80039c8:	da42      	bge.n	8003a50 <__ieee754_sqrt+0x158>
 80039ca:	f1be 0f00 	cmp.w	lr, #0
 80039ce:	db3f      	blt.n	8003a50 <__ieee754_sqrt+0x158>
 80039d0:	f104 0801 	add.w	r8, r4, #1
 80039d4:	1b12      	subs	r2, r2, r4
 80039d6:	428f      	cmp	r7, r1
 80039d8:	bf88      	it	hi
 80039da:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80039de:	1bc9      	subs	r1, r1, r7
 80039e0:	4433      	add	r3, r6
 80039e2:	4644      	mov	r4, r8
 80039e4:	0052      	lsls	r2, r2, #1
 80039e6:	f1bc 0c01 	subs.w	ip, ip, #1
 80039ea:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80039ee:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80039f2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80039f6:	d1dd      	bne.n	80039b4 <__ieee754_sqrt+0xbc>
 80039f8:	430a      	orrs	r2, r1
 80039fa:	d006      	beq.n	8003a0a <__ieee754_sqrt+0x112>
 80039fc:	1c5c      	adds	r4, r3, #1
 80039fe:	bf13      	iteet	ne
 8003a00:	3301      	addne	r3, #1
 8003a02:	3501      	addeq	r5, #1
 8003a04:	4663      	moveq	r3, ip
 8003a06:	f023 0301 	bicne.w	r3, r3, #1
 8003a0a:	106a      	asrs	r2, r5, #1
 8003a0c:	085b      	lsrs	r3, r3, #1
 8003a0e:	07e9      	lsls	r1, r5, #31
 8003a10:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8003a14:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8003a18:	bf48      	it	mi
 8003a1a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8003a1e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8003a22:	461c      	mov	r4, r3
 8003a24:	e780      	b.n	8003928 <__ieee754_sqrt+0x30>
 8003a26:	0aca      	lsrs	r2, r1, #11
 8003a28:	3815      	subs	r0, #21
 8003a2a:	0549      	lsls	r1, r1, #21
 8003a2c:	2a00      	cmp	r2, #0
 8003a2e:	d0fa      	beq.n	8003a26 <__ieee754_sqrt+0x12e>
 8003a30:	02d6      	lsls	r6, r2, #11
 8003a32:	d50a      	bpl.n	8003a4a <__ieee754_sqrt+0x152>
 8003a34:	f1c3 0420 	rsb	r4, r3, #32
 8003a38:	fa21 f404 	lsr.w	r4, r1, r4
 8003a3c:	1e5d      	subs	r5, r3, #1
 8003a3e:	4099      	lsls	r1, r3
 8003a40:	4322      	orrs	r2, r4
 8003a42:	1b43      	subs	r3, r0, r5
 8003a44:	e78b      	b.n	800395e <__ieee754_sqrt+0x66>
 8003a46:	4618      	mov	r0, r3
 8003a48:	e7f0      	b.n	8003a2c <__ieee754_sqrt+0x134>
 8003a4a:	0052      	lsls	r2, r2, #1
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	e7ef      	b.n	8003a30 <__ieee754_sqrt+0x138>
 8003a50:	46a0      	mov	r8, r4
 8003a52:	e7bf      	b.n	80039d4 <__ieee754_sqrt+0xdc>
 8003a54:	7ff00000 	.word	0x7ff00000

08003a58 <__ieee754_log10f>:
 8003a58:	b508      	push	{r3, lr}
 8003a5a:	ee10 2a10 	vmov	r2, s0
 8003a5e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8003a62:	ed2d 8b02 	vpush	{d8}
 8003a66:	d108      	bne.n	8003a7a <__ieee754_log10f+0x22>
 8003a68:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003aec <__ieee754_log10f+0x94>
 8003a6c:	eddf 7a20 	vldr	s15, [pc, #128]	; 8003af0 <__ieee754_log10f+0x98>
 8003a70:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8003a74:	ecbd 8b02 	vpop	{d8}
 8003a78:	bd08      	pop	{r3, pc}
 8003a7a:	2a00      	cmp	r2, #0
 8003a7c:	da02      	bge.n	8003a84 <__ieee754_log10f+0x2c>
 8003a7e:	ee30 7a40 	vsub.f32	s14, s0, s0
 8003a82:	e7f3      	b.n	8003a6c <__ieee754_log10f+0x14>
 8003a84:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8003a88:	db02      	blt.n	8003a90 <__ieee754_log10f+0x38>
 8003a8a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003a8e:	e7f1      	b.n	8003a74 <__ieee754_log10f+0x1c>
 8003a90:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8003a94:	bfbf      	itttt	lt
 8003a96:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 8003af4 <__ieee754_log10f+0x9c>
 8003a9a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8003a9e:	f06f 0118 	mvnlt.w	r1, #24
 8003aa2:	ee17 2a90 	vmovlt	r2, s15
 8003aa6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8003aaa:	bfa8      	it	ge
 8003aac:	2100      	movge	r1, #0
 8003aae:	3b7f      	subs	r3, #127	; 0x7f
 8003ab0:	440b      	add	r3, r1
 8003ab2:	0fd9      	lsrs	r1, r3, #31
 8003ab4:	440b      	add	r3, r1
 8003ab6:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8003aba:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 8003ac6:	ee00 3a10 	vmov	s0, r3
 8003aca:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003ace:	f000 f823 	bl	8003b18 <__ieee754_logf>
 8003ad2:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003af8 <__ieee754_log10f+0xa0>
 8003ad6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003ada:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003afc <__ieee754_log10f+0xa4>
 8003ade:	eea8 0a27 	vfma.f32	s0, s16, s15
 8003ae2:	eddf 7a07 	vldr	s15, [pc, #28]	; 8003b00 <__ieee754_log10f+0xa8>
 8003ae6:	eea8 0a27 	vfma.f32	s0, s16, s15
 8003aea:	e7c3      	b.n	8003a74 <__ieee754_log10f+0x1c>
 8003aec:	cc000000 	.word	0xcc000000
 8003af0:	00000000 	.word	0x00000000
 8003af4:	4c000000 	.word	0x4c000000
 8003af8:	3ede5bd9 	.word	0x3ede5bd9
 8003afc:	355427db 	.word	0x355427db
 8003b00:	3e9a2080 	.word	0x3e9a2080

08003b04 <matherr>:
 8003b04:	2000      	movs	r0, #0
 8003b06:	4770      	bx	lr

08003b08 <nan>:
 8003b08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8003b10 <nan+0x8>
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	00000000 	.word	0x00000000
 8003b14:	7ff80000 	.word	0x7ff80000

08003b18 <__ieee754_logf>:
 8003b18:	ee10 3a10 	vmov	r3, s0
 8003b1c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8003b20:	d106      	bne.n	8003b30 <__ieee754_logf+0x18>
 8003b22:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8003cb8 <__ieee754_logf+0x1a0>
 8003b26:	eddf 7a65 	vldr	s15, [pc, #404]	; 8003cbc <__ieee754_logf+0x1a4>
 8003b2a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8003b2e:	4770      	bx	lr
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	da02      	bge.n	8003b3a <__ieee754_logf+0x22>
 8003b34:	ee30 7a40 	vsub.f32	s14, s0, s0
 8003b38:	e7f5      	b.n	8003b26 <__ieee754_logf+0xe>
 8003b3a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003b3e:	db02      	blt.n	8003b46 <__ieee754_logf+0x2e>
 8003b40:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003b44:	4770      	bx	lr
 8003b46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b4a:	bfbf      	itttt	lt
 8003b4c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8003cc0 <__ieee754_logf+0x1a8>
 8003b50:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8003b54:	f06f 0118 	mvnlt.w	r1, #24
 8003b58:	ee17 3a90 	vmovlt	r3, s15
 8003b5c:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8003b60:	bfa8      	it	ge
 8003b62:	2100      	movge	r1, #0
 8003b64:	3a7f      	subs	r2, #127	; 0x7f
 8003b66:	440a      	add	r2, r1
 8003b68:	4956      	ldr	r1, [pc, #344]	; (8003cc4 <__ieee754_logf+0x1ac>)
 8003b6a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003b6e:	4419      	add	r1, r3
 8003b70:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8003b74:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 8003b78:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8003b7c:	4319      	orrs	r1, r3
 8003b7e:	ee07 1a90 	vmov	s15, r1
 8003b82:	f103 010f 	add.w	r1, r3, #15
 8003b86:	f3c1 0116 	ubfx	r1, r1, #0, #23
 8003b8a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003b8e:	290f      	cmp	r1, #15
 8003b90:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8003b94:	dc31      	bgt.n	8003bfa <__ieee754_logf+0xe2>
 8003b96:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9e:	d10f      	bne.n	8003bc0 <__ieee754_logf+0xa8>
 8003ba0:	2a00      	cmp	r2, #0
 8003ba2:	f000 8085 	beq.w	8003cb0 <__ieee754_logf+0x198>
 8003ba6:	ee07 2a90 	vmov	s15, r2
 8003baa:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8003cc8 <__ieee754_logf+0x1b0>
 8003bae:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003ccc <__ieee754_logf+0x1b4>
 8003bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bb6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003bba:	eea7 0a87 	vfma.f32	s0, s15, s14
 8003bbe:	4770      	bx	lr
 8003bc0:	eddf 7a43 	vldr	s15, [pc, #268]	; 8003cd0 <__ieee754_logf+0x1b8>
 8003bc4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003bc8:	eea0 7a67 	vfms.f32	s14, s0, s15
 8003bcc:	ee60 7a00 	vmul.f32	s15, s0, s0
 8003bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bd4:	b912      	cbnz	r2, 8003bdc <__ieee754_logf+0xc4>
 8003bd6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003bda:	4770      	bx	lr
 8003bdc:	ee07 2a90 	vmov	s15, r2
 8003be0:	eddf 6a39 	vldr	s13, [pc, #228]	; 8003cc8 <__ieee754_logf+0x1b0>
 8003be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003be8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8003bec:	ee37 0a40 	vsub.f32	s0, s14, s0
 8003bf0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003ccc <__ieee754_logf+0x1b4>
 8003bf4:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8003bf8:	4770      	bx	lr
 8003bfa:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8003bfe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8003c02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003cd4 <__ieee754_logf+0x1bc>
 8003c06:	eddf 4a34 	vldr	s9, [pc, #208]	; 8003cd8 <__ieee754_logf+0x1c0>
 8003c0a:	4934      	ldr	r1, [pc, #208]	; (8003cdc <__ieee754_logf+0x1c4>)
 8003c0c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8003c10:	4419      	add	r1, r3
 8003c12:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8003c16:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	ee07 2a90 	vmov	s15, r2
 8003c22:	ee26 5a06 	vmul.f32	s10, s12, s12
 8003c26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c2a:	ee25 7a05 	vmul.f32	s14, s10, s10
 8003c2e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8003ce0 <__ieee754_logf+0x1c8>
 8003c32:	eee7 7a25 	vfma.f32	s15, s14, s11
 8003c36:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8003ce4 <__ieee754_logf+0x1cc>
 8003c3a:	eee7 5a87 	vfma.f32	s11, s15, s14
 8003c3e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8003ce8 <__ieee754_logf+0x1d0>
 8003c42:	eee7 7a24 	vfma.f32	s15, s14, s9
 8003c46:	eddf 4a29 	vldr	s9, [pc, #164]	; 8003cec <__ieee754_logf+0x1d4>
 8003c4a:	eee7 4a87 	vfma.f32	s9, s15, s14
 8003c4e:	eddf 7a28 	vldr	s15, [pc, #160]	; 8003cf0 <__ieee754_logf+0x1d8>
 8003c52:	eee4 7a87 	vfma.f32	s15, s9, s14
 8003c56:	ee67 7a85 	vmul.f32	s15, s15, s10
 8003c5a:	eee5 7a87 	vfma.f32	s15, s11, s14
 8003c5e:	dd1c      	ble.n	8003c9a <__ieee754_logf+0x182>
 8003c60:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003c64:	ee20 7a07 	vmul.f32	s14, s0, s14
 8003c68:	ee27 7a00 	vmul.f32	s14, s14, s0
 8003c6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c70:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003c74:	b922      	cbnz	r2, 8003c80 <__ieee754_logf+0x168>
 8003c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003c7e:	4770      	bx	lr
 8003c80:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8003cc8 <__ieee754_logf+0x1b0>
 8003c84:	eee6 7a86 	vfma.f32	s15, s13, s12
 8003c88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c8c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8003c90:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8003ccc <__ieee754_logf+0x1b4>
 8003c94:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8003c98:	4770      	bx	lr
 8003c9a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8003c9e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003ca2:	2a00      	cmp	r2, #0
 8003ca4:	d0e9      	beq.n	8003c7a <__ieee754_logf+0x162>
 8003ca6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003cc8 <__ieee754_logf+0x1b0>
 8003caa:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8003cae:	e7ed      	b.n	8003c8c <__ieee754_logf+0x174>
 8003cb0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8003cbc <__ieee754_logf+0x1a4>
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	cc000000 	.word	0xcc000000
 8003cbc:	00000000 	.word	0x00000000
 8003cc0:	4c000000 	.word	0x4c000000
 8003cc4:	004afb20 	.word	0x004afb20
 8003cc8:	3717f7d1 	.word	0x3717f7d1
 8003ccc:	3f317180 	.word	0x3f317180
 8003cd0:	3eaaaaab 	.word	0x3eaaaaab
 8003cd4:	3e1cd04f 	.word	0x3e1cd04f
 8003cd8:	3e178897 	.word	0x3e178897
 8003cdc:	ffcf5c30 	.word	0xffcf5c30
 8003ce0:	3e638e29 	.word	0x3e638e29
 8003ce4:	3ecccccd 	.word	0x3ecccccd
 8003ce8:	3e3a3325 	.word	0x3e3a3325
 8003cec:	3e924925 	.word	0x3e924925
 8003cf0:	3f2aaaab 	.word	0x3f2aaaab

08003cf4 <_init>:
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	bf00      	nop
 8003cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfa:	bc08      	pop	{r3}
 8003cfc:	469e      	mov	lr, r3
 8003cfe:	4770      	bx	lr

08003d00 <_fini>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr
