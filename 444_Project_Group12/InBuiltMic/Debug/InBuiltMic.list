
InBuiltMic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004724  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080048e0  080048e0  000148e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004920  08004920  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004920  08004920  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004920  08004920  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004920  08004920  00014920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004924  08004924  00014924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fc04  2000000c  08004934  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000fc10  08004934  0002fc10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012666  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002147  00000000  00000000  000326a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d8  00000000  00000000  000347f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd0  00000000  00000000  000358c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b038  00000000  00000000  00036898  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d333  00000000  00000000  000618d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010a6ca  00000000  00000000  0006ec03  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001792cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046ec  00000000  00000000  00179348  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080048c8 	.word	0x080048c8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080048c8 	.word	0x080048c8

080001fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000202:	f000 fcdc 	bl	8000bbe <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000206:	f000 f82f 	bl	8000268 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800020a:	f000 f9d7 	bl	80005bc <MX_GPIO_Init>
	MX_DMA_Init();
 800020e:	f000 f9b1 	bl	8000574 <MX_DMA_Init>
	MX_DFSDM1_Init();
 8000212:	f000 f8f9 	bl	8000408 <MX_DFSDM1_Init>
	MX_DAC1_Init();
 8000216:	f000 f8c3 	bl	80003a0 <MX_DAC1_Init>
	MX_TIM2_Init();
 800021a:	f000 f95d 	bl	80004d8 <MX_TIM2_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 800021e:	f000 f89b 	bl	8000358 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	//record 8000 samples at 8khz (1s of data)
	uint32_t micDataSize = 8000;
 8000222:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000226:	607b      	str	r3, [r7, #4]

	//start DFSDM mic->digital with DMA, output is 32 bits signed int
	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter2, micData, micDataSize);
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	490a      	ldr	r1, [pc, #40]	; (8000254 <main+0x58>)
 800022c:	480a      	ldr	r0, [pc, #40]	; (8000258 <main+0x5c>)
 800022e:	f001 fb2b 	bl	8001888 <HAL_DFSDM_FilterRegularStart_DMA>
	HAL_Delay(500);
 8000232:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000236:	f000 fd37 	bl	8000ca8 <HAL_Delay>

	//start DAC digital->speaker, input is 12 bits unsigned int so check conversion between micData and maskedData on callbacks
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, maskedData, micDataSize,DAC_ALIGN_12B_R);
 800023a:	2300      	movs	r3, #0
 800023c:	9300      	str	r3, [sp, #0]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4a06      	ldr	r2, [pc, #24]	; (800025c <main+0x60>)
 8000242:	2100      	movs	r1, #0
 8000244:	4806      	ldr	r0, [pc, #24]	; (8000260 <main+0x64>)
 8000246:	f000 fe85 	bl	8000f54 <HAL_DAC_Start_DMA>

	//start timer on interrupt mode
	HAL_TIM_Base_Start_IT(&htim2);
 800024a:	4806      	ldr	r0, [pc, #24]	; (8000264 <main+0x68>)
 800024c:	f003 fec6 	bl	8003fdc <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000250:	e7fe      	b.n	8000250 <main+0x54>
 8000252:	bf00      	nop
 8000254:	20007ed4 	.word	0x20007ed4
 8000258:	2000012c 	.word	0x2000012c
 800025c:	200001d4 	.word	0x200001d4
 8000260:	20000058 	.word	0x20000058
 8000264:	20000188 	.word	0x20000188

08000268 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b0bc      	sub	sp, #240	; 0xf0
 800026c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800026e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000272:	2244      	movs	r2, #68	; 0x44
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f004 fb1e 	bl	80048b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800027c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2294      	movs	r2, #148	; 0x94
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f004 fb10 	bl	80048b8 <memset>

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000298:	2000      	movs	r0, #0
 800029a:	f002 f9f1 	bl	8002680 <HAL_PWREx_ControlVoltageScaling>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x40>
			!= HAL_OK) {
		Error_Handler();
 80002a4:	f000 fa42 	bl	800072c <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002a8:	2310      	movs	r3, #16
 80002aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002ae:	2301      	movs	r3, #1
 80002b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ba:	2360      	movs	r3, #96	; 0x60
 80002bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	2302      	movs	r3, #2
 80002c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002c6:	2301      	movs	r3, #1
 80002c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLM = 1;
 80002cc:	2301      	movs	r3, #1
 80002ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	RCC_OscInitStruct.PLL.PLLN = 60;
 80002d2:	233c      	movs	r3, #60	; 0x3c
 80002d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002d8:	2302      	movs	r3, #2
 80002da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002de:	2302      	movs	r3, #2
 80002e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002e4:	2302      	movs	r3, #2
 80002e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 fa6a 	bl	80027c8 <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x96>
		Error_Handler();
 80002fa:	f000 fa17 	bl	800072c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000304:	2303      	movs	r3, #3
 8000306:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800031c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000320:	2105      	movs	r1, #5
 8000322:	4618      	mov	r0, r3
 8000324:	f002 fe76 	bl	8003014 <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0xca>
		Error_Handler();
 800032e:	f000 f9fd 	bl	800072c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000336:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000338:	2300      	movs	r3, #0
 800033a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4618      	mov	r0, r3
 8000342:	f003 f8eb 	bl	800351c <HAL_RCCEx_PeriphCLKConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0xe8>
		Error_Handler();
 800034c:	f000 f9ee 	bl	800072c <Error_Handler>
	}
}
 8000350:	bf00      	nop
 8000352:	37f0      	adds	r7, #240	; 0xf0
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	/* DFSDM1_FLT2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DFSDM1_FLT2_IRQn, 0, 0);
 800035c:	2200      	movs	r2, #0
 800035e:	2100      	movs	r1, #0
 8000360:	203f      	movs	r0, #63	; 0x3f
 8000362:	f000 fd9e 	bl	8000ea2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DFSDM1_FLT2_IRQn);
 8000366:	203f      	movs	r0, #63	; 0x3f
 8000368:	f000 fdb7 	bl	8000eda <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800036c:	2200      	movs	r2, #0
 800036e:	2100      	movs	r1, #0
 8000370:	200b      	movs	r0, #11
 8000372:	f000 fd96 	bl	8000ea2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000376:	200b      	movs	r0, #11
 8000378:	f000 fdaf 	bl	8000eda <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800037c:	2200      	movs	r2, #0
 800037e:	2100      	movs	r1, #0
 8000380:	200d      	movs	r0, #13
 8000382:	f000 fd8e 	bl	8000ea2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000386:	200d      	movs	r0, #13
 8000388:	f000 fda7 	bl	8000eda <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800038c:	2200      	movs	r2, #0
 800038e:	2100      	movs	r1, #0
 8000390:	201c      	movs	r0, #28
 8000392:	f000 fd86 	bl	8000ea2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000396:	201c      	movs	r0, #28
 8000398:	f000 fd9f 	bl	8000eda <HAL_NVIC_EnableIRQ>
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}

080003a0 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08a      	sub	sp, #40	; 0x28
 80003a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80003a6:	463b      	mov	r3, r7
 80003a8:	2228      	movs	r2, #40	; 0x28
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f004 fa83 	bl	80048b8 <memset>
	/* USER CODE BEGIN DAC1_Init 1 */

	/* USER CODE END DAC1_Init 1 */
	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MX_DAC1_Init+0x60>)
 80003b4:	4a13      	ldr	r2, [pc, #76]	; (8000404 <MX_DAC1_Init+0x64>)
 80003b6:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 80003b8:	4811      	ldr	r0, [pc, #68]	; (8000400 <MX_DAC1_Init+0x60>)
 80003ba:	f000 fda8 	bl	8000f0e <HAL_DAC_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_DAC1_Init+0x28>
		Error_Handler();
 80003c4:	f000 f9b2 	bl	800072c <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80003c8:	2300      	movs	r3, #0
 80003ca:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80003cc:	230a      	movs	r3, #10
 80003ce:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80003d0:	2300      	movs	r3, #0
 80003d2:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80003d8:	2300      	movs	r3, #0
 80003da:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80003e0:	463b      	mov	r3, r7
 80003e2:	2200      	movs	r2, #0
 80003e4:	4619      	mov	r1, r3
 80003e6:	4806      	ldr	r0, [pc, #24]	; (8000400 <MX_DAC1_Init+0x60>)
 80003e8:	f000 fe90 	bl	800110c <HAL_DAC_ConfigChannel>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_DAC1_Init+0x56>
		Error_Handler();
 80003f2:	f000 f99b 	bl	800072c <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	3728      	adds	r7, #40	; 0x28
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000058 	.word	0x20000058
 8000404:	40007400 	.word	0x40007400

08000408 <MX_DFSDM1_Init>:
/**
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void) {
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	/* USER CODE END DFSDM1_Init 0 */

	/* USER CODE BEGIN DFSDM1_Init 1 */

	/* USER CODE END DFSDM1_Init 1 */
	hdfsdm1_filter2.Instance = DFSDM1_Filter2;
 800040c:	4b2d      	ldr	r3, [pc, #180]	; (80004c4 <MX_DFSDM1_Init+0xbc>)
 800040e:	4a2e      	ldr	r2, [pc, #184]	; (80004c8 <MX_DFSDM1_Init+0xc0>)
 8000410:	601a      	str	r2, [r3, #0]
	hdfsdm1_filter2.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000412:	4b2c      	ldr	r3, [pc, #176]	; (80004c4 <MX_DFSDM1_Init+0xbc>)
 8000414:	2200      	movs	r2, #0
 8000416:	605a      	str	r2, [r3, #4]
	hdfsdm1_filter2.Init.RegularParam.FastMode = ENABLE;
 8000418:	4b2a      	ldr	r3, [pc, #168]	; (80004c4 <MX_DFSDM1_Init+0xbc>)
 800041a:	2201      	movs	r2, #1
 800041c:	721a      	strb	r2, [r3, #8]
	hdfsdm1_filter2.Init.RegularParam.DmaMode = ENABLE;
 800041e:	4b29      	ldr	r3, [pc, #164]	; (80004c4 <MX_DFSDM1_Init+0xbc>)
 8000420:	2201      	movs	r2, #1
 8000422:	725a      	strb	r2, [r3, #9]
	hdfsdm1_filter2.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000424:	4b27      	ldr	r3, [pc, #156]	; (80004c4 <MX_DFSDM1_Init+0xbc>)
 8000426:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800042a:	61da      	str	r2, [r3, #28]
	hdfsdm1_filter2.Init.FilterParam.Oversampling = 1000;
 800042c:	4b25      	ldr	r3, [pc, #148]	; (80004c4 <MX_DFSDM1_Init+0xbc>)
 800042e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000432:	621a      	str	r2, [r3, #32]
	hdfsdm1_filter2.Init.FilterParam.IntOversampling = 1;
 8000434:	4b23      	ldr	r3, [pc, #140]	; (80004c4 <MX_DFSDM1_Init+0xbc>)
 8000436:	2201      	movs	r2, #1
 8000438:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DFSDM_FilterInit(&hdfsdm1_filter2) != HAL_OK) {
 800043a:	4822      	ldr	r0, [pc, #136]	; (80004c4 <MX_DFSDM1_Init+0xbc>)
 800043c:	f001 f904 	bl	8001648 <HAL_DFSDM_FilterInit>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_DFSDM1_Init+0x42>
		Error_Handler();
 8000446:	f000 f971 	bl	800072c <Error_Handler>
	}
	hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800044a:	4b20      	ldr	r3, [pc, #128]	; (80004cc <MX_DFSDM1_Init+0xc4>)
 800044c:	4a20      	ldr	r2, [pc, #128]	; (80004d0 <MX_DFSDM1_Init+0xc8>)
 800044e:	601a      	str	r2, [r3, #0]
	hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000450:	4b1e      	ldr	r3, [pc, #120]	; (80004cc <MX_DFSDM1_Init+0xc4>)
 8000452:	2201      	movs	r2, #1
 8000454:	711a      	strb	r2, [r3, #4]
	hdfsdm1_channel2.Init.OutputClock.Selection =
 8000456:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <MX_DFSDM1_Init+0xc4>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
			DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
	hdfsdm1_channel2.Init.OutputClock.Divider = 15;
 800045c:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <MX_DFSDM1_Init+0xc4>)
 800045e:	220f      	movs	r2, #15
 8000460:	60da      	str	r2, [r3, #12]
	hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000462:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <MX_DFSDM1_Init+0xc4>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
	hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <MX_DFSDM1_Init+0xc4>)
 800046a:	2200      	movs	r2, #0
 800046c:	615a      	str	r2, [r3, #20]
	hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800046e:	4b17      	ldr	r3, [pc, #92]	; (80004cc <MX_DFSDM1_Init+0xc4>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
	hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000474:	4b15      	ldr	r3, [pc, #84]	; (80004cc <MX_DFSDM1_Init+0xc4>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
	hdfsdm1_channel2.Init.SerialInterface.SpiClock =
 800047a:	4b14      	ldr	r3, [pc, #80]	; (80004cc <MX_DFSDM1_Init+0xc4>)
 800047c:	2204      	movs	r2, #4
 800047e:	621a      	str	r2, [r3, #32]
			DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
	hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_SINC3_ORDER;
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <MX_DFSDM1_Init+0xc4>)
 8000482:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000486:	625a      	str	r2, [r3, #36]	; 0x24
	hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000488:	4b10      	ldr	r3, [pc, #64]	; (80004cc <MX_DFSDM1_Init+0xc4>)
 800048a:	2201      	movs	r2, #1
 800048c:	629a      	str	r2, [r3, #40]	; 0x28
	hdfsdm1_channel2.Init.Offset = 0;
 800048e:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_DFSDM1_Init+0xc4>)
 8000490:	2200      	movs	r2, #0
 8000492:	62da      	str	r2, [r3, #44]	; 0x2c
	hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000494:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <MX_DFSDM1_Init+0xc4>)
 8000496:	2200      	movs	r2, #0
 8000498:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK) {
 800049a:	480c      	ldr	r0, [pc, #48]	; (80004cc <MX_DFSDM1_Init+0xc4>)
 800049c:	f001 f800 	bl	80014a0 <HAL_DFSDM_ChannelInit>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_DFSDM1_Init+0xa2>
		Error_Handler();
 80004a6:	f000 f941 	bl	800072c <Error_Handler>
	}
	if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter2, DFSDM_CHANNEL_2,
 80004aa:	2201      	movs	r2, #1
 80004ac:	4909      	ldr	r1, [pc, #36]	; (80004d4 <MX_DFSDM1_Init+0xcc>)
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MX_DFSDM1_Init+0xbc>)
 80004b0:	f001 f9a4 	bl	80017fc <HAL_DFSDM_FilterConfigRegChannel>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_DFSDM1_Init+0xb6>
			DFSDM_CONTINUOUS_CONV_ON) != HAL_OK) {
		Error_Handler();
 80004ba:	f000 f937 	bl	800072c <Error_Handler>
	}
	/* USER CODE BEGIN DFSDM1_Init 2 */

	/* USER CODE END DFSDM1_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	2000012c 	.word	0x2000012c
 80004c8:	40016200 	.word	0x40016200
 80004cc:	2000fbd4 	.word	0x2000fbd4
 80004d0:	40016040 	.word	0x40016040
 80004d4:	00020004 	.word	0x00020004

080004d8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80004f6:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <MX_TIM2_Init+0x98>)
 80004f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004fc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80004fe:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <MX_TIM2_Init+0x98>)
 8000500:	2200      	movs	r2, #0
 8000502:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000504:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <MX_TIM2_Init+0x98>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 15000;
 800050a:	4b19      	ldr	r3, [pc, #100]	; (8000570 <MX_TIM2_Init+0x98>)
 800050c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000510:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <MX_TIM2_Init+0x98>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_TIM2_Init+0x98>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800051e:	4814      	ldr	r0, [pc, #80]	; (8000570 <MX_TIM2_Init+0x98>)
 8000520:	f003 fd04 	bl	8003f2c <HAL_TIM_Base_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM2_Init+0x56>
		Error_Handler();
 800052a:	f000 f8ff 	bl	800072c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800052e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000532:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	4619      	mov	r1, r3
 800053a:	480d      	ldr	r0, [pc, #52]	; (8000570 <MX_TIM2_Init+0x98>)
 800053c:	f003 fedd 	bl	80042fa <HAL_TIM_ConfigClockSource>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM2_Init+0x72>
		Error_Handler();
 8000546:	f000 f8f1 	bl	800072c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800054a:	2320      	movs	r3, #32
 800054c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	4619      	mov	r1, r3
 8000556:	4806      	ldr	r0, [pc, #24]	; (8000570 <MX_TIM2_Init+0x98>)
 8000558:	f004 f8e4 	bl	8004724 <HAL_TIMEx_MasterConfigSynchronization>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8000562:	f000 f8e3 	bl	800072c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	3720      	adds	r7, #32
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000188 	.word	0x20000188

08000574 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_DMA_Init+0x44>)
 800057c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <MX_DMA_Init+0x44>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	6493      	str	r3, [r2, #72]	; 0x48
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_DMA_Init+0x44>)
 8000588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800058a:	f003 0304 	and.w	r3, r3, #4
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_DMA_Init+0x44>)
 8000594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000596:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <MX_DMA_Init+0x44>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6493      	str	r3, [r2, #72]	; 0x48
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MX_DMA_Init+0x44>)
 80005a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]

}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <MX_GPIO_Init+0x5c>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	4a14      	ldr	r2, [pc, #80]	; (8000618 <MX_GPIO_Init+0x5c>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MX_GPIO_Init+0x5c>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_GPIO_Init+0x5c>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <MX_GPIO_Init+0x5c>)
 80005e0:	f043 0310 	orr.w	r3, r3, #16
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_GPIO_Init+0x5c>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	f003 0310 	and.w	r3, r3, #16
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_GPIO_Init+0x5c>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <MX_GPIO_Init+0x5c>)
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_GPIO_Init+0x5c>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

}
 800060a:	bf00      	nop
 800060c:	3714      	adds	r7, #20
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000

0800061c <HAL_DFSDM_FilterRegConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4000; ++i) {
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e016      	b.n	8000658 <HAL_DFSDM_FilterRegConvCpltCallback+0x3c>
		//shift right to get only 12 bits (12 bits DAC resolution of speaker)
		maskedData[i] = (micData[i] >> 20);
 800062a:	4a10      	ldr	r2, [pc, #64]	; (800066c <HAL_DFSDM_FilterRegConvCpltCallback+0x50>)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000632:	151b      	asrs	r3, r3, #20
 8000634:	4619      	mov	r1, r3
 8000636:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <HAL_DFSDM_FilterRegConvCpltCallback+0x54>)
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		maskedData[i] = maskedData[i] & 0x7FF;
 800063e:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <HAL_DFSDM_FilterRegConvCpltCallback+0x54>)
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000646:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <HAL_DFSDM_FilterRegConvCpltCallback+0x54>)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4000; ++i) {
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	3301      	adds	r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800065e:	dbe4      	blt.n	800062a <HAL_DFSDM_FilterRegConvCpltCallback+0xe>
	}
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	20007ed4 	.word	0x20007ed4
 8000670:	200001d4 	.word	0x200001d4

08000674 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

void HAL_DFSDM_FilterRegConvHalfCpltCallback(
		DFSDM_Filter_HandleTypeDef *hdfsdm_filter) {
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	for (int i = 4000; i < 8000; ++i) {
 800067c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	e016      	b.n	80006b2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x3e>
		maskedData[i] = (micData[i] >> 20);
 8000684:	4a10      	ldr	r2, [pc, #64]	; (80006c8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x54>)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800068c:	151b      	asrs	r3, r3, #20
 800068e:	4619      	mov	r1, r3
 8000690:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x58>)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		maskedData[i] = maskedData[i] & 0x7FF;
 8000698:	4a0c      	ldr	r2, [pc, #48]	; (80006cc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x58>)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80006a4:	4909      	ldr	r1, [pc, #36]	; (80006cc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x58>)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 4000; i < 8000; ++i) {
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	3301      	adds	r3, #1
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80006b8:	dbe4      	blt.n	8000684 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x10>
	}
}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20007ed4 	.word	0x20007ed4
 80006cc:	200001d4 	.word	0x200001d4

080006d0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	//currentData = HAL_DAC_GetValue(&hdac1, DAC_CHANNEL_1);
	//currentData = HAL_DFSDM_FilterGetRegularValue(&hdfsdm1_filter2, &hdfsdm1_channel2);
	currentDataIn = micData[counter];
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	461a      	mov	r2, r3
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80006e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006e4:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80006e6:	6013      	str	r3, [r2, #0]
	++counter;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80006f2:	801a      	strh	r2, [r3, #0]
	counter = counter%8000;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80006fa:	fba2 1203 	umull	r1, r2, r2, r3
 80006fe:	0a52      	lsrs	r2, r2, #9
 8000700:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8000704:	fb01 f202 	mul.w	r2, r1, r2
 8000708:	1a9b      	subs	r3, r3, r2
 800070a:	b29a      	uxth	r2, r3
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800070e:	801a      	strh	r2, [r3, #0]
	//ITM_Port32(31) = 44;
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	20000028 	.word	0x20000028
 8000720:	20007ed4 	.word	0x20007ed4
 8000724:	20000184 	.word	0x20000184
 8000728:	10624dd3 	.word	0x10624dd3

0800072c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000732:	e7fe      	b.n	8000732 <Error_Handler+0x6>

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_MspInit+0x44>)
 800073c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073e:	4a0e      	ldr	r2, [pc, #56]	; (8000778 <HAL_MspInit+0x44>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6613      	str	r3, [r2, #96]	; 0x60
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <HAL_MspInit+0x44>)
 8000748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <HAL_MspInit+0x44>)
 8000754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000756:	4a08      	ldr	r2, [pc, #32]	; (8000778 <HAL_MspInit+0x44>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	6593      	str	r3, [r2, #88]	; 0x58
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_MspInit+0x44>)
 8000760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000

0800077c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a2b      	ldr	r2, [pc, #172]	; (8000848 <HAL_DAC_MspInit+0xcc>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d14f      	bne.n	800083e <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800079e:	4b2b      	ldr	r3, [pc, #172]	; (800084c <HAL_DAC_MspInit+0xd0>)
 80007a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a2:	4a2a      	ldr	r2, [pc, #168]	; (800084c <HAL_DAC_MspInit+0xd0>)
 80007a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007a8:	6593      	str	r3, [r2, #88]	; 0x58
 80007aa:	4b28      	ldr	r3, [pc, #160]	; (800084c <HAL_DAC_MspInit+0xd0>)
 80007ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b25      	ldr	r3, [pc, #148]	; (800084c <HAL_DAC_MspInit+0xd0>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a24      	ldr	r2, [pc, #144]	; (800084c <HAL_DAC_MspInit+0xd0>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b22      	ldr	r3, [pc, #136]	; (800084c <HAL_DAC_MspInit+0xd0>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007ce:	2310      	movs	r3, #16
 80007d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d2:	2303      	movs	r3, #3
 80007d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e4:	f001 fd9a 	bl	800231c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <HAL_DAC_MspInit+0xd4>)
 80007ea:	4a1a      	ldr	r2, [pc, #104]	; (8000854 <HAL_DAC_MspInit+0xd8>)
 80007ec:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <HAL_DAC_MspInit+0xd4>)
 80007f0:	2206      	movs	r2, #6
 80007f2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007f4:	4b16      	ldr	r3, [pc, #88]	; (8000850 <HAL_DAC_MspInit+0xd4>)
 80007f6:	2210      	movs	r2, #16
 80007f8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_DAC_MspInit+0xd4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <HAL_DAC_MspInit+0xd4>)
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_DAC_MspInit+0xd4>)
 8000808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <HAL_DAC_MspInit+0xd4>)
 8000810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000814:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <HAL_DAC_MspInit+0xd4>)
 8000818:	2220      	movs	r2, #32
 800081a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_DAC_MspInit+0xd4>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000822:	480b      	ldr	r0, [pc, #44]	; (8000850 <HAL_DAC_MspInit+0xd4>)
 8000824:	f001 fb08 	bl	8001e38 <HAL_DMA_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800082e:	f7ff ff7d 	bl	800072c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a06      	ldr	r2, [pc, #24]	; (8000850 <HAL_DAC_MspInit+0xd4>)
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	4a05      	ldr	r2, [pc, #20]	; (8000850 <HAL_DAC_MspInit+0xd4>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	; 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40007400 	.word	0x40007400
 800084c:	40021000 	.word	0x40021000
 8000850:	200000cc 	.word	0x200000cc
 8000854:	40020030 	.word	0x40020030

08000858 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000870:	4b3a      	ldr	r3, [pc, #232]	; (800095c <HAL_DFSDM_FilterMspInit+0x104>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d136      	bne.n	80008e6 <HAL_DFSDM_FilterMspInit+0x8e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000878:	4b39      	ldr	r3, [pc, #228]	; (8000960 <HAL_DFSDM_FilterMspInit+0x108>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	4a38      	ldr	r2, [pc, #224]	; (8000960 <HAL_DFSDM_FilterMspInit+0x108>)
 8000880:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000882:	4b37      	ldr	r3, [pc, #220]	; (8000960 <HAL_DFSDM_FilterMspInit+0x108>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d10b      	bne.n	80008a2 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800088a:	4b36      	ldr	r3, [pc, #216]	; (8000964 <HAL_DFSDM_FilterMspInit+0x10c>)
 800088c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088e:	4a35      	ldr	r2, [pc, #212]	; (8000964 <HAL_DFSDM_FilterMspInit+0x10c>)
 8000890:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000894:	6613      	str	r3, [r2, #96]	; 0x60
 8000896:	4b33      	ldr	r3, [pc, #204]	; (8000964 <HAL_DFSDM_FilterMspInit+0x10c>)
 8000898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800089a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a2:	4b30      	ldr	r3, [pc, #192]	; (8000964 <HAL_DFSDM_FilterMspInit+0x10c>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	4a2f      	ldr	r2, [pc, #188]	; (8000964 <HAL_DFSDM_FilterMspInit+0x10c>)
 80008a8:	f043 0310 	orr.w	r3, r3, #16
 80008ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <HAL_DFSDM_FilterMspInit+0x10c>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0310 	and.w	r3, r3, #16
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80008ba:	f44f 7320 	mov.w	r3, #640	; 0x280
 80008be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80008cc:	2306      	movs	r3, #6
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	4824      	ldr	r0, [pc, #144]	; (8000968 <HAL_DFSDM_FilterMspInit+0x110>)
 80008d8:	f001 fd20 	bl	800231c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <HAL_DFSDM_FilterMspInit+0x104>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	3301      	adds	r3, #1
 80008e2:	4a1e      	ldr	r2, [pc, #120]	; (800095c <HAL_DFSDM_FilterMspInit+0x104>)
 80008e4:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT2 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter2){
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a20      	ldr	r2, [pc, #128]	; (800096c <HAL_DFSDM_FilterMspInit+0x114>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d130      	bne.n	8000952 <HAL_DFSDM_FilterMspInit+0xfa>
    hdma_dfsdm1_flt2.Instance = DMA1_Channel1;
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <HAL_DFSDM_FilterMspInit+0x118>)
 80008f2:	4a20      	ldr	r2, [pc, #128]	; (8000974 <HAL_DFSDM_FilterMspInit+0x11c>)
 80008f4:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt2.Init.Request = DMA_REQUEST_DFSDM1_FLT2;
 80008f6:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <HAL_DFSDM_FilterMspInit+0x118>)
 80008f8:	2258      	movs	r2, #88	; 0x58
 80008fa:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <HAL_DFSDM_FilterMspInit+0x118>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000902:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <HAL_DFSDM_FilterMspInit+0x118>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt2.Init.MemInc = DMA_MINC_ENABLE;
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <HAL_DFSDM_FilterMspInit+0x118>)
 800090a:	2280      	movs	r2, #128	; 0x80
 800090c:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <HAL_DFSDM_FilterMspInit+0x118>)
 8000910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000914:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <HAL_DFSDM_FilterMspInit+0x118>)
 8000918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800091c:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt2.Init.Mode = DMA_CIRCULAR;
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <HAL_DFSDM_FilterMspInit+0x118>)
 8000920:	2220      	movs	r2, #32
 8000922:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt2.Init.Priority = DMA_PRIORITY_LOW;
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_DFSDM_FilterMspInit+0x118>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt2) != HAL_OK)
 800092a:	4811      	ldr	r0, [pc, #68]	; (8000970 <HAL_DFSDM_FilterMspInit+0x118>)
 800092c:	f001 fa84 	bl	8001e38 <HAL_DMA_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_DFSDM_FilterMspInit+0xe2>
    {
      Error_Handler();
 8000936:	f7ff fef9 	bl	800072c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt2);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <HAL_DFSDM_FilterMspInit+0x118>)
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000940:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <HAL_DFSDM_FilterMspInit+0x118>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt2);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a09      	ldr	r2, [pc, #36]	; (8000970 <HAL_DFSDM_FilterMspInit+0x118>)
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
 800094c:	4a08      	ldr	r2, [pc, #32]	; (8000970 <HAL_DFSDM_FilterMspInit+0x118>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8000952:	bf00      	nop
 8000954:	3728      	adds	r7, #40	; 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000030 	.word	0x20000030
 8000960:	2000002c 	.word	0x2000002c
 8000964:	40021000 	.word	0x40021000
 8000968:	48001000 	.word	0x48001000
 800096c:	40016200 	.word	0x40016200
 8000970:	2000006c 	.word	0x2000006c
 8000974:	40020008 	.word	0x40020008

08000978 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <HAL_DFSDM_ChannelMspInit+0x98>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d136      	bne.n	8000a06 <HAL_DFSDM_ChannelMspInit+0x8e>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000998:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <HAL_DFSDM_ChannelMspInit+0x9c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <HAL_DFSDM_ChannelMspInit+0x9c>)
 80009a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <HAL_DFSDM_ChannelMspInit+0x9c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d10b      	bne.n	80009c2 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <HAL_DFSDM_ChannelMspInit+0xa0>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ae:	4a1a      	ldr	r2, [pc, #104]	; (8000a18 <HAL_DFSDM_ChannelMspInit+0xa0>)
 80009b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009b4:	6613      	str	r3, [r2, #96]	; 0x60
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <HAL_DFSDM_ChannelMspInit+0xa0>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_DFSDM_ChannelMspInit+0xa0>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <HAL_DFSDM_ChannelMspInit+0xa0>)
 80009c8:	f043 0310 	orr.w	r3, r3, #16
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_DFSDM_ChannelMspInit+0xa0>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0310 	and.w	r3, r3, #16
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80009da:	f44f 7320 	mov.w	r3, #640	; 0x280
 80009de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80009ec:	2306      	movs	r3, #6
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	4809      	ldr	r0, [pc, #36]	; (8000a1c <HAL_DFSDM_ChannelMspInit+0xa4>)
 80009f8:	f001 fc90 	bl	800231c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <HAL_DFSDM_ChannelMspInit+0x98>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a03      	ldr	r2, [pc, #12]	; (8000a10 <HAL_DFSDM_ChannelMspInit+0x98>)
 8000a04:	6013      	str	r3, [r2, #0]
  }

}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	; 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000030 	.word	0x20000030
 8000a14:	2000002c 	.word	0x2000002c
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	48001000 	.word	0x48001000

08000a20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a30:	d10b      	bne.n	8000a4a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_TIM_Base_MspInit+0x38>)
 8000a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_TIM_Base_MspInit+0x38>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_TIM_Base_MspInit+0x38>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a4a:	bf00      	nop
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <MemManage_Handler+0x4>

08000a6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa8:	f000 f8de 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt2);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <DMA1_Channel1_IRQHandler+0x10>)
 8000ab6:	f001 fae2 	bl	800207e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	2000006c 	.word	0x2000006c

08000ac4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <DMA1_Channel3_IRQHandler+0x10>)
 8000aca:	f001 fad8 	bl	800207e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200000cc 	.word	0x200000cc

08000ad8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <TIM2_IRQHandler+0x10>)
 8000ade:	f003 faed 	bl	80040bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000188 	.word	0x20000188

08000aec <DFSDM1_FLT2_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter2 global interrupt.
  */
void DFSDM1_FLT2_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT2_IRQn 0 */

  /* USER CODE END DFSDM1_FLT2_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter2);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <DFSDM1_FLT2_IRQHandler+0x10>)
 8000af2:	f000 ff4b 	bl	800198c <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT2_IRQn 1 */

  /* USER CODE END DFSDM1_FLT2_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000012c 	.word	0x2000012c

08000b00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <SystemInit+0x64>)
 8000b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0a:	4a16      	ldr	r2, [pc, #88]	; (8000b64 <SystemInit+0x64>)
 8000b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <SystemInit+0x68>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a13      	ldr	r2, [pc, #76]	; (8000b68 <SystemInit+0x68>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <SystemInit+0x68>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <SystemInit+0x68>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <SystemInit+0x68>)
 8000b2c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b30:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b34:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <SystemInit+0x68>)
 8000b38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b3c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <SystemInit+0x68>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a09      	ldr	r2, [pc, #36]	; (8000b68 <SystemInit+0x68>)
 8000b44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b48:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <SystemInit+0x68>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <SystemInit+0x64>)
 8000b52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b56:	609a      	str	r2, [r3, #8]
#endif
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	40021000 	.word	0x40021000

08000b6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b70:	f7ff ffc6 	bl	8000b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b76:	e003      	b.n	8000b80 <LoopCopyDataInit>

08000b78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b7e:	3104      	adds	r1, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b80:	480a      	ldr	r0, [pc, #40]	; (8000bac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b88:	d3f6      	bcc.n	8000b78 <CopyDataInit>
	ldr	r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b8c:	e002      	b.n	8000b94 <LoopFillZerobss>

08000b8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b90:	f842 3b04 	str.w	r3, [r2], #4

08000b94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <LoopForever+0x16>)
	cmp	r2, r3
 8000b96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b98:	d3f9      	bcc.n	8000b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f003 fe69 	bl	8004870 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b9e:	f7ff fb2d 	bl	80001fc <main>

08000ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba2:	e7fe      	b.n	8000ba2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ba4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000ba8:	08004928 	.word	0x08004928
	ldr	r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bb0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000bb4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000bb8:	2000fc10 	.word	0x2000fc10

08000bbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC1_IRQHandler>

08000bbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f95f 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 f80e 	bl	8000bf0 <HAL_InitTick>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d002      	beq.n	8000be0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	71fb      	strb	r3, [r7, #7]
 8000bde:	e001      	b.n	8000be4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be0:	f7ff fda8 	bl	8000734 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be4:	79fb      	ldrb	r3, [r7, #7]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_InitTick+0x6c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d023      	beq.n	8000c4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <HAL_InitTick+0x70>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_InitTick+0x6c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f96b 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10f      	bne.n	8000c46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d809      	bhi.n	8000c40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f000 f935 	bl	8000ea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c38:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_InitTick+0x74>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	e007      	b.n	8000c50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	e004      	b.n	8000c50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	e001      	b.n	8000c50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000004 	.word	0x20000004

08000c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	2000fc0c 	.word	0x2000fc0c

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	2000fc0c 	.word	0x2000fc0c

08000ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb0:	f7ff ffee 	bl	8000c90 <HAL_GetTick>
 8000cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc0:	d005      	beq.n	8000cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_Delay+0x40>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4413      	add	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cce:	bf00      	nop
 8000cd0:	f7ff ffde 	bl	8000c90 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d8f7      	bhi.n	8000cd0 <HAL_Delay+0x28>
  {
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000008 	.word	0x20000008

08000cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1e:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	60d3      	str	r3, [r2, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <__NVIC_GetPriorityGrouping+0x18>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	f003 0307 	and.w	r3, r3, #7
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db0b      	blt.n	8000d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f003 021f 	and.w	r2, r3, #31
 8000d68:	4907      	ldr	r1, [pc, #28]	; (8000d88 <__NVIC_EnableIRQ+0x38>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	095b      	lsrs	r3, r3, #5
 8000d70:	2001      	movs	r0, #1
 8000d72:	fa00 f202 	lsl.w	r2, r0, r2
 8000d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000e100 	.word	0xe000e100

08000d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db0a      	blt.n	8000db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <__NVIC_SetPriority+0x4c>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db4:	e00a      	b.n	8000dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <__NVIC_SetPriority+0x50>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	761a      	strb	r2, [r3, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2304      	movcs	r3, #4
 8000e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3304      	adds	r3, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d902      	bls.n	8000e10 <NVIC_EncodePriority+0x30>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3b03      	subs	r3, #3
 8000e0e:	e000      	b.n	8000e12 <NVIC_EncodePriority+0x32>
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	4313      	orrs	r3, r2
         );
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e58:	d301      	bcc.n	8000e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00f      	b.n	8000e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <SysTick_Config+0x40>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e66:	210f      	movs	r1, #15
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f7ff ff8e 	bl	8000d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <SysTick_Config+0x40>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <SysTick_Config+0x40>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff29 	bl	8000cec <__NVIC_SetPriorityGrouping>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff3e 	bl	8000d34 <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff8e 	bl	8000de0 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5d 	bl	8000d8c <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff31 	bl	8000d50 <__NVIC_EnableIRQ>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffa2 	bl	8000e48 <SysTick_Config>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d101      	bne.n	8000f20 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e014      	b.n	8000f4a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	791b      	ldrb	r3, [r3, #4]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d105      	bne.n	8000f36 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff fc23 	bl	800077c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2202      	movs	r2, #2
 8000f3a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	795b      	ldrb	r3, [r3, #5]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d101      	bne.n	8000f72 <HAL_DAC_Start_DMA+0x1e>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e09e      	b.n	80010b0 <HAL_DAC_Start_DMA+0x15c>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2201      	movs	r2, #1
 8000f76:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d12a      	bne.n	8000fda <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <HAL_DAC_Start_DMA+0x164>)
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	4a4a      	ldr	r2, [pc, #296]	; (80010bc <HAL_DAC_Start_DMA+0x168>)
 8000f92:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	4a49      	ldr	r2, [pc, #292]	; (80010c0 <HAL_DAC_Start_DMA+0x16c>)
 8000f9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000faa:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d009      	beq.n	8000fc6 <HAL_DAC_Start_DMA+0x72>
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	d00c      	beq.n	8000fd0 <HAL_DAC_Start_DMA+0x7c>
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d000      	beq.n	8000fbc <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000fba:	e039      	b.n	8001030 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3308      	adds	r3, #8
 8000fc2:	613b      	str	r3, [r7, #16]
        break;
 8000fc4:	e034      	b.n	8001030 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	330c      	adds	r3, #12
 8000fcc:	613b      	str	r3, [r7, #16]
        break;
 8000fce:	e02f      	b.n	8001030 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	3310      	adds	r3, #16
 8000fd6:	613b      	str	r3, [r7, #16]
        break;
 8000fd8:	e02a      	b.n	8001030 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	4a39      	ldr	r2, [pc, #228]	; (80010c4 <HAL_DAC_Start_DMA+0x170>)
 8000fe0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	4a38      	ldr	r2, [pc, #224]	; (80010c8 <HAL_DAC_Start_DMA+0x174>)
 8000fe8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	4a37      	ldr	r2, [pc, #220]	; (80010cc <HAL_DAC_Start_DMA+0x178>)
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001000:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001002:	6a3b      	ldr	r3, [r7, #32]
 8001004:	2b04      	cmp	r3, #4
 8001006:	d009      	beq.n	800101c <HAL_DAC_Start_DMA+0xc8>
 8001008:	2b08      	cmp	r3, #8
 800100a:	d00c      	beq.n	8001026 <HAL_DAC_Start_DMA+0xd2>
 800100c:	2b00      	cmp	r3, #0
 800100e:	d000      	beq.n	8001012 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001010:	e00e      	b.n	8001030 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	3314      	adds	r3, #20
 8001018:	613b      	str	r3, [r7, #16]
        break;
 800101a:	e009      	b.n	8001030 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3318      	adds	r3, #24
 8001022:	613b      	str	r3, [r7, #16]
        break;
 8001024:	e004      	b.n	8001030 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	331c      	adds	r3, #28
 800102c:	613b      	str	r3, [r7, #16]
        break;
 800102e:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d111      	bne.n	800105a <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001044:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6898      	ldr	r0, [r3, #8]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	f000 ff9a 	bl	8001f88 <HAL_DMA_Start_IT>
 8001054:	4603      	mov	r3, r0
 8001056:	75fb      	strb	r3, [r7, #23]
 8001058:	e010      	b.n	800107c <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001068:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	68d8      	ldr	r0, [r3, #12]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	f000 ff88 	bl	8001f88 <HAL_DMA_Start_IT>
 8001078:	4603      	mov	r3, r0
 800107a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2200      	movs	r2, #0
 8001080:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001082:	7dfb      	ldrb	r3, [r7, #23]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d10c      	bne.n	80010a2 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	f003 0310 	and.w	r3, r3, #16
 8001094:	2201      	movs	r2, #1
 8001096:	409a      	lsls	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e005      	b.n	80010ae <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	f043 0204 	orr.w	r2, r3, #4
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80010ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	0800138d 	.word	0x0800138d
 80010bc:	080013af 	.word	0x080013af
 80010c0:	080013cb 	.word	0x080013cb
 80010c4:	08001435 	.word	0x08001435
 80010c8:	08001457 	.word	0x08001457
 80010cc:	08001473 	.word	0x08001473

080010d0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	795b      	ldrb	r3, [r3, #5]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d101      	bne.n	8001128 <HAL_DAC_ConfigChannel+0x1c>
 8001124:	2302      	movs	r3, #2
 8001126:	e12a      	b.n	800137e <HAL_DAC_ConfigChannel+0x272>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2201      	movs	r2, #1
 800112c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2202      	movs	r2, #2
 8001132:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b04      	cmp	r3, #4
 800113a:	d174      	bne.n	8001226 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800113c:	f7ff fda8 	bl	8000c90 <HAL_GetTick>
 8001140:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d134      	bne.n	80011b2 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001148:	e011      	b.n	800116e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800114a:	f7ff fda1 	bl	8000c90 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b01      	cmp	r3, #1
 8001156:	d90a      	bls.n	800116e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	f043 0208 	orr.w	r2, r3, #8
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2203      	movs	r2, #3
 8001168:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e107      	b.n	800137e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1e6      	bne.n	800114a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800117c:	2001      	movs	r0, #1
 800117e:	f7ff fd93 	bl	8000ca8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	69d2      	ldr	r2, [r2, #28]
 800118a:	641a      	str	r2, [r3, #64]	; 0x40
 800118c:	e01e      	b.n	80011cc <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800118e:	f7ff fd7f 	bl	8000c90 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b01      	cmp	r3, #1
 800119a:	d90a      	bls.n	80011b2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	f043 0208 	orr.w	r2, r3, #8
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2203      	movs	r2, #3
 80011ac:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e0e5      	b.n	800137e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dbe8      	blt.n	800118e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80011bc:	2001      	movs	r0, #1
 80011be:	f7ff fd73 	bl	8000ca8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	69d2      	ldr	r2, [r2, #28]
 80011ca:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f003 0310 	and.w	r3, r3, #16
 80011d8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	ea02 0103 	and.w	r1, r2, r3
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	6a1a      	ldr	r2, [r3, #32]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f003 0310 	and.w	r3, r3, #16
 80011f0:	409a      	lsls	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	21ff      	movs	r1, #255	; 0xff
 8001208:	fa01 f303 	lsl.w	r3, r1, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	ea02 0103 	and.w	r1, r2, r3
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	409a      	lsls	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d11d      	bne.n	800126a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001234:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f003 0310 	and.w	r3, r3, #16
 800123c:	221f      	movs	r2, #31
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69fa      	ldr	r2, [r7, #28]
 8001246:	4013      	ands	r3, r2
 8001248:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	4313      	orrs	r3, r2
 8001260:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001270:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	2207      	movs	r2, #7
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	4013      	ands	r3, r2
 8001284:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	431a      	orrs	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f003 0310 	and.w	r3, r3, #16
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6819      	ldr	r1, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	400a      	ands	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	f640 72fe 	movw	r2, #4094	; 0xffe
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69fa      	ldr	r2, [r7, #28]
 8001302:	4313      	orrs	r3, r2
 8001304:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800130e:	d104      	bne.n	800131a <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	e018      	b.n	800134c <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d104      	bne.n	800132c <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	e00f      	b.n	800134c <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 800132c:	f002 f828 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 8001330:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <HAL_DAC_ConfigChannel+0x27c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d904      	bls.n	8001344 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	e003      	b.n	800134c <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800134a:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6819      	ldr	r1, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f003 0310 	and.w	r3, r3, #16
 8001360:	22c0      	movs	r2, #192	; 0xc0
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	400a      	ands	r2, r1
 800136e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2201      	movs	r2, #1
 8001374:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3720      	adds	r7, #32
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	04c4b400 	.word	0x04c4b400

0800138c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001398:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f7ff fe98 	bl	80010d0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2201      	movs	r2, #1
 80013a4:	711a      	strb	r2, [r3, #4]
}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ba:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f7ff fe91 	bl	80010e4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b084      	sub	sp, #16
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	f043 0204 	orr.w	r2, r3, #4
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f7ff fe87 	bl	80010f8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2201      	movs	r2, #1
 80013ee:	711a      	strb	r2, [r3, #4]
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f7ff ffd8 	bl	80013f8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2201      	movs	r2, #1
 800144c:	711a      	strb	r2, [r3, #4]
}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001462:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f7ff ffd1 	bl	800140c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b084      	sub	sp, #16
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	f043 0204 	orr.w	r2, r3, #4
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f7ff ffc7 	bl	8001420 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2201      	movs	r2, #1
 8001496:	711a      	strb	r2, [r3, #4]
}
 8001498:	bf00      	nop
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e0ac      	b.n	800160c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 fc1c 	bl	8001cf4 <DFSDM_GetChannelFromInstance>
 80014bc:	4602      	mov	r2, r0
 80014be:	4b55      	ldr	r3, [pc, #340]	; (8001614 <HAL_DFSDM_ChannelInit+0x174>)
 80014c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e09f      	b.n	800160c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff fa53 	bl	8000978 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80014d2:	4b51      	ldr	r3, [pc, #324]	; (8001618 <HAL_DFSDM_ChannelInit+0x178>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	4a4f      	ldr	r2, [pc, #316]	; (8001618 <HAL_DFSDM_ChannelInit+0x178>)
 80014da:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80014dc:	4b4e      	ldr	r3, [pc, #312]	; (8001618 <HAL_DFSDM_ChannelInit+0x178>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d125      	bne.n	8001530 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80014e4:	4b4d      	ldr	r3, [pc, #308]	; (800161c <HAL_DFSDM_ChannelInit+0x17c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a4c      	ldr	r2, [pc, #304]	; (800161c <HAL_DFSDM_ChannelInit+0x17c>)
 80014ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80014ee:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80014f0:	4b4a      	ldr	r3, [pc, #296]	; (800161c <HAL_DFSDM_ChannelInit+0x17c>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	4948      	ldr	r1, [pc, #288]	; (800161c <HAL_DFSDM_ChannelInit+0x17c>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80014fe:	4b47      	ldr	r3, [pc, #284]	; (800161c <HAL_DFSDM_ChannelInit+0x17c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a46      	ldr	r2, [pc, #280]	; (800161c <HAL_DFSDM_ChannelInit+0x17c>)
 8001504:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001508:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	791b      	ldrb	r3, [r3, #4]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d108      	bne.n	8001524 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001512:	4b42      	ldr	r3, [pc, #264]	; (800161c <HAL_DFSDM_ChannelInit+0x17c>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	3b01      	subs	r3, #1
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	493f      	ldr	r1, [pc, #252]	; (800161c <HAL_DFSDM_ChannelInit+0x17c>)
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001524:	4b3d      	ldr	r3, [pc, #244]	; (800161c <HAL_DFSDM_ChannelInit+0x17c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a3c      	ldr	r2, [pc, #240]	; (800161c <HAL_DFSDM_ChannelInit+0x17c>)
 800152a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800152e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800153e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6819      	ldr	r1, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800154e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001554:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 020f 	bic.w	r2, r2, #15
 800156c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6819      	ldr	r1, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001594:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6899      	ldr	r1, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a4:	3b01      	subs	r3, #1
 80015a6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f002 0207 	and.w	r2, r2, #7
 80015c0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6859      	ldr	r1, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015ec:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 fb7a 	bl	8001cf4 <DFSDM_GetChannelFromInstance>
 8001600:	4601      	mov	r1, r0
 8001602:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_DFSDM_ChannelInit+0x174>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000038 	.word	0x20000038
 8001618:	20000034 	.word	0x20000034
 800161c:	40016000 	.word	0x40016000

08001620 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e0ca      	b.n	80017f0 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a66      	ldr	r2, [pc, #408]	; (80017f8 <HAL_DFSDM_FilterInit+0x1b0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d109      	bne.n	8001678 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001668:	2b01      	cmp	r3, #1
 800166a:	d003      	beq.n	8001674 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0bb      	b.n	80017f0 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff f8e1 	bl	8000858 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80016a4:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	7a1b      	ldrb	r3, [r3, #8]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d108      	bne.n	80016c0 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	e007      	b.n	80016d0 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80016ce:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7a5b      	ldrb	r3, [r3, #9]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d108      	bne.n	80016ea <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	e007      	b.n	80016fa <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001708:	f023 0308 	bic.w	r3, r3, #8
 800170c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d108      	bne.n	8001728 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6819      	ldr	r1, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	695a      	ldr	r2, [r3, #20]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7c1b      	ldrb	r3, [r3, #16]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d108      	bne.n	8001742 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0210 	orr.w	r2, r2, #16
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e007      	b.n	8001752 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0210 	bic.w	r2, r2, #16
 8001750:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7c5b      	ldrb	r3, [r3, #17]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d108      	bne.n	800176c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0220 	orr.w	r2, r2, #32
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e007      	b.n	800177c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0220 	bic.w	r2, r2, #32
 800177a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800178a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800178e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6959      	ldr	r1, [r3, #20]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	3b01      	subs	r3, #1
 80017a0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017a2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80017aa:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699a      	ldr	r2, [r3, #24]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7c1a      	ldrb	r2, [r3, #16]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f042 0201 	orr.w	r2, r2, #1
 80017e4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40016100 	.word	0x40016100

080017fc <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001812:	2b00      	cmp	r3, #0
 8001814:	d02e      	beq.n	8001874 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800181c:	2bff      	cmp	r3, #255	; 0xff
 800181e:	d029      	beq.n	8001874 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800182e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001832:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d10d      	bne.n	8001856 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001848:	431a      	orrs	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e00a      	b.n	800186c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6819      	ldr	r1, [r3, #0]
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	631a      	str	r2, [r3, #48]	; 0x30
 8001872:	e001      	b.n	8001878 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001878:	7dfb      	ldrb	r3, [r7, #23]
}
 800187a:	4618      	mov	r0, r3
 800187c:	371c      	adds	r7, #28
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	75fb      	strb	r3, [r7, #23]
 80018a8:	e064      	b.n	8001974 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018b8:	d002      	beq.n	80018c0 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	75fb      	strb	r3, [r7, #23]
 80018be:	e059      	b.n	8001974 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10e      	bne.n	80018e6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10a      	bne.n	80018e6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d4:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d105      	bne.n	80018e6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d002      	beq.n	80018e6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	75fb      	strb	r3, [r7, #23]
 80018e4:	e046      	b.n	8001974 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10b      	bne.n	8001906 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d107      	bne.n	8001906 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80018fc:	2b20      	cmp	r3, #32
 80018fe:	d102      	bne.n	8001906 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	75fb      	strb	r3, [r7, #23]
 8001904:	e036      	b.n	8001974 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800190c:	2b01      	cmp	r3, #1
 800190e:	d004      	beq.n	800191a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001916:	2b03      	cmp	r3, #3
 8001918:	d12a      	bne.n	8001970 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	4a18      	ldr	r2, [pc, #96]	; (8001980 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001920:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	4a17      	ldr	r2, [pc, #92]	; (8001984 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001928:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001930:	2b20      	cmp	r3, #32
 8001932:	d101      	bne.n	8001938 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8001934:	4a14      	ldr	r2, [pc, #80]	; (8001988 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001936:	e000      	b.n	800193a <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8001938:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	331c      	adds	r3, #28
 800194a:	4619      	mov	r1, r3
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f000 fb1a 	bl	8001f88 <HAL_DMA_Start_IT>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d006      	beq.n	8001968 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	22ff      	movs	r2, #255	; 0xff
 800195e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001966:	e005      	b.n	8001974 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 fa0f 	bl	8001d8c <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800196e:	e001      	b.n	8001974 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001974:	7dfb      	ldrb	r3, [r7, #23]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	08001cb5 	.word	0x08001cb5
 8001984:	08001cd1 	.word	0x08001cd1
 8001988:	08001c99 	.word	0x08001c99

0800198c <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	; 0x30
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00f      	beq.n	80019ce <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00a      	beq.n	80019ce <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2208      	movs	r2, #8
 80019be:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f95c 	bl	8001c84 <HAL_DFSDM_FilterErrorCallback>
 80019cc:	e13b      	b.n	8001c46 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00f      	beq.n	80019f8 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00a      	beq.n	80019f8 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2204      	movs	r2, #4
 80019e8:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2202      	movs	r2, #2
 80019ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f947 	bl	8001c84 <HAL_DFSDM_FilterErrorCallback>
 80019f6:	e126      	b.n	8001c46 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d025      	beq.n	8001a4e <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d020      	beq.n	8001a4e <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7fe fe05 	bl	800061c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f040 8114 	bne.w	8001c44 <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f040 810f 	bne.w	8001c44 <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0202 	bic.w	r2, r2, #2
 8001a34:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d101      	bne.n	8001a44 <HAL_DFSDM_IRQHandler+0xb8>
 8001a40:	2201      	movs	r2, #1
 8001a42:	e000      	b.n	8001a46 <HAL_DFSDM_IRQHandler+0xba>
 8001a44:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001a4c:	e0fa      	b.n	8001c44 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d034      	beq.n	8001ac2 <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d02f      	beq.n	8001ac2 <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f8f8 	bl	8001c58 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6c:	1e5a      	subs	r2, r3, #1
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f040 80e5 	bne.w	8001c46 <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d112      	bne.n	8001aaa <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0201 	bic.w	r2, r2, #1
 8001a92:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d101      	bne.n	8001aa2 <HAL_DFSDM_IRQHandler+0x116>
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	e000      	b.n	8001aa4 <HAL_DFSDM_IRQHandler+0x118>
 8001aa2:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d102      	bne.n	8001aba <HAL_DFSDM_IRQHandler+0x12e>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	e000      	b.n	8001abc <HAL_DFSDM_IRQHandler+0x130>
 8001aba:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8001ac0:	e0c1      	b.n	8001c46 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d03d      	beq.n	8001b48 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d038      	beq.n	8001b48 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 8001ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_DFSDM_IRQHandler+0x162>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <HAL_DFSDM_IRQHandler+0x164>
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8001af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001afe:	e005      	b.n	8001b0c <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8001b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b02:	3301      	adds	r3, #1
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 8001b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b08:	085b      	lsrs	r3, r3, #1
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d102      	bne.n	8001b1c <HAL_DFSDM_IRQHandler+0x190>
 8001b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b18:	2b06      	cmp	r3, #6
 8001b1a:	d9f1      	bls.n	8001b00 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d105      	bne.n	8001b2e <HAL_DFSDM_IRQHandler+0x1a2>
 8001b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b24:	3308      	adds	r3, #8
 8001b26:	2201      	movs	r2, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	e003      	b.n	8001b36 <HAL_DFSDM_IRQHandler+0x1aa>
 8001b2e:	2201      	movs	r2, #1
 8001b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f893 	bl	8001c6c <HAL_DFSDM_FilterAwdCallback>
  {
 8001b46:	e07e      	b.n	8001c46 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a40      	ldr	r2, [pc, #256]	; (8001c50 <HAL_DFSDM_IRQHandler+0x2c4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d141      	bne.n	8001bd6 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d03c      	beq.n	8001bd6 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d037      	beq.n	8001bd6 <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 8001b76:	e02a      	b.n	8001bce <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d01f      	beq.n	8001bc2 <HAL_DFSDM_IRQHandler+0x236>
 8001b82:	4a34      	ldr	r2, [pc, #208]	; (8001c54 <HAL_DFSDM_IRQHandler+0x2c8>)
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d019      	beq.n	8001bc2 <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8001b8e:	4a31      	ldr	r2, [pc, #196]	; (8001c54 <HAL_DFSDM_IRQHandler+0x2c8>)
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00f      	beq.n	8001bc2 <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	f103 0210 	add.w	r2, r3, #16
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2101      	movs	r1, #1
 8001bae:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb2:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8001bb4:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <HAL_DFSDM_IRQHandler+0x2c8>)
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fd2f 	bl	8001620 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	2b07      	cmp	r3, #7
 8001bd2:	d9d1      	bls.n	8001b78 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 8001bd4:	e037      	b.n	8001c46 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1d      	ldr	r2, [pc, #116]	; (8001c50 <HAL_DFSDM_IRQHandler+0x2c4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d132      	bne.n	8001c46 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d02d      	beq.n	8001c46 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d028      	beq.n	8001c46 <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	0e1b      	lsrs	r3, r3, #24
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001c04:	e005      	b.n	8001c12 <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	085b      	lsrs	r3, r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d102      	bne.n	8001c22 <HAL_DFSDM_IRQHandler+0x296>
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d9f1      	bls.n	8001c06 <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f103 0218 	add.w	r2, r3, #24
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c32:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8001c34:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <HAL_DFSDM_IRQHandler+0x2c8>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fcf9 	bl	8001634 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 8001c42:	e000      	b.n	8001c46 <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001c44:	bf00      	nop
}
 8001c46:	bf00      	nop
 8001c48:	3730      	adds	r7, #48	; 0x30
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40016100 	.word	0x40016100
 8001c54:	20000038 	.word	0x20000038

08001c58 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f7fe fce4 	bl	8000674 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f7fe fcaa 	bl	800061c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f7ff ffcd 	bl	8001c84 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a1c      	ldr	r2, [pc, #112]	; (8001d70 <DFSDM_GetChannelFromInstance+0x7c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d102      	bne.n	8001d0a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	e02b      	b.n	8001d62 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <DFSDM_GetChannelFromInstance+0x80>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d102      	bne.n	8001d18 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001d12:	2301      	movs	r3, #1
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	e024      	b.n	8001d62 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a17      	ldr	r2, [pc, #92]	; (8001d78 <DFSDM_GetChannelFromInstance+0x84>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d102      	bne.n	8001d26 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001d20:	2302      	movs	r3, #2
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	e01d      	b.n	8001d62 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a14      	ldr	r2, [pc, #80]	; (8001d7c <DFSDM_GetChannelFromInstance+0x88>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d102      	bne.n	8001d34 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	e016      	b.n	8001d62 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <DFSDM_GetChannelFromInstance+0x8c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d102      	bne.n	8001d42 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001d3c:	2305      	movs	r3, #5
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	e00f      	b.n	8001d62 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a0f      	ldr	r2, [pc, #60]	; (8001d84 <DFSDM_GetChannelFromInstance+0x90>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d102      	bne.n	8001d50 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001d4a:	2306      	movs	r3, #6
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	e008      	b.n	8001d62 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a0d      	ldr	r2, [pc, #52]	; (8001d88 <DFSDM_GetChannelFromInstance+0x94>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d102      	bne.n	8001d5e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001d58:	2307      	movs	r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	e001      	b.n	8001d62 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001d62:	68fb      	ldr	r3, [r7, #12]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	40016000 	.word	0x40016000
 8001d74:	40016020 	.word	0x40016020
 8001d78:	40016040 	.word	0x40016040
 8001d7c:	40016080 	.word	0x40016080
 8001d80:	400160a0 	.word	0x400160a0
 8001d84:	400160c0 	.word	0x400160c0
 8001d88:	400160e0 	.word	0x400160e0

08001d8c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d108      	bne.n	8001dae <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	e033      	b.n	8001e16 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0201 	bic.w	r2, r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001dcc:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f042 0201 	orr.w	r2, r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d116      	bne.n	8001e16 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d107      	bne.n	8001e00 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0202 	orr.w	r2, r2, #2
 8001dfe:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d102      	bne.n	8001e10 <DFSDM_RegConvStart+0x84>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	e000      	b.n	8001e12 <DFSDM_RegConvStart+0x86>
 8001e10:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <DFSDM_RegConvStart+0x98>
 8001e20:	2202      	movs	r2, #2
 8001e22:	e000      	b.n	8001e26 <DFSDM_RegConvStart+0x9a>
 8001e24:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e08d      	b.n	8001f66 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4b47      	ldr	r3, [pc, #284]	; (8001f70 <HAL_DMA_Init+0x138>)
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d80f      	bhi.n	8001e76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b45      	ldr	r3, [pc, #276]	; (8001f74 <HAL_DMA_Init+0x13c>)
 8001e5e:	4413      	add	r3, r2
 8001e60:	4a45      	ldr	r2, [pc, #276]	; (8001f78 <HAL_DMA_Init+0x140>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	091b      	lsrs	r3, r3, #4
 8001e68:	009a      	lsls	r2, r3, #2
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a42      	ldr	r2, [pc, #264]	; (8001f7c <HAL_DMA_Init+0x144>)
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40
 8001e74:	e00e      	b.n	8001e94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b40      	ldr	r3, [pc, #256]	; (8001f80 <HAL_DMA_Init+0x148>)
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a3d      	ldr	r2, [pc, #244]	; (8001f78 <HAL_DMA_Init+0x140>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	009a      	lsls	r2, r3, #2
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a3c      	ldr	r2, [pc, #240]	; (8001f84 <HAL_DMA_Init+0x14c>)
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f9b6 	bl	8002258 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ef4:	d102      	bne.n	8001efc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f10:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d010      	beq.n	8001f3c <HAL_DMA_Init+0x104>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d80c      	bhi.n	8001f3c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f9d6 	bl	80022d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	e008      	b.n	8001f4e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40020407 	.word	0x40020407
 8001f74:	bffdfff8 	.word	0xbffdfff8
 8001f78:	cccccccd 	.word	0xcccccccd
 8001f7c:	40020000 	.word	0x40020000
 8001f80:	bffdfbf8 	.word	0xbffdfbf8
 8001f84:	40020400 	.word	0x40020400

08001f88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_DMA_Start_IT+0x20>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e066      	b.n	8002076 <HAL_DMA_Start_IT+0xee>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d155      	bne.n	8002068 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0201 	bic.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f8fb 	bl	80021dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d008      	beq.n	8002000 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 020e 	orr.w	r2, r2, #14
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	e00f      	b.n	8002020 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0204 	bic.w	r2, r2, #4
 800200e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 020a 	orr.w	r2, r2, #10
 800201e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800203c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	2b00      	cmp	r3, #0
 8002044:	d007      	beq.n	8002056 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002054:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0201 	orr.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	e005      	b.n	8002074 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002070:	2302      	movs	r3, #2
 8002072:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002074:	7dfb      	ldrb	r3, [r7, #23]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	f003 031c 	and.w	r3, r3, #28
 800209e:	2204      	movs	r2, #4
 80020a0:	409a      	lsls	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d026      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x7a>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d021      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d107      	bne.n	80020d2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0204 	bic.w	r2, r2, #4
 80020d0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f003 021c 	and.w	r2, r3, #28
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	2104      	movs	r1, #4
 80020e0:	fa01 f202 	lsl.w	r2, r1, r2
 80020e4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d071      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80020f6:	e06c      	b.n	80021d2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	f003 031c 	and.w	r3, r3, #28
 8002100:	2202      	movs	r2, #2
 8002102:	409a      	lsls	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d02e      	beq.n	800216a <HAL_DMA_IRQHandler+0xec>
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d029      	beq.n	800216a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10b      	bne.n	800213c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 020a 	bic.w	r2, r2, #10
 8002132:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	f003 021c 	and.w	r2, r3, #28
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	2102      	movs	r1, #2
 800214a:	fa01 f202 	lsl.w	r2, r1, r2
 800214e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d038      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002168:	e033      	b.n	80021d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f003 031c 	and.w	r3, r3, #28
 8002172:	2208      	movs	r2, #8
 8002174:	409a      	lsls	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d02a      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x156>
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d025      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 020e 	bic.w	r2, r2, #14
 8002196:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219c:	f003 021c 	and.w	r2, r3, #28
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	2101      	movs	r1, #1
 80021a6:	fa01 f202 	lsl.w	r2, r1, r2
 80021aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d004      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
}
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021f2:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d004      	beq.n	8002206 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002204:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f003 021c 	and.w	r2, r3, #28
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	2101      	movs	r1, #1
 8002214:	fa01 f202 	lsl.w	r2, r1, r2
 8002218:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b10      	cmp	r3, #16
 8002228:	d108      	bne.n	800223c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800223a:	e007      	b.n	800224c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	60da      	str	r2, [r3, #12]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002268:	429a      	cmp	r2, r3
 800226a:	d80a      	bhi.n	8002282 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002278:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6493      	str	r3, [r2, #72]	; 0x48
 8002280:	e007      	b.n	8002292 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	009a      	lsls	r2, r3, #2
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800228c:	4413      	add	r3, r2
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	3b08      	subs	r3, #8
 800229a:	4a0c      	ldr	r2, [pc, #48]	; (80022cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80022a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	2201      	movs	r2, #1
 80022b2:	409a      	lsls	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40020407 	.word	0x40020407
 80022c8:	4002081c 	.word	0x4002081c
 80022cc:	cccccccd 	.word	0xcccccccd
 80022d0:	40020880 	.word	0x40020880

080022d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	461a      	mov	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a08      	ldr	r2, [pc, #32]	; (8002318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80022f6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2201      	movs	r2, #1
 8002302:	409a      	lsls	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	1000823f 	.word	0x1000823f
 8002318:	40020940 	.word	0x40020940

0800231c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232a:	e166      	b.n	80025fa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2101      	movs	r1, #1
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	4013      	ands	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 8158 	beq.w	80025f4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d00b      	beq.n	8002364 <HAL_GPIO_Init+0x48>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d007      	beq.n	8002364 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002358:	2b11      	cmp	r3, #17
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b12      	cmp	r3, #18
 8002362:	d130      	bne.n	80023c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800239a:	2201      	movs	r2, #1
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	f003 0201 	and.w	r2, r3, #1
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	2203      	movs	r2, #3
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4013      	ands	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0xea>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b12      	cmp	r3, #18
 8002404:	d123      	bne.n	800244e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	08da      	lsrs	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3208      	adds	r2, #8
 800240e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	220f      	movs	r2, #15
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	08da      	lsrs	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3208      	adds	r2, #8
 8002448:	6939      	ldr	r1, [r7, #16]
 800244a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0203 	and.w	r2, r3, #3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80b2 	beq.w	80025f4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002490:	4b61      	ldr	r3, [pc, #388]	; (8002618 <HAL_GPIO_Init+0x2fc>)
 8002492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002494:	4a60      	ldr	r2, [pc, #384]	; (8002618 <HAL_GPIO_Init+0x2fc>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6613      	str	r3, [r2, #96]	; 0x60
 800249c:	4b5e      	ldr	r3, [pc, #376]	; (8002618 <HAL_GPIO_Init+0x2fc>)
 800249e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024a8:	4a5c      	ldr	r2, [pc, #368]	; (800261c <HAL_GPIO_Init+0x300>)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	089b      	lsrs	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024d2:	d02b      	beq.n	800252c <HAL_GPIO_Init+0x210>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a52      	ldr	r2, [pc, #328]	; (8002620 <HAL_GPIO_Init+0x304>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d025      	beq.n	8002528 <HAL_GPIO_Init+0x20c>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a51      	ldr	r2, [pc, #324]	; (8002624 <HAL_GPIO_Init+0x308>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d01f      	beq.n	8002524 <HAL_GPIO_Init+0x208>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a50      	ldr	r2, [pc, #320]	; (8002628 <HAL_GPIO_Init+0x30c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d019      	beq.n	8002520 <HAL_GPIO_Init+0x204>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a4f      	ldr	r2, [pc, #316]	; (800262c <HAL_GPIO_Init+0x310>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d013      	beq.n	800251c <HAL_GPIO_Init+0x200>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a4e      	ldr	r2, [pc, #312]	; (8002630 <HAL_GPIO_Init+0x314>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d00d      	beq.n	8002518 <HAL_GPIO_Init+0x1fc>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a4d      	ldr	r2, [pc, #308]	; (8002634 <HAL_GPIO_Init+0x318>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d007      	beq.n	8002514 <HAL_GPIO_Init+0x1f8>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a4c      	ldr	r2, [pc, #304]	; (8002638 <HAL_GPIO_Init+0x31c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d101      	bne.n	8002510 <HAL_GPIO_Init+0x1f4>
 800250c:	2307      	movs	r3, #7
 800250e:	e00e      	b.n	800252e <HAL_GPIO_Init+0x212>
 8002510:	2308      	movs	r3, #8
 8002512:	e00c      	b.n	800252e <HAL_GPIO_Init+0x212>
 8002514:	2306      	movs	r3, #6
 8002516:	e00a      	b.n	800252e <HAL_GPIO_Init+0x212>
 8002518:	2305      	movs	r3, #5
 800251a:	e008      	b.n	800252e <HAL_GPIO_Init+0x212>
 800251c:	2304      	movs	r3, #4
 800251e:	e006      	b.n	800252e <HAL_GPIO_Init+0x212>
 8002520:	2303      	movs	r3, #3
 8002522:	e004      	b.n	800252e <HAL_GPIO_Init+0x212>
 8002524:	2302      	movs	r3, #2
 8002526:	e002      	b.n	800252e <HAL_GPIO_Init+0x212>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <HAL_GPIO_Init+0x212>
 800252c:	2300      	movs	r3, #0
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	f002 0203 	and.w	r2, r2, #3
 8002534:	0092      	lsls	r2, r2, #2
 8002536:	4093      	lsls	r3, r2
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800253e:	4937      	ldr	r1, [pc, #220]	; (800261c <HAL_GPIO_Init+0x300>)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	089b      	lsrs	r3, r3, #2
 8002544:	3302      	adds	r3, #2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800254c:	4b3b      	ldr	r3, [pc, #236]	; (800263c <HAL_GPIO_Init+0x320>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002570:	4a32      	ldr	r2, [pc, #200]	; (800263c <HAL_GPIO_Init+0x320>)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002576:	4b31      	ldr	r3, [pc, #196]	; (800263c <HAL_GPIO_Init+0x320>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	43db      	mvns	r3, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4013      	ands	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800259a:	4a28      	ldr	r2, [pc, #160]	; (800263c <HAL_GPIO_Init+0x320>)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025a0:	4b26      	ldr	r3, [pc, #152]	; (800263c <HAL_GPIO_Init+0x320>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025c4:	4a1d      	ldr	r2, [pc, #116]	; (800263c <HAL_GPIO_Init+0x320>)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025ca:	4b1c      	ldr	r3, [pc, #112]	; (800263c <HAL_GPIO_Init+0x320>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025ee:	4a13      	ldr	r2, [pc, #76]	; (800263c <HAL_GPIO_Init+0x320>)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3301      	adds	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	f47f ae91 	bne.w	800232c <HAL_GPIO_Init+0x10>
  }
}
 800260a:	bf00      	nop
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	40010000 	.word	0x40010000
 8002620:	48000400 	.word	0x48000400
 8002624:	48000800 	.word	0x48000800
 8002628:	48000c00 	.word	0x48000c00
 800262c:	48001000 	.word	0x48001000
 8002630:	48001400 	.word	0x48001400
 8002634:	48001800 	.word	0x48001800
 8002638:	48001c00 	.word	0x48001c00
 800263c:	40010400 	.word	0x40010400

08002640 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002644:	4b0d      	ldr	r3, [pc, #52]	; (800267c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800264c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002650:	d102      	bne.n	8002658 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002656:	e00b      	b.n	8002670 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <HAL_PWREx_GetVoltageRange+0x3c>)
 800265a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002666:	d102      	bne.n	800266e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800266c:	e000      	b.n	8002670 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800266e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40007000 	.word	0x40007000

08002680 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d141      	bne.n	8002712 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800268e:	4b4b      	ldr	r3, [pc, #300]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269a:	d131      	bne.n	8002700 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800269c:	4b47      	ldr	r3, [pc, #284]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a2:	4a46      	ldr	r2, [pc, #280]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ac:	4b43      	ldr	r3, [pc, #268]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026b4:	4a41      	ldr	r2, [pc, #260]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80026bc:	4b40      	ldr	r3, [pc, #256]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2232      	movs	r2, #50	; 0x32
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	4a3f      	ldr	r2, [pc, #252]	; (80027c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026c8:	fba2 2303 	umull	r2, r3, r2, r3
 80026cc:	0c9b      	lsrs	r3, r3, #18
 80026ce:	3301      	adds	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026d2:	e002      	b.n	80026da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026da:	4b38      	ldr	r3, [pc, #224]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e6:	d102      	bne.n	80026ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f2      	bne.n	80026d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026ee:	4b33      	ldr	r3, [pc, #204]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fa:	d158      	bne.n	80027ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e057      	b.n	80027b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002700:	4b2e      	ldr	r3, [pc, #184]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002706:	4a2d      	ldr	r2, [pc, #180]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800270c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002710:	e04d      	b.n	80027ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002718:	d141      	bne.n	800279e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800271a:	4b28      	ldr	r3, [pc, #160]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002726:	d131      	bne.n	800278c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800272a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800272e:	4a23      	ldr	r2, [pc, #140]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002734:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002738:	4b20      	ldr	r3, [pc, #128]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002740:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002746:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002748:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2232      	movs	r2, #50	; 0x32
 800274e:	fb02 f303 	mul.w	r3, r2, r3
 8002752:	4a1c      	ldr	r2, [pc, #112]	; (80027c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002754:	fba2 2303 	umull	r2, r3, r2, r3
 8002758:	0c9b      	lsrs	r3, r3, #18
 800275a:	3301      	adds	r3, #1
 800275c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800275e:	e002      	b.n	8002766 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3b01      	subs	r3, #1
 8002764:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002772:	d102      	bne.n	800277a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f2      	bne.n	8002760 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002786:	d112      	bne.n	80027ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e011      	b.n	80027b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800278e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002792:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002798:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800279c:	e007      	b.n	80027ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800279e:	4b07      	ldr	r3, [pc, #28]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027a6:	4a05      	ldr	r2, [pc, #20]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	40007000 	.word	0x40007000
 80027c0:	20000000 	.word	0x20000000
 80027c4:	431bde83 	.word	0x431bde83

080027c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	f000 bc16 	b.w	8003008 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027dc:	4ba0      	ldr	r3, [pc, #640]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027e6:	4b9e      	ldr	r3, [pc, #632]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80e4 	beq.w	80029c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <HAL_RCC_OscConfig+0x4c>
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b0c      	cmp	r3, #12
 8002808:	f040 808b 	bne.w	8002922 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b01      	cmp	r3, #1
 8002810:	f040 8087 	bne.w	8002922 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002814:	4b92      	ldr	r3, [pc, #584]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_RCC_OscConfig+0x64>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e3ed      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1a      	ldr	r2, [r3, #32]
 8002830:	4b8b      	ldr	r3, [pc, #556]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d004      	beq.n	8002846 <HAL_RCC_OscConfig+0x7e>
 800283c:	4b88      	ldr	r3, [pc, #544]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002844:	e005      	b.n	8002852 <HAL_RCC_OscConfig+0x8a>
 8002846:	4b86      	ldr	r3, [pc, #536]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002852:	4293      	cmp	r3, r2
 8002854:	d223      	bcs.n	800289e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fd9c 	bl	8003398 <RCC_SetFlashLatencyFromMSIRange>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e3ce      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800286a:	4b7d      	ldr	r3, [pc, #500]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a7c      	ldr	r2, [pc, #496]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002870:	f043 0308 	orr.w	r3, r3, #8
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b7a      	ldr	r3, [pc, #488]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4977      	ldr	r1, [pc, #476]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002884:	4313      	orrs	r3, r2
 8002886:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002888:	4b75      	ldr	r3, [pc, #468]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	4972      	ldr	r1, [pc, #456]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
 800289c:	e025      	b.n	80028ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800289e:	4b70      	ldr	r3, [pc, #448]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6f      	ldr	r2, [pc, #444]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 80028a4:	f043 0308 	orr.w	r3, r3, #8
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	4b6d      	ldr	r3, [pc, #436]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	496a      	ldr	r1, [pc, #424]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028bc:	4b68      	ldr	r3, [pc, #416]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	4965      	ldr	r1, [pc, #404]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fd5c 	bl	8003398 <RCC_SetFlashLatencyFromMSIRange>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e38e      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028ea:	f000 fcbf 	bl	800326c <HAL_RCC_GetSysClockFreq>
 80028ee:	4601      	mov	r1, r0
 80028f0:	4b5b      	ldr	r3, [pc, #364]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	4a5a      	ldr	r2, [pc, #360]	; (8002a64 <HAL_RCC_OscConfig+0x29c>)
 80028fc:	5cd3      	ldrb	r3, [r2, r3]
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	fa21 f303 	lsr.w	r3, r1, r3
 8002906:	4a58      	ldr	r2, [pc, #352]	; (8002a68 <HAL_RCC_OscConfig+0x2a0>)
 8002908:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800290a:	4b58      	ldr	r3, [pc, #352]	; (8002a6c <HAL_RCC_OscConfig+0x2a4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe f96e 	bl	8000bf0 <HAL_InitTick>
 8002914:	4603      	mov	r3, r0
 8002916:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d052      	beq.n	80029c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	e372      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d032      	beq.n	8002990 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800292a:	4b4d      	ldr	r3, [pc, #308]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a4c      	ldr	r2, [pc, #304]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002936:	f7fe f9ab 	bl	8000c90 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800293e:	f7fe f9a7 	bl	8000c90 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e35b      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002950:	4b43      	ldr	r3, [pc, #268]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800295c:	4b40      	ldr	r3, [pc, #256]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a3f      	ldr	r2, [pc, #252]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002962:	f043 0308 	orr.w	r3, r3, #8
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b3d      	ldr	r3, [pc, #244]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	493a      	ldr	r1, [pc, #232]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800297a:	4b39      	ldr	r3, [pc, #228]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	4935      	ldr	r1, [pc, #212]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
 800298e:	e01a      	b.n	80029c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002990:	4b33      	ldr	r3, [pc, #204]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a32      	ldr	r2, [pc, #200]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800299c:	f7fe f978 	bl	8000c90 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029a4:	f7fe f974 	bl	8000c90 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e328      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029b6:	4b2a      	ldr	r3, [pc, #168]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x1dc>
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d073      	beq.n	8002aba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_OscConfig+0x21c>
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b0c      	cmp	r3, #12
 80029dc:	d10e      	bne.n	80029fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d10b      	bne.n	80029fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d063      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x2f0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d15f      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e305      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a04:	d106      	bne.n	8002a14 <HAL_RCC_OscConfig+0x24c>
 8002a06:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a15      	ldr	r2, [pc, #84]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e01d      	b.n	8002a50 <HAL_RCC_OscConfig+0x288>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x270>
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a0f      	ldr	r2, [pc, #60]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a0c      	ldr	r2, [pc, #48]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e00b      	b.n	8002a50 <HAL_RCC_OscConfig+0x288>
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a08      	ldr	r2, [pc, #32]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a05      	ldr	r2, [pc, #20]	; (8002a60 <HAL_RCC_OscConfig+0x298>)
 8002a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01b      	beq.n	8002a90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7fe f91a 	bl	8000c90 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a5e:	e010      	b.n	8002a82 <HAL_RCC_OscConfig+0x2ba>
 8002a60:	40021000 	.word	0x40021000
 8002a64:	080048e0 	.word	0x080048e0
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a70:	f7fe f90e 	bl	8000c90 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e2c2      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a82:	4baf      	ldr	r3, [pc, #700]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x2a8>
 8002a8e:	e014      	b.n	8002aba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe f8fe 	bl	8000c90 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a98:	f7fe f8fa 	bl	8000c90 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	; 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e2ae      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aaa:	4ba5      	ldr	r3, [pc, #660]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x2d0>
 8002ab6:	e000      	b.n	8002aba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d060      	beq.n	8002b88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x310>
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2b0c      	cmp	r3, #12
 8002ad0:	d119      	bne.n	8002b06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d116      	bne.n	8002b06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad8:	4b99      	ldr	r3, [pc, #612]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_OscConfig+0x328>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e28b      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af0:	4b93      	ldr	r3, [pc, #588]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	061b      	lsls	r3, r3, #24
 8002afe:	4990      	ldr	r1, [pc, #576]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b04:	e040      	b.n	8002b88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d023      	beq.n	8002b56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b0e:	4b8c      	ldr	r3, [pc, #560]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a8b      	ldr	r2, [pc, #556]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7fe f8b9 	bl	8000c90 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b22:	f7fe f8b5 	bl	8000c90 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e269      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b34:	4b82      	ldr	r3, [pc, #520]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b40:	4b7f      	ldr	r3, [pc, #508]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	061b      	lsls	r3, r3, #24
 8002b4e:	497c      	ldr	r1, [pc, #496]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
 8002b54:	e018      	b.n	8002b88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b56:	4b7a      	ldr	r3, [pc, #488]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a79      	ldr	r2, [pc, #484]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b62:	f7fe f895 	bl	8000c90 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b6a:	f7fe f891 	bl	8000c90 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e245      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b7c:	4b70      	ldr	r3, [pc, #448]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f0      	bne.n	8002b6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d03c      	beq.n	8002c0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01c      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b9c:	4b68      	ldr	r3, [pc, #416]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba2:	4a67      	ldr	r2, [pc, #412]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bac:	f7fe f870 	bl	8000c90 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb4:	f7fe f86c 	bl	8000c90 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e220      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bc6:	4b5e      	ldr	r3, [pc, #376]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0ef      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x3ec>
 8002bd4:	e01b      	b.n	8002c0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd6:	4b5a      	ldr	r3, [pc, #360]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bdc:	4a58      	ldr	r2, [pc, #352]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be6:	f7fe f853 	bl	8000c90 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bee:	f7fe f84f 	bl	8000c90 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e203      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c00:	4b4f      	ldr	r3, [pc, #316]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1ef      	bne.n	8002bee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 80a6 	beq.w	8002d68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c20:	4b47      	ldr	r3, [pc, #284]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10d      	bne.n	8002c48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2c:	4b44      	ldr	r3, [pc, #272]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c30:	4a43      	ldr	r2, [pc, #268]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c36:	6593      	str	r3, [r2, #88]	; 0x58
 8002c38:	4b41      	ldr	r3, [pc, #260]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c44:	2301      	movs	r3, #1
 8002c46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c48:	4b3e      	ldr	r3, [pc, #248]	; (8002d44 <HAL_RCC_OscConfig+0x57c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d118      	bne.n	8002c86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c54:	4b3b      	ldr	r3, [pc, #236]	; (8002d44 <HAL_RCC_OscConfig+0x57c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a3a      	ldr	r2, [pc, #232]	; (8002d44 <HAL_RCC_OscConfig+0x57c>)
 8002c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c60:	f7fe f816 	bl	8000c90 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c68:	f7fe f812 	bl	8000c90 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e1c6      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c7a:	4b32      	ldr	r3, [pc, #200]	; (8002d44 <HAL_RCC_OscConfig+0x57c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d108      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x4d8>
 8002c8e:	4b2c      	ldr	r3, [pc, #176]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c94:	4a2a      	ldr	r2, [pc, #168]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c9e:	e024      	b.n	8002cea <HAL_RCC_OscConfig+0x522>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b05      	cmp	r3, #5
 8002ca6:	d110      	bne.n	8002cca <HAL_RCC_OscConfig+0x502>
 8002ca8:	4b25      	ldr	r3, [pc, #148]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	4a24      	ldr	r2, [pc, #144]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002cb0:	f043 0304 	orr.w	r3, r3, #4
 8002cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cb8:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	4a20      	ldr	r2, [pc, #128]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cc8:	e00f      	b.n	8002cea <HAL_RCC_OscConfig+0x522>
 8002cca:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	4a1b      	ldr	r2, [pc, #108]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002cd2:	f023 0301 	bic.w	r3, r3, #1
 8002cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cda:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce0:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002ce2:	f023 0304 	bic.w	r3, r3, #4
 8002ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d016      	beq.n	8002d20 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf2:	f7fd ffcd 	bl	8000c90 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fd ffc9 	bl	8000c90 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e17b      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_RCC_OscConfig+0x578>)
 8002d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0ed      	beq.n	8002cfa <HAL_RCC_OscConfig+0x532>
 8002d1e:	e01a      	b.n	8002d56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d20:	f7fd ffb6 	bl	8000c90 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d26:	e00f      	b.n	8002d48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d28:	f7fd ffb2 	bl	8000c90 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d906      	bls.n	8002d48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e164      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d48:	4ba8      	ldr	r3, [pc, #672]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1e8      	bne.n	8002d28 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d56:	7ffb      	ldrb	r3, [r7, #31]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5c:	4ba3      	ldr	r3, [pc, #652]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	4aa2      	ldr	r2, [pc, #648]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d03c      	beq.n	8002dee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d01c      	beq.n	8002db6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d7c:	4b9b      	ldr	r3, [pc, #620]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d82:	4a9a      	ldr	r2, [pc, #616]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7fd ff80 	bl	8000c90 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d94:	f7fd ff7c 	bl	8000c90 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e130      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002da6:	4b91      	ldr	r3, [pc, #580]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002da8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ef      	beq.n	8002d94 <HAL_RCC_OscConfig+0x5cc>
 8002db4:	e01b      	b.n	8002dee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002db6:	4b8d      	ldr	r3, [pc, #564]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dbc:	4a8b      	ldr	r2, [pc, #556]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002dbe:	f023 0301 	bic.w	r3, r3, #1
 8002dc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fd ff63 	bl	8000c90 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dce:	f7fd ff5f 	bl	8000c90 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e113      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002de0:	4b82      	ldr	r3, [pc, #520]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002de2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1ef      	bne.n	8002dce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 8107 	beq.w	8003006 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	f040 80cb 	bne.w	8002f98 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e02:	4b7a      	ldr	r3, [pc, #488]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f003 0203 	and.w	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d12c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	3b01      	subs	r3, #1
 8002e22:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d123      	bne.n	8002e70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e32:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d11b      	bne.n	8002e70 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d113      	bne.n	8002e70 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e52:	085b      	lsrs	r3, r3, #1
 8002e54:	3b01      	subs	r3, #1
 8002e56:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d109      	bne.n	8002e70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	085b      	lsrs	r3, r3, #1
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d06d      	beq.n	8002f4c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	2b0c      	cmp	r3, #12
 8002e74:	d068      	beq.n	8002f48 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e76:	4b5d      	ldr	r3, [pc, #372]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d105      	bne.n	8002e8e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e82:	4b5a      	ldr	r3, [pc, #360]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e0ba      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e92:	4b56      	ldr	r3, [pc, #344]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a55      	ldr	r2, [pc, #340]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002e98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e9e:	f7fd fef7 	bl	8000c90 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea6:	f7fd fef3 	bl	8000c90 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e0a7      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb8:	4b4c      	ldr	r3, [pc, #304]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f0      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec4:	4b49      	ldr	r3, [pc, #292]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	4b49      	ldr	r3, [pc, #292]	; (8002ff0 <HAL_RCC_OscConfig+0x828>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ed4:	3a01      	subs	r2, #1
 8002ed6:	0112      	lsls	r2, r2, #4
 8002ed8:	4311      	orrs	r1, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ede:	0212      	lsls	r2, r2, #8
 8002ee0:	4311      	orrs	r1, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ee6:	0852      	lsrs	r2, r2, #1
 8002ee8:	3a01      	subs	r2, #1
 8002eea:	0552      	lsls	r2, r2, #21
 8002eec:	4311      	orrs	r1, r2
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ef2:	0852      	lsrs	r2, r2, #1
 8002ef4:	3a01      	subs	r2, #1
 8002ef6:	0652      	lsls	r2, r2, #25
 8002ef8:	4311      	orrs	r1, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002efe:	06d2      	lsls	r2, r2, #27
 8002f00:	430a      	orrs	r2, r1
 8002f02:	493a      	ldr	r1, [pc, #232]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f08:	4b38      	ldr	r3, [pc, #224]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a37      	ldr	r2, [pc, #220]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f14:	4b35      	ldr	r3, [pc, #212]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4a34      	ldr	r2, [pc, #208]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f20:	f7fd feb6 	bl	8000c90 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f28:	f7fd feb2 	bl	8000c90 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e066      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f3a:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f46:	e05e      	b.n	8003006 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e05d      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f4c:	4b27      	ldr	r3, [pc, #156]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d156      	bne.n	8003006 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f58:	4b24      	ldr	r3, [pc, #144]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a23      	ldr	r2, [pc, #140]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f64:	4b21      	ldr	r3, [pc, #132]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	4a20      	ldr	r2, [pc, #128]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f70:	f7fd fe8e 	bl	8000c90 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f78:	f7fd fe8a 	bl	8000c90 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e03e      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8a:	4b18      	ldr	r3, [pc, #96]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x7b0>
 8002f96:	e036      	b.n	8003006 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2b0c      	cmp	r3, #12
 8002f9c:	d031      	beq.n	8003002 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9e:	4b13      	ldr	r3, [pc, #76]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a12      	ldr	r2, [pc, #72]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002fa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fa8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d105      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	4a0c      	ldr	r2, [pc, #48]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002fbc:	f023 0303 	bic.w	r3, r3, #3
 8002fc0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	4a09      	ldr	r2, [pc, #36]	; (8002fec <HAL_RCC_OscConfig+0x824>)
 8002fc8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd2:	f7fd fe5d 	bl	8000c90 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd8:	e00c      	b.n	8002ff4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fda:	f7fd fe59 	bl	8000c90 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d905      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e00d      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_RCC_OscConfig+0x848>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1ec      	bne.n	8002fda <HAL_RCC_OscConfig+0x812>
 8003000:	e001      	b.n	8003006 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3720      	adds	r7, #32
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000

08003014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e10f      	b.n	800324c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800302c:	4b89      	ldr	r3, [pc, #548]	; (8003254 <HAL_RCC_ClockConfig+0x240>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 030f 	and.w	r3, r3, #15
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d910      	bls.n	800305c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4b86      	ldr	r3, [pc, #536]	; (8003254 <HAL_RCC_ClockConfig+0x240>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 020f 	bic.w	r2, r3, #15
 8003042:	4984      	ldr	r1, [pc, #528]	; (8003254 <HAL_RCC_ClockConfig+0x240>)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b82      	ldr	r3, [pc, #520]	; (8003254 <HAL_RCC_ClockConfig+0x240>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0f7      	b.n	800324c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8089 	beq.w	800317c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d133      	bne.n	80030da <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003072:	4b79      	ldr	r3, [pc, #484]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e0e4      	b.n	800324c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003082:	f000 f9e3 	bl	800344c <RCC_GetSysClockFreqFromPLLSource>
 8003086:	4602      	mov	r2, r0
 8003088:	4b74      	ldr	r3, [pc, #464]	; (800325c <HAL_RCC_ClockConfig+0x248>)
 800308a:	429a      	cmp	r2, r3
 800308c:	d955      	bls.n	800313a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800308e:	4b72      	ldr	r3, [pc, #456]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800309a:	4b6f      	ldr	r3, [pc, #444]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030a2:	4a6d      	ldr	r2, [pc, #436]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 80030a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	e044      	b.n	800313a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d03e      	beq.n	800313a <HAL_RCC_ClockConfig+0x126>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d13a      	bne.n	800313a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030c4:	4b64      	ldr	r3, [pc, #400]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030cc:	4a62      	ldr	r2, [pc, #392]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 80030ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	e02f      	b.n	800313a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030e2:	4b5d      	ldr	r3, [pc, #372]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d115      	bne.n	800311a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e0ac      	b.n	800324c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030fa:	4b57      	ldr	r3, [pc, #348]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e0a0      	b.n	800324c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800310a:	4b53      	ldr	r3, [pc, #332]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e098      	b.n	800324c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800311a:	f000 f8a7 	bl	800326c <HAL_RCC_GetSysClockFreq>
 800311e:	4602      	mov	r2, r0
 8003120:	4b4e      	ldr	r3, [pc, #312]	; (800325c <HAL_RCC_ClockConfig+0x248>)
 8003122:	429a      	cmp	r2, r3
 8003124:	d909      	bls.n	800313a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003126:	4b4c      	ldr	r3, [pc, #304]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800312e:	4a4a      	ldr	r2, [pc, #296]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 8003130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003134:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003136:	2380      	movs	r3, #128	; 0x80
 8003138:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800313a:	4b47      	ldr	r3, [pc, #284]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4944      	ldr	r1, [pc, #272]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 8003148:	4313      	orrs	r3, r2
 800314a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800314c:	f7fd fda0 	bl	8000c90 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	e00a      	b.n	800316a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003154:	f7fd fd9c 	bl	8000c90 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e070      	b.n	800324c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	4b3b      	ldr	r3, [pc, #236]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 020c 	and.w	r2, r3, #12
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	429a      	cmp	r2, r3
 800317a:	d1eb      	bne.n	8003154 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003188:	4b33      	ldr	r3, [pc, #204]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	4930      	ldr	r1, [pc, #192]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
 800319a:	e008      	b.n	80031ae <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2b80      	cmp	r3, #128	; 0x80
 80031a0:	d105      	bne.n	80031ae <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80031a2:	4b2d      	ldr	r3, [pc, #180]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	4a2c      	ldr	r2, [pc, #176]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 80031a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ac:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031ae:	4b29      	ldr	r3, [pc, #164]	; (8003254 <HAL_RCC_ClockConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d210      	bcs.n	80031de <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031bc:	4b25      	ldr	r3, [pc, #148]	; (8003254 <HAL_RCC_ClockConfig+0x240>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 020f 	bic.w	r2, r3, #15
 80031c4:	4923      	ldr	r1, [pc, #140]	; (8003254 <HAL_RCC_ClockConfig+0x240>)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031cc:	4b21      	ldr	r3, [pc, #132]	; (8003254 <HAL_RCC_ClockConfig+0x240>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d001      	beq.n	80031de <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e036      	b.n	800324c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ea:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	4918      	ldr	r1, [pc, #96]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d009      	beq.n	800321c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003208:	4b13      	ldr	r3, [pc, #76]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4910      	ldr	r1, [pc, #64]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 8003218:	4313      	orrs	r3, r2
 800321a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800321c:	f000 f826 	bl	800326c <HAL_RCC_GetSysClockFreq>
 8003220:	4601      	mov	r1, r0
 8003222:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <HAL_RCC_ClockConfig+0x244>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	091b      	lsrs	r3, r3, #4
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	4a0c      	ldr	r2, [pc, #48]	; (8003260 <HAL_RCC_ClockConfig+0x24c>)
 800322e:	5cd3      	ldrb	r3, [r2, r3]
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	fa21 f303 	lsr.w	r3, r1, r3
 8003238:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <HAL_RCC_ClockConfig+0x250>)
 800323a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <HAL_RCC_ClockConfig+0x254>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f7fd fcd5 	bl	8000bf0 <HAL_InitTick>
 8003246:	4603      	mov	r3, r0
 8003248:	73fb      	strb	r3, [r7, #15]

  return status;
 800324a:	7bfb      	ldrb	r3, [r7, #15]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40022000 	.word	0x40022000
 8003258:	40021000 	.word	0x40021000
 800325c:	04c4b400 	.word	0x04c4b400
 8003260:	080048e0 	.word	0x080048e0
 8003264:	20000000 	.word	0x20000000
 8003268:	20000004 	.word	0x20000004

0800326c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800326c:	b480      	push	{r7}
 800326e:	b089      	sub	sp, #36	; 0x24
 8003270:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
 8003276:	2300      	movs	r3, #0
 8003278:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800327a:	4b3d      	ldr	r3, [pc, #244]	; (8003370 <HAL_RCC_GetSysClockFreq+0x104>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003284:	4b3a      	ldr	r3, [pc, #232]	; (8003370 <HAL_RCC_GetSysClockFreq+0x104>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	2b0c      	cmp	r3, #12
 8003298:	d121      	bne.n	80032de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d11e      	bne.n	80032de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032a0:	4b33      	ldr	r3, [pc, #204]	; (8003370 <HAL_RCC_GetSysClockFreq+0x104>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d107      	bne.n	80032bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032ac:	4b30      	ldr	r3, [pc, #192]	; (8003370 <HAL_RCC_GetSysClockFreq+0x104>)
 80032ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	e005      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032bc:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <HAL_RCC_GetSysClockFreq+0x104>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032c8:	4a2a      	ldr	r2, [pc, #168]	; (8003374 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10d      	bne.n	80032f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032dc:	e00a      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d102      	bne.n	80032ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032e4:	4b24      	ldr	r3, [pc, #144]	; (8003378 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032e6:	61bb      	str	r3, [r7, #24]
 80032e8:	e004      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d101      	bne.n	80032f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032f0:	4b22      	ldr	r3, [pc, #136]	; (800337c <HAL_RCC_GetSysClockFreq+0x110>)
 80032f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	2b0c      	cmp	r3, #12
 80032f8:	d133      	bne.n	8003362 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032fa:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_RCC_GetSysClockFreq+0x104>)
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d002      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0xa4>
 800330a:	2b03      	cmp	r3, #3
 800330c:	d003      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0xaa>
 800330e:	e005      	b.n	800331c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003310:	4b19      	ldr	r3, [pc, #100]	; (8003378 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003312:	617b      	str	r3, [r7, #20]
      break;
 8003314:	e005      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003316:	4b19      	ldr	r3, [pc, #100]	; (800337c <HAL_RCC_GetSysClockFreq+0x110>)
 8003318:	617b      	str	r3, [r7, #20]
      break;
 800331a:	e002      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	617b      	str	r3, [r7, #20]
      break;
 8003320:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003322:	4b13      	ldr	r3, [pc, #76]	; (8003370 <HAL_RCC_GetSysClockFreq+0x104>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	3301      	adds	r3, #1
 800332e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <HAL_RCC_GetSysClockFreq+0x104>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	0a1b      	lsrs	r3, r3, #8
 8003336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	fb02 f203 	mul.w	r2, r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
 8003346:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003348:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_RCC_GetSysClockFreq+0x104>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	0e5b      	lsrs	r3, r3, #25
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	3301      	adds	r3, #1
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003360:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003362:	69bb      	ldr	r3, [r7, #24]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3724      	adds	r7, #36	; 0x24
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	40021000 	.word	0x40021000
 8003374:	080048f0 	.word	0x080048f0
 8003378:	00f42400 	.word	0x00f42400
 800337c:	007a1200 	.word	0x007a1200

08003380 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <HAL_RCC_GetHCLKFreq+0x14>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000000 	.word	0x20000000

08003398 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033a0:	2300      	movs	r3, #0
 80033a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033a4:	4b27      	ldr	r3, [pc, #156]	; (8003444 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033b0:	f7ff f946 	bl	8002640 <HAL_PWREx_GetVoltageRange>
 80033b4:	6178      	str	r0, [r7, #20]
 80033b6:	e014      	b.n	80033e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033b8:	4b22      	ldr	r3, [pc, #136]	; (8003444 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033bc:	4a21      	ldr	r2, [pc, #132]	; (8003444 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c2:	6593      	str	r3, [r2, #88]	; 0x58
 80033c4:	4b1f      	ldr	r3, [pc, #124]	; (8003444 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80033d0:	f7ff f936 	bl	8002640 <HAL_PWREx_GetVoltageRange>
 80033d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80033d6:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	4a1a      	ldr	r2, [pc, #104]	; (8003444 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80033dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e8:	d10b      	bne.n	8003402 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b80      	cmp	r3, #128	; 0x80
 80033ee:	d913      	bls.n	8003418 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2ba0      	cmp	r3, #160	; 0xa0
 80033f4:	d902      	bls.n	80033fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033f6:	2302      	movs	r3, #2
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	e00d      	b.n	8003418 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033fc:	2301      	movs	r3, #1
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	e00a      	b.n	8003418 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b7f      	cmp	r3, #127	; 0x7f
 8003406:	d902      	bls.n	800340e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003408:	2302      	movs	r3, #2
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	e004      	b.n	8003418 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b70      	cmp	r3, #112	; 0x70
 8003412:	d101      	bne.n	8003418 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003414:	2301      	movs	r3, #1
 8003416:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f023 020f 	bic.w	r2, r3, #15
 8003420:	4909      	ldr	r1, [pc, #36]	; (8003448 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003428:	4b07      	ldr	r3, [pc, #28]	; (8003448 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	429a      	cmp	r2, r3
 8003434:	d001      	beq.n	800343a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000
 8003448:	40022000 	.word	0x40022000

0800344c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003456:	4b2d      	ldr	r3, [pc, #180]	; (800350c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d118      	bne.n	8003494 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003462:	4b2a      	ldr	r3, [pc, #168]	; (800350c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d107      	bne.n	800347e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800346e:	4b27      	ldr	r3, [pc, #156]	; (800350c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003474:	0a1b      	lsrs	r3, r3, #8
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	e005      	b.n	800348a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800347e:	4b23      	ldr	r3, [pc, #140]	; (800350c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	091b      	lsrs	r3, r3, #4
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800348a:	4a21      	ldr	r2, [pc, #132]	; (8003510 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003492:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003494:	4b1d      	ldr	r3, [pc, #116]	; (800350c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d002      	beq.n	80034aa <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d003      	beq.n	80034b0 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80034a8:	e005      	b.n	80034b6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80034aa:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80034ac:	613b      	str	r3, [r7, #16]
    break;
 80034ae:	e005      	b.n	80034bc <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80034b2:	613b      	str	r3, [r7, #16]
    break;
 80034b4:	e002      	b.n	80034bc <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	613b      	str	r3, [r7, #16]
    break;
 80034ba:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034bc:	4b13      	ldr	r3, [pc, #76]	; (800350c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	3301      	adds	r3, #1
 80034c8:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034ca:	4b10      	ldr	r3, [pc, #64]	; (800350c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	0a1b      	lsrs	r3, r3, #8
 80034d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	fb02 f203 	mul.w	r2, r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e0:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	0e5b      	lsrs	r3, r3, #25
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	3301      	adds	r3, #1
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80034fc:	683b      	ldr	r3, [r7, #0]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
 8003510:	080048f0 	.word	0x080048f0
 8003514:	00f42400 	.word	0x00f42400
 8003518:	007a1200 	.word	0x007a1200

0800351c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003524:	2300      	movs	r3, #0
 8003526:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003528:	2300      	movs	r3, #0
 800352a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003534:	2b00      	cmp	r3, #0
 8003536:	d03d      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d00b      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003540:	2b40      	cmp	r3, #64	; 0x40
 8003542:	d804      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00e      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003548:	2b20      	cmp	r3, #32
 800354a:	d015      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800354c:	e01d      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800354e:	2b60      	cmp	r3, #96	; 0x60
 8003550:	d01e      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003552:	2b80      	cmp	r3, #128	; 0x80
 8003554:	d01c      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003556:	e018      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003558:	4b86      	ldr	r3, [pc, #536]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4a85      	ldr	r2, [pc, #532]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800355e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003562:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003564:	e015      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3304      	adds	r3, #4
 800356a:	2100      	movs	r1, #0
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fafd 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003576:	e00c      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3320      	adds	r3, #32
 800357c:	2100      	movs	r1, #0
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fbe4 	bl	8003d4c <RCCEx_PLLSAI2_Config>
 8003584:	4603      	mov	r3, r0
 8003586:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003588:	e003      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	74fb      	strb	r3, [r7, #19]
      break;
 800358e:	e000      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003590:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003592:	7cfb      	ldrb	r3, [r7, #19]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10b      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003598:	4b76      	ldr	r3, [pc, #472]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800359a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800359e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a6:	4973      	ldr	r1, [pc, #460]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80035ae:	e001      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d042      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c8:	d00f      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xce>
 80035ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ce:	d805      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d011      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 80035d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d8:	d017      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xee>
 80035da:	e01f      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x100>
 80035dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035e0:	d01f      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e6:	d01c      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035e8:	e018      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035ea:	4b62      	ldr	r3, [pc, #392]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	4a61      	ldr	r2, [pc, #388]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035f6:	e015      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3304      	adds	r3, #4
 80035fc:	2100      	movs	r1, #0
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fab4 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 8003604:	4603      	mov	r3, r0
 8003606:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003608:	e00c      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3320      	adds	r3, #32
 800360e:	2100      	movs	r1, #0
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fb9b 	bl	8003d4c <RCCEx_PLLSAI2_Config>
 8003616:	4603      	mov	r3, r0
 8003618:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800361a:	e003      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	74fb      	strb	r3, [r7, #19]
      break;
 8003620:	e000      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10b      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800362a:	4b52      	ldr	r3, [pc, #328]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800362c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	494e      	ldr	r1, [pc, #312]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003640:	e001      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003642:	7cfb      	ldrb	r3, [r7, #19]
 8003644:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 809f 	beq.w	8003792 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003654:	2300      	movs	r3, #0
 8003656:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003658:	4b46      	ldr	r3, [pc, #280]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800365a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003668:	2300      	movs	r3, #0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00d      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366e:	4b41      	ldr	r3, [pc, #260]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003672:	4a40      	ldr	r2, [pc, #256]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003678:	6593      	str	r3, [r2, #88]	; 0x58
 800367a:	4b3e      	ldr	r3, [pc, #248]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003686:	2301      	movs	r3, #1
 8003688:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800368a:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a3a      	ldr	r2, [pc, #232]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003694:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003696:	f7fd fafb 	bl	8000c90 <HAL_GetTick>
 800369a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800369c:	e009      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369e:	f7fd faf7 	bl	8000c90 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d902      	bls.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	74fb      	strb	r3, [r7, #19]
        break;
 80036b0:	e005      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036b2:	4b31      	ldr	r3, [pc, #196]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0ef      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d15b      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036c4:	4b2b      	ldr	r3, [pc, #172]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ce:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d01f      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d019      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036e2:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036ee:	4b21      	ldr	r3, [pc, #132]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f4:	4a1f      	ldr	r2, [pc, #124]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036fe:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003704:	4a1b      	ldr	r2, [pc, #108]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800370e:	4a19      	ldr	r2, [pc, #100]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d016      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fd fab6 	bl	8000c90 <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003726:	e00b      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003728:	f7fd fab2 	bl	8000c90 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	; 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d902      	bls.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	74fb      	strb	r3, [r7, #19]
            break;
 800373e:	e006      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003740:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0ec      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800374e:	7cfb      	ldrb	r3, [r7, #19]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10c      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003754:	4b07      	ldr	r3, [pc, #28]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003764:	4903      	ldr	r1, [pc, #12]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800376c:	e008      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	74bb      	strb	r3, [r7, #18]
 8003772:	e005      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003774:	40021000 	.word	0x40021000
 8003778:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377c:	7cfb      	ldrb	r3, [r7, #19]
 800377e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003780:	7c7b      	ldrb	r3, [r7, #17]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d105      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003786:	4ba0      	ldr	r3, [pc, #640]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378a:	4a9f      	ldr	r2, [pc, #636]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003790:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800379e:	4b9a      	ldr	r3, [pc, #616]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a4:	f023 0203 	bic.w	r2, r3, #3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ac:	4996      	ldr	r1, [pc, #600]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037c0:	4b91      	ldr	r3, [pc, #580]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	f023 020c 	bic.w	r2, r3, #12
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	498e      	ldr	r1, [pc, #568]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037e2:	4b89      	ldr	r3, [pc, #548]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f0:	4985      	ldr	r1, [pc, #532]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003804:	4b80      	ldr	r3, [pc, #512]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003812:	497d      	ldr	r1, [pc, #500]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003826:	4b78      	ldr	r3, [pc, #480]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003834:	4974      	ldr	r1, [pc, #464]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003848:	4b6f      	ldr	r3, [pc, #444]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003856:	496c      	ldr	r1, [pc, #432]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800386a:	4b67      	ldr	r3, [pc, #412]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003870:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	4963      	ldr	r1, [pc, #396]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800388c:	4b5e      	ldr	r3, [pc, #376]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003892:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800389a:	495b      	ldr	r1, [pc, #364]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ae:	4b56      	ldr	r3, [pc, #344]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038bc:	4952      	ldr	r1, [pc, #328]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038d0:	4b4d      	ldr	r3, [pc, #308]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	494a      	ldr	r1, [pc, #296]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038f2:	4b45      	ldr	r3, [pc, #276]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003900:	4941      	ldr	r1, [pc, #260]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003914:	4b3c      	ldr	r3, [pc, #240]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003916:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003922:	4939      	ldr	r1, [pc, #228]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d028      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003936:	4b34      	ldr	r3, [pc, #208]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003944:	4930      	ldr	r1, [pc, #192]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003954:	d106      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003956:	4b2c      	ldr	r3, [pc, #176]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	4a2b      	ldr	r2, [pc, #172]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003960:	60d3      	str	r3, [r2, #12]
 8003962:	e011      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003968:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800396c:	d10c      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3304      	adds	r3, #4
 8003972:	2101      	movs	r1, #1
 8003974:	4618      	mov	r0, r3
 8003976:	f000 f8f9 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 800397a:	4603      	mov	r3, r0
 800397c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800397e:	7cfb      	ldrb	r3, [r7, #19]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8003984:	7cfb      	ldrb	r3, [r7, #19]
 8003986:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d04d      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800399c:	d108      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800399e:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039a4:	4a18      	ldr	r2, [pc, #96]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039aa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80039ae:	e012      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80039b0:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039b6:	4a14      	ldr	r2, [pc, #80]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039bc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80039c0:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ce:	490e      	ldr	r1, [pc, #56]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039de:	d106      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4a08      	ldr	r2, [pc, #32]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ea:	60d3      	str	r3, [r2, #12]
 80039ec:	e020      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039f6:	d109      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039f8:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4a02      	ldr	r2, [pc, #8]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a02:	60d3      	str	r3, [r2, #12]
 8003a04:	e014      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a14:	d10c      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 f8a5 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 8003a22:	4603      	mov	r3, r0
 8003a24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a26:	7cfb      	ldrb	r3, [r7, #19]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a2c:	7cfb      	ldrb	r3, [r7, #19]
 8003a2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d028      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a3c:	4b4a      	ldr	r3, [pc, #296]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a4a:	4947      	ldr	r1, [pc, #284]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a5a:	d106      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a5c:	4b42      	ldr	r3, [pc, #264]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4a41      	ldr	r2, [pc, #260]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a66:	60d3      	str	r3, [r2, #12]
 8003a68:	e011      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a72:	d10c      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	2101      	movs	r1, #1
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f876 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 8003a80:	4603      	mov	r3, r0
 8003a82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003a8a:	7cfb      	ldrb	r3, [r7, #19]
 8003a8c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d01e      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a9a:	4b33      	ldr	r3, [pc, #204]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aaa:	492f      	ldr	r1, [pc, #188]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ab8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 f851 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ace:	7cfb      	ldrb	r3, [r7, #19]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
 8003ad6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00b      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ae4:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aea:	f023 0204 	bic.w	r2, r3, #4
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af4:	491c      	ldr	r1, [pc, #112]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00b      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b08:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b0e:	f023 0218 	bic.w	r2, r3, #24
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	4913      	ldr	r1, [pc, #76]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d017      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003b2c:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b3c:	490a      	ldr	r1, [pc, #40]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b4e:	d105      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4a04      	ldr	r2, [pc, #16]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000

08003b6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b7a:	4b70      	ldr	r3, [pc, #448]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00e      	beq.n	8003ba4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b86:	4b6d      	ldr	r3, [pc, #436]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 0203 	and.w	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d103      	bne.n	8003b9e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
       ||
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d13f      	bne.n	8003c1e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
 8003ba2:	e03c      	b.n	8003c1e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d00c      	beq.n	8003bc6 <RCCEx_PLLSAI1_Config+0x5a>
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d013      	beq.n	8003bd8 <RCCEx_PLLSAI1_Config+0x6c>
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d120      	bne.n	8003bf6 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bb4:	4b61      	ldr	r3, [pc, #388]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d11d      	bne.n	8003bfc <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc4:	e01a      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bc6:	4b5d      	ldr	r3, [pc, #372]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d116      	bne.n	8003c00 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd6:	e013      	b.n	8003c00 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bd8:	4b58      	ldr	r3, [pc, #352]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10f      	bne.n	8003c04 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003be4:	4b55      	ldr	r3, [pc, #340]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bf4:	e006      	b.n	8003c04 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
      break;
 8003bfa:	e004      	b.n	8003c06 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003bfc:	bf00      	nop
 8003bfe:	e002      	b.n	8003c06 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003c00:	bf00      	nop
 8003c02:	e000      	b.n	8003c06 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003c04:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d108      	bne.n	8003c1e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003c0c:	4b4b      	ldr	r3, [pc, #300]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f023 0203 	bic.w	r2, r3, #3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4948      	ldr	r1, [pc, #288]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f040 8086 	bne.w	8003d32 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c26:	4b45      	ldr	r3, [pc, #276]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a44      	ldr	r2, [pc, #272]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c32:	f7fd f82d 	bl	8000c90 <HAL_GetTick>
 8003c36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c38:	e009      	b.n	8003c4e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c3a:	f7fd f829 	bl	8000c90 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d902      	bls.n	8003c4e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	73fb      	strb	r3, [r7, #15]
        break;
 8003c4c:	e005      	b.n	8003c5a <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c4e:	4b3b      	ldr	r3, [pc, #236]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1ef      	bne.n	8003c3a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d168      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d113      	bne.n	8003c8e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c66:	4b35      	ldr	r3, [pc, #212]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	4b35      	ldr	r3, [pc, #212]	; (8003d40 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6892      	ldr	r2, [r2, #8]
 8003c72:	0211      	lsls	r1, r2, #8
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	68d2      	ldr	r2, [r2, #12]
 8003c78:	06d2      	lsls	r2, r2, #27
 8003c7a:	4311      	orrs	r1, r2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6852      	ldr	r2, [r2, #4]
 8003c80:	3a01      	subs	r2, #1
 8003c82:	0112      	lsls	r2, r2, #4
 8003c84:	430a      	orrs	r2, r1
 8003c86:	492d      	ldr	r1, [pc, #180]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	610b      	str	r3, [r1, #16]
 8003c8c:	e02d      	b.n	8003cea <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d115      	bne.n	8003cc0 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c94:	4b29      	ldr	r3, [pc, #164]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	4b2a      	ldr	r3, [pc, #168]	; (8003d44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6892      	ldr	r2, [r2, #8]
 8003ca0:	0211      	lsls	r1, r2, #8
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6912      	ldr	r2, [r2, #16]
 8003ca6:	0852      	lsrs	r2, r2, #1
 8003ca8:	3a01      	subs	r2, #1
 8003caa:	0552      	lsls	r2, r2, #21
 8003cac:	4311      	orrs	r1, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6852      	ldr	r2, [r2, #4]
 8003cb2:	3a01      	subs	r2, #1
 8003cb4:	0112      	lsls	r2, r2, #4
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	4920      	ldr	r1, [pc, #128]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	610b      	str	r3, [r1, #16]
 8003cbe:	e014      	b.n	8003cea <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cc0:	4b1e      	ldr	r3, [pc, #120]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6892      	ldr	r2, [r2, #8]
 8003ccc:	0211      	lsls	r1, r2, #8
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6952      	ldr	r2, [r2, #20]
 8003cd2:	0852      	lsrs	r2, r2, #1
 8003cd4:	3a01      	subs	r2, #1
 8003cd6:	0652      	lsls	r2, r2, #25
 8003cd8:	4311      	orrs	r1, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6852      	ldr	r2, [r2, #4]
 8003cde:	3a01      	subs	r2, #1
 8003ce0:	0112      	lsls	r2, r2, #4
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	4915      	ldr	r1, [pc, #84]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cea:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a13      	ldr	r2, [pc, #76]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003cf0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cf4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf6:	f7fc ffcb 	bl	8000c90 <HAL_GetTick>
 8003cfa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cfc:	e009      	b.n	8003d12 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cfe:	f7fc ffc7 	bl	8000c90 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d902      	bls.n	8003d12 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	73fb      	strb	r3, [r7, #15]
          break;
 8003d10:	e005      	b.n	8003d1e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d12:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0ef      	beq.n	8003cfe <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d106      	bne.n	8003d32 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	4903      	ldr	r1, [pc, #12]	; (8003d3c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	07ff800f 	.word	0x07ff800f
 8003d44:	ff9f800f 	.word	0xff9f800f
 8003d48:	f9ff800f 	.word	0xf9ff800f

08003d4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d5a:	4b70      	ldr	r3, [pc, #448]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00e      	beq.n	8003d84 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d66:	4b6d      	ldr	r3, [pc, #436]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f003 0203 	and.w	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d103      	bne.n	8003d7e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
       ||
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d13f      	bne.n	8003dfe <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
 8003d82:	e03c      	b.n	8003dfe <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d00c      	beq.n	8003da6 <RCCEx_PLLSAI2_Config+0x5a>
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d013      	beq.n	8003db8 <RCCEx_PLLSAI2_Config+0x6c>
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d120      	bne.n	8003dd6 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d94:	4b61      	ldr	r3, [pc, #388]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d11d      	bne.n	8003ddc <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da4:	e01a      	b.n	8003ddc <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003da6:	4b5d      	ldr	r3, [pc, #372]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d116      	bne.n	8003de0 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db6:	e013      	b.n	8003de0 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003db8:	4b58      	ldr	r3, [pc, #352]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10f      	bne.n	8003de4 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dc4:	4b55      	ldr	r3, [pc, #340]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d109      	bne.n	8003de4 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dd4:	e006      	b.n	8003de4 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8003dda:	e004      	b.n	8003de6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003ddc:	bf00      	nop
 8003dde:	e002      	b.n	8003de6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003de0:	bf00      	nop
 8003de2:	e000      	b.n	8003de6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003de4:	bf00      	nop
    }

    if(status == HAL_OK)
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d108      	bne.n	8003dfe <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003dec:	4b4b      	ldr	r3, [pc, #300]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f023 0203 	bic.w	r2, r3, #3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4948      	ldr	r1, [pc, #288]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f040 8086 	bne.w	8003f12 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e06:	4b45      	ldr	r3, [pc, #276]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a44      	ldr	r2, [pc, #272]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e12:	f7fc ff3d 	bl	8000c90 <HAL_GetTick>
 8003e16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e18:	e009      	b.n	8003e2e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e1a:	f7fc ff39 	bl	8000c90 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d902      	bls.n	8003e2e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	73fb      	strb	r3, [r7, #15]
        break;
 8003e2c:	e005      	b.n	8003e3a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e2e:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1ef      	bne.n	8003e1a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d168      	bne.n	8003f12 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d113      	bne.n	8003e6e <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e46:	4b35      	ldr	r3, [pc, #212]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	4b35      	ldr	r3, [pc, #212]	; (8003f20 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6892      	ldr	r2, [r2, #8]
 8003e52:	0211      	lsls	r1, r2, #8
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	68d2      	ldr	r2, [r2, #12]
 8003e58:	06d2      	lsls	r2, r2, #27
 8003e5a:	4311      	orrs	r1, r2
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6852      	ldr	r2, [r2, #4]
 8003e60:	3a01      	subs	r2, #1
 8003e62:	0112      	lsls	r2, r2, #4
 8003e64:	430a      	orrs	r2, r1
 8003e66:	492d      	ldr	r1, [pc, #180]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	614b      	str	r3, [r1, #20]
 8003e6c:	e02d      	b.n	8003eca <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d115      	bne.n	8003ea0 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e74:	4b29      	ldr	r3, [pc, #164]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e76:	695a      	ldr	r2, [r3, #20]
 8003e78:	4b2a      	ldr	r3, [pc, #168]	; (8003f24 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6892      	ldr	r2, [r2, #8]
 8003e80:	0211      	lsls	r1, r2, #8
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6912      	ldr	r2, [r2, #16]
 8003e86:	0852      	lsrs	r2, r2, #1
 8003e88:	3a01      	subs	r2, #1
 8003e8a:	0552      	lsls	r2, r2, #21
 8003e8c:	4311      	orrs	r1, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6852      	ldr	r2, [r2, #4]
 8003e92:	3a01      	subs	r2, #1
 8003e94:	0112      	lsls	r2, r2, #4
 8003e96:	430a      	orrs	r2, r1
 8003e98:	4920      	ldr	r1, [pc, #128]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	614b      	str	r3, [r1, #20]
 8003e9e:	e014      	b.n	8003eca <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ea0:	4b1e      	ldr	r3, [pc, #120]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ea2:	695a      	ldr	r2, [r3, #20]
 8003ea4:	4b20      	ldr	r3, [pc, #128]	; (8003f28 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6892      	ldr	r2, [r2, #8]
 8003eac:	0211      	lsls	r1, r2, #8
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6952      	ldr	r2, [r2, #20]
 8003eb2:	0852      	lsrs	r2, r2, #1
 8003eb4:	3a01      	subs	r2, #1
 8003eb6:	0652      	lsls	r2, r2, #25
 8003eb8:	4311      	orrs	r1, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6852      	ldr	r2, [r2, #4]
 8003ebe:	3a01      	subs	r2, #1
 8003ec0:	0112      	lsls	r2, r2, #4
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	4915      	ldr	r1, [pc, #84]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003eca:	4b14      	ldr	r3, [pc, #80]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a13      	ldr	r2, [pc, #76]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed6:	f7fc fedb 	bl	8000c90 <HAL_GetTick>
 8003eda:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003edc:	e009      	b.n	8003ef2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ede:	f7fc fed7 	bl	8000c90 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d902      	bls.n	8003ef2 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	73fb      	strb	r3, [r7, #15]
          break;
 8003ef0:	e005      	b.n	8003efe <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0ef      	beq.n	8003ede <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	4903      	ldr	r1, [pc, #12]	; (8003f1c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	07ff800f 	.word	0x07ff800f
 8003f24:	ff9f800f 	.word	0xff9f800f
 8003f28:	f9ff800f 	.word	0xf9ff800f

08003f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e049      	b.n	8003fd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fc fd64 	bl	8000a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3304      	adds	r3, #4
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	f000 faa6 	bl	80044bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d001      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e04f      	b.n	8004094 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a23      	ldr	r2, [pc, #140]	; (80040a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d01d      	beq.n	8004052 <HAL_TIM_Base_Start_IT+0x76>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401e:	d018      	beq.n	8004052 <HAL_TIM_Base_Start_IT+0x76>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1f      	ldr	r2, [pc, #124]	; (80040a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <HAL_TIM_Base_Start_IT+0x76>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1e      	ldr	r2, [pc, #120]	; (80040a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00e      	beq.n	8004052 <HAL_TIM_Base_Start_IT+0x76>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1c      	ldr	r2, [pc, #112]	; (80040ac <HAL_TIM_Base_Start_IT+0xd0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d009      	beq.n	8004052 <HAL_TIM_Base_Start_IT+0x76>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a1b      	ldr	r2, [pc, #108]	; (80040b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d004      	beq.n	8004052 <HAL_TIM_Base_Start_IT+0x76>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a19      	ldr	r2, [pc, #100]	; (80040b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d115      	bne.n	800407e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	4b17      	ldr	r3, [pc, #92]	; (80040b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800405a:	4013      	ands	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b06      	cmp	r3, #6
 8004062:	d015      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0xb4>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406a:	d011      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407c:	e008      	b.n	8004090 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0201 	orr.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	e000      	b.n	8004092 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004090:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	40012c00 	.word	0x40012c00
 80040a4:	40000400 	.word	0x40000400
 80040a8:	40000800 	.word	0x40000800
 80040ac:	40000c00 	.word	0x40000c00
 80040b0:	40013400 	.word	0x40013400
 80040b4:	40014000 	.word	0x40014000
 80040b8:	00010007 	.word	0x00010007

080040bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d122      	bne.n	8004118 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d11b      	bne.n	8004118 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0202 	mvn.w	r2, #2
 80040e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f9be 	bl	8004480 <HAL_TIM_IC_CaptureCallback>
 8004104:	e005      	b.n	8004112 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f9b0 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f9c1 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b04      	cmp	r3, #4
 8004124:	d122      	bne.n	800416c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b04      	cmp	r3, #4
 8004132:	d11b      	bne.n	800416c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0204 	mvn.w	r2, #4
 800413c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2202      	movs	r2, #2
 8004142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f994 	bl	8004480 <HAL_TIM_IC_CaptureCallback>
 8004158:	e005      	b.n	8004166 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f986 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f997 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b08      	cmp	r3, #8
 8004178:	d122      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b08      	cmp	r3, #8
 8004186:	d11b      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0208 	mvn.w	r2, #8
 8004190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2204      	movs	r2, #4
 8004196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f96a 	bl	8004480 <HAL_TIM_IC_CaptureCallback>
 80041ac:	e005      	b.n	80041ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f95c 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f96d 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b10      	cmp	r3, #16
 80041cc:	d122      	bne.n	8004214 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b10      	cmp	r3, #16
 80041da:	d11b      	bne.n	8004214 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0210 	mvn.w	r2, #16
 80041e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2208      	movs	r2, #8
 80041ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f940 	bl	8004480 <HAL_TIM_IC_CaptureCallback>
 8004200:	e005      	b.n	800420e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f932 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f943 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b01      	cmp	r3, #1
 8004220:	d10e      	bne.n	8004240 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b01      	cmp	r3, #1
 800422e:	d107      	bne.n	8004240 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0201 	mvn.w	r2, #1
 8004238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fc fa48 	bl	80006d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424a:	2b80      	cmp	r3, #128	; 0x80
 800424c:	d10e      	bne.n	800426c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004258:	2b80      	cmp	r3, #128	; 0x80
 800425a:	d107      	bne.n	800426c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 faee 	bl	8004848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800427a:	d10e      	bne.n	800429a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004286:	2b80      	cmp	r3, #128	; 0x80
 8004288:	d107      	bne.n	800429a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fae1 	bl	800485c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a4:	2b40      	cmp	r3, #64	; 0x40
 80042a6:	d10e      	bne.n	80042c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b2:	2b40      	cmp	r3, #64	; 0x40
 80042b4:	d107      	bne.n	80042c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f8f1 	bl	80044a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d10e      	bne.n	80042f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d107      	bne.n	80042f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f06f 0220 	mvn.w	r2, #32
 80042ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 faa1 	bl	8004834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b084      	sub	sp, #16
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_TIM_ConfigClockSource+0x18>
 800430e:	2302      	movs	r3, #2
 8004310:	e0a8      	b.n	8004464 <HAL_TIM_ConfigClockSource+0x16a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2202      	movs	r2, #2
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004330:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004334:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800433c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b40      	cmp	r3, #64	; 0x40
 800434c:	d067      	beq.n	800441e <HAL_TIM_ConfigClockSource+0x124>
 800434e:	2b40      	cmp	r3, #64	; 0x40
 8004350:	d80b      	bhi.n	800436a <HAL_TIM_ConfigClockSource+0x70>
 8004352:	2b10      	cmp	r3, #16
 8004354:	d073      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x144>
 8004356:	2b10      	cmp	r3, #16
 8004358:	d802      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x66>
 800435a:	2b00      	cmp	r3, #0
 800435c:	d06f      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800435e:	e078      	b.n	8004452 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004360:	2b20      	cmp	r3, #32
 8004362:	d06c      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x144>
 8004364:	2b30      	cmp	r3, #48	; 0x30
 8004366:	d06a      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004368:	e073      	b.n	8004452 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800436a:	2b70      	cmp	r3, #112	; 0x70
 800436c:	d00d      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x90>
 800436e:	2b70      	cmp	r3, #112	; 0x70
 8004370:	d804      	bhi.n	800437c <HAL_TIM_ConfigClockSource+0x82>
 8004372:	2b50      	cmp	r3, #80	; 0x50
 8004374:	d033      	beq.n	80043de <HAL_TIM_ConfigClockSource+0xe4>
 8004376:	2b60      	cmp	r3, #96	; 0x60
 8004378:	d041      	beq.n	80043fe <HAL_TIM_ConfigClockSource+0x104>
      break;
 800437a:	e06a      	b.n	8004452 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800437c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004380:	d066      	beq.n	8004450 <HAL_TIM_ConfigClockSource+0x156>
 8004382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004386:	d017      	beq.n	80043b8 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004388:	e063      	b.n	8004452 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6899      	ldr	r1, [r3, #8]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f000 f9a3 	bl	80046e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	609a      	str	r2, [r3, #8]
      break;
 80043b6:	e04c      	b.n	8004452 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	6899      	ldr	r1, [r3, #8]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f000 f98c 	bl	80046e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043da:	609a      	str	r2, [r3, #8]
      break;
 80043dc:	e039      	b.n	8004452 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6859      	ldr	r1, [r3, #4]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	461a      	mov	r2, r3
 80043ec:	f000 f900 	bl	80045f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2150      	movs	r1, #80	; 0x50
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 f959 	bl	80046ae <TIM_ITRx_SetConfig>
      break;
 80043fc:	e029      	b.n	8004452 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6859      	ldr	r1, [r3, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	461a      	mov	r2, r3
 800440c:	f000 f91f 	bl	800464e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2160      	movs	r1, #96	; 0x60
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f949 	bl	80046ae <TIM_ITRx_SetConfig>
      break;
 800441c:	e019      	b.n	8004452 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6859      	ldr	r1, [r3, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	461a      	mov	r2, r3
 800442c:	f000 f8e0 	bl	80045f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2140      	movs	r1, #64	; 0x40
 8004436:	4618      	mov	r0, r3
 8004438:	f000 f939 	bl	80046ae <TIM_ITRx_SetConfig>
      break;
 800443c:	e009      	b.n	8004452 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4619      	mov	r1, r3
 8004448:	4610      	mov	r0, r2
 800444a:	f000 f930 	bl	80046ae <TIM_ITRx_SetConfig>
        break;
 800444e:	e000      	b.n	8004452 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004450:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a40      	ldr	r2, [pc, #256]	; (80045d0 <TIM_Base_SetConfig+0x114>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d013      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044da:	d00f      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a3d      	ldr	r2, [pc, #244]	; (80045d4 <TIM_Base_SetConfig+0x118>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00b      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a3c      	ldr	r2, [pc, #240]	; (80045d8 <TIM_Base_SetConfig+0x11c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d007      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a3b      	ldr	r2, [pc, #236]	; (80045dc <TIM_Base_SetConfig+0x120>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d003      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a3a      	ldr	r2, [pc, #232]	; (80045e0 <TIM_Base_SetConfig+0x124>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d108      	bne.n	800450e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a2f      	ldr	r2, [pc, #188]	; (80045d0 <TIM_Base_SetConfig+0x114>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d01f      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451c:	d01b      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a2c      	ldr	r2, [pc, #176]	; (80045d4 <TIM_Base_SetConfig+0x118>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d017      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a2b      	ldr	r2, [pc, #172]	; (80045d8 <TIM_Base_SetConfig+0x11c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d013      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <TIM_Base_SetConfig+0x120>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00f      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a29      	ldr	r2, [pc, #164]	; (80045e0 <TIM_Base_SetConfig+0x124>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00b      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a28      	ldr	r2, [pc, #160]	; (80045e4 <TIM_Base_SetConfig+0x128>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d007      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a27      	ldr	r2, [pc, #156]	; (80045e8 <TIM_Base_SetConfig+0x12c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d003      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a26      	ldr	r2, [pc, #152]	; (80045ec <TIM_Base_SetConfig+0x130>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d108      	bne.n	8004568 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a10      	ldr	r2, [pc, #64]	; (80045d0 <TIM_Base_SetConfig+0x114>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00f      	beq.n	80045b4 <TIM_Base_SetConfig+0xf8>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a12      	ldr	r2, [pc, #72]	; (80045e0 <TIM_Base_SetConfig+0x124>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00b      	beq.n	80045b4 <TIM_Base_SetConfig+0xf8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a11      	ldr	r2, [pc, #68]	; (80045e4 <TIM_Base_SetConfig+0x128>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d007      	beq.n	80045b4 <TIM_Base_SetConfig+0xf8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a10      	ldr	r2, [pc, #64]	; (80045e8 <TIM_Base_SetConfig+0x12c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_Base_SetConfig+0xf8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a0f      	ldr	r2, [pc, #60]	; (80045ec <TIM_Base_SetConfig+0x130>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d103      	bne.n	80045bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	615a      	str	r2, [r3, #20]
}
 80045c2:	bf00      	nop
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40000400 	.word	0x40000400
 80045d8:	40000800 	.word	0x40000800
 80045dc:	40000c00 	.word	0x40000c00
 80045e0:	40013400 	.word	0x40013400
 80045e4:	40014000 	.word	0x40014000
 80045e8:	40014400 	.word	0x40014400
 80045ec:	40014800 	.word	0x40014800

080045f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f023 0201 	bic.w	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800461a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f023 030a 	bic.w	r3, r3, #10
 800462c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	621a      	str	r2, [r3, #32]
}
 8004642:	bf00      	nop
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800464e:	b480      	push	{r7}
 8004650:	b087      	sub	sp, #28
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f023 0210 	bic.w	r2, r3, #16
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004678:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	031b      	lsls	r3, r3, #12
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4313      	orrs	r3, r2
 8004682:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800468a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	621a      	str	r2, [r3, #32]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b085      	sub	sp, #20
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f043 0307 	orr.w	r3, r3, #7
 80046d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	609a      	str	r2, [r3, #8]
}
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	021a      	lsls	r2, r3, #8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	431a      	orrs	r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4313      	orrs	r3, r2
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	609a      	str	r2, [r3, #8]
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004738:	2302      	movs	r3, #2
 800473a:	e068      	b.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a2e      	ldr	r2, [pc, #184]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a2d      	ldr	r2, [pc, #180]	; (8004820 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d108      	bne.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004776:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004788:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1e      	ldr	r2, [pc, #120]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01d      	beq.n	80047e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ae:	d018      	beq.n	80047e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1b      	ldr	r2, [pc, #108]	; (8004824 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1a      	ldr	r2, [pc, #104]	; (8004828 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00e      	beq.n	80047e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a18      	ldr	r2, [pc, #96]	; (800482c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d009      	beq.n	80047e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a13      	ldr	r2, [pc, #76]	; (8004820 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d004      	beq.n	80047e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a14      	ldr	r2, [pc, #80]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d10c      	bne.n	80047fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40012c00 	.word	0x40012c00
 8004820:	40013400 	.word	0x40013400
 8004824:	40000400 	.word	0x40000400
 8004828:	40000800 	.word	0x40000800
 800482c:	40000c00 	.word	0x40000c00
 8004830:	40014000 	.word	0x40014000

08004834 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <__libc_init_array>:
 8004870:	b570      	push	{r4, r5, r6, lr}
 8004872:	4e0d      	ldr	r6, [pc, #52]	; (80048a8 <__libc_init_array+0x38>)
 8004874:	4c0d      	ldr	r4, [pc, #52]	; (80048ac <__libc_init_array+0x3c>)
 8004876:	1ba4      	subs	r4, r4, r6
 8004878:	10a4      	asrs	r4, r4, #2
 800487a:	2500      	movs	r5, #0
 800487c:	42a5      	cmp	r5, r4
 800487e:	d109      	bne.n	8004894 <__libc_init_array+0x24>
 8004880:	4e0b      	ldr	r6, [pc, #44]	; (80048b0 <__libc_init_array+0x40>)
 8004882:	4c0c      	ldr	r4, [pc, #48]	; (80048b4 <__libc_init_array+0x44>)
 8004884:	f000 f820 	bl	80048c8 <_init>
 8004888:	1ba4      	subs	r4, r4, r6
 800488a:	10a4      	asrs	r4, r4, #2
 800488c:	2500      	movs	r5, #0
 800488e:	42a5      	cmp	r5, r4
 8004890:	d105      	bne.n	800489e <__libc_init_array+0x2e>
 8004892:	bd70      	pop	{r4, r5, r6, pc}
 8004894:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004898:	4798      	blx	r3
 800489a:	3501      	adds	r5, #1
 800489c:	e7ee      	b.n	800487c <__libc_init_array+0xc>
 800489e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048a2:	4798      	blx	r3
 80048a4:	3501      	adds	r5, #1
 80048a6:	e7f2      	b.n	800488e <__libc_init_array+0x1e>
 80048a8:	08004920 	.word	0x08004920
 80048ac:	08004920 	.word	0x08004920
 80048b0:	08004920 	.word	0x08004920
 80048b4:	08004924 	.word	0x08004924

080048b8 <memset>:
 80048b8:	4402      	add	r2, r0
 80048ba:	4603      	mov	r3, r0
 80048bc:	4293      	cmp	r3, r2
 80048be:	d100      	bne.n	80048c2 <memset+0xa>
 80048c0:	4770      	bx	lr
 80048c2:	f803 1b01 	strb.w	r1, [r3], #1
 80048c6:	e7f9      	b.n	80048bc <memset+0x4>

080048c8 <_init>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	bf00      	nop
 80048cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ce:	bc08      	pop	{r3}
 80048d0:	469e      	mov	lr, r3
 80048d2:	4770      	bx	lr

080048d4 <_fini>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	bf00      	nop
 80048d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048da:	bc08      	pop	{r3}
 80048dc:	469e      	mov	lr, r3
 80048de:	4770      	bx	lr
