
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c874  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013e0c  0800ca34  0800ca34  0001ca34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020840  08020840  0004007c  2**0
                  CONTENTS
  4 .ARM          00000008  08020840  08020840  00030840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020848  08020848  0004007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020848  08020848  00030848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802084c  0802084c  0003084c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08020850  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00024f24  2000007c  080208cc  0004007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20024fa0  080208cc  00044fa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c8d8  00000000  00000000  000400ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004dac  00000000  00000000  0006c984  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ca0  00000000  00000000  00071730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a60  00000000  00000000  000733d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f9c3  00000000  00000000  00074e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018ec4  00000000  00000000  000a47f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012a15d  00000000  00000000  000bd6b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  001e7814  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ea8  00000000  00000000  001e7904  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000303b  00000000  00000000  001ef7ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ca1c 	.word	0x0800ca1c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000080 	.word	0x20000080
 80001fc:	0800ca1c 	.word	0x0800ca1c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b972 	b.w	8000f64 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	4688      	mov	r8, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14b      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4615      	mov	r5, r2
 8000caa:	d967      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0720 	rsb	r7, r2, #32
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	fa20 f707 	lsr.w	r7, r0, r7
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	ea47 0803 	orr.w	r8, r7, r3
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cd0:	fa1f fc85 	uxth.w	ip, r5
 8000cd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cea:	f080 811b 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8118 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000cf4:	3f02      	subs	r7, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	192c      	adds	r4, r5, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d16:	f080 8107 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	f240 8104 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000d20:	3802      	subs	r0, #2
 8000d22:	442c      	add	r4, r5
 8000d24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	b11e      	cbz	r6, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c6 4300 	strd	r4, r3, [r6]
 8000d38:	4639      	mov	r1, r7
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0xbe>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80eb 	beq.w	8000f1e <__udivmoddi4+0x286>
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d4e:	4638      	mov	r0, r7
 8000d50:	4639      	mov	r1, r7
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f783 	clz	r7, r3
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d147      	bne.n	8000dee <__udivmoddi4+0x156>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xd0>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2c4>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	4698      	mov	r8, r3
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d0e0      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000d76:	e9c6 4800 	strd	r4, r8, [r6]
 8000d7a:	e7dd      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000d7c:	b902      	cbnz	r2, 8000d80 <__udivmoddi4+0xe8>
 8000d7e:	deff      	udf	#255	; 0xff
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f040 808f 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d8a:	1b49      	subs	r1, r1, r5
 8000d8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d90:	fa1f f885 	uxth.w	r8, r5
 8000d94:	2701      	movs	r7, #1
 8000d96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb08 f10c 	mul.w	r1, r8, ip
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000dac:	18eb      	adds	r3, r5, r3
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4299      	cmp	r1, r3
 8000db6:	f200 80cd 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1a59      	subs	r1, r3, r1
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x14c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x14a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80b6 	bhi.w	8000f4e <__udivmoddi4+0x2b6>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e79f      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dee:	f1c7 0c20 	rsb	ip, r7, #32
 8000df2:	40bb      	lsls	r3, r7
 8000df4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000df8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000e00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e0c:	4325      	orrs	r5, r4
 8000e0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e12:	0c2c      	lsrs	r4, r5, #16
 8000e14:	fb08 3319 	mls	r3, r8, r9, r3
 8000e18:	fa1f fa8e 	uxth.w	sl, lr
 8000e1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e20:	fb09 f40a 	mul.w	r4, r9, sl
 8000e24:	429c      	cmp	r4, r3
 8000e26:	fa02 f207 	lsl.w	r2, r2, r7
 8000e2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1e 0303 	adds.w	r3, lr, r3
 8000e34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e38:	f080 8087 	bcs.w	8000f4a <__udivmoddi4+0x2b2>
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	f240 8084 	bls.w	8000f4a <__udivmoddi4+0x2b2>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4473      	add	r3, lr
 8000e48:	1b1b      	subs	r3, r3, r4
 8000e4a:	b2ad      	uxth	r5, r5
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3310 	mls	r3, r8, r0, r3
 8000e54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e5c:	45a2      	cmp	sl, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1e 0404 	adds.w	r4, lr, r4
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e68:	d26b      	bcs.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6a:	45a2      	cmp	sl, r4
 8000e6c:	d969      	bls.n	8000f42 <__udivmoddi4+0x2aa>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4474      	add	r4, lr
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7a:	eba4 040a 	sub.w	r4, r4, sl
 8000e7e:	454c      	cmp	r4, r9
 8000e80:	46c2      	mov	sl, r8
 8000e82:	464b      	mov	r3, r9
 8000e84:	d354      	bcc.n	8000f30 <__udivmoddi4+0x298>
 8000e86:	d051      	beq.n	8000f2c <__udivmoddi4+0x294>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d069      	beq.n	8000f60 <__udivmoddi4+0x2c8>
 8000e8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e90:	eb64 0403 	sbc.w	r4, r4, r3
 8000e94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	40fc      	lsrs	r4, r7
 8000e9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000ea0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ea4:	2700      	movs	r7, #0
 8000ea6:	e747      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f703 	lsr.w	r7, r0, r3
 8000eb0:	4095      	lsls	r5, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ebe:	4338      	orrs	r0, r7
 8000ec0:	0c01      	lsrs	r1, r0, #16
 8000ec2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ec6:	fa1f f885 	uxth.w	r8, r5
 8000eca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb07 f308 	mul.w	r3, r7, r8
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	fa04 f402 	lsl.w	r4, r4, r2
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x256>
 8000ede:	1869      	adds	r1, r5, r1
 8000ee0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ee4:	d22f      	bcs.n	8000f46 <__udivmoddi4+0x2ae>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d92d      	bls.n	8000f46 <__udivmoddi4+0x2ae>
 8000eea:	3f02      	subs	r7, #2
 8000eec:	4429      	add	r1, r5
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	b281      	uxth	r1, r0
 8000ef2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efe:	fb00 f308 	mul.w	r3, r0, r8
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x27e>
 8000f06:	1869      	adds	r1, r5, r1
 8000f08:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f0c:	d217      	bcs.n	8000f3e <__udivmoddi4+0x2a6>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d915      	bls.n	8000f3e <__udivmoddi4+0x2a6>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4429      	add	r1, r5
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f1c:	e73b      	b.n	8000d96 <__udivmoddi4+0xfe>
 8000f1e:	4637      	mov	r7, r6
 8000f20:	4630      	mov	r0, r6
 8000f22:	e709      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f24:	4607      	mov	r7, r0
 8000f26:	e6e7      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fb      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f2c:	4541      	cmp	r1, r8
 8000f2e:	d2ab      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f34:	eb69 020e 	sbc.w	r2, r9, lr
 8000f38:	3801      	subs	r0, #1
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	e7a4      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f3e:	4660      	mov	r0, ip
 8000f40:	e7e9      	b.n	8000f16 <__udivmoddi4+0x27e>
 8000f42:	4618      	mov	r0, r3
 8000f44:	e795      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f46:	4667      	mov	r7, ip
 8000f48:	e7d1      	b.n	8000eee <__udivmoddi4+0x256>
 8000f4a:	4681      	mov	r9, r0
 8000f4c:	e77c      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	442c      	add	r4, r5
 8000f52:	e747      	b.n	8000de4 <__udivmoddi4+0x14c>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	442b      	add	r3, r5
 8000f5a:	e72f      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f5c:	4638      	mov	r0, r7
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xda>
 8000f60:	4637      	mov	r7, r6
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0xa0>

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <vApplicationGetIdleTaskMemory+0x30>)
 8000f7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f86:	bf00      	nop
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000098 	.word	0x20000098
 8000f98:	200000ec 	.word	0x200000ec

08000f9c <readAvgMicrophoneInput>:
	}
}


//Calibrates the microphone -> measures the initial DC offset of the microphone readings
void readAvgMicrophoneInput() {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++) {
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	e00c      	b.n	8000fc2 <readAvgMicrophoneInput+0x26>
		//Record the first 100 values read by microphone and take the avg
		calibrationVal = calibrationVal + micArrayIn[i];
 8000fa8:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <readAvgMicrophoneInput+0x4c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <readAvgMicrophoneInput+0x50>)
 8000fb2:	6812      	ldr	r2, [r2, #0]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <readAvgMicrophoneInput+0x50>)
 8000fba:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 100; i++) {
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b63      	cmp	r3, #99	; 0x63
 8000fc6:	ddef      	ble.n	8000fa8 <readAvgMicrophoneInput+0xc>
	}
	calibrationVal = calibrationVal/100;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <readAvgMicrophoneInput+0x50>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <readAvgMicrophoneInput+0x54>)
 8000fce:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd2:	1152      	asrs	r2, r2, #5
 8000fd4:	17db      	asrs	r3, r3, #31
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <readAvgMicrophoneInput+0x50>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	20018b00 	.word	0x20018b00
 8000fec:	200002ec 	.word	0x200002ec
 8000ff0:	51eb851f 	.word	0x51eb851f

08000ff4 <getFrequencyOfTone>:


//Measures the frequency of a sound signal
int getFrequencyOfTone(arm_rfft_fast_instance_f32* handler, int sampling_rate ,float* buffer_in, float* buffer_out) {
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	f107 0418 	add.w	r4, r7, #24
 8001002:	3c0c      	subs	r4, #12
 8001004:	6020      	str	r0, [r4, #0]
 8001006:	f107 0018 	add.w	r0, r7, #24
 800100a:	3810      	subs	r0, #16
 800100c:	6001      	str	r1, [r0, #0]
 800100e:	f107 0118 	add.w	r1, r7, #24
 8001012:	3914      	subs	r1, #20
 8001014:	600a      	str	r2, [r1, #0]
 8001016:	f107 0218 	add.w	r2, r7, #24
 800101a:	3a18      	subs	r2, #24
 800101c:	6013      	str	r3, [r2, #0]

	arm_rfft_fast_f32(handler, buffer_in, buffer_out,0);
 800101e:	f107 0218 	add.w	r2, r7, #24
 8001022:	3a18      	subs	r2, #24
 8001024:	f107 0118 	add.w	r1, r7, #24
 8001028:	3914      	subs	r1, #20
 800102a:	f107 0018 	add.w	r0, r7, #24
 800102e:	380c      	subs	r0, #12
 8001030:	2300      	movs	r3, #0
 8001032:	6812      	ldr	r2, [r2, #0]
 8001034:	6809      	ldr	r1, [r1, #0]
 8001036:	6800      	ldr	r0, [r0, #0]
 8001038:	f009 fec6 	bl	800adc8 <arm_rfft_fast_f32>

	int frequencies[1024];
	int frequency_index = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001042:	f102 0214 	add.w	r2, r2, #20
 8001046:	6013      	str	r3, [r2, #0]
	int noise = 150; //variable noise offset
 8001048:	2396      	movs	r3, #150	; 0x96
 800104a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800104e:	f102 0204 	add.w	r2, r2, #4
 8001052:	6013      	str	r3, [r2, #0]
	int max = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800105a:	f102 0210 	add.w	r2, r2, #16
 800105e:	6013      	str	r3, [r2, #0]
	int temp_max = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001066:	6013      	str	r3, [r2, #0]
	int frequency = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800106e:	f102 020c 	add.w	r2, r2, #12
 8001072:	6013      	str	r3, [r2, #0]
	//calculate abs values and linear-to-dB
	for (int i=0; i<2048; i=i+2) {
 8001074:	2300      	movs	r3, #0
 8001076:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800107a:	f102 0208 	add.w	r2, r2, #8
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	e0e3      	b.n	800124a <getFrequencyOfTone+0x256>

		int real = buffer_out[i];
 8001082:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001086:	f103 0308 	add.w	r3, r3, #8
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	009a      	lsls	r2, r3, #2
 800108e:	f107 0318 	add.w	r3, r7, #24
 8001092:	3b18      	subs	r3, #24
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	edd3 7a00 	vldr	s15, [r3]
 800109c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a0:	ee17 3a90 	vmov	r3, s15
 80010a4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80010a8:	f102 021c 	add.w	r2, r2, #28
 80010ac:	6013      	str	r3, [r2, #0]
		int complex = buffer_out[i+1];
 80010ae:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80010b2:	f103 0308 	add.w	r3, r3, #8
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3301      	adds	r3, #1
 80010ba:	009a      	lsls	r2, r3, #2
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	3b18      	subs	r3, #24
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4413      	add	r3, r2
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ce:	ee17 3a90 	vmov	r3, s15
 80010d2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80010d6:	f102 0218 	add.w	r2, r2, #24
 80010da:	6013      	str	r3, [r2, #0]
		int result = sqrt(real*real+complex*complex);
 80010dc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80010e0:	f103 031c 	add.w	r3, r3, #28
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80010ea:	f102 021c 	add.w	r2, r2, #28
 80010ee:	6812      	ldr	r2, [r2, #0]
 80010f0:	fb02 f203 	mul.w	r2, r2, r3
 80010f4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80010f8:	f103 0318 	add.w	r3, r3, #24
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001102:	f101 0118 	add.w	r1, r1, #24
 8001106:	6809      	ldr	r1, [r1, #0]
 8001108:	fb01 f303 	mul.w	r3, r1, r3
 800110c:	4413      	add	r3, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa18 	bl	8000544 <__aeabi_i2d>
 8001114:	4603      	mov	r3, r0
 8001116:	460c      	mov	r4, r1
 8001118:	ec44 3b10 	vmov	d0, r3, r4
 800111c:	f00b f9ae 	bl	800c47c <sqrt>
 8001120:	ec54 3b10 	vmov	r3, r4, d0
 8001124:	4618      	mov	r0, r3
 8001126:	4621      	mov	r1, r4
 8001128:	f7ff fd26 	bl	8000b78 <__aeabi_d2iz>
 800112c:	4603      	mov	r3, r0
 800112e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001132:	f102 0214 	add.w	r2, r2, #20
 8001136:	6013      	str	r3, [r2, #0]

		frequencies[frequency_index] = (int)(20*log10f(result));
 8001138:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800113c:	f103 0314 	add.w	r3, r3, #20
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114a:	eeb0 0a67 	vmov.f32	s0, s15
 800114e:	f00b f9ef 	bl	800c530 <log10f>
 8001152:	eeb0 7a40 	vmov.f32	s14, s0
 8001156:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800115a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800115e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001162:	ee17 1a90 	vmov	r1, s15
 8001166:	f107 0318 	add.w	r3, r7, #24
 800116a:	3b04      	subs	r3, #4
 800116c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001170:	f102 0214 	add.w	r2, r2, #20
 8001174:	6812      	ldr	r2, [r2, #0]
 8001176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		if (frequencies[frequency_index]<0) frequencies[frequency_index]=0;
 800117a:	f107 0318 	add.w	r3, r7, #24
 800117e:	3b04      	subs	r3, #4
 8001180:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001184:	f102 0214 	add.w	r2, r2, #20
 8001188:	6812      	ldr	r2, [r2, #0]
 800118a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118e:	2b00      	cmp	r3, #0
 8001190:	da0a      	bge.n	80011a8 <getFrequencyOfTone+0x1b4>
 8001192:	f107 0318 	add.w	r3, r7, #24
 8001196:	3b04      	subs	r3, #4
 8001198:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800119c:	f102 0214 	add.w	r2, r2, #20
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	2100      	movs	r1, #0
 80011a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		temp_max = frequencies[frequency_index];
 80011a8:	f107 0318 	add.w	r3, r7, #24
 80011ac:	3b04      	subs	r3, #4
 80011ae:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80011b2:	f102 0214 	add.w	r2, r2, #20
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011bc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80011c0:	6013      	str	r3, [r2, #0]

		if(frequency_index > 0 && temp_max > max){
 80011c2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80011c6:	f103 0314 	add.w	r3, r3, #20
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	dd26      	ble.n	800121e <getFrequencyOfTone+0x22a>
 80011d0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80011da:	f103 0310 	add.w	r3, r3, #16
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	dd1c      	ble.n	800121e <getFrequencyOfTone+0x22a>
			max = temp_max;
 80011e4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80011ee:	f102 0210 	add.w	r2, r2, #16
 80011f2:	6013      	str	r3, [r2, #0]
			frequency = (int) frequency_index*sampling_rate/2048;
 80011f4:	f107 0318 	add.w	r3, r7, #24
 80011f8:	3b10      	subs	r3, #16
 80011fa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80011fe:	f102 0214 	add.w	r2, r2, #20
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	fb03 f302 	mul.w	r3, r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	da01      	bge.n	8001212 <getFrequencyOfTone+0x21e>
 800120e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001212:	12db      	asrs	r3, r3, #11
 8001214:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001218:	f102 020c 	add.w	r2, r2, #12
 800121c:	6013      	str	r3, [r2, #0]
		}
		frequency_index++;
 800121e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001222:	f103 0314 	add.w	r3, r3, #20
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800122e:	f102 0214 	add.w	r2, r2, #20
 8001232:	6013      	str	r3, [r2, #0]
	for (int i=0; i<2048; i=i+2) {
 8001234:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001238:	f103 0308 	add.w	r3, r3, #8
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3302      	adds	r3, #2
 8001240:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001244:	f102 0208 	add.w	r2, r2, #8
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800124e:	f103 0308 	add.w	r3, r3, #8
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001258:	f6ff af13 	blt.w	8001082 <getFrequencyOfTone+0x8e>
	}
	return frequency;
 800125c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001260:	f103 030c 	add.w	r3, r3, #12
 8001264:	681b      	ldr	r3, [r3, #0]
}
 8001266:	4618      	mov	r0, r3
 8001268:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800126c:	371c      	adds	r7, #28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd90      	pop	{r4, r7, pc}
 8001272:	0000      	movs	r0, r0
 8001274:	0000      	movs	r0, r0
	...

08001278 <sineWaveGenerator>:

//Sine wave generation function -> returns a pointer to the array stored in mem
//Returns arrays completely ready for sending through DAC to speaker! -> Range is 0-4095
//soundClipSize is the total length of the soundClip that you want to generate (if you want to send to the getFrequency function, use a size of 2048)
//If you want to be able to use the variable soundClipSize, make the for-loop to from 0-soundClipSize, right now the soundClipSize is useless!
uint32_t* sineWaveGenerator(int freq, int soundClipSize) {
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]

	//Sampling rate = 8k
	//Size of array = (sampling rate)/(freq)
	int arraySize = samplingRate/freq;
 8001282:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	fb92 f3f3 	sdiv	r3, r2, r3
 800128c:	613b      	str	r3, [r7, #16]
	uint16_t* sineWave = malloc(arraySize*sizeof(uint16_t));
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4618      	mov	r0, r3
 8001294:	f00a fca6 	bl	800bbe4 <malloc>
 8001298:	4603      	mov	r3, r0
 800129a:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < arraySize; i++) {
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	e038      	b.n	8001314 <sineWaveGenerator+0x9c>
		sineWave[i] = (uint16_t)((arm_sin_f32(i*2*pi/arraySize) + 1)*(4095/2));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f94c 	bl	8000544 <__aeabi_i2d>
 80012ac:	a31f      	add	r3, pc, #124	; (adr r3, 800132c <sineWaveGenerator+0xb4>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	f7ff f9b1 	bl	8000618 <__aeabi_dmul>
 80012b6:	4603      	mov	r3, r0
 80012b8:	460c      	mov	r4, r1
 80012ba:	4625      	mov	r5, r4
 80012bc:	461c      	mov	r4, r3
 80012be:	6938      	ldr	r0, [r7, #16]
 80012c0:	f7ff f940 	bl	8000544 <__aeabi_i2d>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4620      	mov	r0, r4
 80012ca:	4629      	mov	r1, r5
 80012cc:	f7ff face 	bl	800086c <__aeabi_ddiv>
 80012d0:	4603      	mov	r3, r0
 80012d2:	460c      	mov	r4, r1
 80012d4:	4618      	mov	r0, r3
 80012d6:	4621      	mov	r1, r4
 80012d8:	f7ff fc76 	bl	8000bc8 <__aeabi_d2f>
 80012dc:	4603      	mov	r3, r0
 80012de:	ee00 3a10 	vmov	s0, r3
 80012e2:	f00a f94f 	bl	800b584 <arm_sin_f32>
 80012e6:	eeb0 7a40 	vmov.f32	s14, s0
 80012ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80012ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001328 <sineWaveGenerator+0xb0>
 80012f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	4413      	add	r3, r2
 8001302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001306:	ee17 2a90 	vmov	r2, s15
 800130a:	b292      	uxth	r2, r2
 800130c:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < arraySize; i++) {
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3301      	adds	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	429a      	cmp	r2, r3
 800131a:	dbc2      	blt.n	80012a2 <sineWaveGenerator+0x2a>
	}

	return sineWave;
 800131c:	68fb      	ldr	r3, [r7, #12]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bdb0      	pop	{r4, r5, r7, pc}
 8001326:	bf00      	nop
 8001328:	44ffe000 	.word	0x44ffe000
 800132c:	54442d18 	.word	0x54442d18
 8001330:	400921fb 	.word	0x400921fb

08001334 <screenClear>:
//########################################################################################################################



//Clear screen function
void screenClear() {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
	char buffer[5];

	sprintf(buffer, "%c[2J", ASCII_ESC);
 800133a:	463b      	mov	r3, r7
 800133c:	221b      	movs	r2, #27
 800133e:	4907      	ldr	r1, [pc, #28]	; (800135c <screenClear+0x28>)
 8001340:	4618      	mov	r0, r3
 8001342:	f00a fd57 	bl	800bdf4 <siprintf>
	HAL_UART_Transmit(&huart1, &buffer, sizeof(buffer), HAL_MAX_DELAY);
 8001346:	4639      	mov	r1, r7
 8001348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800134c:	2205      	movs	r2, #5
 800134e:	4804      	ldr	r0, [pc, #16]	; (8001360 <screenClear+0x2c>)
 8001350:	f006 f932 	bl	80075b8 <HAL_UART_Transmit>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	0800ca34 	.word	0x0800ca34
 8001360:	20020df4 	.word	0x20020df4

08001364 <invisibleCursor>:


//Make cursor invisible
void invisibleCursor() {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
	char buffer[6];

	sprintf(buffer, "%c[?25l", ASCII_ESC);
 800136a:	463b      	mov	r3, r7
 800136c:	221b      	movs	r2, #27
 800136e:	4907      	ldr	r1, [pc, #28]	; (800138c <invisibleCursor+0x28>)
 8001370:	4618      	mov	r0, r3
 8001372:	f00a fd3f 	bl	800bdf4 <siprintf>
	HAL_UART_Transmit(&huart1, &buffer, sizeof(buffer), HAL_MAX_DELAY);
 8001376:	4639      	mov	r1, r7
 8001378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800137c:	2206      	movs	r2, #6
 800137e:	4804      	ldr	r0, [pc, #16]	; (8001390 <invisibleCursor+0x2c>)
 8001380:	f006 f91a 	bl	80075b8 <HAL_UART_Transmit>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	0800ca3c 	.word	0x0800ca3c
 8001390:	20020df4 	.word	0x20020df4

08001394 <printWelcomeScreen>:

//Print welcome screen
void printWelcomeScreen() {
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	sprintf(title, "                         Welcome To Karaoke!                          "); //70 long
 8001398:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <printWelcomeScreen+0x34>)
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <printWelcomeScreen+0x38>)
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	2347      	movs	r3, #71	; 0x47
 80013a2:	461a      	mov	r2, r3
 80013a4:	f00a fc26 	bl	800bbf4 <memcpy>
	sprintf(screen, "\r//////////////////////////////////////////////////////////////////////////\r\n//%s//\r\n//////////////////////////////////////////////////////////////////////////\r\n\n\nPress any key to continue...", title);
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <printWelcomeScreen+0x34>)
 80013aa:	4909      	ldr	r1, [pc, #36]	; (80013d0 <printWelcomeScreen+0x3c>)
 80013ac:	4809      	ldr	r0, [pc, #36]	; (80013d4 <printWelcomeScreen+0x40>)
 80013ae:	f00a fd21 	bl	800bdf4 <siprintf>
	HAL_UART_Transmit(&huart1, &screen, sizeof(screen), HAL_MAX_DELAY);
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013b6:	f240 1203 	movw	r2, #259	; 0x103
 80013ba:	4906      	ldr	r1, [pc, #24]	; (80013d4 <printWelcomeScreen+0x40>)
 80013bc:	4806      	ldr	r0, [pc, #24]	; (80013d8 <printWelcomeScreen+0x44>)
 80013be:	f006 f8fb 	bl	80075b8 <HAL_UART_Transmit>
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2001cd34 	.word	0x2001cd34
 80013cc:	0800ca44 	.word	0x0800ca44
 80013d0:	0800ca8c 	.word	0x0800ca8c
 80013d4:	2001cb7c 	.word	0x2001cb7c
 80013d8:	20020df4 	.word	0x20020df4

080013dc <printGame>:


//Print the game screen
void printGame(int goalToneFreq, int voiceToneFreq, int score) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]

	screenClear();
 80013e8:	f7ff ffa4 	bl	8001334 <screenClear>

	sprintf(liveToneAndGoal, "                                                                      "); //70 long
 80013ec:	4a16      	ldr	r2, [pc, #88]	; (8001448 <printGame+0x6c>)
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <printGame+0x70>)
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	2347      	movs	r3, #71	; 0x47
 80013f6:	461a      	mov	r2, r3
 80013f8:	f00a fbfc 	bl	800bbf4 <memcpy>

	liveToneAndGoal[goalToneFreq] = 'I';
 80013fc:	4a12      	ldr	r2, [pc, #72]	; (8001448 <printGame+0x6c>)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4413      	add	r3, r2
 8001402:	2249      	movs	r2, #73	; 0x49
 8001404:	701a      	strb	r2, [r3, #0]
	liveToneAndGoal[voiceToneFreq] = 'I';
 8001406:	4a10      	ldr	r2, [pc, #64]	; (8001448 <printGame+0x6c>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4413      	add	r3, r2
 800140c:	2249      	movs	r2, #73	; 0x49
 800140e:	701a      	strb	r2, [r3, #0]

	if (score < 100) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b63      	cmp	r3, #99	; 0x63
 8001414:	dc06      	bgt.n	8001424 <printGame+0x48>
			sprintf(screen, "\r//////////////////////////////////////////////////////////////////////////\r\n//%s//\r\n//////////////////////////////////////////////////////////////////////////\r\n\n\n\t+---\tSCORE:\t%d\t---+        ", liveToneAndGoal, score);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <printGame+0x6c>)
 800141a:	490d      	ldr	r1, [pc, #52]	; (8001450 <printGame+0x74>)
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <printGame+0x78>)
 800141e:	f00a fce9 	bl	800bdf4 <siprintf>
 8001422:	e005      	b.n	8001430 <printGame+0x54>
		} else {
			sprintf(screen, "\r//////////////////////////////////////////////////////////////////////////\r\n//%s//\r\n//////////////////////////////////////////////////////////////////////////\r\n\n\n\t+---\tSCORE:\t%d\t---+       ", liveToneAndGoal, score);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a08      	ldr	r2, [pc, #32]	; (8001448 <printGame+0x6c>)
 8001428:	490b      	ldr	r1, [pc, #44]	; (8001458 <printGame+0x7c>)
 800142a:	480a      	ldr	r0, [pc, #40]	; (8001454 <printGame+0x78>)
 800142c:	f00a fce2 	bl	800bdf4 <siprintf>
		}

	HAL_UART_Transmit(&huart1, &screen, sizeof(screen), HAL_MAX_DELAY);
 8001430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001434:	f240 1203 	movw	r2, #259	; 0x103
 8001438:	4906      	ldr	r1, [pc, #24]	; (8001454 <printGame+0x78>)
 800143a:	4808      	ldr	r0, [pc, #32]	; (800145c <printGame+0x80>)
 800143c:	f006 f8bc 	bl	80075b8 <HAL_UART_Transmit>
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	2001cb20 	.word	0x2001cb20
 800144c:	0800cb4c 	.word	0x0800cb4c
 8001450:	0800cb94 	.word	0x0800cb94
 8001454:	2001cb7c 	.word	0x2001cb7c
 8001458:	0800cc54 	.word	0x0800cc54
 800145c:	20020df4 	.word	0x20020df4

08001460 <printNewDesiredTone>:


//Print the new desired tone
void printNewDesiredTone(int goalToneFreq, int score) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]

	screenClear();
 800146a:	f7ff ff63 	bl	8001334 <screenClear>

	sprintf(liveToneAndGoal, "                       New Desired Tone: %d Hz                      ", goalToneFreq); //70 long - > New Desired Tone: 1234 Hz
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	490f      	ldr	r1, [pc, #60]	; (80014b0 <printNewDesiredTone+0x50>)
 8001472:	4810      	ldr	r0, [pc, #64]	; (80014b4 <printNewDesiredTone+0x54>)
 8001474:	f00a fcbe 	bl	800bdf4 <siprintf>

	if (score < 100) {
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	2b63      	cmp	r3, #99	; 0x63
 800147c:	dc06      	bgt.n	800148c <printNewDesiredTone+0x2c>
			sprintf(screen, "\r//////////////////////////////////////////////////////////////////////////\r\n//%s//\r\n//////////////////////////////////////////////////////////////////////////\r\n\n\n\t+---\tSCORE:\t%d\t---+        ", liveToneAndGoal, score);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <printNewDesiredTone+0x54>)
 8001482:	490d      	ldr	r1, [pc, #52]	; (80014b8 <printNewDesiredTone+0x58>)
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <printNewDesiredTone+0x5c>)
 8001486:	f00a fcb5 	bl	800bdf4 <siprintf>
 800148a:	e005      	b.n	8001498 <printNewDesiredTone+0x38>
		} else {
			sprintf(screen, "\r//////////////////////////////////////////////////////////////////////////\r\n//%s//\r\n//////////////////////////////////////////////////////////////////////////\r\n\n\n\t+---\tSCORE:\t%d\t---+       ", liveToneAndGoal, score);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <printNewDesiredTone+0x54>)
 8001490:	490b      	ldr	r1, [pc, #44]	; (80014c0 <printNewDesiredTone+0x60>)
 8001492:	480a      	ldr	r0, [pc, #40]	; (80014bc <printNewDesiredTone+0x5c>)
 8001494:	f00a fcae 	bl	800bdf4 <siprintf>
		}

	HAL_UART_Transmit(&huart1, &screen, sizeof(screen), HAL_MAX_DELAY);
 8001498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800149c:	f240 1203 	movw	r2, #259	; 0x103
 80014a0:	4906      	ldr	r1, [pc, #24]	; (80014bc <printNewDesiredTone+0x5c>)
 80014a2:	4808      	ldr	r0, [pc, #32]	; (80014c4 <printNewDesiredTone+0x64>)
 80014a4:	f006 f888 	bl	80075b8 <HAL_UART_Transmit>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	0800cd14 	.word	0x0800cd14
 80014b4:	2001cb20 	.word	0x2001cb20
 80014b8:	0800cb94 	.word	0x0800cb94
 80014bc:	2001cb7c 	.word	0x2001cb7c
 80014c0:	0800cc54 	.word	0x0800cc54
 80014c4:	20020df4 	.word	0x20020df4

080014c8 <printGameOver>:


//Print Game Over Screen
void printGameOver(int score) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

	screenClear();
 80014d0:	f7ff ff30 	bl	8001334 <screenClear>

	sprintf(liveToneAndGoal, "                              YOU WIN!!!                              "); //70 long
 80014d4:	4a11      	ldr	r2, [pc, #68]	; (800151c <printGameOver+0x54>)
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <printGameOver+0x58>)
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	2347      	movs	r3, #71	; 0x47
 80014de:	461a      	mov	r2, r3
 80014e0:	f00a fb88 	bl	800bbf4 <memcpy>

	if (score < 100) {
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b63      	cmp	r3, #99	; 0x63
 80014e8:	dc06      	bgt.n	80014f8 <printGameOver+0x30>
			sprintf(screen, "\r//////////////////////////////////////////////////////////////////////////\r\n//%s//\r\n//////////////////////////////////////////////////////////////////////////\r\n\n\n\t+---\tSCORE:\tGAME OVER\t---+  ", liveToneAndGoal, score);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a0b      	ldr	r2, [pc, #44]	; (800151c <printGameOver+0x54>)
 80014ee:	490d      	ldr	r1, [pc, #52]	; (8001524 <printGameOver+0x5c>)
 80014f0:	480d      	ldr	r0, [pc, #52]	; (8001528 <printGameOver+0x60>)
 80014f2:	f00a fc7f 	bl	800bdf4 <siprintf>
 80014f6:	e005      	b.n	8001504 <printGameOver+0x3c>
		} else {
			sprintf(screen, "\r//////////////////////////////////////////////////////////////////////////\r\n//%s//\r\n//////////////////////////////////////////////////////////////////////////\r\n\n\n\t+---\tSCORE:\tGAME OVER\t---+ ", liveToneAndGoal, score);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <printGameOver+0x54>)
 80014fc:	490b      	ldr	r1, [pc, #44]	; (800152c <printGameOver+0x64>)
 80014fe:	480a      	ldr	r0, [pc, #40]	; (8001528 <printGameOver+0x60>)
 8001500:	f00a fc78 	bl	800bdf4 <siprintf>
		}

	HAL_UART_Transmit(&huart1, &screen, sizeof(screen), HAL_MAX_DELAY);
 8001504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001508:	f240 1203 	movw	r2, #259	; 0x103
 800150c:	4906      	ldr	r1, [pc, #24]	; (8001528 <printGameOver+0x60>)
 800150e:	4808      	ldr	r0, [pc, #32]	; (8001530 <printGameOver+0x68>)
 8001510:	f006 f852 	bl	80075b8 <HAL_UART_Transmit>
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2001cb20 	.word	0x2001cb20
 8001520:	0800cd5c 	.word	0x0800cd5c
 8001524:	0800cda4 	.word	0x0800cda4
 8001528:	2001cb7c 	.word	0x2001cb7c
 800152c:	0800ce68 	.word	0x0800ce68
 8001530:	20020df4 	.word	0x20020df4

08001534 <HAL_ADC_ConvCpltCallback>:
//}


//ADC Complete DMA Cycle Callback
//When the full cycle is complete, we want to do calculations on the SECOND half the buffer
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
//	}

	/*
	 * Trigger the flag for the second half-cycle's completion
	 */
	 if (state == 1) isSecondHalfCycleComplete = 1;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_ADC_ConvCpltCallback+0x24>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d102      	bne.n	800154a <HAL_ADC_ConvCpltCallback+0x16>
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_ADC_ConvCpltCallback+0x28>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]

}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000304 	.word	0x20000304
 800155c:	200002f4 	.word	0x200002f4

08001560 <HAL_ADC_ConvHalfCpltCallback>:

//ADC Half DMA Cycle Callback
//When the half cycle is complete, we want to do calculations on the FIRST half of the buffer
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
//	}

	/*
	 * Trigger the flag for the first half-cycle's completion
	 */
	if (state == 1) isFirstHalfCycleComplete = 1;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d102      	bne.n	8001576 <HAL_ADC_ConvHalfCpltCallback+0x16>
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]

}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000304 	.word	0x20000304
 8001588:	200002f0 	.word	0x200002f0

0800158c <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	 * Checking the timing of how long it takes to output a complete buffer through the DAC Speaker (Debugging)
	 */
//	ITM_Port32(31) = 33;


}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b098      	sub	sp, #96	; 0x60
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a6:	f001 f84a 	bl	800263e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015aa:	f000 f8eb 	bl	8001784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ae:	f000 fb47 	bl	8001c40 <MX_GPIO_Init>
  MX_DMA_Init();
 80015b2:	f000 fb21 	bl	8001bf8 <MX_DMA_Init>
  MX_ADC1_Init();
 80015b6:	f000 f99b 	bl	80018f0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80015ba:	f000 fa33 	bl	8001a24 <MX_TIM2_Init>
  MX_DAC1_Init();
 80015be:	f000 f9fd 	bl	80019bc <MX_DAC1_Init>
  MX_TIM3_Init();
 80015c2:	f000 fa7d 	bl	8001ac0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80015c6:	f000 facb 	bl	8001b60 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80015ca:	f000 f965 	bl	8001898 <MX_NVIC_Init>


	/*
	 * Basic Initialization
	 */
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED); 	//Calibrate ADC
 80015ce:	217f      	movs	r1, #127	; 0x7f
 80015d0:	4857      	ldr	r0, [pc, #348]	; (8001730 <main+0x190>)
 80015d2:	f002 fce4 	bl	8003f9e <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, micArrayIn, micArraySize); 	//Start ADC in DMA mode
 80015d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015da:	4956      	ldr	r1, [pc, #344]	; (8001734 <main+0x194>)
 80015dc:	4854      	ldr	r0, [pc, #336]	; (8001730 <main+0x190>)
 80015de:	f001 fc0f 	bl	8002e00 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2); 							//Start timer 2 for ADC in DMA mode
 80015e2:	4855      	ldr	r0, [pc, #340]	; (8001738 <main+0x198>)
 80015e4:	f005 fb4e 	bl	8006c84 <HAL_TIM_Base_Start_IT>
	while(micArrayIn[micArraySize-1] == 0); 				//Delay abit so we can read some values through the mic
 80015e8:	bf00      	nop
 80015ea:	4b52      	ldr	r3, [pc, #328]	; (8001734 <main+0x194>)
 80015ec:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80015f0:	333c      	adds	r3, #60	; 0x3c
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f8      	beq.n	80015ea <main+0x4a>
	readAvgMicrophoneInput(); 								//Read the DC offset of the mic
 80015f8:	f7ff fcd0 	bl	8000f9c <readAvgMicrophoneInput>
	//HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, micArrayOut, micArraySize,DAC_ALIGN_12B_R); //Start the DAC speaker for playing back recording

	arm_rfft_fast_init_f32(&fft_handler, fftSize); 			//Initialize the FFT handler (only once) with size 2048!!
 80015fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001600:	484e      	ldr	r0, [pc, #312]	; (800173c <main+0x19c>)
 8001602:	f009 fafd 	bl	800ac00 <arm_rfft_fast_init_f32>

	/*
	 * Generating the 6 game tones and storing in memory
	 */
	tone0 = sineWaveGenerator(goalToneFreq, 1000); //The 1000 soundClipSize is useless
 8001606:	4b4e      	ldr	r3, [pc, #312]	; (8001740 <main+0x1a0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fe32 	bl	8001278 <sineWaveGenerator>
 8001614:	4602      	mov	r2, r0
 8001616:	4b4b      	ldr	r3, [pc, #300]	; (8001744 <main+0x1a4>)
 8001618:	601a      	str	r2, [r3, #0]
	tone1 = sineWaveGenerator(goalToneFreq, 1000);
 800161a:	4b49      	ldr	r3, [pc, #292]	; (8001740 <main+0x1a0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fe28 	bl	8001278 <sineWaveGenerator>
 8001628:	4602      	mov	r2, r0
 800162a:	4b47      	ldr	r3, [pc, #284]	; (8001748 <main+0x1a8>)
 800162c:	601a      	str	r2, [r3, #0]
	tone2 = sineWaveGenerator(goalToneFreq, 1000);
 800162e:	4b44      	ldr	r3, [pc, #272]	; (8001740 <main+0x1a0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fe1e 	bl	8001278 <sineWaveGenerator>
 800163c:	4602      	mov	r2, r0
 800163e:	4b43      	ldr	r3, [pc, #268]	; (800174c <main+0x1ac>)
 8001640:	601a      	str	r2, [r3, #0]
	tone3 = sineWaveGenerator(goalToneFreq, 1000);
 8001642:	4b3f      	ldr	r3, [pc, #252]	; (8001740 <main+0x1a0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fe14 	bl	8001278 <sineWaveGenerator>
 8001650:	4602      	mov	r2, r0
 8001652:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <main+0x1b0>)
 8001654:	601a      	str	r2, [r3, #0]
	tone4 = sineWaveGenerator(goalToneFreq, 1000);
 8001656:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <main+0x1a0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fe0a 	bl	8001278 <sineWaveGenerator>
 8001664:	4602      	mov	r2, r0
 8001666:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <main+0x1b4>)
 8001668:	601a      	str	r2, [r3, #0]
	tone5 = sineWaveGenerator(goalToneFreq, 1000);
 800166a:	4b35      	ldr	r3, [pc, #212]	; (8001740 <main+0x1a0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fe00 	bl	8001278 <sineWaveGenerator>
 8001678:	4602      	mov	r2, r0
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <main+0x1b8>)
 800167c:	601a      	str	r2, [r3, #0]

	/*
	 * Game Welcome Screen
	 */
	invisibleCursor();											//Make it so we don't see cursor -> cursor is UGLY
 800167e:	f7ff fe71 	bl	8001364 <invisibleCursor>
	screenClear(); 												//Start with fresh screen
 8001682:	f7ff fe57 	bl	8001334 <screenClear>
	printWelcomeScreen();										//Self explanatory - come on!
 8001686:	f7ff fe85 	bl	8001394 <printWelcomeScreen>
	HAL_UART_Receive(&huart1, &receivedKey, 1, HAL_MAX_DELAY);	//Wait for key press before starting game
 800168a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800168e:	2201      	movs	r2, #1
 8001690:	4932      	ldr	r1, [pc, #200]	; (800175c <main+0x1bc>)
 8001692:	4833      	ldr	r0, [pc, #204]	; (8001760 <main+0x1c0>)
 8001694:	f006 f827 	bl	80076e6 <HAL_UART_Receive>
	screenClear();												//Start the game with a fresh screen
 8001698:	f7ff fe4c 	bl	8001334 <screenClear>
	HAL_TIM_Base_Start_IT(&htim3);								//Start Timer 3 for time-based point decrementation -> less time = more points
 800169c:	4831      	ldr	r0, [pc, #196]	; (8001764 <main+0x1c4>)
 800169e:	f005 faf1 	bl	8006c84 <HAL_TIM_Base_Start_IT>
//########################################################################################################################
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of microphonePermissions */
  osMutexDef(microphonePermissions);
 80016a2:	2300      	movs	r3, #0
 80016a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80016a6:	2300      	movs	r3, #0
 80016a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  microphonePermissionsHandle = osMutexCreate(osMutex(microphonePermissions));
 80016aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016ae:	4618      	mov	r0, r3
 80016b0:	f006 fed5 	bl	800845e <osMutexCreate>
 80016b4:	4602      	mov	r2, r0
 80016b6:	4b2c      	ldr	r3, [pc, #176]	; (8001768 <main+0x1c8>)
 80016b8:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uart */
  osThreadDef(uart, startUART, osPriorityNormal, 0, 300);
 80016ba:	4b2c      	ldr	r3, [pc, #176]	; (800176c <main+0x1cc>)
 80016bc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80016c0:	461d      	mov	r5, r3
 80016c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartHandle = osThreadCreate(osThread(uart), NULL);
 80016ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f006 fe62 	bl	800839e <osThreadCreate>
 80016da:	4602      	mov	r2, r0
 80016dc:	4b24      	ldr	r3, [pc, #144]	; (8001770 <main+0x1d0>)
 80016de:	601a      	str	r2, [r3, #0]

  /* definition and creation of speaker */
  osThreadDef(speaker, startSpeaker, osPriorityIdle, 0, 4000);
 80016e0:	4b24      	ldr	r3, [pc, #144]	; (8001774 <main+0x1d4>)
 80016e2:	f107 0420 	add.w	r4, r7, #32
 80016e6:	461d      	mov	r5, r3
 80016e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  speakerHandle = osThreadCreate(osThread(speaker), NULL);
 80016f4:	f107 0320 	add.w	r3, r7, #32
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f006 fe4f 	bl	800839e <osThreadCreate>
 8001700:	4602      	mov	r2, r0
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <main+0x1d8>)
 8001704:	601a      	str	r2, [r3, #0]

  /* definition and creation of checkCycleCompl */
  osThreadDef(checkCycleCompl, checkCycleComplete, osPriorityIdle, 0, 4000);
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <main+0x1dc>)
 8001708:	1d3c      	adds	r4, r7, #4
 800170a:	461d      	mov	r5, r3
 800170c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800170e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001710:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001714:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  checkCycleComplHandle = osThreadCreate(osThread(checkCycleCompl), NULL);
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f006 fe3e 	bl	800839e <osThreadCreate>
 8001722:	4602      	mov	r2, r0
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <main+0x1e0>)
 8001726:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001728:	f006 fe32 	bl	8008390 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800172c:	e7fe      	b.n	800172c <main+0x18c>
 800172e:	bf00      	nop
 8001730:	20020d84 	.word	0x20020d84
 8001734:	20018b00 	.word	0x20018b00
 8001738:	20022efc 	.word	0x20022efc
 800173c:	2001cb08 	.word	0x2001cb08
 8001740:	20000000 	.word	0x20000000
 8001744:	20024f48 	.word	0x20024f48
 8001748:	2001cce4 	.word	0x2001cce4
 800174c:	20020e80 	.word	0x20020e80
 8001750:	2001cb04 	.word	0x2001cb04
 8001754:	20020ef0 	.word	0x20020ef0
 8001758:	20020e84 	.word	0x20020e84
 800175c:	2001cd80 	.word	0x2001cd80
 8001760:	20020df4 	.word	0x20020df4
 8001764:	2001cce8 	.word	0x2001cce8
 8001768:	2001cce0 	.word	0x2001cce0
 800176c:	0800cf30 	.word	0x0800cf30
 8001770:	20020df0 	.word	0x20020df0
 8001774:	0800cf54 	.word	0x0800cf54
 8001778:	20020eec 	.word	0x20020eec
 800177c:	0800cf80 	.word	0x0800cf80
 8001780:	20020ef4 	.word	0x20020ef4

08001784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b0bc      	sub	sp, #240	; 0xf0
 8001788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800178e:	2244      	movs	r2, #68	; 0x44
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f00a fa39 	bl	800bc0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001798:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2294      	movs	r2, #148	; 0x94
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f00a fa2b 	bl	800bc0a <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80017b4:	2000      	movs	r0, #0
 80017b6:	f003 fd59 	bl	800526c <HAL_PWREx_ControlVoltageScaling>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80017c0:	f000 fc76 	bl	80020b0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80017c4:	2310      	movs	r3, #16
 80017c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017d6:	2360      	movs	r3, #96	; 0x60
 80017d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017dc:	2302      	movs	r3, #2
 80017de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017e2:	2301      	movs	r3, #1
 80017e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017e8:	2301      	movs	r3, #1
 80017ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 80017ee:	233c      	movs	r3, #60	; 0x3c
 80017f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017f4:	2302      	movs	r3, #2
 80017f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017fa:	2302      	movs	r3, #2
 80017fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001800:	2302      	movs	r3, #2
 8001802:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001806:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800180a:	4618      	mov	r0, r3
 800180c:	f003 fdd2 	bl	80053b4 <HAL_RCC_OscConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001816:	f000 fc4b 	bl	80020b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181a:	230f      	movs	r3, #15
 800181c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001820:	2303      	movs	r3, #3
 8001822:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001838:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800183c:	2105      	movs	r1, #5
 800183e:	4618      	mov	r0, r3
 8001840:	f004 f9de 	bl	8005c00 <HAL_RCC_ClockConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800184a:	f000 fc31 	bl	80020b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 800184e:	f244 0301 	movw	r3, #16385	; 0x4001
 8001852:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001854:	2300      	movs	r3, #0
 8001856:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001858:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800185c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001860:	2301      	movs	r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001864:	2301      	movs	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001868:	2318      	movs	r3, #24
 800186a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800186c:	2302      	movs	r3, #2
 800186e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001870:	2302      	movs	r3, #2
 8001872:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001874:	2302      	movs	r3, #2
 8001876:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001878:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800187c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	4618      	mov	r0, r3
 8001882:	f004 fc9f 	bl	80061c4 <HAL_RCCEx_PeriphCLKConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 800188c:	f000 fc10 	bl	80020b0 <Error_Handler>
  }
}
 8001890:	bf00      	nop
 8001892:	37f0      	adds	r7, #240	; 0xf0
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2105      	movs	r1, #5
 80018a0:	200b      	movs	r0, #11
 80018a2:	f002 fcc7 	bl	8004234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018a6:	200b      	movs	r0, #11
 80018a8:	f002 fce0 	bl	800426c <HAL_NVIC_EnableIRQ>
  /* ADC1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2105      	movs	r1, #5
 80018b0:	2012      	movs	r0, #18
 80018b2:	f002 fcbf 	bl	8004234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80018b6:	2012      	movs	r0, #18
 80018b8:	f002 fcd8 	bl	800426c <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2105      	movs	r1, #5
 80018c0:	201c      	movs	r0, #28
 80018c2:	f002 fcb7 	bl	8004234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018c6:	201c      	movs	r0, #28
 80018c8:	f002 fcd0 	bl	800426c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2105      	movs	r1, #5
 80018d0:	200d      	movs	r0, #13
 80018d2:	f002 fcaf 	bl	8004234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80018d6:	200d      	movs	r0, #13
 80018d8:	f002 fcc8 	bl	800426c <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80018dc:	2200      	movs	r2, #0
 80018de:	2105      	movs	r1, #5
 80018e0:	201d      	movs	r0, #29
 80018e2:	f002 fca7 	bl	8004234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018e6:	201d      	movs	r0, #29
 80018e8:	f002 fcc0 	bl	800426c <HAL_NVIC_EnableIRQ>
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018f6:	463b      	mov	r3, r7
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
 8001904:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <MX_ADC1_Init+0xc0>)
 8001908:	4a2a      	ldr	r2, [pc, #168]	; (80019b4 <MX_ADC1_Init+0xc4>)
 800190a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <MX_ADC1_Init+0xc0>)
 800190e:	2200      	movs	r2, #0
 8001910:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <MX_ADC1_Init+0xc0>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <MX_ADC1_Init+0xc0>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <MX_ADC1_Init+0xc0>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001924:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <MX_ADC1_Init+0xc0>)
 8001926:	2204      	movs	r2, #4
 8001928:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <MX_ADC1_Init+0xc0>)
 800192c:	2200      	movs	r2, #0
 800192e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <MX_ADC1_Init+0xc0>)
 8001932:	2200      	movs	r2, #0
 8001934:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <MX_ADC1_Init+0xc0>)
 8001938:	2201      	movs	r2, #1
 800193a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <MX_ADC1_Init+0xc0>)
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <MX_ADC1_Init+0xc0>)
 8001946:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <MX_ADC1_Init+0xc0>)
 800194e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001952:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <MX_ADC1_Init+0xc0>)
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <MX_ADC1_Init+0xc0>)
 800195e:	2200      	movs	r2, #0
 8001960:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <MX_ADC1_Init+0xc0>)
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800196a:	4811      	ldr	r0, [pc, #68]	; (80019b0 <MX_ADC1_Init+0xc0>)
 800196c:	f001 f8fe 	bl	8002b6c <HAL_ADC_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001976:	f000 fb9b 	bl	80020b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_ADC1_Init+0xc8>)
 800197c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800197e:	2306      	movs	r3, #6
 8001980:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001986:	237f      	movs	r3, #127	; 0x7f
 8001988:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800198a:	2304      	movs	r3, #4
 800198c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001992:	463b      	mov	r3, r7
 8001994:	4619      	mov	r1, r3
 8001996:	4806      	ldr	r0, [pc, #24]	; (80019b0 <MX_ADC1_Init+0xc0>)
 8001998:	f001 fce0 	bl	800335c <HAL_ADC_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80019a2:	f000 fb85 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20020d84 	.word	0x20020d84
 80019b4:	50040000 	.word	0x50040000
 80019b8:	10c00010 	.word	0x10c00010

080019bc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80019c2:	463b      	mov	r3, r7
 80019c4:	2228      	movs	r2, #40	; 0x28
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f00a f91e 	bl	800bc0a <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <MX_DAC1_Init+0x60>)
 80019d0:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <MX_DAC1_Init+0x64>)
 80019d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80019d4:	4811      	ldr	r0, [pc, #68]	; (8001a1c <MX_DAC1_Init+0x60>)
 80019d6:	f002 fc57 	bl	8004288 <HAL_DAC_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80019e0:	f000 fb66 	bl	80020b0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80019e8:	230a      	movs	r3, #10
 80019ea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80019fc:	463b      	mov	r3, r7
 80019fe:	2200      	movs	r2, #0
 8001a00:	4619      	mov	r1, r3
 8001a02:	4806      	ldr	r0, [pc, #24]	; (8001a1c <MX_DAC1_Init+0x60>)
 8001a04:	f002 fdde 	bl	80045c4 <HAL_DAC_ConfigChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 8001a0e:	f000 fb4f 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	3728      	adds	r7, #40	; 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2001cb68 	.word	0x2001cb68
 8001a20:	40007400 	.word	0x40007400

08001a24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2a:	f107 0310 	add.w	r3, r7, #16
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a42:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <MX_TIM2_Init+0x98>)
 8001a44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <MX_TIM2_Init+0x98>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MX_TIM2_Init+0x98>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15000;
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <MX_TIM2_Init+0x98>)
 8001a58:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001a5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <MX_TIM2_Init+0x98>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <MX_TIM2_Init+0x98>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a6a:	4814      	ldr	r0, [pc, #80]	; (8001abc <MX_TIM2_Init+0x98>)
 8001a6c:	f005 f8b2 	bl	8006bd4 <HAL_TIM_Base_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a76:	f000 fb1b 	bl	80020b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	4619      	mov	r1, r3
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <MX_TIM2_Init+0x98>)
 8001a88:	f005 fa8b 	bl	8006fa2 <HAL_TIM_ConfigClockSource>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a92:	f000 fb0d 	bl	80020b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a96:	2320      	movs	r3, #32
 8001a98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4806      	ldr	r0, [pc, #24]	; (8001abc <MX_TIM2_Init+0x98>)
 8001aa4:	f005 fc92 	bl	80073cc <HAL_TIMEx_MasterConfigSynchronization>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001aae:	f000 faff 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	3720      	adds	r7, #32
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20022efc 	.word	0x20022efc

08001ac0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <MX_TIM3_Init+0x98>)
 8001ae0:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <MX_TIM3_Init+0x9c>)
 8001ae2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6000;
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <MX_TIM3_Init+0x98>)
 8001ae6:	f241 7270 	movw	r2, #6000	; 0x1770
 8001aea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MX_TIM3_Init+0x98>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <MX_TIM3_Init+0x98>)
 8001af4:	f242 7210 	movw	r2, #10000	; 0x2710
 8001af8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_TIM3_Init+0x98>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <MX_TIM3_Init+0x98>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b06:	4814      	ldr	r0, [pc, #80]	; (8001b58 <MX_TIM3_Init+0x98>)
 8001b08:	f005 f864 	bl	8006bd4 <HAL_TIM_Base_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001b12:	f000 facd 	bl	80020b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	4619      	mov	r1, r3
 8001b22:	480d      	ldr	r0, [pc, #52]	; (8001b58 <MX_TIM3_Init+0x98>)
 8001b24:	f005 fa3d 	bl	8006fa2 <HAL_TIM_ConfigClockSource>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001b2e:	f000 fabf 	bl	80020b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b32:	2320      	movs	r3, #32
 8001b34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4806      	ldr	r0, [pc, #24]	; (8001b58 <MX_TIM3_Init+0x98>)
 8001b40:	f005 fc44 	bl	80073cc <HAL_TIMEx_MasterConfigSynchronization>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001b4a:	f000 fab1 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	3720      	adds	r7, #32
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	2001cce8 	.word	0x2001cce8
 8001b5c:	40000400 	.word	0x40000400

08001b60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b64:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <MX_USART1_UART_Init+0x90>)
 8001b66:	4a23      	ldr	r2, [pc, #140]	; (8001bf4 <MX_USART1_UART_Init+0x94>)
 8001b68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b6a:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <MX_USART1_UART_Init+0x90>)
 8001b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b72:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <MX_USART1_UART_Init+0x90>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <MX_USART1_UART_Init+0x90>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <MX_USART1_UART_Init+0x90>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b84:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <MX_USART1_UART_Init+0x90>)
 8001b86:	220c      	movs	r2, #12
 8001b88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <MX_USART1_UART_Init+0x90>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b90:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <MX_USART1_UART_Init+0x90>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <MX_USART1_UART_Init+0x90>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <MX_USART1_UART_Init+0x90>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <MX_USART1_UART_Init+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ba8:	4811      	ldr	r0, [pc, #68]	; (8001bf0 <MX_USART1_UART_Init+0x90>)
 8001baa:	f005 fcb5 	bl	8007518 <HAL_UART_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bb4:	f000 fa7c 	bl	80020b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb8:	2100      	movs	r1, #0
 8001bba:	480d      	ldr	r0, [pc, #52]	; (8001bf0 <MX_USART1_UART_Init+0x90>)
 8001bbc:	f006 fad9 	bl	8008172 <HAL_UARTEx_SetTxFifoThreshold>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bc6:	f000 fa73 	bl	80020b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4808      	ldr	r0, [pc, #32]	; (8001bf0 <MX_USART1_UART_Init+0x90>)
 8001bce:	f006 fb0e 	bl	80081ee <HAL_UARTEx_SetRxFifoThreshold>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bd8:	f000 fa6a 	bl	80020b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bdc:	4804      	ldr	r0, [pc, #16]	; (8001bf0 <MX_USART1_UART_Init+0x90>)
 8001bde:	f006 fa8f 	bl	8008100 <HAL_UARTEx_DisableFifoMode>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001be8:	f000 fa62 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20020df4 	.word	0x20020df4
 8001bf4:	40013800 	.word	0x40013800

08001bf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_DMA_Init+0x44>)
 8001c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c02:	4a0e      	ldr	r2, [pc, #56]	; (8001c3c <MX_DMA_Init+0x44>)
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	6493      	str	r3, [r2, #72]	; 0x48
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_DMA_Init+0x44>)
 8001c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_DMA_Init+0x44>)
 8001c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1a:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <MX_DMA_Init+0x44>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6493      	str	r3, [r2, #72]	; 0x48
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <MX_DMA_Init+0x44>)
 8001c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]

}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000

08001c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c56:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <MX_GPIO_Init+0x98>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	4a1f      	ldr	r2, [pc, #124]	; (8001cd8 <MX_GPIO_Init+0x98>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <MX_GPIO_Init+0x98>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <MX_GPIO_Init+0x98>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <MX_GPIO_Init+0x98>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <MX_GPIO_Init+0x98>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c86:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <MX_GPIO_Init+0x98>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	4a13      	ldr	r2, [pc, #76]	; (8001cd8 <MX_GPIO_Init+0x98>)
 8001c8c:	f043 0308 	orr.w	r3, r3, #8
 8001c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_GPIO_Init+0x98>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_GPIO_Init+0x98>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	4a0d      	ldr	r2, [pc, #52]	; (8001cd8 <MX_GPIO_Init+0x98>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <MX_GPIO_Init+0x98>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : MICROPHONE_D_Pin */
  GPIO_InitStruct.Pin = MICROPHONE_D_Pin;
 8001cb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MICROPHONE_D_GPIO_Port, &GPIO_InitStruct);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4804      	ldr	r0, [pc, #16]	; (8001cdc <MX_GPIO_Init+0x9c>)
 8001ccc:	f003 f91c 	bl	8004f08 <HAL_GPIO_Init>

}
 8001cd0:	bf00      	nop
 8001cd2:	3728      	adds	r7, #40	; 0x28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	48000c00 	.word	0x48000c00

08001ce0 <startUART>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startUART */
void startUART(void const * argument)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f006 fba4 	bl	8008436 <osDelay>
    while(1){

		if (success) {
 8001cee:	4b64      	ldr	r3, [pc, #400]	; (8001e80 <startUART+0x1a0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d070      	beq.n	8001dd8 <startUART+0xf8>
			//This generates a random tone between 950-2500Hz
			//Available frequencies (with 8K sampling rate: 1000Hz, 1143Hz, 1333Hz, 1600Hz, 2000Hz, 2666Hz
			int goalToneChoice = rand()%6;
 8001cf6:	f00a f839 	bl	800bd6c <rand>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	4b61      	ldr	r3, [pc, #388]	; (8001e84 <startUART+0x1a4>)
 8001cfe:	fb83 3102 	smull	r3, r1, r3, r2
 8001d02:	17d3      	asrs	r3, r2, #31
 8001d04:	1ac9      	subs	r1, r1, r3
 8001d06:	460b      	mov	r3, r1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	440b      	add	r3, r1
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	60fb      	str	r3, [r7, #12]
			switch (goalToneChoice) {
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b05      	cmp	r3, #5
 8001d16:	d845      	bhi.n	8001da4 <startUART+0xc4>
 8001d18:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <startUART+0x40>)
 8001d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1e:	bf00      	nop
 8001d20:	08001d39 	.word	0x08001d39
 8001d24:	08001d4b 	.word	0x08001d4b
 8001d28:	08001d5d 	.word	0x08001d5d
 8001d2c:	08001d6f 	.word	0x08001d6f
 8001d30:	08001d81 	.word	0x08001d81
 8001d34:	08001d93 	.word	0x08001d93
				case 0:
					goalToneFreq = 1000;
 8001d38:	4b53      	ldr	r3, [pc, #332]	; (8001e88 <startUART+0x1a8>)
 8001d3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d3e:	601a      	str	r2, [r3, #0]
					goalWave = tone0;
 8001d40:	4b52      	ldr	r3, [pc, #328]	; (8001e8c <startUART+0x1ac>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a52      	ldr	r2, [pc, #328]	; (8001e90 <startUART+0x1b0>)
 8001d46:	6013      	str	r3, [r2, #0]
					break;
 8001d48:	e02c      	b.n	8001da4 <startUART+0xc4>
				case 1:
					goalToneFreq = 1142;
 8001d4a:	4b4f      	ldr	r3, [pc, #316]	; (8001e88 <startUART+0x1a8>)
 8001d4c:	f240 4276 	movw	r2, #1142	; 0x476
 8001d50:	601a      	str	r2, [r3, #0]
					goalWave = tone1;
 8001d52:	4b50      	ldr	r3, [pc, #320]	; (8001e94 <startUART+0x1b4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a4e      	ldr	r2, [pc, #312]	; (8001e90 <startUART+0x1b0>)
 8001d58:	6013      	str	r3, [r2, #0]
					break;
 8001d5a:	e023      	b.n	8001da4 <startUART+0xc4>
				case 2:
					goalToneFreq = 1333;
 8001d5c:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <startUART+0x1a8>)
 8001d5e:	f240 5235 	movw	r2, #1333	; 0x535
 8001d62:	601a      	str	r2, [r3, #0]
					goalWave = tone2;
 8001d64:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <startUART+0x1b8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a49      	ldr	r2, [pc, #292]	; (8001e90 <startUART+0x1b0>)
 8001d6a:	6013      	str	r3, [r2, #0]
					break;
 8001d6c:	e01a      	b.n	8001da4 <startUART+0xc4>
				case 3:
					goalToneFreq = 1600;
 8001d6e:	4b46      	ldr	r3, [pc, #280]	; (8001e88 <startUART+0x1a8>)
 8001d70:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001d74:	601a      	str	r2, [r3, #0]
					goalWave = tone3;
 8001d76:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <startUART+0x1bc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a45      	ldr	r2, [pc, #276]	; (8001e90 <startUART+0x1b0>)
 8001d7c:	6013      	str	r3, [r2, #0]
					break;
 8001d7e:	e011      	b.n	8001da4 <startUART+0xc4>
				case 4:
					goalToneFreq = 2000;
 8001d80:	4b41      	ldr	r3, [pc, #260]	; (8001e88 <startUART+0x1a8>)
 8001d82:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001d86:	601a      	str	r2, [r3, #0]
					goalWave = tone4;
 8001d88:	4b45      	ldr	r3, [pc, #276]	; (8001ea0 <startUART+0x1c0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a40      	ldr	r2, [pc, #256]	; (8001e90 <startUART+0x1b0>)
 8001d8e:	6013      	str	r3, [r2, #0]
					break;
 8001d90:	e008      	b.n	8001da4 <startUART+0xc4>
				case 5:
					goalToneFreq = 2666;
 8001d92:	4b3d      	ldr	r3, [pc, #244]	; (8001e88 <startUART+0x1a8>)
 8001d94:	f640 226a 	movw	r2, #2666	; 0xa6a
 8001d98:	601a      	str	r2, [r3, #0]
					goalWave = tone5;
 8001d9a:	4b42      	ldr	r3, [pc, #264]	; (8001ea4 <startUART+0x1c4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a3c      	ldr	r2, [pc, #240]	; (8001e90 <startUART+0x1b0>)
 8001da0:	6013      	str	r3, [r2, #0]
					break;
 8001da2:	bf00      	nop
			}
			//goalToneFreq = rand()%1550 + 950; //No longer just random freq between 950-2500
			voiceToneFreq = 0;
 8001da4:	4b40      	ldr	r3, [pc, #256]	; (8001ea8 <startUART+0x1c8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
			score = score + potentialPoints;
 8001daa:	4b40      	ldr	r3, [pc, #256]	; (8001eac <startUART+0x1cc>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <startUART+0x1d0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	4a3d      	ldr	r2, [pc, #244]	; (8001eac <startUART+0x1cc>)
 8001db6:	6013      	str	r3, [r2, #0]
			potentialPoints = 10;
 8001db8:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <startUART+0x1d0>)
 8001dba:	220a      	movs	r2, #10
 8001dbc:	601a      	str	r2, [r3, #0]
			state = 0; //Print new tone on screen + play thru speaker
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <startUART+0x1d4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
			success = 0;
 8001dc4:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <startUART+0x1a0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
			if (score > MAX_SCORE) state = 2; //End the game when score is reached
 8001dca:	4b38      	ldr	r3, [pc, #224]	; (8001eac <startUART+0x1cc>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b32      	cmp	r3, #50	; 0x32
 8001dd0:	dd02      	ble.n	8001dd8 <startUART+0xf8>
 8001dd2:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <startUART+0x1d4>)
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	601a      	str	r2, [r3, #0]
		  }
		goalToneFreqUART = (goalToneFreq - 970)/25; //Reason for this is explained below
 8001dd8:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <startUART+0x1a8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f2a3 33ca 	subw	r3, r3, #970	; 0x3ca
 8001de0:	4a35      	ldr	r2, [pc, #212]	; (8001eb8 <startUART+0x1d8>)
 8001de2:	fb82 1203 	smull	r1, r2, r2, r3
 8001de6:	10d2      	asrs	r2, r2, #3
 8001de8:	17db      	asrs	r3, r3, #31
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	4a33      	ldr	r2, [pc, #204]	; (8001ebc <startUART+0x1dc>)
 8001dee:	6013      	str	r3, [r2, #0]

		//Change the range of the voiceToneFreq from actual frequency to 0-66
		//Lets say we can whistle from 970-2700 -> # of possible values = 1730
		//We need to map 1730 possible values to 70 possible UART positions
		//Each UART position will represent 24.71 frequencies -> we could split this up into different sections maybe?
		voiceToneFreqUART = (voiceToneFreq - 970)/25;
 8001df0:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <startUART+0x1c8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f2a3 33ca 	subw	r3, r3, #970	; 0x3ca
 8001df8:	4a2f      	ldr	r2, [pc, #188]	; (8001eb8 <startUART+0x1d8>)
 8001dfa:	fb82 1203 	smull	r1, r2, r2, r3
 8001dfe:	10d2      	asrs	r2, r2, #3
 8001e00:	17db      	asrs	r3, r3, #31
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	4a2e      	ldr	r2, [pc, #184]	; (8001ec0 <startUART+0x1e0>)
 8001e06:	6013      	str	r3, [r2, #0]
		if (voiceToneFreqUART >= 70) voiceToneFreqUART = 69; //Must remain between 0-69 because UART game screen is only 70 characters long
 8001e08:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <startUART+0x1e0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b45      	cmp	r3, #69	; 0x45
 8001e0e:	dd02      	ble.n	8001e16 <startUART+0x136>
 8001e10:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <startUART+0x1e0>)
 8001e12:	2245      	movs	r2, #69	; 0x45
 8001e14:	601a      	str	r2, [r3, #0]
		if (voiceToneFreqUART < 0) voiceToneFreqUART = 0;
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <startUART+0x1e0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	da02      	bge.n	8001e24 <startUART+0x144>
 8001e1e:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <startUART+0x1e0>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

		//Based on state (speaker or microphone use) print one screen or the other
		if (state == 0) {
 8001e24:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <startUART+0x1d4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d108      	bne.n	8001e3e <startUART+0x15e>
			//Print that we are playing through the speaker when playing through the speaker
			printNewDesiredTone(goalToneFreq, score);
 8001e2c:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <startUART+0x1a8>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <startUART+0x1cc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4619      	mov	r1, r3
 8001e36:	4610      	mov	r0, r2
 8001e38:	f7ff fb12 	bl	8001460 <printNewDesiredTone>
 8001e3c:	e012      	b.n	8001e64 <startUART+0x184>
		} else if (state == 1) {
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <startUART+0x1d4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d109      	bne.n	8001e5a <startUART+0x17a>
			printGame(goalToneFreqUART, voiceToneFreqUART, score);
 8001e46:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <startUART+0x1dc>)
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <startUART+0x1e0>)
 8001e4c:	6819      	ldr	r1, [r3, #0]
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <startUART+0x1cc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	f7ff fac2 	bl	80013dc <printGame>
 8001e58:	e004      	b.n	8001e64 <startUART+0x184>
		} else {
			printGameOver(score);
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <startUART+0x1cc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fb32 	bl	80014c8 <printGameOver>
		}

		osDelay(11); 										//The UART needs delay or else it acts fkn weird -> min delay = 11ms through trial and error
 8001e64:	200b      	movs	r0, #11
 8001e66:	f006 fae6 	bl	8008436 <osDelay>
		//osMutexRelease(printingPermissionsHandle);
		if (goalToneFreqUART == voiceToneFreqUART) success = 1;
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <startUART+0x1dc>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <startUART+0x1e0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	f47f af3b 	bne.w	8001cee <startUART+0xe>
 8001e78:	4b01      	ldr	r3, [pc, #4]	; (8001e80 <startUART+0x1a0>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]
		if (success) {
 8001e7e:	e736      	b.n	8001cee <startUART+0xe>
 8001e80:	200002fc 	.word	0x200002fc
 8001e84:	2aaaaaab 	.word	0x2aaaaaab
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	20024f48 	.word	0x20024f48
 8001e90:	20020ee8 	.word	0x20020ee8
 8001e94:	2001cce4 	.word	0x2001cce4
 8001e98:	20020e80 	.word	0x20020e80
 8001e9c:	2001cb04 	.word	0x2001cb04
 8001ea0:	20020ef0 	.word	0x20020ef0
 8001ea4:	20020e84 	.word	0x20020e84
 8001ea8:	20020dec 	.word	0x20020dec
 8001eac:	20000300 	.word	0x20000300
 8001eb0:	200002f8 	.word	0x200002f8
 8001eb4:	20000304 	.word	0x20000304
 8001eb8:	51eb851f 	.word	0x51eb851f
 8001ebc:	2001cb00 	.word	0x2001cb00
 8001ec0:	20020ef8 	.word	0x20020ef8

08001ec4 <startSpeaker>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startSpeaker */
void startSpeaker(void const * argument)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f006 fab2 	bl	8008436 <osDelay>
    while(1){
    	osMutexWait(microphonePermissionsHandle, osWaitForever);
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <startSpeaker+0x8c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001eda:	4618      	mov	r0, r3
 8001edc:	f006 fad8 	bl	8008490 <osMutexWait>
    	if (state == 0) { //This is the speaker playing state -> transmit the desired tone through the DAC Speaker
 8001ee0:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <startSpeaker+0x90>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d12c      	bne.n	8001f42 <startSpeaker+0x7e>

    	    			//Make the sine wave for the particular frequency

    	    			int size = samplingRate/goalToneFreq;
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <startSpeaker+0x94>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001ef0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ef4:	60fb      	str	r3, [r7, #12]

    	    			//Turn off microphone so we dont listen to the tone while its playing
    	    			HAL_ADC_Stop_DMA(&hadc1);
 8001ef6:	4819      	ldr	r0, [pc, #100]	; (8001f5c <startSpeaker+0x98>)
 8001ef8:	f001 f806 	bl	8002f08 <HAL_ADC_Stop_DMA>

    	    			//Play the sound thru the speaker for awhile
    	    			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, goalWave, size, DAC_ALIGN_12B_R);
 8001efc:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <startSpeaker+0x9c>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68f9      	ldr	r1, [r7, #12]
 8001f02:	2300      	movs	r3, #0
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	460b      	mov	r3, r1
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4816      	ldr	r0, [pc, #88]	; (8001f64 <startSpeaker+0xa0>)
 8001f0c:	f002 f9de 	bl	80042cc <HAL_DAC_Start_DMA>
    	    			osDelay(1000);
 8001f10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f14:	f006 fa8f 	bl	8008436 <osDelay>
    	    			osDelay(1000);
 8001f18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f1c:	f006 fa8b 	bl	8008436 <osDelay>
    	    			osDelay(1000);
 8001f20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f24:	f006 fa87 	bl	8008436 <osDelay>
    	    			//osMutexRelease(printingPermissionsHandle);
    	    			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001f28:	2100      	movs	r1, #0
 8001f2a:	480e      	ldr	r0, [pc, #56]	; (8001f64 <startSpeaker+0xa0>)
 8001f2c:	f002 fa8c 	bl	8004448 <HAL_DAC_Stop_DMA>

    	    			//Turn mic back on
    	    			HAL_ADC_Start_DMA(&hadc1, micArrayIn, micArraySize);
 8001f30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f34:	490c      	ldr	r1, [pc, #48]	; (8001f68 <startSpeaker+0xa4>)
 8001f36:	4809      	ldr	r0, [pc, #36]	; (8001f5c <startSpeaker+0x98>)
 8001f38:	f000 ff62 	bl	8002e00 <HAL_ADC_Start_DMA>

    	    			state = 1;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <startSpeaker+0x90>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]
    	    		}
    	osMutexRelease(microphonePermissionsHandle);
 8001f42:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <startSpeaker+0x8c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f006 faf0 	bl	800852c <osMutexRelease>
    	osMutexWait(microphonePermissionsHandle, osWaitForever);
 8001f4c:	e7c1      	b.n	8001ed2 <startSpeaker+0xe>
 8001f4e:	bf00      	nop
 8001f50:	2001cce0 	.word	0x2001cce0
 8001f54:	20000304 	.word	0x20000304
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	20020d84 	.word	0x20020d84
 8001f60:	20020ee8 	.word	0x20020ee8
 8001f64:	2001cb68 	.word	0x2001cb68
 8001f68:	20018b00 	.word	0x20018b00

08001f6c <checkCycleComplete>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_checkCycleComplete */
void checkCycleComplete(void const * argument)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f74:	2001      	movs	r0, #1
 8001f76:	f006 fa5e 	bl	8008436 <osDelay>
    //If the first half of the buffer is ready for calculation, send it through the getFreq's function
    while(1){
    	osMutexWait(microphonePermissionsHandle, osWaitForever);
 8001f7a:	4b31      	ldr	r3, [pc, #196]	; (8002040 <checkCycleComplete+0xd4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f82:	4618      	mov	r0, r3
 8001f84:	f006 fa84 	bl	8008490 <osMutexWait>
    	if (isFirstHalfCycleComplete) {
 8001f88:	4b2e      	ldr	r3, [pc, #184]	; (8002044 <checkCycleComplete+0xd8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d025      	beq.n	8001fdc <checkCycleComplete+0x70>

    	    			//Place the microphone data into input buffer, then send -> why not use pointers instead of manually copying the data into the buffer?
    	    			for (int i = 0; i < fftSize; i++){
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	e010      	b.n	8001fb8 <checkCycleComplete+0x4c>
    	    				fft_in_buf[i] = micArrayIn[i];
 8001f96:	4a2c      	ldr	r2, [pc, #176]	; (8002048 <checkCycleComplete+0xdc>)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fa6:	4a29      	ldr	r2, [pc, #164]	; (800204c <checkCycleComplete+0xe0>)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	edc3 7a00 	vstr	s15, [r3]
    	    			for (int i = 0; i < fftSize; i++){
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fbe:	dbea      	blt.n	8001f96 <checkCycleComplete+0x2a>
    	    			}

    	    			voiceToneFreq = getFrequencyOfTone(&fft_handler, samplingRate, fft_in_buf, fft_out_buf);
 8001fc0:	4b23      	ldr	r3, [pc, #140]	; (8002050 <checkCycleComplete+0xe4>)
 8001fc2:	4a22      	ldr	r2, [pc, #136]	; (800204c <checkCycleComplete+0xe0>)
 8001fc4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001fc8:	4822      	ldr	r0, [pc, #136]	; (8002054 <checkCycleComplete+0xe8>)
 8001fca:	f7ff f813 	bl	8000ff4 <getFrequencyOfTone>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	4b21      	ldr	r3, [pc, #132]	; (8002058 <checkCycleComplete+0xec>)
 8001fd2:	601a      	str	r2, [r3, #0]
    	    			isFirstHalfCycleComplete = 0;
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <checkCycleComplete+0xd8>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	e02b      	b.n	8002034 <checkCycleComplete+0xc8>

    	    		} else if (isSecondHalfCycleComplete) {
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	; (800205c <checkCycleComplete+0xf0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d027      	beq.n	8002034 <checkCycleComplete+0xc8>

    	    			//Place the microphone data into input buffer, then send -> why not use pointers instead of manually copying the data into the buffer?
    	    			for (int i = fftSize; i < micArraySize; i++){
 8001fe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	e012      	b.n	8002012 <checkCycleComplete+0xa6>
    	    				fft_in_buf[i-fftSize] = micArrayIn[i];
 8001fec:	4a16      	ldr	r2, [pc, #88]	; (8002048 <checkCycleComplete+0xdc>)
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001ffa:	ee07 2a90 	vmov	s15, r2
 8001ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002002:	4a12      	ldr	r2, [pc, #72]	; (800204c <checkCycleComplete+0xe0>)
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	edc3 7a00 	vstr	s15, [r3]
    	    			for (int i = fftSize; i < micArraySize; i++){
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	3301      	adds	r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002018:	dbe8      	blt.n	8001fec <checkCycleComplete+0x80>
    	    			}

    	    			voiceToneFreq = getFrequencyOfTone(&fft_handler, samplingRate, fft_in_buf, fft_out_buf);
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <checkCycleComplete+0xe4>)
 800201c:	4a0b      	ldr	r2, [pc, #44]	; (800204c <checkCycleComplete+0xe0>)
 800201e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8002022:	480c      	ldr	r0, [pc, #48]	; (8002054 <checkCycleComplete+0xe8>)
 8002024:	f7fe ffe6 	bl	8000ff4 <getFrequencyOfTone>
 8002028:	4602      	mov	r2, r0
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <checkCycleComplete+0xec>)
 800202c:	601a      	str	r2, [r3, #0]
    	    			isSecondHalfCycleComplete = 0;
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <checkCycleComplete+0xf0>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

    	    		}
    	osMutexRelease(microphonePermissionsHandle);
 8002034:	4b02      	ldr	r3, [pc, #8]	; (8002040 <checkCycleComplete+0xd4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f006 fa77 	bl	800852c <osMutexRelease>
    	osMutexWait(microphonePermissionsHandle, osWaitForever);
 800203e:	e79c      	b.n	8001f7a <checkCycleComplete+0xe>
 8002040:	2001cce0 	.word	0x2001cce0
 8002044:	200002f0 	.word	0x200002f0
 8002048:	20018b00 	.word	0x20018b00
 800204c:	20022f48 	.word	0x20022f48
 8002050:	20020efc 	.word	0x20020efc
 8002054:	2001cb08 	.word	0x2001cb08
 8002058:	20020dec 	.word	0x20020dec
 800205c:	200002f4 	.word	0x200002f4

08002060 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002072:	f000 fafd 	bl	8002670 <HAL_IncTick>

	/*
	 * UART Points Decrementer -> uses Timer 3 since Timer 2 is being used as source trigger for ADC in DMA mode
	 * Frequency is 2Hz -> we start at 10 potential points and decrement by 1 points every 0.5 seconds
	 */
	if (htim == &htim3) {
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d10c      	bne.n	8002098 <HAL_TIM_PeriodElapsedCallback+0x38>
		if (potentialPoints > 0 && state == 1) potentialPoints = potentialPoints - 1;
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	dd08      	ble.n	8002098 <HAL_TIM_PeriodElapsedCallback+0x38>
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d104      	bne.n	8002098 <HAL_TIM_PeriodElapsedCallback+0x38>
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3b01      	subs	r3, #1
 8002094:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002096:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40001000 	.word	0x40001000
 80020a4:	2001cce8 	.word	0x2001cce8
 80020a8:	200002f8 	.word	0x200002f8
 80020ac:	20000304 	.word	0x20000304

080020b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80020b6:	e7fe      	b.n	80020b6 <Error_Handler+0x6>

080020b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <HAL_MspInit+0x4c>)
 80020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c2:	4a10      	ldr	r2, [pc, #64]	; (8002104 <HAL_MspInit+0x4c>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6613      	str	r3, [r2, #96]	; 0x60
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <HAL_MspInit+0x4c>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_MspInit+0x4c>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <HAL_MspInit+0x4c>)
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e0:	6593      	str	r3, [r2, #88]	; 0x58
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HAL_MspInit+0x4c>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	210f      	movs	r1, #15
 80020f2:	f06f 0001 	mvn.w	r0, #1
 80020f6:	f002 f89d 	bl	8004234 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000

08002108 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a2a      	ldr	r2, [pc, #168]	; (80021d0 <HAL_ADC_MspInit+0xc8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d14e      	bne.n	80021c8 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_ADC_MspInit+0xcc>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	4a29      	ldr	r2, [pc, #164]	; (80021d4 <HAL_ADC_MspInit+0xcc>)
 8002130:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002136:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <HAL_ADC_MspInit+0xcc>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002142:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <HAL_ADC_MspInit+0xcc>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	4a23      	ldr	r2, [pc, #140]	; (80021d4 <HAL_ADC_MspInit+0xcc>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214e:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <HAL_ADC_MspInit+0xcc>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = MICROPHONE_A_Pin|POTENTIOMETER_Pin;
 800215a:	2328      	movs	r3, #40	; 0x28
 800215c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800215e:	2303      	movs	r3, #3
 8002160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	4619      	mov	r1, r3
 800216c:	481a      	ldr	r0, [pc, #104]	; (80021d8 <HAL_ADC_MspInit+0xd0>)
 800216e:	f002 fecb 	bl	8004f08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <HAL_ADC_MspInit+0xd4>)
 8002174:	4a1a      	ldr	r2, [pc, #104]	; (80021e0 <HAL_ADC_MspInit+0xd8>)
 8002176:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002178:	4b18      	ldr	r3, [pc, #96]	; (80021dc <HAL_ADC_MspInit+0xd4>)
 800217a:	2205      	movs	r2, #5
 800217c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HAL_ADC_MspInit+0xd4>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002184:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_ADC_MspInit+0xd4>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <HAL_ADC_MspInit+0xd4>)
 800218c:	2280      	movs	r2, #128	; 0x80
 800218e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_ADC_MspInit+0xd4>)
 8002192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002196:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002198:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_ADC_MspInit+0xd4>)
 800219a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800219e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_ADC_MspInit+0xd4>)
 80021a2:	2220      	movs	r2, #32
 80021a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <HAL_ADC_MspInit+0xd4>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021ac:	480b      	ldr	r0, [pc, #44]	; (80021dc <HAL_ADC_MspInit+0xd4>)
 80021ae:	f002 fbdd 	bl	800496c <HAL_DMA_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 80021b8:	f7ff ff7a 	bl	80020b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a07      	ldr	r2, [pc, #28]	; (80021dc <HAL_ADC_MspInit+0xd4>)
 80021c0:	651a      	str	r2, [r3, #80]	; 0x50
 80021c2:	4a06      	ldr	r2, [pc, #24]	; (80021dc <HAL_ADC_MspInit+0xd4>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021c8:	bf00      	nop
 80021ca:	3728      	adds	r7, #40	; 0x28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	50040000 	.word	0x50040000
 80021d4:	40021000 	.word	0x40021000
 80021d8:	48000800 	.word	0x48000800
 80021dc:	20020e88 	.word	0x20020e88
 80021e0:	40020008 	.word	0x40020008

080021e4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a2f      	ldr	r2, [pc, #188]	; (80022c0 <HAL_DAC_MspInit+0xdc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d157      	bne.n	80022b6 <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002206:	4b2f      	ldr	r3, [pc, #188]	; (80022c4 <HAL_DAC_MspInit+0xe0>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220a:	4a2e      	ldr	r2, [pc, #184]	; (80022c4 <HAL_DAC_MspInit+0xe0>)
 800220c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002210:	6593      	str	r3, [r2, #88]	; 0x58
 8002212:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <HAL_DAC_MspInit+0xe0>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <HAL_DAC_MspInit+0xe0>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	4a28      	ldr	r2, [pc, #160]	; (80022c4 <HAL_DAC_MspInit+0xe0>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <HAL_DAC_MspInit+0xe0>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002236:	2310      	movs	r3, #16
 8002238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800223a:	2303      	movs	r3, #3
 800223c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4619      	mov	r1, r3
 8002248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224c:	f002 fe5c 	bl	8004f08 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_DAC_MspInit+0xe4>)
 8002252:	4a1e      	ldr	r2, [pc, #120]	; (80022cc <HAL_DAC_MspInit+0xe8>)
 8002254:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8002256:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <HAL_DAC_MspInit+0xe4>)
 8002258:	2206      	movs	r2, #6
 800225a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <HAL_DAC_MspInit+0xe4>)
 800225e:	2210      	movs	r2, #16
 8002260:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002262:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_DAC_MspInit+0xe4>)
 8002264:	2200      	movs	r2, #0
 8002266:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002268:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <HAL_DAC_MspInit+0xe4>)
 800226a:	2280      	movs	r2, #128	; 0x80
 800226c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800226e:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <HAL_DAC_MspInit+0xe4>)
 8002270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002274:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <HAL_DAC_MspInit+0xe4>)
 8002278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800227c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_DAC_MspInit+0xe4>)
 8002280:	2220      	movs	r2, #32
 8002282:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_DAC_MspInit+0xe4>)
 8002286:	2200      	movs	r2, #0
 8002288:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800228a:	480f      	ldr	r0, [pc, #60]	; (80022c8 <HAL_DAC_MspInit+0xe4>)
 800228c:	f002 fb6e 	bl	800496c <HAL_DMA_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8002296:	f7ff ff0b 	bl	80020b0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <HAL_DAC_MspInit+0xe4>)
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	4a09      	ldr	r2, [pc, #36]	; (80022c8 <HAL_DAC_MspInit+0xe4>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	2036      	movs	r0, #54	; 0x36
 80022ac:	f001 ffc2 	bl	8004234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022b0:	2036      	movs	r0, #54	; 0x36
 80022b2:	f001 ffdb 	bl	800426c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80022b6:	bf00      	nop
 80022b8:	3728      	adds	r7, #40	; 0x28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40007400 	.word	0x40007400
 80022c4:	40021000 	.word	0x40021000
 80022c8:	2001cc80 	.word	0x2001cc80
 80022cc:	40020030 	.word	0x40020030

080022d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e0:	d10c      	bne.n	80022fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_TIM_Base_MspInit+0x5c>)
 80022e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e6:	4a11      	ldr	r2, [pc, #68]	; (800232c <HAL_TIM_Base_MspInit+0x5c>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6593      	str	r3, [r2, #88]	; 0x58
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <HAL_TIM_Base_MspInit+0x5c>)
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022fa:	e010      	b.n	800231e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <HAL_TIM_Base_MspInit+0x60>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d10b      	bne.n	800231e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <HAL_TIM_Base_MspInit+0x5c>)
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <HAL_TIM_Base_MspInit+0x5c>)
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	6593      	str	r3, [r2, #88]	; 0x58
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_TIM_Base_MspInit+0x5c>)
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	40000400 	.word	0x40000400

08002334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a17      	ldr	r2, [pc, #92]	; (80023b0 <HAL_UART_MspInit+0x7c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d127      	bne.n	80023a6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <HAL_UART_MspInit+0x80>)
 8002358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800235a:	4a16      	ldr	r2, [pc, #88]	; (80023b4 <HAL_UART_MspInit+0x80>)
 800235c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002360:	6613      	str	r3, [r2, #96]	; 0x60
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <HAL_UART_MspInit+0x80>)
 8002364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_UART_MspInit+0x80>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	4a10      	ldr	r2, [pc, #64]	; (80023b4 <HAL_UART_MspInit+0x80>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <HAL_UART_MspInit+0x80>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002386:	23c0      	movs	r3, #192	; 0xc0
 8002388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	2302      	movs	r3, #2
 800238c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002392:	2303      	movs	r3, #3
 8002394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002396:	2307      	movs	r3, #7
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	4805      	ldr	r0, [pc, #20]	; (80023b8 <HAL_UART_MspInit+0x84>)
 80023a2:	f002 fdb1 	bl	8004f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023a6:	bf00      	nop
 80023a8:	3728      	adds	r7, #40	; 0x28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40013800 	.word	0x40013800
 80023b4:	40021000 	.word	0x40021000
 80023b8:	48000400 	.word	0x48000400

080023bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08c      	sub	sp, #48	; 0x30
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80023cc:	2200      	movs	r2, #0
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	2036      	movs	r0, #54	; 0x36
 80023d2:	f001 ff2f 	bl	8004234 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023d6:	2036      	movs	r0, #54	; 0x36
 80023d8:	f001 ff48 	bl	800426c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80023dc:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <HAL_InitTick+0x9c>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	4a1d      	ldr	r2, [pc, #116]	; (8002458 <HAL_InitTick+0x9c>)
 80023e2:	f043 0310 	orr.w	r3, r3, #16
 80023e6:	6593      	str	r3, [r2, #88]	; 0x58
 80023e8:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <HAL_InitTick+0x9c>)
 80023ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023f4:	f107 0210 	add.w	r2, r7, #16
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	4611      	mov	r1, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	f003 fdec 	bl	8005fdc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002404:	f003 fdbe 	bl	8005f84 <HAL_RCC_GetPCLK1Freq>
 8002408:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240c:	4a13      	ldr	r2, [pc, #76]	; (800245c <HAL_InitTick+0xa0>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	0c9b      	lsrs	r3, r3, #18
 8002414:	3b01      	subs	r3, #1
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <HAL_InitTick+0xa4>)
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <HAL_InitTick+0xa8>)
 800241c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <HAL_InitTick+0xa4>)
 8002420:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002424:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002426:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <HAL_InitTick+0xa4>)
 8002428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <HAL_InitTick+0xa4>)
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_InitTick+0xa4>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002438:	4809      	ldr	r0, [pc, #36]	; (8002460 <HAL_InitTick+0xa4>)
 800243a:	f004 fbcb 	bl	8006bd4 <HAL_TIM_Base_Init>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d104      	bne.n	800244e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002444:	4806      	ldr	r0, [pc, #24]	; (8002460 <HAL_InitTick+0xa4>)
 8002446:	f004 fc1d 	bl	8006c84 <HAL_TIM_Base_Start_IT>
 800244a:	4603      	mov	r3, r0
 800244c:	e000      	b.n	8002450 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
}
 8002450:	4618      	mov	r0, r3
 8002452:	3730      	adds	r7, #48	; 0x30
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000
 800245c:	431bde83 	.word	0x431bde83
 8002460:	20024f4c 	.word	0x20024f4c
 8002464:	40001000 	.word	0x40001000

08002468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800246c:	e7fe      	b.n	800246c <NMI_Handler+0x4>

0800246e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002472:	e7fe      	b.n	8002472 <HardFault_Handler+0x4>

08002474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <MemManage_Handler+0x4>

0800247a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800247e:	e7fe      	b.n	800247e <BusFault_Handler+0x4>

08002480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002484:	e7fe      	b.n	8002484 <UsageFault_Handler+0x4>

08002486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <DMA1_Channel1_IRQHandler+0x10>)
 800249a:	f002 fbe6 	bl	8004c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20020e88 	.word	0x20020e88

080024a8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <DMA1_Channel3_IRQHandler+0x10>)
 80024ae:	f002 fbdc 	bl	8004c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	2001cc80 	.word	0x2001cc80

080024bc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <ADC1_IRQHandler+0x10>)
 80024c2:	f000 fd82 	bl	8002fca <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20020d84 	.word	0x20020d84

080024d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <TIM2_IRQHandler+0x10>)
 80024d6:	f004 fc45 	bl	8006d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20022efc 	.word	0x20022efc

080024e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <TIM3_IRQHandler+0x10>)
 80024ea:	f004 fc3b 	bl	8006d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	2001cce8 	.word	0x2001cce8

080024f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024fc:	4803      	ldr	r0, [pc, #12]	; (800250c <TIM6_DAC_IRQHandler+0x14>)
 80024fe:	f004 fc31 	bl	8006d64 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002502:	4803      	ldr	r0, [pc, #12]	; (8002510 <TIM6_DAC_IRQHandler+0x18>)
 8002504:	f001 ffe5 	bl	80044d2 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20024f4c 	.word	0x20024f4c
 8002510:	2001cb68 	.word	0x2001cb68

08002514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800251c:	4a14      	ldr	r2, [pc, #80]	; (8002570 <_sbrk+0x5c>)
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <_sbrk+0x60>)
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <_sbrk+0x64>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <_sbrk+0x64>)
 8002532:	4a12      	ldr	r2, [pc, #72]	; (800257c <_sbrk+0x68>)
 8002534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <_sbrk+0x64>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	429a      	cmp	r2, r3
 8002542:	d207      	bcs.n	8002554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002544:	f009 fb24 	bl	800bb90 <__errno>
 8002548:	4602      	mov	r2, r0
 800254a:	230c      	movs	r3, #12
 800254c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002552:	e009      	b.n	8002568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <_sbrk+0x64>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	4a05      	ldr	r2, [pc, #20]	; (8002578 <_sbrk+0x64>)
 8002564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002566:	68fb      	ldr	r3, [r7, #12]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	200a0000 	.word	0x200a0000
 8002574:	00000400 	.word	0x00000400
 8002578:	20000308 	.word	0x20000308
 800257c:	20024fa0 	.word	0x20024fa0

08002580 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002584:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <SystemInit+0x64>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	4a16      	ldr	r2, [pc, #88]	; (80025e4 <SystemInit+0x64>)
 800258c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <SystemInit+0x68>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <SystemInit+0x68>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <SystemInit+0x68>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <SystemInit+0x68>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <SystemInit+0x68>)
 80025ac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80025b0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80025b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80025b6:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <SystemInit+0x68>)
 80025b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025bc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <SystemInit+0x68>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <SystemInit+0x68>)
 80025c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <SystemInit+0x68>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <SystemInit+0x64>)
 80025d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025d6:	609a      	str	r2, [r3, #8]
#endif
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00
 80025e8:	40021000 	.word	0x40021000

080025ec <Reset_Handler>:
 80025ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002624 <LoopForever+0x2>
 80025f0:	f7ff ffc6 	bl	8002580 <SystemInit>
 80025f4:	2100      	movs	r1, #0
 80025f6:	e003      	b.n	8002600 <LoopCopyDataInit>

080025f8 <CopyDataInit>:
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <LoopForever+0x6>)
 80025fa:	585b      	ldr	r3, [r3, r1]
 80025fc:	5043      	str	r3, [r0, r1]
 80025fe:	3104      	adds	r1, #4

08002600 <LoopCopyDataInit>:
 8002600:	480a      	ldr	r0, [pc, #40]	; (800262c <LoopForever+0xa>)
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <LoopForever+0xe>)
 8002604:	1842      	adds	r2, r0, r1
 8002606:	429a      	cmp	r2, r3
 8002608:	d3f6      	bcc.n	80025f8 <CopyDataInit>
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <LoopForever+0x12>)
 800260c:	e002      	b.n	8002614 <LoopFillZerobss>

0800260e <FillZerobss>:
 800260e:	2300      	movs	r3, #0
 8002610:	f842 3b04 	str.w	r3, [r2], #4

08002614 <LoopFillZerobss>:
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <LoopForever+0x16>)
 8002616:	429a      	cmp	r2, r3
 8002618:	d3f9      	bcc.n	800260e <FillZerobss>
 800261a:	f009 fabf 	bl	800bb9c <__libc_init_array>
 800261e:	f7fe ffbf 	bl	80015a0 <main>

08002622 <LoopForever>:
 8002622:	e7fe      	b.n	8002622 <LoopForever>
 8002624:	200a0000 	.word	0x200a0000
 8002628:	08020850 	.word	0x08020850
 800262c:	20000000 	.word	0x20000000
 8002630:	2000007c 	.word	0x2000007c
 8002634:	2000007c 	.word	0x2000007c
 8002638:	20024fa0 	.word	0x20024fa0

0800263c <AES_IRQHandler>:
 800263c:	e7fe      	b.n	800263c <AES_IRQHandler>

0800263e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002648:	2003      	movs	r0, #3
 800264a:	f001 fde8 	bl	800421e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800264e:	2000      	movs	r0, #0
 8002650:	f7ff feb4 	bl	80023bc <HAL_InitTick>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	71fb      	strb	r3, [r7, #7]
 800265e:	e001      	b.n	8002664 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002660:	f7ff fd2a 	bl	80020b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002664:	79fb      	ldrb	r3, [r7, #7]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_IncTick+0x20>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_IncTick+0x24>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4413      	add	r3, r2
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_IncTick+0x24>)
 8002682:	6013      	str	r3, [r2, #0]
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	2000000c 	.word	0x2000000c
 8002694:	20024f98 	.word	0x20024f98

08002698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return uwTick;
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_GetTick+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	20024f98 	.word	0x20024f98

080026b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7ff ffee 	bl	8002698 <HAL_GetTick>
 80026bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026c8:	d005      	beq.n	80026d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_Delay+0x40>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4413      	add	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026d6:	bf00      	nop
 80026d8:	f7ff ffde 	bl	8002698 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d8f7      	bhi.n	80026d8 <HAL_Delay+0x28>
  {
  }
}
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	2000000c 	.word	0x2000000c

080026f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	609a      	str	r2, [r3, #8]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	609a      	str	r2, [r3, #8]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	3360      	adds	r3, #96	; 0x60
 800276e:	461a      	mov	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <LL_ADC_SetOffset+0x44>)
 800277e:	4013      	ands	r3, r2
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	4313      	orrs	r3, r2
 800278c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002794:	bf00      	nop
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	03fff000 	.word	0x03fff000

080027a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3360      	adds	r3, #96	; 0x60
 80027b2:	461a      	mov	r2, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3360      	adds	r3, #96	; 0x60
 80027e0:	461a      	mov	r2, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027fa:	bf00      	nop
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	615a      	str	r2, [r3, #20]
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002852:	b480      	push	{r7}
 8002854:	b087      	sub	sp, #28
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	3330      	adds	r3, #48	; 0x30
 8002862:	461a      	mov	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	4413      	add	r3, r2
 8002870:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	211f      	movs	r1, #31
 800287e:	fa01 f303 	lsl.w	r3, r1, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	401a      	ands	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	0e9b      	lsrs	r3, r3, #26
 800288a:	f003 011f 	and.w	r1, r3, #31
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	431a      	orrs	r2, r3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3314      	adds	r3, #20
 80028e0:	461a      	mov	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	0e5b      	lsrs	r3, r3, #25
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	4413      	add	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	0d1b      	lsrs	r3, r3, #20
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	2107      	movs	r1, #7
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	401a      	ands	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	0d1b      	lsrs	r3, r3, #20
 800290a:	f003 031f 	and.w	r3, r3, #31
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	fa01 f303 	lsl.w	r3, r1, r3
 8002914:	431a      	orrs	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800291a:	bf00      	nop
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002940:	43db      	mvns	r3, r3
 8002942:	401a      	ands	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f003 0318 	and.w	r3, r3, #24
 800294a:	4908      	ldr	r1, [pc, #32]	; (800296c <LL_ADC_SetChannelSingleDiff+0x44>)
 800294c:	40d9      	lsrs	r1, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	400b      	ands	r3, r1
 8002952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002956:	431a      	orrs	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	0007ffff 	.word	0x0007ffff

08002970 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002980:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6093      	str	r3, [r2, #8]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029a8:	d101      	bne.n	80029ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80029cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029f8:	d101      	bne.n	80029fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a20:	f043 0201 	orr.w	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a48:	f043 0202 	orr.w	r2, r3, #2
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <LL_ADC_IsEnabled+0x18>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <LL_ADC_IsEnabled+0x1a>
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d101      	bne.n	8002a9a <LL_ADC_IsDisableOngoing+0x18>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <LL_ADC_IsDisableOngoing+0x1a>
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ab8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002abc:	f043 0204 	orr.w	r2, r3, #4
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ae0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ae4:	f043 0210 	orr.w	r2, r3, #16
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d101      	bne.n	8002b10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b32:	f043 0220 	orr.w	r2, r3, #32
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d101      	bne.n	8002b5e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e12d      	b.n	8002de2 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff fab7 	bl	8002108 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fef1 	bl	8002994 <LL_ADC_IsDeepPowerDownEnabled>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d004      	beq.n	8002bc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff fed7 	bl	8002970 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff ff0c 	bl	80029e4 <LL_ADC_IsInternalRegulatorEnabled>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d113      	bne.n	8002bfa <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fef0 	bl	80029bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002bdc:	4b83      	ldr	r3, [pc, #524]	; (8002dec <HAL_ADC_Init+0x280>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	099b      	lsrs	r3, r3, #6
 8002be2:	4a83      	ldr	r2, [pc, #524]	; (8002df0 <HAL_ADC_Init+0x284>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	099b      	lsrs	r3, r3, #6
 8002bea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bec:	e002      	b.n	8002bf4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f9      	bne.n	8002bee <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fef0 	bl	80029e4 <LL_ADC_IsInternalRegulatorEnabled>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10d      	bne.n	8002c26 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0e:	f043 0210 	orr.w	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff ff64 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8002c30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 80c8 	bne.w	8002dd0 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f040 80c4 	bne.w	8002dd0 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c50:	f043 0202 	orr.w	r2, r3, #2
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fefd 	bl	8002a5c <LL_ADC_IsEnabled>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10b      	bne.n	8002c80 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c68:	4862      	ldr	r0, [pc, #392]	; (8002df4 <HAL_ADC_Init+0x288>)
 8002c6a:	f7ff fef7 	bl	8002a5c <LL_ADC_IsEnabled>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d105      	bne.n	8002c80 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	485f      	ldr	r0, [pc, #380]	; (8002df8 <HAL_ADC_Init+0x28c>)
 8002c7c:	f7ff fd3a 	bl	80026f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7e5b      	ldrb	r3, [r3, #25]
 8002c84:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c8a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002c90:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002c96:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c9e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d106      	bne.n	8002cbc <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	045b      	lsls	r3, r3, #17
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d009      	beq.n	8002cd8 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <HAL_ADC_Init+0x290>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	69b9      	ldr	r1, [r7, #24]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff01 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8002cf6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff22 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 8002d02:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d140      	bne.n	8002d8c <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d13d      	bne.n	8002d8c <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7e1b      	ldrb	r3, [r3, #24]
 8002d18:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d1a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d22:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d32:	f023 0306 	bic.w	r3, r3, #6
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	69b9      	ldr	r1, [r7, #24]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d118      	bne.n	8002d7c <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d54:	f023 0304 	bic.w	r3, r3, #4
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d60:	4311      	orrs	r1, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d66:	4311      	orrs	r1, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	611a      	str	r2, [r3, #16]
 8002d7a:	e007      	b.n	8002d8c <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691a      	ldr	r2, [r3, #16]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0201 	bic.w	r2, r2, #1
 8002d8a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d10c      	bne.n	8002dae <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f023 010f 	bic.w	r1, r3, #15
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	1e5a      	subs	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	631a      	str	r2, [r3, #48]	; 0x30
 8002dac:	e007      	b.n	8002dbe <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 020f 	bic.w	r2, r2, #15
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	659a      	str	r2, [r3, #88]	; 0x58
 8002dce:	e007      	b.n	8002de0 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd4:	f043 0210 	orr.w	r2, r3, #16
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002de0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000004 	.word	0x20000004
 8002df0:	053e2d63 	.word	0x053e2d63
 8002df4:	50040000 	.word	0x50040000
 8002df8:	50040300 	.word	0x50040300
 8002dfc:	fff0c007 	.word	0xfff0c007

08002e00 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fe71 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d167      	bne.n	8002eec <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_Start_DMA+0x2a>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e063      	b.n	8002ef2 <HAL_ADC_Start_DMA+0xf2>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 ff40 	bl	8003cb8 <ADC_Enable>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002e3c:	7dfb      	ldrb	r3, [r7, #23]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d14f      	bne.n	8002ee2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d006      	beq.n	8002e70 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e66:	f023 0206 	bic.w	r2, r3, #6
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e6e:	e002      	b.n	8002e76 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7a:	4a20      	ldr	r2, [pc, #128]	; (8002efc <HAL_ADC_Start_DMA+0xfc>)
 8002e7c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e82:	4a1f      	ldr	r2, [pc, #124]	; (8002f00 <HAL_ADC_Start_DMA+0x100>)
 8002e84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8a:	4a1e      	ldr	r2, [pc, #120]	; (8002f04 <HAL_ADC_Start_DMA+0x104>)
 8002e8c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	221c      	movs	r2, #28
 8002e94:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f042 0210 	orr.w	r2, r2, #16
 8002eac:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0201 	orr.w	r2, r2, #1
 8002ebc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3340      	adds	r3, #64	; 0x40
 8002ec8:	4619      	mov	r1, r3
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f001 fdf5 	bl	8004abc <HAL_DMA_Start_IT>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fde4 	bl	8002aa8 <LL_ADC_REG_StartConversion>
 8002ee0:	e006      	b.n	8002ef0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002eea:	e001      	b.n	8002ef0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002eec:	2302      	movs	r3, #2
 8002eee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	08003e1d 	.word	0x08003e1d
 8002f00:	08003ef5 	.word	0x08003ef5
 8002f04:	08003f11 	.word	0x08003f11

08002f08 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_Stop_DMA+0x16>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e051      	b.n	8002fc2 <HAL_ADC_Stop_DMA+0xba>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002f26:	2103      	movs	r1, #3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fe11 	bl	8003b50 <ADC_ConversionStop>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d13f      	bne.n	8002fb8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d10f      	bne.n	8002f76 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f001 fe29 	bl	8004bb2 <HAL_DMA_Abort>
 8002f60:	4603      	mov	r3, r0
 8002f62:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0210 	bic.w	r2, r2, #16
 8002f84:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d105      	bne.n	8002f98 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 feed 	bl	8003d6c <ADC_Disable>
 8002f92:	4603      	mov	r3, r0
 8002f94:	73fb      	strb	r3, [r7, #15]
 8002f96:	e002      	b.n	8002f9e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fee7 	bl	8003d6c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	f043 0201 	orr.w	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b088      	sub	sp, #32
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d017      	beq.n	8003020 <HAL_ADC_IRQHandler+0x56>
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d012      	beq.n	8003020 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b00      	cmp	r3, #0
 8003004:	d105      	bne.n	8003012 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f001 f84b 	bl	80040ae <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2202      	movs	r2, #2
 800301e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d004      	beq.n	8003034 <HAL_ADC_IRQHandler+0x6a>
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800303a:	2b00      	cmp	r3, #0
 800303c:	d05e      	beq.n	80030fc <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b00      	cmp	r3, #0
 8003046:	d059      	beq.n	80030fc <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	d105      	bne.n	8003060 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fbe1 	bl	800282c <LL_ADC_REG_IsTriggerSourceSWStart>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d03e      	beq.n	80030ee <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d135      	bne.n	80030ee <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b08      	cmp	r3, #8
 800308e:	d12e      	bne.n	80030ee <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fd2f 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d11a      	bne.n	80030d6 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 020c 	bic.w	r2, r2, #12
 80030ae:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d112      	bne.n	80030ee <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030cc:	f043 0201 	orr.w	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	659a      	str	r2, [r3, #88]	; 0x58
 80030d4:	e00b      	b.n	80030ee <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	f043 0210 	orr.w	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e6:	f043 0201 	orr.w	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fe fa20 	bl	8001534 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	220c      	movs	r2, #12
 80030fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d004      	beq.n	8003110 <HAL_ADC_IRQHandler+0x146>
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d109      	bne.n	8003124 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003116:	2b00      	cmp	r3, #0
 8003118:	d072      	beq.n	8003200 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d06d      	beq.n	8003200 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fbb2 	bl	80028aa <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003146:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fb6d 	bl	800282c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003152:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10c      	bne.n	800317c <HAL_ADC_IRQHandler+0x1b2>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003168:	2b00      	cmp	r3, #0
 800316a:	d142      	bne.n	80031f2 <HAL_ADC_IRQHandler+0x228>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d03f      	beq.n	80031f2 <HAL_ADC_IRQHandler+0x228>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8003178:	2b00      	cmp	r3, #0
 800317a:	d13a      	bne.n	80031f2 <HAL_ADC_IRQHandler+0x228>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b40      	cmp	r3, #64	; 0x40
 8003188:	d133      	bne.n	80031f2 <HAL_ADC_IRQHandler+0x228>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d12e      	bne.n	80031f2 <HAL_ADC_IRQHandler+0x228>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff fcd4 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d11a      	bne.n	80031da <HAL_ADC_IRQHandler+0x210>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031b2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d112      	bne.n	80031f2 <HAL_ADC_IRQHandler+0x228>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d0:	f043 0201 	orr.w	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	659a      	str	r2, [r3, #88]	; 0x58
 80031d8:	e00b      	b.n	80031f2 <HAL_ADC_IRQHandler+0x228>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031de:	f043 0210 	orr.w	r2, r3, #16
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 ff33 	bl	800405e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2260      	movs	r2, #96	; 0x60
 80031fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003206:	2b00      	cmp	r3, #0
 8003208:	d011      	beq.n	800322e <HAL_ADC_IRQHandler+0x264>
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00c      	beq.n	800322e <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f886 	bl	8003332 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2280      	movs	r2, #128	; 0x80
 800322c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d012      	beq.n	800325e <HAL_ADC_IRQHandler+0x294>
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00d      	beq.n	800325e <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 ff19 	bl	8004086 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800325c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003264:	2b00      	cmp	r3, #0
 8003266:	d012      	beq.n	800328e <HAL_ADC_IRQHandler+0x2c4>
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00d      	beq.n	800328e <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 ff0b 	bl	800409a <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800328c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b00      	cmp	r3, #0
 8003296:	d02a      	beq.n	80032ee <HAL_ADC_IRQHandler+0x324>
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d025      	beq.n	80032ee <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d102      	bne.n	80032b0 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80032aa:	2301      	movs	r3, #1
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	e008      	b.n	80032c2 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80032be:	2301      	movs	r3, #1
 80032c0:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d10e      	bne.n	80032e6 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	f043 0202 	orr.w	r2, r3, #2
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f830 	bl	8003346 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2210      	movs	r2, #16
 80032ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d018      	beq.n	800332a <HAL_ADC_IRQHandler+0x360>
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d013      	beq.n	800332a <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003306:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003312:	f043 0208 	orr.w	r2, r3, #8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003322:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fea4 	bl	8004072 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800332a:	bf00      	nop
 800332c:	3720      	adds	r7, #32
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b0b6      	sub	sp, #216	; 0xd8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_ADC_ConfigChannel+0x22>
 800337a:	2302      	movs	r3, #2
 800337c:	e3d4      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x7cc>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fbb4 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	f040 83b9 	bne.w	8003b0a <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b05      	cmp	r3, #5
 800339e:	d824      	bhi.n	80033ea <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	3b02      	subs	r3, #2
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d81b      	bhi.n	80033e2 <HAL_ADC_ConfigChannel+0x86>
 80033aa:	a201      	add	r2, pc, #4	; (adr r2, 80033b0 <HAL_ADC_ConfigChannel+0x54>)
 80033ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b0:	080033c1 	.word	0x080033c1
 80033b4:	080033c9 	.word	0x080033c9
 80033b8:	080033d1 	.word	0x080033d1
 80033bc:	080033d9 	.word	0x080033d9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	220c      	movs	r2, #12
 80033c4:	605a      	str	r2, [r3, #4]
          break;
 80033c6:	e011      	b.n	80033ec <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2212      	movs	r2, #18
 80033cc:	605a      	str	r2, [r3, #4]
          break;
 80033ce:	e00d      	b.n	80033ec <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2218      	movs	r2, #24
 80033d4:	605a      	str	r2, [r3, #4]
          break;
 80033d6:	e009      	b.n	80033ec <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033de:	605a      	str	r2, [r3, #4]
          break;
 80033e0:	e004      	b.n	80033ec <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2206      	movs	r2, #6
 80033e6:	605a      	str	r2, [r3, #4]
          break;
 80033e8:	e000      	b.n	80033ec <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80033ea:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	f7ff fa2a 	bl	8002852 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fb78 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8003408:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fb98 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 8003416:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800341a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800341e:	2b00      	cmp	r3, #0
 8003420:	f040 81c1 	bne.w	80037a6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003424:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003428:	2b00      	cmp	r3, #0
 800342a:	f040 81bc 	bne.w	80037a6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003436:	d10f      	bne.n	8003458 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2200      	movs	r2, #0
 8003442:	4619      	mov	r1, r3
 8003444:	f7ff fa44 	bl	80028d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff f9d8 	bl	8002806 <LL_ADC_SetSamplingTimeCommonConfig>
 8003456:	e00e      	b.n	8003476 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	6819      	ldr	r1, [r3, #0]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	461a      	mov	r2, r3
 8003466:	f7ff fa33 	bl	80028d0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff f9c8 	bl	8002806 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	08db      	lsrs	r3, r3, #3
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b04      	cmp	r3, #4
 8003496:	d00a      	beq.n	80034ae <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6919      	ldr	r1, [r3, #16]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034a8:	f7ff f958 	bl	800275c <LL_ADC_SetOffset>
 80034ac:	e17b      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff f975 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <HAL_ADC_ConfigChannel+0x17e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff f96a 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 80034d0:	4603      	mov	r3, r0
 80034d2:	0e9b      	lsrs	r3, r3, #26
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	e01e      	b.n	8003518 <HAL_ADC_ConfigChannel+0x1bc>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff f95f 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003500:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003508:	2320      	movs	r3, #32
 800350a:	e004      	b.n	8003516 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800350c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003520:	2b00      	cmp	r3, #0
 8003522:	d105      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x1d4>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	0e9b      	lsrs	r3, r3, #26
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	e018      	b.n	8003562 <HAL_ADC_ConfigChannel+0x206>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003544:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003548:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800354c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003554:	2320      	movs	r3, #32
 8003556:	e004      	b.n	8003562 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003558:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800355c:	fab3 f383 	clz	r3, r3
 8003560:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003562:	429a      	cmp	r2, r3
 8003564:	d106      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2200      	movs	r2, #0
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff f92e 	bl	80027d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2101      	movs	r1, #1
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff f912 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 8003580:	4603      	mov	r3, r0
 8003582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x244>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2101      	movs	r1, #1
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff f907 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 8003596:	4603      	mov	r3, r0
 8003598:	0e9b      	lsrs	r3, r3, #26
 800359a:	f003 021f 	and.w	r2, r3, #31
 800359e:	e01e      	b.n	80035de <HAL_ADC_ConfigChannel+0x282>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2101      	movs	r1, #1
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff f8fc 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035b6:	fa93 f3a3 	rbit	r3, r3
 80035ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80035be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80035c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80035ce:	2320      	movs	r3, #32
 80035d0:	e004      	b.n	80035dc <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80035d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d105      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x29a>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	0e9b      	lsrs	r3, r3, #26
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	e018      	b.n	8003628 <HAL_ADC_ConfigChannel+0x2cc>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800360a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800360e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003612:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800361a:	2320      	movs	r3, #32
 800361c:	e004      	b.n	8003628 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800361e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003622:	fab3 f383 	clz	r3, r3
 8003626:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003628:	429a      	cmp	r2, r3
 800362a:	d106      	bne.n	800363a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2200      	movs	r2, #0
 8003632:	2101      	movs	r1, #1
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff f8cb 	bl	80027d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2102      	movs	r1, #2
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff f8af 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 8003646:	4603      	mov	r3, r0
 8003648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x30a>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2102      	movs	r1, #2
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff f8a4 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 800365c:	4603      	mov	r3, r0
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	f003 021f 	and.w	r2, r3, #31
 8003664:	e01e      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x348>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2102      	movs	r1, #2
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff f899 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 8003672:	4603      	mov	r3, r0
 8003674:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003684:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003688:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800368c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003694:	2320      	movs	r3, #32
 8003696:	e004      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003698:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x360>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	e016      	b.n	80036ea <HAL_ADC_ConfigChannel+0x38e>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80036ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80036d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80036dc:	2320      	movs	r3, #32
 80036de:	e004      	b.n	80036ea <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80036e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036e4:	fab3 f383 	clz	r3, r3
 80036e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d106      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	2102      	movs	r1, #2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff f86a 	bl	80027d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2103      	movs	r1, #3
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff f84e 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 8003708:	4603      	mov	r3, r0
 800370a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x3cc>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2103      	movs	r1, #3
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff f843 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 800371e:	4603      	mov	r3, r0
 8003720:	0e9b      	lsrs	r3, r3, #26
 8003722:	f003 021f 	and.w	r2, r3, #31
 8003726:	e017      	b.n	8003758 <HAL_ADC_ConfigChannel+0x3fc>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2103      	movs	r1, #3
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff f838 	bl	80027a4 <LL_ADC_GetOffsetChannel>
 8003734:	4603      	mov	r3, r0
 8003736:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003740:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003742:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800374a:	2320      	movs	r3, #32
 800374c:	e003      	b.n	8003756 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800374e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003750:	fab3 f383 	clz	r3, r3
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003760:	2b00      	cmp	r3, #0
 8003762:	d105      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x414>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	0e9b      	lsrs	r3, r3, #26
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	e011      	b.n	8003794 <HAL_ADC_ConfigChannel+0x438>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003778:	fa93 f3a3 	rbit	r3, r3
 800377c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800377e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003780:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003788:	2320      	movs	r3, #32
 800378a:	e003      	b.n	8003794 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800378c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003794:	429a      	cmp	r2, r3
 8003796:	d106      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2200      	movs	r2, #0
 800379e:	2103      	movs	r1, #3
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff f815 	bl	80027d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff f956 	bl	8002a5c <LL_ADC_IsEnabled>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f040 8140 	bne.w	8003a38 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	6819      	ldr	r1, [r3, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	461a      	mov	r2, r3
 80037c6:	f7ff f8af 	bl	8002928 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	4a8f      	ldr	r2, [pc, #572]	; (8003a0c <HAL_ADC_ConfigChannel+0x6b0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	f040 8131 	bne.w	8003a38 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10b      	bne.n	80037fe <HAL_ADC_ConfigChannel+0x4a2>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	0e9b      	lsrs	r3, r3, #26
 80037ec:	3301      	adds	r3, #1
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2b09      	cmp	r3, #9
 80037f4:	bf94      	ite	ls
 80037f6:	2301      	movls	r3, #1
 80037f8:	2300      	movhi	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	e019      	b.n	8003832 <HAL_ADC_ConfigChannel+0x4d6>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003806:	fa93 f3a3 	rbit	r3, r3
 800380a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800380c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800380e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003810:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003816:	2320      	movs	r3, #32
 8003818:	e003      	b.n	8003822 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800381a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800381c:	fab3 f383 	clz	r3, r3
 8003820:	b2db      	uxtb	r3, r3
 8003822:	3301      	adds	r3, #1
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	2b09      	cmp	r3, #9
 800382a:	bf94      	ite	ls
 800382c:	2301      	movls	r3, #1
 800382e:	2300      	movhi	r3, #0
 8003830:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003832:	2b00      	cmp	r3, #0
 8003834:	d079      	beq.n	800392a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383e:	2b00      	cmp	r3, #0
 8003840:	d107      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x4f6>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	0e9b      	lsrs	r3, r3, #26
 8003848:	3301      	adds	r3, #1
 800384a:	069b      	lsls	r3, r3, #26
 800384c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003850:	e015      	b.n	800387e <HAL_ADC_ConfigChannel+0x522>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800385a:	fa93 f3a3 	rbit	r3, r3
 800385e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003862:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800386a:	2320      	movs	r3, #32
 800386c:	e003      	b.n	8003876 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800386e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003870:	fab3 f383 	clz	r3, r3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	3301      	adds	r3, #1
 8003878:	069b      	lsls	r3, r3, #26
 800387a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <HAL_ADC_ConfigChannel+0x542>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	0e9b      	lsrs	r3, r3, #26
 8003890:	3301      	adds	r3, #1
 8003892:	f003 031f 	and.w	r3, r3, #31
 8003896:	2101      	movs	r1, #1
 8003898:	fa01 f303 	lsl.w	r3, r1, r3
 800389c:	e017      	b.n	80038ce <HAL_ADC_ConfigChannel+0x572>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038a6:	fa93 f3a3 	rbit	r3, r3
 80038aa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80038ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80038b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80038b6:	2320      	movs	r3, #32
 80038b8:	e003      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80038ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038bc:	fab3 f383 	clz	r3, r3
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	3301      	adds	r3, #1
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	2101      	movs	r1, #1
 80038ca:	fa01 f303 	lsl.w	r3, r1, r3
 80038ce:	ea42 0103 	orr.w	r1, r2, r3
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10a      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x598>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	0e9b      	lsrs	r3, r3, #26
 80038e4:	3301      	adds	r3, #1
 80038e6:	f003 021f 	and.w	r2, r3, #31
 80038ea:	4613      	mov	r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	4413      	add	r3, r2
 80038f0:	051b      	lsls	r3, r3, #20
 80038f2:	e018      	b.n	8003926 <HAL_ADC_ConfigChannel+0x5ca>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003904:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800390c:	2320      	movs	r3, #32
 800390e:	e003      	b.n	8003918 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003912:	fab3 f383 	clz	r3, r3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	3301      	adds	r3, #1
 800391a:	f003 021f 	and.w	r2, r3, #31
 800391e:	4613      	mov	r3, r2
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	4413      	add	r3, r2
 8003924:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003926:	430b      	orrs	r3, r1
 8003928:	e081      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003932:	2b00      	cmp	r3, #0
 8003934:	d107      	bne.n	8003946 <HAL_ADC_ConfigChannel+0x5ea>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	0e9b      	lsrs	r3, r3, #26
 800393c:	3301      	adds	r3, #1
 800393e:	069b      	lsls	r3, r3, #26
 8003940:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003944:	e015      	b.n	8003972 <HAL_ADC_ConfigChannel+0x616>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394e:	fa93 f3a3 	rbit	r3, r3
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800395e:	2320      	movs	r3, #32
 8003960:	e003      	b.n	800396a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
 800396a:	3301      	adds	r3, #1
 800396c:	069b      	lsls	r3, r3, #26
 800396e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x636>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	0e9b      	lsrs	r3, r3, #26
 8003984:	3301      	adds	r3, #1
 8003986:	f003 031f 	and.w	r3, r3, #31
 800398a:	2101      	movs	r1, #1
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	e017      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x666>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	61fb      	str	r3, [r7, #28]
  return result;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80039aa:	2320      	movs	r3, #32
 80039ac:	e003      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	fab3 f383 	clz	r3, r3
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	3301      	adds	r3, #1
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	2101      	movs	r1, #1
 80039be:	fa01 f303 	lsl.w	r3, r1, r3
 80039c2:	ea42 0103 	orr.w	r1, r2, r3
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10d      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x692>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	0e9b      	lsrs	r3, r3, #26
 80039d8:	3301      	adds	r3, #1
 80039da:	f003 021f 	and.w	r2, r3, #31
 80039de:	4613      	mov	r3, r2
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	4413      	add	r3, r2
 80039e4:	3b1e      	subs	r3, #30
 80039e6:	051b      	lsls	r3, r3, #20
 80039e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039ec:	e01e      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x6d0>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	613b      	str	r3, [r7, #16]
  return result;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d104      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003a06:	2320      	movs	r3, #32
 8003a08:	e006      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x6bc>
 8003a0a:	bf00      	nop
 8003a0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	fab3 f383 	clz	r3, r3
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	3301      	adds	r3, #1
 8003a1a:	f003 021f 	and.w	r2, r3, #31
 8003a1e:	4613      	mov	r3, r2
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4413      	add	r3, r2
 8003a24:	3b1e      	subs	r3, #30
 8003a26:	051b      	lsls	r3, r3, #20
 8003a28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	6892      	ldr	r2, [r2, #8]
 8003a32:	4619      	mov	r1, r3
 8003a34:	f7fe ff4c 	bl	80028d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b3c      	ldr	r3, [pc, #240]	; (8003b30 <HAL_ADC_ConfigChannel+0x7d4>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d06b      	beq.n	8003b1c <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a44:	483b      	ldr	r0, [pc, #236]	; (8003b34 <HAL_ADC_ConfigChannel+0x7d8>)
 8003a46:	f7fe fe7b 	bl	8002740 <LL_ADC_GetCommonPathInternalCh>
 8003a4a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a39      	ldr	r2, [pc, #228]	; (8003b38 <HAL_ADC_ConfigChannel+0x7dc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d126      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d120      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a34      	ldr	r2, [pc, #208]	; (8003b3c <HAL_ADC_ConfigChannel+0x7e0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d156      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a76:	4619      	mov	r1, r3
 8003a78:	482e      	ldr	r0, [pc, #184]	; (8003b34 <HAL_ADC_ConfigChannel+0x7d8>)
 8003a7a:	f7fe fe4e 	bl	800271a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003a7e:	4b30      	ldr	r3, [pc, #192]	; (8003b40 <HAL_ADC_ConfigChannel+0x7e4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	099b      	lsrs	r3, r3, #6
 8003a84:	4a2f      	ldr	r2, [pc, #188]	; (8003b44 <HAL_ADC_ConfigChannel+0x7e8>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	099a      	lsrs	r2, r3, #6
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	4413      	add	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a96:	e002      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1f9      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003aa4:	e03a      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a27      	ldr	r2, [pc, #156]	; (8003b48 <HAL_ADC_ConfigChannel+0x7ec>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d113      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x77c>
 8003ab0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10d      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1e      	ldr	r2, [pc, #120]	; (8003b3c <HAL_ADC_ConfigChannel+0x7e0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d12a      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ac6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4818      	ldr	r0, [pc, #96]	; (8003b34 <HAL_ADC_ConfigChannel+0x7d8>)
 8003ad2:	f7fe fe22 	bl	800271a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ad6:	e021      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1b      	ldr	r2, [pc, #108]	; (8003b4c <HAL_ADC_ConfigChannel+0x7f0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d11c      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ae2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d116      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <HAL_ADC_ConfigChannel+0x7e0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d111      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003af8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003afc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b00:	4619      	mov	r1, r3
 8003b02:	480c      	ldr	r0, [pc, #48]	; (8003b34 <HAL_ADC_ConfigChannel+0x7d8>)
 8003b04:	f7fe fe09 	bl	800271a <LL_ADC_SetCommonPathInternalCh>
 8003b08:	e008      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0e:	f043 0220 	orr.w	r2, r3, #32
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003b24:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	37d8      	adds	r7, #216	; 0xd8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	80080000 	.word	0x80080000
 8003b34:	50040300 	.word	0x50040300
 8003b38:	c7520000 	.word	0xc7520000
 8003b3c:	50040000 	.word	0x50040000
 8003b40:	20000004 	.word	0x20000004
 8003b44:	053e2d63 	.word	0x053e2d63
 8003b48:	cb840000 	.word	0xcb840000
 8003b4c:	80000001 	.word	0x80000001

08003b50 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe ffc6 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8003b6c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe ffe7 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 8003b78:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d103      	bne.n	8003b88 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 8090 	beq.w	8003ca8 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d02a      	beq.n	8003bec <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	7e5b      	ldrb	r3, [r3, #25]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d126      	bne.n	8003bec <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	7e1b      	ldrb	r3, [r3, #24]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d122      	bne.n	8003bec <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003baa:	e014      	b.n	8003bd6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	4a41      	ldr	r2, [pc, #260]	; (8003cb4 <ADC_ConversionStop+0x164>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d90d      	bls.n	8003bd0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	f043 0210 	orr.w	r2, r3, #16
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc4:	f043 0201 	orr.w	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e06c      	b.n	8003caa <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d1e3      	bne.n	8003bac <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2240      	movs	r2, #64	; 0x40
 8003bea:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d014      	beq.n	8003c1c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe ff7e 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00c      	beq.n	8003c1c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe ff3b 	bl	8002a82 <LL_ADC_IsDisableOngoing>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d104      	bne.n	8003c1c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe ff5a 	bl	8002ad0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d014      	beq.n	8003c4c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe ff8d 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00c      	beq.n	8003c4c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fe ff23 	bl	8002a82 <LL_ADC_IsDisableOngoing>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d104      	bne.n	8003c4c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe ff69 	bl	8002b1e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d004      	beq.n	8003c5c <ADC_ConversionStop+0x10c>
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d105      	bne.n	8003c62 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003c56:	230c      	movs	r3, #12
 8003c58:	617b      	str	r3, [r7, #20]
        break;
 8003c5a:	e005      	b.n	8003c68 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	617b      	str	r3, [r7, #20]
        break;
 8003c60:	e002      	b.n	8003c68 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c62:	2304      	movs	r3, #4
 8003c64:	617b      	str	r3, [r7, #20]
        break;
 8003c66:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003c68:	f7fe fd16 	bl	8002698 <HAL_GetTick>
 8003c6c:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c6e:	e014      	b.n	8003c9a <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c70:	f7fe fd12 	bl	8002698 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	d90d      	bls.n	8003c9a <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c82:	f043 0210 	orr.w	r2, r3, #16
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8e:	f043 0201 	orr.w	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e007      	b.n	8003caa <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e3      	bne.n	8003c70 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3720      	adds	r7, #32
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	a33fffff 	.word	0xa33fffff

08003cb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fe fec9 	bl	8002a5c <LL_ADC_IsEnabled>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d146      	bne.n	8003d5e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <ADC_Enable+0xb0>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00d      	beq.n	8003cfa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce2:	f043 0210 	orr.w	r2, r3, #16
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cee:	f043 0201 	orr.w	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e032      	b.n	8003d60 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe fe84 	bl	8002a0c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d04:	f7fe fcc8 	bl	8002698 <HAL_GetTick>
 8003d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d0a:	e021      	b.n	8003d50 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fe fea3 	bl	8002a5c <LL_ADC_IsEnabled>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fe fe73 	bl	8002a0c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d26:	f7fe fcb7 	bl	8002698 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d90d      	bls.n	8003d50 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d38:	f043 0210 	orr.w	r2, r3, #16
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d44:	f043 0201 	orr.w	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e007      	b.n	8003d60 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d1d6      	bne.n	8003d0c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	8000003f 	.word	0x8000003f

08003d6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fe fe82 	bl	8002a82 <LL_ADC_IsDisableOngoing>
 8003d7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe fe69 	bl	8002a5c <LL_ADC_IsEnabled>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d040      	beq.n	8003e12 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d13d      	bne.n	8003e12 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 030d 	and.w	r3, r3, #13
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d10c      	bne.n	8003dbe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fe fe43 	bl	8002a34 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2203      	movs	r2, #3
 8003db4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003db6:	f7fe fc6f 	bl	8002698 <HAL_GetTick>
 8003dba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dbc:	e022      	b.n	8003e04 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc2:	f043 0210 	orr.w	r2, r3, #16
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dce:	f043 0201 	orr.w	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e01c      	b.n	8003e14 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dda:	f7fe fc5d 	bl	8002698 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d90d      	bls.n	8003e04 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dec:	f043 0210 	orr.w	r2, r3, #16
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e007      	b.n	8003e14 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e3      	bne.n	8003dda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d14b      	bne.n	8003ece <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d021      	beq.n	8003e94 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe fce9 	bl	800282c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d032      	beq.n	8003ec6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d12b      	bne.n	8003ec6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d11f      	bne.n	8003ec6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	f043 0201 	orr.w	r2, r3, #1
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	659a      	str	r2, [r3, #88]	; 0x58
 8003e92:	e018      	b.n	8003ec6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d111      	bne.n	8003ec6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d105      	bne.n	8003ec6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebe:	f043 0201 	orr.w	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f7fd fb34 	bl	8001534 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ecc:	e00e      	b.n	8003eec <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff fa33 	bl	8003346 <HAL_ADC_ErrorCallback>
}
 8003ee0:	e004      	b.n	8003eec <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	4798      	blx	r3
}
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7fd fb2c 	bl	8001560 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f08:	bf00      	nop
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	f043 0204 	orr.w	r2, r3, #4
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f7ff fa05 	bl	8003346 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f3c:	bf00      	nop
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <LL_ADC_StartCalibration>:
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003f56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	609a      	str	r2, [r3, #8]
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_ADC_IsCalibrationOnGoing>:
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f8a:	d101      	bne.n	8003f90 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_ADCEx_Calibration_Start+0x1c>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e04d      	b.n	8004056 <HAL_ADCEx_Calibration_Start+0xb8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff fed2 	bl	8003d6c <ADC_Disable>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d136      	bne.n	8004040 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003fda:	f023 0302 	bic.w	r3, r3, #2
 8003fde:	f043 0202 	orr.w	r2, r3, #2
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6839      	ldr	r1, [r7, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff ffa9 	bl	8003f44 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ff2:	e014      	b.n	800401e <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8004000:	d30d      	bcc.n	800401e <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	f023 0312 	bic.w	r3, r3, #18
 800400a:	f043 0210 	orr.w	r2, r3, #16
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e01b      	b.n	8004056 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff ffa7 	bl	8003f76 <LL_ADC_IsCalibrationOnGoing>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e2      	bne.n	8003ff4 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	f043 0201 	orr.w	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	659a      	str	r2, [r3, #88]	; 0x58
 800403e:	e005      	b.n	800404c <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004044:	f043 0210 	orr.w	r2, r3, #16
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004054:	7bfb      	ldrb	r3, [r7, #15]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040d4:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <__NVIC_SetPriorityGrouping+0x44>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040e0:	4013      	ands	r3, r2
 80040e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040f6:	4a04      	ldr	r2, [pc, #16]	; (8004108 <__NVIC_SetPriorityGrouping+0x44>)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	60d3      	str	r3, [r2, #12]
}
 80040fc:	bf00      	nop
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	e000ed00 	.word	0xe000ed00

0800410c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004110:	4b04      	ldr	r3, [pc, #16]	; (8004124 <__NVIC_GetPriorityGrouping+0x18>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	0a1b      	lsrs	r3, r3, #8
 8004116:	f003 0307 	and.w	r3, r3, #7
}
 800411a:	4618      	mov	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	e000ed00 	.word	0xe000ed00

08004128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	2b00      	cmp	r3, #0
 8004138:	db0b      	blt.n	8004152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	f003 021f 	and.w	r2, r3, #31
 8004140:	4907      	ldr	r1, [pc, #28]	; (8004160 <__NVIC_EnableIRQ+0x38>)
 8004142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	2001      	movs	r0, #1
 800414a:	fa00 f202 	lsl.w	r2, r0, r2
 800414e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	e000e100 	.word	0xe000e100

08004164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	6039      	str	r1, [r7, #0]
 800416e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004174:	2b00      	cmp	r3, #0
 8004176:	db0a      	blt.n	800418e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	b2da      	uxtb	r2, r3
 800417c:	490c      	ldr	r1, [pc, #48]	; (80041b0 <__NVIC_SetPriority+0x4c>)
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	0112      	lsls	r2, r2, #4
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	440b      	add	r3, r1
 8004188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800418c:	e00a      	b.n	80041a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	4908      	ldr	r1, [pc, #32]	; (80041b4 <__NVIC_SetPriority+0x50>)
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	3b04      	subs	r3, #4
 800419c:	0112      	lsls	r2, r2, #4
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	440b      	add	r3, r1
 80041a2:	761a      	strb	r2, [r3, #24]
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	e000e100 	.word	0xe000e100
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b089      	sub	sp, #36	; 0x24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f1c3 0307 	rsb	r3, r3, #7
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	bf28      	it	cs
 80041d6:	2304      	movcs	r3, #4
 80041d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	3304      	adds	r3, #4
 80041de:	2b06      	cmp	r3, #6
 80041e0:	d902      	bls.n	80041e8 <NVIC_EncodePriority+0x30>
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	3b03      	subs	r3, #3
 80041e6:	e000      	b.n	80041ea <NVIC_EncodePriority+0x32>
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43da      	mvns	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	401a      	ands	r2, r3
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004200:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	fa01 f303 	lsl.w	r3, r1, r3
 800420a:	43d9      	mvns	r1, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004210:	4313      	orrs	r3, r2
         );
}
 8004212:	4618      	mov	r0, r3
 8004214:	3724      	adds	r7, #36	; 0x24
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b082      	sub	sp, #8
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff ff4c 	bl	80040c4 <__NVIC_SetPriorityGrouping>
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004246:	f7ff ff61 	bl	800410c <__NVIC_GetPriorityGrouping>
 800424a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	68b9      	ldr	r1, [r7, #8]
 8004250:	6978      	ldr	r0, [r7, #20]
 8004252:	f7ff ffb1 	bl	80041b8 <NVIC_EncodePriority>
 8004256:	4602      	mov	r2, r0
 8004258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800425c:	4611      	mov	r1, r2
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff ff80 	bl	8004164 <__NVIC_SetPriority>
}
 8004264:	bf00      	nop
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff ff54 	bl	8004128 <__NVIC_EnableIRQ>
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e014      	b.n	80042c4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	791b      	ldrb	r3, [r3, #4]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d105      	bne.n	80042b0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fd ff9a 	bl	80021e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	795b      	ldrb	r3, [r3, #5]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <HAL_DAC_Start_DMA+0x1e>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e09e      	b.n	8004428 <HAL_DAC_Start_DMA+0x15c>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2202      	movs	r2, #2
 80042f4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d12a      	bne.n	8004352 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4a4b      	ldr	r2, [pc, #300]	; (8004430 <HAL_DAC_Start_DMA+0x164>)
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4a4a      	ldr	r2, [pc, #296]	; (8004434 <HAL_DAC_Start_DMA+0x168>)
 800430a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4a49      	ldr	r2, [pc, #292]	; (8004438 <HAL_DAC_Start_DMA+0x16c>)
 8004312:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004322:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	2b04      	cmp	r3, #4
 8004328:	d009      	beq.n	800433e <HAL_DAC_Start_DMA+0x72>
 800432a:	2b08      	cmp	r3, #8
 800432c:	d00c      	beq.n	8004348 <HAL_DAC_Start_DMA+0x7c>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d000      	beq.n	8004334 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004332:	e039      	b.n	80043a8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3308      	adds	r3, #8
 800433a:	613b      	str	r3, [r7, #16]
        break;
 800433c:	e034      	b.n	80043a8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	613b      	str	r3, [r7, #16]
        break;
 8004346:	e02f      	b.n	80043a8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3310      	adds	r3, #16
 800434e:	613b      	str	r3, [r7, #16]
        break;
 8004350:	e02a      	b.n	80043a8 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	4a39      	ldr	r2, [pc, #228]	; (800443c <HAL_DAC_Start_DMA+0x170>)
 8004358:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	4a38      	ldr	r2, [pc, #224]	; (8004440 <HAL_DAC_Start_DMA+0x174>)
 8004360:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	4a37      	ldr	r2, [pc, #220]	; (8004444 <HAL_DAC_Start_DMA+0x178>)
 8004368:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004378:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	2b04      	cmp	r3, #4
 800437e:	d009      	beq.n	8004394 <HAL_DAC_Start_DMA+0xc8>
 8004380:	2b08      	cmp	r3, #8
 8004382:	d00c      	beq.n	800439e <HAL_DAC_Start_DMA+0xd2>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d000      	beq.n	800438a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004388:	e00e      	b.n	80043a8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3314      	adds	r3, #20
 8004390:	613b      	str	r3, [r7, #16]
        break;
 8004392:	e009      	b.n	80043a8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3318      	adds	r3, #24
 800439a:	613b      	str	r3, [r7, #16]
        break;
 800439c:	e004      	b.n	80043a8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	331c      	adds	r3, #28
 80043a4:	613b      	str	r3, [r7, #16]
        break;
 80043a6:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d111      	bne.n	80043d2 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043bc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6898      	ldr	r0, [r3, #8]
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	f000 fb78 	bl	8004abc <HAL_DMA_Start_IT>
 80043cc:	4603      	mov	r3, r0
 80043ce:	75fb      	strb	r3, [r7, #23]
 80043d0:	e010      	b.n	80043f4 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80043e0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	68d8      	ldr	r0, [r3, #12]
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	f000 fb66 	bl	8004abc <HAL_DMA_Start_IT>
 80043f0:	4603      	mov	r3, r0
 80043f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10c      	bne.n	800441a <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6819      	ldr	r1, [r3, #0]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2201      	movs	r2, #1
 800440e:	409a      	lsls	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	e005      	b.n	8004426 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f043 0204 	orr.w	r2, r3, #4
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004426:	7dfb      	ldrb	r3, [r7, #23]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	08004845 	.word	0x08004845
 8004434:	08004867 	.word	0x08004867
 8004438:	08004883 	.word	0x08004883
 800443c:	08004901 	.word	0x08004901
 8004440:	08004923 	.word	0x08004923
 8004444:	0800493f 	.word	0x0800493f

08004448 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6819      	ldr	r1, [r3, #0]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43da      	mvns	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	400a      	ands	r2, r1
 800446e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6819      	ldr	r1, [r3, #0]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	2201      	movs	r2, #1
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43da      	mvns	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	400a      	ands	r2, r1
 800448a:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10d      	bne.n	80044ae <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fb8b 	bl	8004bb2 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	e00c      	b.n	80044c8 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fb7d 	bl	8004bb2 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80044c6:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e8:	d120      	bne.n	800452c <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f8:	d118      	bne.n	800452c <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2204      	movs	r2, #4
 80044fe:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f043 0201 	orr.w	r2, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004514:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004524:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f841 	bl	80045ae <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800453a:	d120      	bne.n	800457e <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004542:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800454a:	d118      	bne.n	800457e <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2204      	movs	r2, #4
 8004550:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f043 0202 	orr.w	r2, r3, #2
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004566:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004576:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f9b7 	bl	80048ec <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 800457e:	bf00      	nop
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
	...

080045c4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	795b      	ldrb	r3, [r3, #5]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_DAC_ConfigChannel+0x1c>
 80045dc:	2302      	movs	r3, #2
 80045de:	e12a      	b.n	8004836 <HAL_DAC_ConfigChannel+0x272>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2202      	movs	r2, #2
 80045ea:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d174      	bne.n	80046de <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80045f4:	f7fe f850 	bl	8002698 <HAL_GetTick>
 80045f8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d134      	bne.n	800466a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004600:	e011      	b.n	8004626 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004602:	f7fe f849 	bl	8002698 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d90a      	bls.n	8004626 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f043 0208 	orr.w	r2, r3, #8
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2203      	movs	r2, #3
 8004620:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e107      	b.n	8004836 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e6      	bne.n	8004602 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004634:	2001      	movs	r0, #1
 8004636:	f7fe f83b 	bl	80026b0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	69d2      	ldr	r2, [r2, #28]
 8004642:	641a      	str	r2, [r3, #64]	; 0x40
 8004644:	e01e      	b.n	8004684 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004646:	f7fe f827 	bl	8002698 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b01      	cmp	r3, #1
 8004652:	d90a      	bls.n	800466a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f043 0208 	orr.w	r2, r3, #8
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2203      	movs	r2, #3
 8004664:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e0e5      	b.n	8004836 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004670:	2b00      	cmp	r3, #0
 8004672:	dbe8      	blt.n	8004646 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004674:	2001      	movs	r0, #1
 8004676:	f7fe f81b 	bl	80026b0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	69d2      	ldr	r2, [r2, #28]
 8004682:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f003 0310 	and.w	r3, r3, #16
 8004690:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004694:	fa01 f303 	lsl.w	r3, r1, r3
 8004698:	43db      	mvns	r3, r3
 800469a:	ea02 0103 	and.w	r1, r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	6a1a      	ldr	r2, [r3, #32]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	409a      	lsls	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	21ff      	movs	r1, #255	; 0xff
 80046c0:	fa01 f303 	lsl.w	r3, r1, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	ea02 0103 	and.w	r1, r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	409a      	lsls	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d11d      	bne.n	8004722 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f003 0310 	and.w	r3, r3, #16
 80046f4:	221f      	movs	r2, #31
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43db      	mvns	r3, r3
 80046fc:	69fa      	ldr	r2, [r7, #28]
 80046fe:	4013      	ands	r3, r2
 8004700:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	4313      	orrs	r3, r2
 8004718:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004728:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2207      	movs	r2, #7
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	43db      	mvns	r3, r3
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	4013      	ands	r3, r2
 800473c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	431a      	orrs	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	69fa      	ldr	r2, [r7, #28]
 800475e:	4313      	orrs	r3, r2
 8004760:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6819      	ldr	r1, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f003 0310 	and.w	r3, r3, #16
 8004776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	43da      	mvns	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	400a      	ands	r2, r1
 8004786:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	f640 72fe 	movw	r2, #4094	; 0xffe
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43db      	mvns	r3, r3
 80047a0:	69fa      	ldr	r2, [r7, #28]
 80047a2:	4013      	ands	r3, r2
 80047a4:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c6:	d104      	bne.n	80047d2 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	e018      	b.n	8004804 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d104      	bne.n	80047e4 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047e0:	61fb      	str	r3, [r7, #28]
 80047e2:	e00f      	b.n	8004804 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80047e4:	f001 fbc2 	bl	8005f6c <HAL_RCC_GetHCLKFreq>
 80047e8:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	4a14      	ldr	r2, [pc, #80]	; (8004840 <HAL_DAC_ConfigChannel+0x27c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d904      	bls.n	80047fc <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047f8:	61fb      	str	r3, [r7, #28]
 80047fa:	e003      	b.n	8004804 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004802:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6819      	ldr	r1, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	22c0      	movs	r2, #192	; 0xc0
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	43da      	mvns	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	400a      	ands	r2, r1
 8004826:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2201      	movs	r2, #1
 800482c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3720      	adds	r7, #32
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	04c4b400 	.word	0x04c4b400

08004844 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f7fc fe9a 	bl	800158c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	711a      	strb	r2, [r3, #4]
}
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff fe86 	bl	8004586 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	f043 0204 	orr.w	r2, r3, #4
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f7ff fe7c 	bl	800459a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	711a      	strb	r2, [r3, #4]
}
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f7ff ffce 	bl	80048b0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	711a      	strb	r2, [r3, #4]
}
 800491a:	bf00      	nop
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7ff ffc7 	bl	80048c4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f043 0204 	orr.w	r2, r3, #4
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f7ff ffbd 	bl	80048d8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	711a      	strb	r2, [r3, #4]
}
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e08d      	b.n	8004a9a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	4b47      	ldr	r3, [pc, #284]	; (8004aa4 <HAL_DMA_Init+0x138>)
 8004986:	429a      	cmp	r2, r3
 8004988:	d80f      	bhi.n	80049aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	4b45      	ldr	r3, [pc, #276]	; (8004aa8 <HAL_DMA_Init+0x13c>)
 8004992:	4413      	add	r3, r2
 8004994:	4a45      	ldr	r2, [pc, #276]	; (8004aac <HAL_DMA_Init+0x140>)
 8004996:	fba2 2303 	umull	r2, r3, r2, r3
 800499a:	091b      	lsrs	r3, r3, #4
 800499c:	009a      	lsls	r2, r3, #2
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a42      	ldr	r2, [pc, #264]	; (8004ab0 <HAL_DMA_Init+0x144>)
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40
 80049a8:	e00e      	b.n	80049c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	4b40      	ldr	r3, [pc, #256]	; (8004ab4 <HAL_DMA_Init+0x148>)
 80049b2:	4413      	add	r3, r2
 80049b4:	4a3d      	ldr	r2, [pc, #244]	; (8004aac <HAL_DMA_Init+0x140>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	009a      	lsls	r2, r3, #2
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a3c      	ldr	r2, [pc, #240]	; (8004ab8 <HAL_DMA_Init+0x14c>)
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80049de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80049ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fa12 	bl	8004e44 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a28:	d102      	bne.n	8004a30 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a38:	b2d2      	uxtb	r2, r2
 8004a3a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a44:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d010      	beq.n	8004a70 <HAL_DMA_Init+0x104>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d80c      	bhi.n	8004a70 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fa32 	bl	8004ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	e008      	b.n	8004a82 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40020407 	.word	0x40020407
 8004aa8:	bffdfff8 	.word	0xbffdfff8
 8004aac:	cccccccd 	.word	0xcccccccd
 8004ab0:	40020000 	.word	0x40020000
 8004ab4:	bffdfbf8 	.word	0xbffdfbf8
 8004ab8:	40020400 	.word	0x40020400

08004abc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_DMA_Start_IT+0x20>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e066      	b.n	8004baa <HAL_DMA_Start_IT+0xee>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d155      	bne.n	8004b9c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0201 	bic.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f957 	bl	8004dc8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d008      	beq.n	8004b34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 020e 	orr.w	r2, r2, #14
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e00f      	b.n	8004b54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0204 	bic.w	r2, r2, #4
 8004b42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 020a 	orr.w	r2, r2, #10
 8004b52:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d007      	beq.n	8004b72 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b70:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d007      	beq.n	8004b8a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b88:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0201 	orr.w	r2, r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	e005      	b.n	8004ba8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d008      	beq.n	8004bdc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2204      	movs	r2, #4
 8004bce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e040      	b.n	8004c5e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 020e 	bic.w	r2, r2, #14
 8004bea:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bfa:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c10:	f003 021c 	and.w	r2, r3, #28
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	2101      	movs	r1, #1
 8004c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c1e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c28:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00c      	beq.n	8004c4c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c40:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c4a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	f003 031c 	and.w	r3, r3, #28
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	409a      	lsls	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4013      	ands	r3, r2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d026      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x7a>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d021      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d107      	bne.n	8004cbe <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0204 	bic.w	r2, r2, #4
 8004cbc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc2:	f003 021c 	and.w	r2, r3, #28
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	2104      	movs	r1, #4
 8004ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8004cd0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d071      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004ce2:	e06c      	b.n	8004dbe <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce8:	f003 031c 	and.w	r3, r3, #28
 8004cec:	2202      	movs	r2, #2
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d02e      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xec>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d029      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10b      	bne.n	8004d28 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 020a 	bic.w	r2, r2, #10
 8004d1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2c:	f003 021c 	and.w	r2, r3, #28
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	2102      	movs	r1, #2
 8004d36:	fa01 f202 	lsl.w	r2, r1, r2
 8004d3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d038      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004d54:	e033      	b.n	8004dbe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5a:	f003 031c 	and.w	r3, r3, #28
 8004d5e:	2208      	movs	r2, #8
 8004d60:	409a      	lsls	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d02a      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x156>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d025      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 020e 	bic.w	r2, r2, #14
 8004d82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d88:	f003 021c 	and.w	r2, r3, #28
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	2101      	movs	r1, #1
 8004d92:	fa01 f202 	lsl.w	r2, r1, r2
 8004d96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d004      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004dbe:	bf00      	nop
 8004dc0:	bf00      	nop
}
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004dde:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004df0:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df6:	f003 021c 	and.w	r2, r3, #28
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	2101      	movs	r1, #1
 8004e00:	fa01 f202 	lsl.w	r2, r1, r2
 8004e04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b10      	cmp	r3, #16
 8004e14:	d108      	bne.n	8004e28 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004e26:	e007      	b.n	8004e38 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	60da      	str	r2, [r3, #12]
}
 8004e38:	bf00      	nop
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d80a      	bhi.n	8004e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5c:	089b      	lsrs	r3, r3, #2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e64:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6493      	str	r3, [r2, #72]	; 0x48
 8004e6c:	e007      	b.n	8004e7e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	089b      	lsrs	r3, r3, #2
 8004e74:	009a      	lsls	r2, r3, #2
 8004e76:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004e78:	4413      	add	r3, r2
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	3b08      	subs	r3, #8
 8004e86:	4a0c      	ldr	r2, [pc, #48]	; (8004eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004e88:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a0a      	ldr	r2, [pc, #40]	; (8004ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004e94:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ea4:	bf00      	nop
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	40020407 	.word	0x40020407
 8004eb4:	4002081c 	.word	0x4002081c
 8004eb8:	cccccccd 	.word	0xcccccccd
 8004ebc:	40020880 	.word	0x40020880

08004ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	461a      	mov	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a08      	ldr	r2, [pc, #32]	; (8004f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ee2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	f003 0303 	and.w	r3, r3, #3
 8004eec:	2201      	movs	r2, #1
 8004eee:	409a      	lsls	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004ef4:	bf00      	nop
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	1000823f 	.word	0x1000823f
 8004f04:	40020940 	.word	0x40020940

08004f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f16:	e166      	b.n	80051e6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	fa01 f303 	lsl.w	r3, r1, r3
 8004f24:	4013      	ands	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 8158 	beq.w	80051e0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d00b      	beq.n	8004f50 <HAL_GPIO_Init+0x48>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d007      	beq.n	8004f50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f44:	2b11      	cmp	r3, #17
 8004f46:	d003      	beq.n	8004f50 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b12      	cmp	r3, #18
 8004f4e:	d130      	bne.n	8004fb2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	43db      	mvns	r3, r3
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4013      	ands	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f86:	2201      	movs	r2, #1
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4013      	ands	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	091b      	lsrs	r3, r3, #4
 8004f9c:	f003 0201 	and.w	r2, r3, #1
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	43db      	mvns	r3, r3
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d003      	beq.n	8004ff2 <HAL_GPIO_Init+0xea>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b12      	cmp	r3, #18
 8004ff0:	d123      	bne.n	800503a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	08da      	lsrs	r2, r3, #3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3208      	adds	r2, #8
 8004ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	220f      	movs	r2, #15
 800500a:	fa02 f303 	lsl.w	r3, r2, r3
 800500e:	43db      	mvns	r3, r3
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4013      	ands	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	08da      	lsrs	r2, r3, #3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3208      	adds	r2, #8
 8005034:	6939      	ldr	r1, [r7, #16]
 8005036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	2203      	movs	r2, #3
 8005046:	fa02 f303 	lsl.w	r3, r2, r3
 800504a:	43db      	mvns	r3, r3
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4013      	ands	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f003 0203 	and.w	r2, r3, #3
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	fa02 f303 	lsl.w	r3, r2, r3
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 80b2 	beq.w	80051e0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800507c:	4b61      	ldr	r3, [pc, #388]	; (8005204 <HAL_GPIO_Init+0x2fc>)
 800507e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005080:	4a60      	ldr	r2, [pc, #384]	; (8005204 <HAL_GPIO_Init+0x2fc>)
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	6613      	str	r3, [r2, #96]	; 0x60
 8005088:	4b5e      	ldr	r3, [pc, #376]	; (8005204 <HAL_GPIO_Init+0x2fc>)
 800508a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	60bb      	str	r3, [r7, #8]
 8005092:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005094:	4a5c      	ldr	r2, [pc, #368]	; (8005208 <HAL_GPIO_Init+0x300>)
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	089b      	lsrs	r3, r3, #2
 800509a:	3302      	adds	r3, #2
 800509c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	220f      	movs	r2, #15
 80050ac:	fa02 f303 	lsl.w	r3, r2, r3
 80050b0:	43db      	mvns	r3, r3
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4013      	ands	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80050be:	d02b      	beq.n	8005118 <HAL_GPIO_Init+0x210>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a52      	ldr	r2, [pc, #328]	; (800520c <HAL_GPIO_Init+0x304>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d025      	beq.n	8005114 <HAL_GPIO_Init+0x20c>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a51      	ldr	r2, [pc, #324]	; (8005210 <HAL_GPIO_Init+0x308>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d01f      	beq.n	8005110 <HAL_GPIO_Init+0x208>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a50      	ldr	r2, [pc, #320]	; (8005214 <HAL_GPIO_Init+0x30c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d019      	beq.n	800510c <HAL_GPIO_Init+0x204>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a4f      	ldr	r2, [pc, #316]	; (8005218 <HAL_GPIO_Init+0x310>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d013      	beq.n	8005108 <HAL_GPIO_Init+0x200>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a4e      	ldr	r2, [pc, #312]	; (800521c <HAL_GPIO_Init+0x314>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00d      	beq.n	8005104 <HAL_GPIO_Init+0x1fc>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a4d      	ldr	r2, [pc, #308]	; (8005220 <HAL_GPIO_Init+0x318>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d007      	beq.n	8005100 <HAL_GPIO_Init+0x1f8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a4c      	ldr	r2, [pc, #304]	; (8005224 <HAL_GPIO_Init+0x31c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d101      	bne.n	80050fc <HAL_GPIO_Init+0x1f4>
 80050f8:	2307      	movs	r3, #7
 80050fa:	e00e      	b.n	800511a <HAL_GPIO_Init+0x212>
 80050fc:	2308      	movs	r3, #8
 80050fe:	e00c      	b.n	800511a <HAL_GPIO_Init+0x212>
 8005100:	2306      	movs	r3, #6
 8005102:	e00a      	b.n	800511a <HAL_GPIO_Init+0x212>
 8005104:	2305      	movs	r3, #5
 8005106:	e008      	b.n	800511a <HAL_GPIO_Init+0x212>
 8005108:	2304      	movs	r3, #4
 800510a:	e006      	b.n	800511a <HAL_GPIO_Init+0x212>
 800510c:	2303      	movs	r3, #3
 800510e:	e004      	b.n	800511a <HAL_GPIO_Init+0x212>
 8005110:	2302      	movs	r3, #2
 8005112:	e002      	b.n	800511a <HAL_GPIO_Init+0x212>
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <HAL_GPIO_Init+0x212>
 8005118:	2300      	movs	r3, #0
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	f002 0203 	and.w	r2, r2, #3
 8005120:	0092      	lsls	r2, r2, #2
 8005122:	4093      	lsls	r3, r2
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800512a:	4937      	ldr	r1, [pc, #220]	; (8005208 <HAL_GPIO_Init+0x300>)
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	089b      	lsrs	r3, r3, #2
 8005130:	3302      	adds	r3, #2
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005138:	4b3b      	ldr	r3, [pc, #236]	; (8005228 <HAL_GPIO_Init+0x320>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	43db      	mvns	r3, r3
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4013      	ands	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800515c:	4a32      	ldr	r2, [pc, #200]	; (8005228 <HAL_GPIO_Init+0x320>)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005162:	4b31      	ldr	r3, [pc, #196]	; (8005228 <HAL_GPIO_Init+0x320>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	43db      	mvns	r3, r3
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4013      	ands	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005186:	4a28      	ldr	r2, [pc, #160]	; (8005228 <HAL_GPIO_Init+0x320>)
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800518c:	4b26      	ldr	r3, [pc, #152]	; (8005228 <HAL_GPIO_Init+0x320>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	43db      	mvns	r3, r3
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4013      	ands	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80051b0:	4a1d      	ldr	r2, [pc, #116]	; (8005228 <HAL_GPIO_Init+0x320>)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80051b6:	4b1c      	ldr	r3, [pc, #112]	; (8005228 <HAL_GPIO_Init+0x320>)
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	43db      	mvns	r3, r3
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4013      	ands	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80051da:	4a13      	ldr	r2, [pc, #76]	; (8005228 <HAL_GPIO_Init+0x320>)
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	3301      	adds	r3, #1
 80051e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f47f ae91 	bne.w	8004f18 <HAL_GPIO_Init+0x10>
  }
}
 80051f6:	bf00      	nop
 80051f8:	371c      	adds	r7, #28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40021000 	.word	0x40021000
 8005208:	40010000 	.word	0x40010000
 800520c:	48000400 	.word	0x48000400
 8005210:	48000800 	.word	0x48000800
 8005214:	48000c00 	.word	0x48000c00
 8005218:	48001000 	.word	0x48001000
 800521c:	48001400 	.word	0x48001400
 8005220:	48001800 	.word	0x48001800
 8005224:	48001c00 	.word	0x48001c00
 8005228:	40010400 	.word	0x40010400

0800522c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005230:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523c:	d102      	bne.n	8005244 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800523e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005242:	e00b      	b.n	800525c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005244:	4b08      	ldr	r3, [pc, #32]	; (8005268 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800524a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005252:	d102      	bne.n	800525a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005258:	e000      	b.n	800525c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800525a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800525c:	4618      	mov	r0, r3
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40007000 	.word	0x40007000

0800526c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d141      	bne.n	80052fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800527a:	4b4b      	ldr	r3, [pc, #300]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005286:	d131      	bne.n	80052ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005288:	4b47      	ldr	r3, [pc, #284]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800528a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800528e:	4a46      	ldr	r2, [pc, #280]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005294:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005298:	4b43      	ldr	r3, [pc, #268]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052a0:	4a41      	ldr	r2, [pc, #260]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80052a8:	4b40      	ldr	r3, [pc, #256]	; (80053ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2232      	movs	r2, #50	; 0x32
 80052ae:	fb02 f303 	mul.w	r3, r2, r3
 80052b2:	4a3f      	ldr	r2, [pc, #252]	; (80053b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052b4:	fba2 2303 	umull	r2, r3, r2, r3
 80052b8:	0c9b      	lsrs	r3, r3, #18
 80052ba:	3301      	adds	r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052be:	e002      	b.n	80052c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052c6:	4b38      	ldr	r3, [pc, #224]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d2:	d102      	bne.n	80052da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f2      	bne.n	80052c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052da:	4b33      	ldr	r3, [pc, #204]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e6:	d158      	bne.n	800539a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e057      	b.n	800539c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052ec:	4b2e      	ldr	r3, [pc, #184]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052f2:	4a2d      	ldr	r2, [pc, #180]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80052fc:	e04d      	b.n	800539a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005304:	d141      	bne.n	800538a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005306:	4b28      	ldr	r3, [pc, #160]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800530e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005312:	d131      	bne.n	8005378 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005314:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800531a:	4a23      	ldr	r2, [pc, #140]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800531c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005320:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005324:	4b20      	ldr	r3, [pc, #128]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800532c:	4a1e      	ldr	r2, [pc, #120]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800532e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005332:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005334:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2232      	movs	r2, #50	; 0x32
 800533a:	fb02 f303 	mul.w	r3, r2, r3
 800533e:	4a1c      	ldr	r2, [pc, #112]	; (80053b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005340:	fba2 2303 	umull	r2, r3, r2, r3
 8005344:	0c9b      	lsrs	r3, r3, #18
 8005346:	3301      	adds	r3, #1
 8005348:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800534a:	e002      	b.n	8005352 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3b01      	subs	r3, #1
 8005350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005352:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800535a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535e:	d102      	bne.n	8005366 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f2      	bne.n	800534c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005366:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005372:	d112      	bne.n	800539a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e011      	b.n	800539c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005378:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800537a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537e:	4a0a      	ldr	r2, [pc, #40]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005384:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005388:	e007      	b.n	800539a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800538a:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005392:	4a05      	ldr	r2, [pc, #20]	; (80053a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005398:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	40007000 	.word	0x40007000
 80053ac:	20000004 	.word	0x20000004
 80053b0:	431bde83 	.word	0x431bde83

080053b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d102      	bne.n	80053c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f000 bc16 	b.w	8005bf4 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053c8:	4ba0      	ldr	r3, [pc, #640]	; (800564c <HAL_RCC_OscConfig+0x298>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 030c 	and.w	r3, r3, #12
 80053d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053d2:	4b9e      	ldr	r3, [pc, #632]	; (800564c <HAL_RCC_OscConfig+0x298>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 80e4 	beq.w	80055b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d007      	beq.n	8005400 <HAL_RCC_OscConfig+0x4c>
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2b0c      	cmp	r3, #12
 80053f4:	f040 808b 	bne.w	800550e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	f040 8087 	bne.w	800550e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005400:	4b92      	ldr	r3, [pc, #584]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d005      	beq.n	8005418 <HAL_RCC_OscConfig+0x64>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e3ed      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1a      	ldr	r2, [r3, #32]
 800541c:	4b8b      	ldr	r3, [pc, #556]	; (800564c <HAL_RCC_OscConfig+0x298>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	2b00      	cmp	r3, #0
 8005426:	d004      	beq.n	8005432 <HAL_RCC_OscConfig+0x7e>
 8005428:	4b88      	ldr	r3, [pc, #544]	; (800564c <HAL_RCC_OscConfig+0x298>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005430:	e005      	b.n	800543e <HAL_RCC_OscConfig+0x8a>
 8005432:	4b86      	ldr	r3, [pc, #536]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005438:	091b      	lsrs	r3, r3, #4
 800543a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800543e:	4293      	cmp	r3, r2
 8005440:	d223      	bcs.n	800548a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fdfa 	bl	8006040 <RCC_SetFlashLatencyFromMSIRange>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e3ce      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005456:	4b7d      	ldr	r3, [pc, #500]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a7c      	ldr	r2, [pc, #496]	; (800564c <HAL_RCC_OscConfig+0x298>)
 800545c:	f043 0308 	orr.w	r3, r3, #8
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	4b7a      	ldr	r3, [pc, #488]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	4977      	ldr	r1, [pc, #476]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005470:	4313      	orrs	r3, r2
 8005472:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005474:	4b75      	ldr	r3, [pc, #468]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	021b      	lsls	r3, r3, #8
 8005482:	4972      	ldr	r1, [pc, #456]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005484:	4313      	orrs	r3, r2
 8005486:	604b      	str	r3, [r1, #4]
 8005488:	e025      	b.n	80054d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800548a:	4b70      	ldr	r3, [pc, #448]	; (800564c <HAL_RCC_OscConfig+0x298>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a6f      	ldr	r2, [pc, #444]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005490:	f043 0308 	orr.w	r3, r3, #8
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	4b6d      	ldr	r3, [pc, #436]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	496a      	ldr	r1, [pc, #424]	; (800564c <HAL_RCC_OscConfig+0x298>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054a8:	4b68      	ldr	r3, [pc, #416]	; (800564c <HAL_RCC_OscConfig+0x298>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	4965      	ldr	r1, [pc, #404]	; (800564c <HAL_RCC_OscConfig+0x298>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d109      	bne.n	80054d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fdba 	bl	8006040 <RCC_SetFlashLatencyFromMSIRange>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e38e      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054d6:	f000 fcbf 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 80054da:	4601      	mov	r1, r0
 80054dc:	4b5b      	ldr	r3, [pc, #364]	; (800564c <HAL_RCC_OscConfig+0x298>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	091b      	lsrs	r3, r3, #4
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	4a5a      	ldr	r2, [pc, #360]	; (8005650 <HAL_RCC_OscConfig+0x29c>)
 80054e8:	5cd3      	ldrb	r3, [r2, r3]
 80054ea:	f003 031f 	and.w	r3, r3, #31
 80054ee:	fa21 f303 	lsr.w	r3, r1, r3
 80054f2:	4a58      	ldr	r2, [pc, #352]	; (8005654 <HAL_RCC_OscConfig+0x2a0>)
 80054f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80054f6:	4b58      	ldr	r3, [pc, #352]	; (8005658 <HAL_RCC_OscConfig+0x2a4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fc ff5e 	bl	80023bc <HAL_InitTick>
 8005500:	4603      	mov	r3, r0
 8005502:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d052      	beq.n	80055b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	e372      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d032      	beq.n	800557c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005516:	4b4d      	ldr	r3, [pc, #308]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a4c      	ldr	r2, [pc, #304]	; (800564c <HAL_RCC_OscConfig+0x298>)
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005522:	f7fd f8b9 	bl	8002698 <HAL_GetTick>
 8005526:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800552a:	f7fd f8b5 	bl	8002698 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e35b      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800553c:	4b43      	ldr	r3, [pc, #268]	; (800564c <HAL_RCC_OscConfig+0x298>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f0      	beq.n	800552a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005548:	4b40      	ldr	r3, [pc, #256]	; (800564c <HAL_RCC_OscConfig+0x298>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a3f      	ldr	r2, [pc, #252]	; (800564c <HAL_RCC_OscConfig+0x298>)
 800554e:	f043 0308 	orr.w	r3, r3, #8
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	4b3d      	ldr	r3, [pc, #244]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	493a      	ldr	r1, [pc, #232]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005562:	4313      	orrs	r3, r2
 8005564:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005566:	4b39      	ldr	r3, [pc, #228]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	021b      	lsls	r3, r3, #8
 8005574:	4935      	ldr	r1, [pc, #212]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005576:	4313      	orrs	r3, r2
 8005578:	604b      	str	r3, [r1, #4]
 800557a:	e01a      	b.n	80055b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800557c:	4b33      	ldr	r3, [pc, #204]	; (800564c <HAL_RCC_OscConfig+0x298>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a32      	ldr	r2, [pc, #200]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005582:	f023 0301 	bic.w	r3, r3, #1
 8005586:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005588:	f7fd f886 	bl	8002698 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005590:	f7fd f882 	bl	8002698 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e328      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055a2:	4b2a      	ldr	r3, [pc, #168]	; (800564c <HAL_RCC_OscConfig+0x298>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f0      	bne.n	8005590 <HAL_RCC_OscConfig+0x1dc>
 80055ae:	e000      	b.n	80055b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d073      	beq.n	80056a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d005      	beq.n	80055d0 <HAL_RCC_OscConfig+0x21c>
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	2b0c      	cmp	r3, #12
 80055c8:	d10e      	bne.n	80055e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d10b      	bne.n	80055e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d0:	4b1e      	ldr	r3, [pc, #120]	; (800564c <HAL_RCC_OscConfig+0x298>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d063      	beq.n	80056a4 <HAL_RCC_OscConfig+0x2f0>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d15f      	bne.n	80056a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e305      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f0:	d106      	bne.n	8005600 <HAL_RCC_OscConfig+0x24c>
 80055f2:	4b16      	ldr	r3, [pc, #88]	; (800564c <HAL_RCC_OscConfig+0x298>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a15      	ldr	r2, [pc, #84]	; (800564c <HAL_RCC_OscConfig+0x298>)
 80055f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	e01d      	b.n	800563c <HAL_RCC_OscConfig+0x288>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005608:	d10c      	bne.n	8005624 <HAL_RCC_OscConfig+0x270>
 800560a:	4b10      	ldr	r3, [pc, #64]	; (800564c <HAL_RCC_OscConfig+0x298>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a0f      	ldr	r2, [pc, #60]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	4b0d      	ldr	r3, [pc, #52]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a0c      	ldr	r2, [pc, #48]	; (800564c <HAL_RCC_OscConfig+0x298>)
 800561c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	e00b      	b.n	800563c <HAL_RCC_OscConfig+0x288>
 8005624:	4b09      	ldr	r3, [pc, #36]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a08      	ldr	r2, [pc, #32]	; (800564c <HAL_RCC_OscConfig+0x298>)
 800562a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800562e:	6013      	str	r3, [r2, #0]
 8005630:	4b06      	ldr	r3, [pc, #24]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a05      	ldr	r2, [pc, #20]	; (800564c <HAL_RCC_OscConfig+0x298>)
 8005636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800563a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01b      	beq.n	800567c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005644:	f7fd f828 	bl	8002698 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800564a:	e010      	b.n	800566e <HAL_RCC_OscConfig+0x2ba>
 800564c:	40021000 	.word	0x40021000
 8005650:	0800cfb4 	.word	0x0800cfb4
 8005654:	20000004 	.word	0x20000004
 8005658:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800565c:	f7fd f81c 	bl	8002698 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b64      	cmp	r3, #100	; 0x64
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e2c2      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800566e:	4baf      	ldr	r3, [pc, #700]	; (800592c <HAL_RCC_OscConfig+0x578>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0x2a8>
 800567a:	e014      	b.n	80056a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fd f80c 	bl	8002698 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005684:	f7fd f808 	bl	8002698 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b64      	cmp	r3, #100	; 0x64
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e2ae      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005696:	4ba5      	ldr	r3, [pc, #660]	; (800592c <HAL_RCC_OscConfig+0x578>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0x2d0>
 80056a2:	e000      	b.n	80056a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d060      	beq.n	8005774 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d005      	beq.n	80056c4 <HAL_RCC_OscConfig+0x310>
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	2b0c      	cmp	r3, #12
 80056bc:	d119      	bne.n	80056f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d116      	bne.n	80056f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056c4:	4b99      	ldr	r3, [pc, #612]	; (800592c <HAL_RCC_OscConfig+0x578>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d005      	beq.n	80056dc <HAL_RCC_OscConfig+0x328>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e28b      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056dc:	4b93      	ldr	r3, [pc, #588]	; (800592c <HAL_RCC_OscConfig+0x578>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	061b      	lsls	r3, r3, #24
 80056ea:	4990      	ldr	r1, [pc, #576]	; (800592c <HAL_RCC_OscConfig+0x578>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056f0:	e040      	b.n	8005774 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d023      	beq.n	8005742 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056fa:	4b8c      	ldr	r3, [pc, #560]	; (800592c <HAL_RCC_OscConfig+0x578>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a8b      	ldr	r2, [pc, #556]	; (800592c <HAL_RCC_OscConfig+0x578>)
 8005700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005706:	f7fc ffc7 	bl	8002698 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800570e:	f7fc ffc3 	bl	8002698 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e269      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005720:	4b82      	ldr	r3, [pc, #520]	; (800592c <HAL_RCC_OscConfig+0x578>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0f0      	beq.n	800570e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800572c:	4b7f      	ldr	r3, [pc, #508]	; (800592c <HAL_RCC_OscConfig+0x578>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	061b      	lsls	r3, r3, #24
 800573a:	497c      	ldr	r1, [pc, #496]	; (800592c <HAL_RCC_OscConfig+0x578>)
 800573c:	4313      	orrs	r3, r2
 800573e:	604b      	str	r3, [r1, #4]
 8005740:	e018      	b.n	8005774 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005742:	4b7a      	ldr	r3, [pc, #488]	; (800592c <HAL_RCC_OscConfig+0x578>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a79      	ldr	r2, [pc, #484]	; (800592c <HAL_RCC_OscConfig+0x578>)
 8005748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800574c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574e:	f7fc ffa3 	bl	8002698 <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005756:	f7fc ff9f 	bl	8002698 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e245      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005768:	4b70      	ldr	r3, [pc, #448]	; (800592c <HAL_RCC_OscConfig+0x578>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f0      	bne.n	8005756 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b00      	cmp	r3, #0
 800577e:	d03c      	beq.n	80057fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01c      	beq.n	80057c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005788:	4b68      	ldr	r3, [pc, #416]	; (800592c <HAL_RCC_OscConfig+0x578>)
 800578a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800578e:	4a67      	ldr	r2, [pc, #412]	; (800592c <HAL_RCC_OscConfig+0x578>)
 8005790:	f043 0301 	orr.w	r3, r3, #1
 8005794:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005798:	f7fc ff7e 	bl	8002698 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057a0:	f7fc ff7a 	bl	8002698 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e220      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057b2:	4b5e      	ldr	r3, [pc, #376]	; (800592c <HAL_RCC_OscConfig+0x578>)
 80057b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0ef      	beq.n	80057a0 <HAL_RCC_OscConfig+0x3ec>
 80057c0:	e01b      	b.n	80057fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057c2:	4b5a      	ldr	r3, [pc, #360]	; (800592c <HAL_RCC_OscConfig+0x578>)
 80057c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057c8:	4a58      	ldr	r2, [pc, #352]	; (800592c <HAL_RCC_OscConfig+0x578>)
 80057ca:	f023 0301 	bic.w	r3, r3, #1
 80057ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d2:	f7fc ff61 	bl	8002698 <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057da:	f7fc ff5d 	bl	8002698 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e203      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057ec:	4b4f      	ldr	r3, [pc, #316]	; (800592c <HAL_RCC_OscConfig+0x578>)
 80057ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1ef      	bne.n	80057da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 80a6 	beq.w	8005954 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005808:	2300      	movs	r3, #0
 800580a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800580c:	4b47      	ldr	r3, [pc, #284]	; (800592c <HAL_RCC_OscConfig+0x578>)
 800580e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10d      	bne.n	8005834 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005818:	4b44      	ldr	r3, [pc, #272]	; (800592c <HAL_RCC_OscConfig+0x578>)
 800581a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581c:	4a43      	ldr	r2, [pc, #268]	; (800592c <HAL_RCC_OscConfig+0x578>)
 800581e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005822:	6593      	str	r3, [r2, #88]	; 0x58
 8005824:	4b41      	ldr	r3, [pc, #260]	; (800592c <HAL_RCC_OscConfig+0x578>)
 8005826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800582c:	60bb      	str	r3, [r7, #8]
 800582e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005830:	2301      	movs	r3, #1
 8005832:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005834:	4b3e      	ldr	r3, [pc, #248]	; (8005930 <HAL_RCC_OscConfig+0x57c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d118      	bne.n	8005872 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005840:	4b3b      	ldr	r3, [pc, #236]	; (8005930 <HAL_RCC_OscConfig+0x57c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a3a      	ldr	r2, [pc, #232]	; (8005930 <HAL_RCC_OscConfig+0x57c>)
 8005846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800584a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800584c:	f7fc ff24 	bl	8002698 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005854:	f7fc ff20 	bl	8002698 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e1c6      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005866:	4b32      	ldr	r3, [pc, #200]	; (8005930 <HAL_RCC_OscConfig+0x57c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0f0      	beq.n	8005854 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d108      	bne.n	800588c <HAL_RCC_OscConfig+0x4d8>
 800587a:	4b2c      	ldr	r3, [pc, #176]	; (800592c <HAL_RCC_OscConfig+0x578>)
 800587c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005880:	4a2a      	ldr	r2, [pc, #168]	; (800592c <HAL_RCC_OscConfig+0x578>)
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800588a:	e024      	b.n	80058d6 <HAL_RCC_OscConfig+0x522>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b05      	cmp	r3, #5
 8005892:	d110      	bne.n	80058b6 <HAL_RCC_OscConfig+0x502>
 8005894:	4b25      	ldr	r3, [pc, #148]	; (800592c <HAL_RCC_OscConfig+0x578>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589a:	4a24      	ldr	r2, [pc, #144]	; (800592c <HAL_RCC_OscConfig+0x578>)
 800589c:	f043 0304 	orr.w	r3, r3, #4
 80058a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058a4:	4b21      	ldr	r3, [pc, #132]	; (800592c <HAL_RCC_OscConfig+0x578>)
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058aa:	4a20      	ldr	r2, [pc, #128]	; (800592c <HAL_RCC_OscConfig+0x578>)
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058b4:	e00f      	b.n	80058d6 <HAL_RCC_OscConfig+0x522>
 80058b6:	4b1d      	ldr	r3, [pc, #116]	; (800592c <HAL_RCC_OscConfig+0x578>)
 80058b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058bc:	4a1b      	ldr	r2, [pc, #108]	; (800592c <HAL_RCC_OscConfig+0x578>)
 80058be:	f023 0301 	bic.w	r3, r3, #1
 80058c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058c6:	4b19      	ldr	r3, [pc, #100]	; (800592c <HAL_RCC_OscConfig+0x578>)
 80058c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058cc:	4a17      	ldr	r2, [pc, #92]	; (800592c <HAL_RCC_OscConfig+0x578>)
 80058ce:	f023 0304 	bic.w	r3, r3, #4
 80058d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d016      	beq.n	800590c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058de:	f7fc fedb 	bl	8002698 <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058e4:	e00a      	b.n	80058fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e6:	f7fc fed7 	bl	8002698 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e17b      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058fc:	4b0b      	ldr	r3, [pc, #44]	; (800592c <HAL_RCC_OscConfig+0x578>)
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0ed      	beq.n	80058e6 <HAL_RCC_OscConfig+0x532>
 800590a:	e01a      	b.n	8005942 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590c:	f7fc fec4 	bl	8002698 <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005912:	e00f      	b.n	8005934 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005914:	f7fc fec0 	bl	8002698 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005922:	4293      	cmp	r3, r2
 8005924:	d906      	bls.n	8005934 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e164      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
 800592a:	bf00      	nop
 800592c:	40021000 	.word	0x40021000
 8005930:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005934:	4ba8      	ldr	r3, [pc, #672]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e8      	bne.n	8005914 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005942:	7ffb      	ldrb	r3, [r7, #31]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d105      	bne.n	8005954 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005948:	4ba3      	ldr	r3, [pc, #652]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 800594a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594c:	4aa2      	ldr	r2, [pc, #648]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 800594e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005952:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b00      	cmp	r3, #0
 800595e:	d03c      	beq.n	80059da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01c      	beq.n	80059a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005968:	4b9b      	ldr	r3, [pc, #620]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 800596a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800596e:	4a9a      	ldr	r2, [pc, #616]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005970:	f043 0301 	orr.w	r3, r3, #1
 8005974:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005978:	f7fc fe8e 	bl	8002698 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005980:	f7fc fe8a 	bl	8002698 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e130      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005992:	4b91      	ldr	r3, [pc, #580]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005994:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0ef      	beq.n	8005980 <HAL_RCC_OscConfig+0x5cc>
 80059a0:	e01b      	b.n	80059da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059a2:	4b8d      	ldr	r3, [pc, #564]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 80059a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059a8:	4a8b      	ldr	r2, [pc, #556]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 80059aa:	f023 0301 	bic.w	r3, r3, #1
 80059ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b2:	f7fc fe71 	bl	8002698 <HAL_GetTick>
 80059b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059b8:	e008      	b.n	80059cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059ba:	f7fc fe6d 	bl	8002698 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d901      	bls.n	80059cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e113      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059cc:	4b82      	ldr	r3, [pc, #520]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 80059ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1ef      	bne.n	80059ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 8107 	beq.w	8005bf2 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	f040 80cb 	bne.w	8005b84 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80059ee:	4b7a      	ldr	r3, [pc, #488]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f003 0203 	and.w	r2, r3, #3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d12c      	bne.n	8005a5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d123      	bne.n	8005a5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d11b      	bne.n	8005a5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d113      	bne.n	8005a5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3e:	085b      	lsrs	r3, r3, #1
 8005a40:	3b01      	subs	r3, #1
 8005a42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d109      	bne.n	8005a5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	3b01      	subs	r3, #1
 8005a56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d06d      	beq.n	8005b38 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	2b0c      	cmp	r3, #12
 8005a60:	d068      	beq.n	8005b34 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a62:	4b5d      	ldr	r3, [pc, #372]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d105      	bne.n	8005a7a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005a6e:	4b5a      	ldr	r3, [pc, #360]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e0ba      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a7e:	4b56      	ldr	r3, [pc, #344]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a55      	ldr	r2, [pc, #340]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005a84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a8a:	f7fc fe05 	bl	8002698 <HAL_GetTick>
 8005a8e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a90:	e008      	b.n	8005aa4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a92:	f7fc fe01 	bl	8002698 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e0a7      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aa4:	4b4c      	ldr	r3, [pc, #304]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1f0      	bne.n	8005a92 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ab0:	4b49      	ldr	r3, [pc, #292]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	4b49      	ldr	r3, [pc, #292]	; (8005bdc <HAL_RCC_OscConfig+0x828>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ac0:	3a01      	subs	r2, #1
 8005ac2:	0112      	lsls	r2, r2, #4
 8005ac4:	4311      	orrs	r1, r2
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005aca:	0212      	lsls	r2, r2, #8
 8005acc:	4311      	orrs	r1, r2
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ad2:	0852      	lsrs	r2, r2, #1
 8005ad4:	3a01      	subs	r2, #1
 8005ad6:	0552      	lsls	r2, r2, #21
 8005ad8:	4311      	orrs	r1, r2
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ade:	0852      	lsrs	r2, r2, #1
 8005ae0:	3a01      	subs	r2, #1
 8005ae2:	0652      	lsls	r2, r2, #25
 8005ae4:	4311      	orrs	r1, r2
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005aea:	06d2      	lsls	r2, r2, #27
 8005aec:	430a      	orrs	r2, r1
 8005aee:	493a      	ldr	r1, [pc, #232]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005af4:	4b38      	ldr	r3, [pc, #224]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a37      	ldr	r2, [pc, #220]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005afe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b00:	4b35      	ldr	r3, [pc, #212]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	4a34      	ldr	r2, [pc, #208]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b0c:	f7fc fdc4 	bl	8002698 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b14:	f7fc fdc0 	bl	8002698 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e066      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b26:	4b2c      	ldr	r3, [pc, #176]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0f0      	beq.n	8005b14 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b32:	e05e      	b.n	8005bf2 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e05d      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b38:	4b27      	ldr	r3, [pc, #156]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d156      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b44:	4b24      	ldr	r3, [pc, #144]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a23      	ldr	r2, [pc, #140]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b50:	4b21      	ldr	r3, [pc, #132]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	4a20      	ldr	r2, [pc, #128]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b5c:	f7fc fd9c 	bl	8002698 <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b64:	f7fc fd98 	bl	8002698 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e03e      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b76:	4b18      	ldr	r3, [pc, #96]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0f0      	beq.n	8005b64 <HAL_RCC_OscConfig+0x7b0>
 8005b82:	e036      	b.n	8005bf2 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b0c      	cmp	r3, #12
 8005b88:	d031      	beq.n	8005bee <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b8a:	4b13      	ldr	r3, [pc, #76]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a12      	ldr	r2, [pc, #72]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005b90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b94:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005b96:	4b10      	ldr	r3, [pc, #64]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d105      	bne.n	8005bae <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	4a0c      	ldr	r2, [pc, #48]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005ba8:	f023 0303 	bic.w	r3, r3, #3
 8005bac:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005bae:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	4a09      	ldr	r2, [pc, #36]	; (8005bd8 <HAL_RCC_OscConfig+0x824>)
 8005bb4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bbc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbe:	f7fc fd6b 	bl	8002698 <HAL_GetTick>
 8005bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bc4:	e00c      	b.n	8005be0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc6:	f7fc fd67 	bl	8002698 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d905      	bls.n	8005be0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e00d      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005be0:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <HAL_RCC_OscConfig+0x848>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1ec      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x812>
 8005bec:	e001      	b.n	8005bf2 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3720      	adds	r7, #32
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40021000 	.word	0x40021000

08005c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e10f      	b.n	8005e38 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c18:	4b89      	ldr	r3, [pc, #548]	; (8005e40 <HAL_RCC_ClockConfig+0x240>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d910      	bls.n	8005c48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c26:	4b86      	ldr	r3, [pc, #536]	; (8005e40 <HAL_RCC_ClockConfig+0x240>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f023 020f 	bic.w	r2, r3, #15
 8005c2e:	4984      	ldr	r1, [pc, #528]	; (8005e40 <HAL_RCC_ClockConfig+0x240>)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c36:	4b82      	ldr	r3, [pc, #520]	; (8005e40 <HAL_RCC_ClockConfig+0x240>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 030f 	and.w	r3, r3, #15
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d001      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0f7      	b.n	8005e38 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 8089 	beq.w	8005d68 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d133      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c5e:	4b79      	ldr	r3, [pc, #484]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e0e4      	b.n	8005e38 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005c6e:	f000 fa41 	bl	80060f4 <RCC_GetSysClockFreqFromPLLSource>
 8005c72:	4602      	mov	r2, r0
 8005c74:	4b74      	ldr	r3, [pc, #464]	; (8005e48 <HAL_RCC_ClockConfig+0x248>)
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d955      	bls.n	8005d26 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005c7a:	4b72      	ldr	r3, [pc, #456]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10a      	bne.n	8005c9c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c86:	4b6f      	ldr	r3, [pc, #444]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c8e:	4a6d      	ldr	r2, [pc, #436]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c96:	2380      	movs	r3, #128	; 0x80
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	e044      	b.n	8005d26 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d03e      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x126>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d13a      	bne.n	8005d26 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cb0:	4b64      	ldr	r3, [pc, #400]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cb8:	4a62      	ldr	r2, [pc, #392]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cbe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005cc0:	2380      	movs	r3, #128	; 0x80
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	e02f      	b.n	8005d26 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d107      	bne.n	8005cde <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cce:	4b5d      	ldr	r3, [pc, #372]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d115      	bne.n	8005d06 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e0ac      	b.n	8005e38 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d107      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ce6:	4b57      	ldr	r3, [pc, #348]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d109      	bne.n	8005d06 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e0a0      	b.n	8005e38 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cf6:	4b53      	ldr	r3, [pc, #332]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e098      	b.n	8005e38 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005d06:	f000 f8a7 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	4b4e      	ldr	r3, [pc, #312]	; (8005e48 <HAL_RCC_ClockConfig+0x248>)
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d909      	bls.n	8005d26 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d12:	4b4c      	ldr	r3, [pc, #304]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d1a:	4a4a      	ldr	r2, [pc, #296]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005d22:	2380      	movs	r3, #128	; 0x80
 8005d24:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d26:	4b47      	ldr	r3, [pc, #284]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f023 0203 	bic.w	r2, r3, #3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	4944      	ldr	r1, [pc, #272]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d38:	f7fc fcae 	bl	8002698 <HAL_GetTick>
 8005d3c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3e:	e00a      	b.n	8005d56 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d40:	f7fc fcaa 	bl	8002698 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e070      	b.n	8005e38 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d56:	4b3b      	ldr	r3, [pc, #236]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 020c 	and.w	r2, r3, #12
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d1eb      	bne.n	8005d40 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d009      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d74:	4b33      	ldr	r3, [pc, #204]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	4930      	ldr	r1, [pc, #192]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	608b      	str	r3, [r1, #8]
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	2b80      	cmp	r3, #128	; 0x80
 8005d8c:	d105      	bne.n	8005d9a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d8e:	4b2d      	ldr	r3, [pc, #180]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	4a2c      	ldr	r2, [pc, #176]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005d94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d98:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d9a:	4b29      	ldr	r3, [pc, #164]	; (8005e40 <HAL_RCC_ClockConfig+0x240>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d210      	bcs.n	8005dca <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da8:	4b25      	ldr	r3, [pc, #148]	; (8005e40 <HAL_RCC_ClockConfig+0x240>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f023 020f 	bic.w	r2, r3, #15
 8005db0:	4923      	ldr	r1, [pc, #140]	; (8005e40 <HAL_RCC_ClockConfig+0x240>)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005db8:	4b21      	ldr	r3, [pc, #132]	; (8005e40 <HAL_RCC_ClockConfig+0x240>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 030f 	and.w	r3, r3, #15
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d001      	beq.n	8005dca <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e036      	b.n	8005e38 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0304 	and.w	r3, r3, #4
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d008      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dd6:	4b1b      	ldr	r3, [pc, #108]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	4918      	ldr	r1, [pc, #96]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d009      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005df4:	4b13      	ldr	r3, [pc, #76]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	4910      	ldr	r1, [pc, #64]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e08:	f000 f826 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8005e0c:	4601      	mov	r1, r0
 8005e0e:	4b0d      	ldr	r3, [pc, #52]	; (8005e44 <HAL_RCC_ClockConfig+0x244>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	091b      	lsrs	r3, r3, #4
 8005e14:	f003 030f 	and.w	r3, r3, #15
 8005e18:	4a0c      	ldr	r2, [pc, #48]	; (8005e4c <HAL_RCC_ClockConfig+0x24c>)
 8005e1a:	5cd3      	ldrb	r3, [r2, r3]
 8005e1c:	f003 031f 	and.w	r3, r3, #31
 8005e20:	fa21 f303 	lsr.w	r3, r1, r3
 8005e24:	4a0a      	ldr	r2, [pc, #40]	; (8005e50 <HAL_RCC_ClockConfig+0x250>)
 8005e26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e28:	4b0a      	ldr	r3, [pc, #40]	; (8005e54 <HAL_RCC_ClockConfig+0x254>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fc fac5 	bl	80023bc <HAL_InitTick>
 8005e32:	4603      	mov	r3, r0
 8005e34:	73fb      	strb	r3, [r7, #15]

  return status;
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3718      	adds	r7, #24
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40022000 	.word	0x40022000
 8005e44:	40021000 	.word	0x40021000
 8005e48:	04c4b400 	.word	0x04c4b400
 8005e4c:	0800cfb4 	.word	0x0800cfb4
 8005e50:	20000004 	.word	0x20000004
 8005e54:	20000008 	.word	0x20000008

08005e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b089      	sub	sp, #36	; 0x24
 8005e5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61fb      	str	r3, [r7, #28]
 8005e62:	2300      	movs	r3, #0
 8005e64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e66:	4b3d      	ldr	r3, [pc, #244]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x104>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 030c 	and.w	r3, r3, #12
 8005e6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e70:	4b3a      	ldr	r3, [pc, #232]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x104>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f003 0303 	and.w	r3, r3, #3
 8005e78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d005      	beq.n	8005e8c <HAL_RCC_GetSysClockFreq+0x34>
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	2b0c      	cmp	r3, #12
 8005e84:	d121      	bne.n	8005eca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d11e      	bne.n	8005eca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e8c:	4b33      	ldr	r3, [pc, #204]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x104>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d107      	bne.n	8005ea8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e98:	4b30      	ldr	r3, [pc, #192]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x104>)
 8005e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e9e:	0a1b      	lsrs	r3, r3, #8
 8005ea0:	f003 030f 	and.w	r3, r3, #15
 8005ea4:	61fb      	str	r3, [r7, #28]
 8005ea6:	e005      	b.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ea8:	4b2c      	ldr	r3, [pc, #176]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x104>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	091b      	lsrs	r3, r3, #4
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005eb4:	4a2a      	ldr	r2, [pc, #168]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ebc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10d      	bne.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ec8:	e00a      	b.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d102      	bne.n	8005ed6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ed0:	4b24      	ldr	r3, [pc, #144]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	e004      	b.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d101      	bne.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005edc:	4b22      	ldr	r3, [pc, #136]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ede:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2b0c      	cmp	r3, #12
 8005ee4:	d133      	bne.n	8005f4e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ee6:	4b1d      	ldr	r3, [pc, #116]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x104>)
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d002      	beq.n	8005efc <HAL_RCC_GetSysClockFreq+0xa4>
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d003      	beq.n	8005f02 <HAL_RCC_GetSysClockFreq+0xaa>
 8005efa:	e005      	b.n	8005f08 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005efc:	4b19      	ldr	r3, [pc, #100]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005efe:	617b      	str	r3, [r7, #20]
      break;
 8005f00:	e005      	b.n	8005f0e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f02:	4b19      	ldr	r3, [pc, #100]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f04:	617b      	str	r3, [r7, #20]
      break;
 8005f06:	e002      	b.n	8005f0e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	617b      	str	r3, [r7, #20]
      break;
 8005f0c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f0e:	4b13      	ldr	r3, [pc, #76]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x104>)
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	091b      	lsrs	r3, r3, #4
 8005f14:	f003 030f 	and.w	r3, r3, #15
 8005f18:	3301      	adds	r3, #1
 8005f1a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f1c:	4b0f      	ldr	r3, [pc, #60]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x104>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	0a1b      	lsrs	r3, r3, #8
 8005f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	fb02 f203 	mul.w	r2, r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f32:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f34:	4b09      	ldr	r3, [pc, #36]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x104>)
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	0e5b      	lsrs	r3, r3, #25
 8005f3a:	f003 0303 	and.w	r3, r3, #3
 8005f3e:	3301      	adds	r3, #1
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f4e:	69bb      	ldr	r3, [r7, #24]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3724      	adds	r7, #36	; 0x24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	0800cfcc 	.word	0x0800cfcc
 8005f64:	00f42400 	.word	0x00f42400
 8005f68:	007a1200 	.word	0x007a1200

08005f6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f70:	4b03      	ldr	r3, [pc, #12]	; (8005f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f72:	681b      	ldr	r3, [r3, #0]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	20000004 	.word	0x20000004

08005f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f88:	f7ff fff0 	bl	8005f6c <HAL_RCC_GetHCLKFreq>
 8005f8c:	4601      	mov	r1, r0
 8005f8e:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	0a1b      	lsrs	r3, r3, #8
 8005f94:	f003 0307 	and.w	r3, r3, #7
 8005f98:	4a04      	ldr	r2, [pc, #16]	; (8005fac <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f9a:	5cd3      	ldrb	r3, [r2, r3]
 8005f9c:	f003 031f 	and.w	r3, r3, #31
 8005fa0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40021000 	.word	0x40021000
 8005fac:	0800cfc4 	.word	0x0800cfc4

08005fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005fb4:	f7ff ffda 	bl	8005f6c <HAL_RCC_GetHCLKFreq>
 8005fb8:	4601      	mov	r1, r0
 8005fba:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	0adb      	lsrs	r3, r3, #11
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	4a04      	ldr	r2, [pc, #16]	; (8005fd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fc6:	5cd3      	ldrb	r3, [r2, r3]
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	0800cfc4 	.word	0x0800cfc4

08005fdc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	220f      	movs	r2, #15
 8005fea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005fec:	4b12      	ldr	r3, [pc, #72]	; (8006038 <HAL_RCC_GetClockConfig+0x5c>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 0203 	and.w	r2, r3, #3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005ff8:	4b0f      	ldr	r3, [pc, #60]	; (8006038 <HAL_RCC_GetClockConfig+0x5c>)
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006004:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <HAL_RCC_GetClockConfig+0x5c>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006010:	4b09      	ldr	r3, [pc, #36]	; (8006038 <HAL_RCC_GetClockConfig+0x5c>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	08db      	lsrs	r3, r3, #3
 8006016:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800601e:	4b07      	ldr	r3, [pc, #28]	; (800603c <HAL_RCC_GetClockConfig+0x60>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 020f 	and.w	r2, r3, #15
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	601a      	str	r2, [r3, #0]
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40021000 	.word	0x40021000
 800603c:	40022000 	.word	0x40022000

08006040 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006048:	2300      	movs	r3, #0
 800604a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800604c:	4b27      	ldr	r3, [pc, #156]	; (80060ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800604e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006058:	f7ff f8e8 	bl	800522c <HAL_PWREx_GetVoltageRange>
 800605c:	6178      	str	r0, [r7, #20]
 800605e:	e014      	b.n	800608a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006060:	4b22      	ldr	r3, [pc, #136]	; (80060ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006064:	4a21      	ldr	r2, [pc, #132]	; (80060ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800606a:	6593      	str	r3, [r2, #88]	; 0x58
 800606c:	4b1f      	ldr	r3, [pc, #124]	; (80060ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800606e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006078:	f7ff f8d8 	bl	800522c <HAL_PWREx_GetVoltageRange>
 800607c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800607e:	4b1b      	ldr	r3, [pc, #108]	; (80060ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006082:	4a1a      	ldr	r2, [pc, #104]	; (80060ec <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006088:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006090:	d10b      	bne.n	80060aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b80      	cmp	r3, #128	; 0x80
 8006096:	d913      	bls.n	80060c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2ba0      	cmp	r3, #160	; 0xa0
 800609c:	d902      	bls.n	80060a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800609e:	2302      	movs	r3, #2
 80060a0:	613b      	str	r3, [r7, #16]
 80060a2:	e00d      	b.n	80060c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060a4:	2301      	movs	r3, #1
 80060a6:	613b      	str	r3, [r7, #16]
 80060a8:	e00a      	b.n	80060c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b7f      	cmp	r3, #127	; 0x7f
 80060ae:	d902      	bls.n	80060b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80060b0:	2302      	movs	r3, #2
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	e004      	b.n	80060c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b70      	cmp	r3, #112	; 0x70
 80060ba:	d101      	bne.n	80060c0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060bc:	2301      	movs	r3, #1
 80060be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80060c0:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f023 020f 	bic.w	r2, r3, #15
 80060c8:	4909      	ldr	r1, [pc, #36]	; (80060f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80060d0:	4b07      	ldr	r3, [pc, #28]	; (80060f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d001      	beq.n	80060e2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e000      	b.n	80060e4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	40021000 	.word	0x40021000
 80060f0:	40022000 	.word	0x40022000

080060f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80060fe:	4b2d      	ldr	r3, [pc, #180]	; (80061b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	2b01      	cmp	r3, #1
 8006108:	d118      	bne.n	800613c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800610a:	4b2a      	ldr	r3, [pc, #168]	; (80061b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0308 	and.w	r3, r3, #8
 8006112:	2b00      	cmp	r3, #0
 8006114:	d107      	bne.n	8006126 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006116:	4b27      	ldr	r3, [pc, #156]	; (80061b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800611c:	0a1b      	lsrs	r3, r3, #8
 800611e:	f003 030f 	and.w	r3, r3, #15
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	e005      	b.n	8006132 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006126:	4b23      	ldr	r3, [pc, #140]	; (80061b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	091b      	lsrs	r3, r3, #4
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006132:	4a21      	ldr	r2, [pc, #132]	; (80061b8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800613a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800613c:	4b1d      	ldr	r3, [pc, #116]	; (80061b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f003 0303 	and.w	r3, r3, #3
 8006144:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b02      	cmp	r3, #2
 800614a:	d002      	beq.n	8006152 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800614c:	2b03      	cmp	r3, #3
 800614e:	d003      	beq.n	8006158 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8006150:	e005      	b.n	800615e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006152:	4b1a      	ldr	r3, [pc, #104]	; (80061bc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006154:	613b      	str	r3, [r7, #16]
    break;
 8006156:	e005      	b.n	8006164 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006158:	4b19      	ldr	r3, [pc, #100]	; (80061c0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800615a:	613b      	str	r3, [r7, #16]
    break;
 800615c:	e002      	b.n	8006164 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	613b      	str	r3, [r7, #16]
    break;
 8006162:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006164:	4b13      	ldr	r3, [pc, #76]	; (80061b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	091b      	lsrs	r3, r3, #4
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	3301      	adds	r3, #1
 8006170:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006172:	4b10      	ldr	r3, [pc, #64]	; (80061b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	0a1b      	lsrs	r3, r3, #8
 8006178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	fb02 f203 	mul.w	r2, r2, r3
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	fbb2 f3f3 	udiv	r3, r2, r3
 8006188:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800618a:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	0e5b      	lsrs	r3, r3, #25
 8006190:	f003 0303 	and.w	r3, r3, #3
 8006194:	3301      	adds	r3, #1
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a2:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80061a4:	683b      	ldr	r3, [r7, #0]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	371c      	adds	r7, #28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40021000 	.word	0x40021000
 80061b8:	0800cfcc 	.word	0x0800cfcc
 80061bc:	00f42400 	.word	0x00f42400
 80061c0:	007a1200 	.word	0x007a1200

080061c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061cc:	2300      	movs	r3, #0
 80061ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061d0:	2300      	movs	r3, #0
 80061d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d03d      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061e4:	2b40      	cmp	r3, #64	; 0x40
 80061e6:	d00b      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80061e8:	2b40      	cmp	r3, #64	; 0x40
 80061ea:	d804      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00e      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	d015      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80061f4:	e01d      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80061f6:	2b60      	cmp	r3, #96	; 0x60
 80061f8:	d01e      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80061fa:	2b80      	cmp	r3, #128	; 0x80
 80061fc:	d01c      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80061fe:	e018      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006200:	4b86      	ldr	r3, [pc, #536]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	4a85      	ldr	r2, [pc, #532]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800620a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800620c:	e015      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	3304      	adds	r3, #4
 8006212:	2100      	movs	r1, #0
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fafd 	bl	8006814 <RCCEx_PLLSAI1_Config>
 800621a:	4603      	mov	r3, r0
 800621c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800621e:	e00c      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3320      	adds	r3, #32
 8006224:	2100      	movs	r1, #0
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fbe4 	bl	80069f4 <RCCEx_PLLSAI2_Config>
 800622c:	4603      	mov	r3, r0
 800622e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006230:	e003      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	74fb      	strb	r3, [r7, #19]
      break;
 8006236:	e000      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8006238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800623a:	7cfb      	ldrb	r3, [r7, #19]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10b      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006240:	4b76      	ldr	r3, [pc, #472]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006242:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006246:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800624e:	4973      	ldr	r1, [pc, #460]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006250:	4313      	orrs	r3, r2
 8006252:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006256:	e001      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006258:	7cfb      	ldrb	r3, [r7, #19]
 800625a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d042      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006270:	d00f      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8006272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006276:	d805      	bhi.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d011      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800627c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006280:	d017      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8006282:	e01f      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8006284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006288:	d01f      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800628a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800628e:	d01c      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006290:	e018      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006292:	4b62      	ldr	r3, [pc, #392]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	4a61      	ldr	r2, [pc, #388]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800629c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800629e:	e015      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3304      	adds	r3, #4
 80062a4:	2100      	movs	r1, #0
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 fab4 	bl	8006814 <RCCEx_PLLSAI1_Config>
 80062ac:	4603      	mov	r3, r0
 80062ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062b0:	e00c      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	3320      	adds	r3, #32
 80062b6:	2100      	movs	r1, #0
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fb9b 	bl	80069f4 <RCCEx_PLLSAI2_Config>
 80062be:	4603      	mov	r3, r0
 80062c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062c2:	e003      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	74fb      	strb	r3, [r7, #19]
      break;
 80062c8:	e000      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80062ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062cc:	7cfb      	ldrb	r3, [r7, #19]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10b      	bne.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80062d2:	4b52      	ldr	r3, [pc, #328]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80062d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e0:	494e      	ldr	r1, [pc, #312]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80062e8:	e001      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ea:	7cfb      	ldrb	r3, [r7, #19]
 80062ec:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 809f 	beq.w	800643a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062fc:	2300      	movs	r3, #0
 80062fe:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006300:	4b46      	ldr	r3, [pc, #280]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800630c:	2301      	movs	r3, #1
 800630e:	e000      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006310:	2300      	movs	r3, #0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00d      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006316:	4b41      	ldr	r3, [pc, #260]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631a:	4a40      	ldr	r2, [pc, #256]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800631c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006320:	6593      	str	r3, [r2, #88]	; 0x58
 8006322:	4b3e      	ldr	r3, [pc, #248]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800632a:	60bb      	str	r3, [r7, #8]
 800632c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800632e:	2301      	movs	r3, #1
 8006330:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006332:	4b3b      	ldr	r3, [pc, #236]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a3a      	ldr	r2, [pc, #232]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800633c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800633e:	f7fc f9ab 	bl	8002698 <HAL_GetTick>
 8006342:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006344:	e009      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006346:	f7fc f9a7 	bl	8002698 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d902      	bls.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	74fb      	strb	r3, [r7, #19]
        break;
 8006358:	e005      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800635a:	4b31      	ldr	r3, [pc, #196]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0ef      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8006366:	7cfb      	ldrb	r3, [r7, #19]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d15b      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800636c:	4b2b      	ldr	r3, [pc, #172]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800636e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006376:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d01f      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	429a      	cmp	r2, r3
 8006388:	d019      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800638a:	4b24      	ldr	r3, [pc, #144]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800638c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006394:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006396:	4b21      	ldr	r3, [pc, #132]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639c:	4a1f      	ldr	r2, [pc, #124]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800639e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063a6:	4b1d      	ldr	r3, [pc, #116]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80063a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ac:	4a1b      	ldr	r2, [pc, #108]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80063ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063b6:	4a19      	ldr	r2, [pc, #100]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d016      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c8:	f7fc f966 	bl	8002698 <HAL_GetTick>
 80063cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063ce:	e00b      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063d0:	f7fc f962 	bl	8002698 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	f241 3288 	movw	r2, #5000	; 0x1388
 80063de:	4293      	cmp	r3, r2
 80063e0:	d902      	bls.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	74fb      	strb	r3, [r7, #19]
            break;
 80063e6:	e006      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063e8:	4b0c      	ldr	r3, [pc, #48]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80063ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0ec      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80063f6:	7cfb      	ldrb	r3, [r7, #19]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10c      	bne.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063fc:	4b07      	ldr	r3, [pc, #28]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80063fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006402:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640c:	4903      	ldr	r1, [pc, #12]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800640e:	4313      	orrs	r3, r2
 8006410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006414:	e008      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006416:	7cfb      	ldrb	r3, [r7, #19]
 8006418:	74bb      	strb	r3, [r7, #18]
 800641a:	e005      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800641c:	40021000 	.word	0x40021000
 8006420:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006424:	7cfb      	ldrb	r3, [r7, #19]
 8006426:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006428:	7c7b      	ldrb	r3, [r7, #17]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d105      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800642e:	4ba0      	ldr	r3, [pc, #640]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006432:	4a9f      	ldr	r2, [pc, #636]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006438:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006446:	4b9a      	ldr	r3, [pc, #616]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644c:	f023 0203 	bic.w	r2, r3, #3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006454:	4996      	ldr	r1, [pc, #600]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006456:	4313      	orrs	r3, r2
 8006458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006468:	4b91      	ldr	r3, [pc, #580]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800646a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646e:	f023 020c 	bic.w	r2, r3, #12
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	498e      	ldr	r1, [pc, #568]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006478:	4313      	orrs	r3, r2
 800647a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800648a:	4b89      	ldr	r3, [pc, #548]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800648c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006490:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006498:	4985      	ldr	r1, [pc, #532]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064ac:	4b80      	ldr	r3, [pc, #512]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ba:	497d      	ldr	r1, [pc, #500]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0310 	and.w	r3, r3, #16
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064ce:	4b78      	ldr	r3, [pc, #480]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064dc:	4974      	ldr	r1, [pc, #464]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0320 	and.w	r3, r3, #32
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00a      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064f0:	4b6f      	ldr	r3, [pc, #444]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064fe:	496c      	ldr	r1, [pc, #432]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006512:	4b67      	ldr	r3, [pc, #412]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006518:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006520:	4963      	ldr	r1, [pc, #396]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006522:	4313      	orrs	r3, r2
 8006524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006534:	4b5e      	ldr	r3, [pc, #376]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006542:	495b      	ldr	r1, [pc, #364]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006544:	4313      	orrs	r3, r2
 8006546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006556:	4b56      	ldr	r3, [pc, #344]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006564:	4952      	ldr	r1, [pc, #328]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00a      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006578:	4b4d      	ldr	r3, [pc, #308]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800657a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006586:	494a      	ldr	r1, [pc, #296]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006588:	4313      	orrs	r3, r2
 800658a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800659a:	4b45      	ldr	r3, [pc, #276]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800659c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a8:	4941      	ldr	r1, [pc, #260]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065bc:	4b3c      	ldr	r3, [pc, #240]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065c2:	f023 0203 	bic.w	r2, r3, #3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ca:	4939      	ldr	r1, [pc, #228]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d028      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065de:	4b34      	ldr	r3, [pc, #208]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ec:	4930      	ldr	r1, [pc, #192]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065fc:	d106      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065fe:	4b2c      	ldr	r3, [pc, #176]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	4a2b      	ldr	r2, [pc, #172]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006608:	60d3      	str	r3, [r2, #12]
 800660a:	e011      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006610:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006614:	d10c      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	3304      	adds	r3, #4
 800661a:	2101      	movs	r1, #1
 800661c:	4618      	mov	r0, r3
 800661e:	f000 f8f9 	bl	8006814 <RCCEx_PLLSAI1_Config>
 8006622:	4603      	mov	r3, r0
 8006624:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006626:	7cfb      	ldrb	r3, [r7, #19]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 800662c:	7cfb      	ldrb	r3, [r7, #19]
 800662e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d04d      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006644:	d108      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006646:	4b1a      	ldr	r3, [pc, #104]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006648:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800664c:	4a18      	ldr	r2, [pc, #96]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800664e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006652:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006656:	e012      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006658:	4b15      	ldr	r3, [pc, #84]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800665a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800665e:	4a14      	ldr	r2, [pc, #80]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006660:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006664:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006668:	4b11      	ldr	r3, [pc, #68]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800666a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006676:	490e      	ldr	r1, [pc, #56]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006678:	4313      	orrs	r3, r2
 800667a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006682:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006686:	d106      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006688:	4b09      	ldr	r3, [pc, #36]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	4a08      	ldr	r2, [pc, #32]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800668e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006692:	60d3      	str	r3, [r2, #12]
 8006694:	e020      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800669a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800669e:	d109      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80066a0:	4b03      	ldr	r3, [pc, #12]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	4a02      	ldr	r2, [pc, #8]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066aa:	60d3      	str	r3, [r2, #12]
 80066ac:	e014      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80066ae:	bf00      	nop
 80066b0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066bc:	d10c      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	3304      	adds	r3, #4
 80066c2:	2101      	movs	r1, #1
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 f8a5 	bl	8006814 <RCCEx_PLLSAI1_Config>
 80066ca:	4603      	mov	r3, r0
 80066cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066ce:	7cfb      	ldrb	r3, [r7, #19]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80066d4:	7cfb      	ldrb	r3, [r7, #19]
 80066d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d028      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066e4:	4b4a      	ldr	r3, [pc, #296]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066f2:	4947      	ldr	r1, [pc, #284]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006702:	d106      	bne.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006704:	4b42      	ldr	r3, [pc, #264]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	4a41      	ldr	r2, [pc, #260]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800670a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800670e:	60d3      	str	r3, [r2, #12]
 8006710:	e011      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006716:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800671a:	d10c      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3304      	adds	r3, #4
 8006720:	2101      	movs	r1, #1
 8006722:	4618      	mov	r0, r3
 8006724:	f000 f876 	bl	8006814 <RCCEx_PLLSAI1_Config>
 8006728:	4603      	mov	r3, r0
 800672a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800672c:	7cfb      	ldrb	r3, [r7, #19]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8006732:	7cfb      	ldrb	r3, [r7, #19]
 8006734:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d01e      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006742:	4b33      	ldr	r3, [pc, #204]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006748:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006752:	492f      	ldr	r1, [pc, #188]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006754:	4313      	orrs	r3, r2
 8006756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006764:	d10c      	bne.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3304      	adds	r3, #4
 800676a:	2102      	movs	r1, #2
 800676c:	4618      	mov	r0, r3
 800676e:	f000 f851 	bl	8006814 <RCCEx_PLLSAI1_Config>
 8006772:	4603      	mov	r3, r0
 8006774:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006776:	7cfb      	ldrb	r3, [r7, #19]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 800677c:	7cfb      	ldrb	r3, [r7, #19]
 800677e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800678c:	4b20      	ldr	r3, [pc, #128]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800678e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006792:	f023 0204 	bic.w	r2, r3, #4
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800679c:	491c      	ldr	r1, [pc, #112]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00b      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80067b0:	4b17      	ldr	r3, [pc, #92]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80067b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067b6:	f023 0218 	bic.w	r2, r3, #24
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c0:	4913      	ldr	r1, [pc, #76]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d017      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80067d4:	4b0e      	ldr	r3, [pc, #56]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80067d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067e4:	490a      	ldr	r1, [pc, #40]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067f6:	d105      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067f8:	4b05      	ldr	r3, [pc, #20]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	4a04      	ldr	r2, [pc, #16]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80067fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006802:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006804:	7cbb      	ldrb	r3, [r7, #18]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	40021000 	.word	0x40021000

08006814 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006822:	4b70      	ldr	r3, [pc, #448]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f003 0303 	and.w	r3, r3, #3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00e      	beq.n	800684c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800682e:	4b6d      	ldr	r3, [pc, #436]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f003 0203 	and.w	r2, r3, #3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	429a      	cmp	r2, r3
 800683c:	d103      	bne.n	8006846 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
       ||
 8006842:	2b00      	cmp	r3, #0
 8006844:	d13f      	bne.n	80068c6 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	73fb      	strb	r3, [r7, #15]
 800684a:	e03c      	b.n	80068c6 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b02      	cmp	r3, #2
 8006852:	d00c      	beq.n	800686e <RCCEx_PLLSAI1_Config+0x5a>
 8006854:	2b03      	cmp	r3, #3
 8006856:	d013      	beq.n	8006880 <RCCEx_PLLSAI1_Config+0x6c>
 8006858:	2b01      	cmp	r3, #1
 800685a:	d120      	bne.n	800689e <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800685c:	4b61      	ldr	r3, [pc, #388]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d11d      	bne.n	80068a4 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800686c:	e01a      	b.n	80068a4 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800686e:	4b5d      	ldr	r3, [pc, #372]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006876:	2b00      	cmp	r3, #0
 8006878:	d116      	bne.n	80068a8 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800687e:	e013      	b.n	80068a8 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006880:	4b58      	ldr	r3, [pc, #352]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10f      	bne.n	80068ac <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800688c:	4b55      	ldr	r3, [pc, #340]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d109      	bne.n	80068ac <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800689c:	e006      	b.n	80068ac <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	73fb      	strb	r3, [r7, #15]
      break;
 80068a2:	e004      	b.n	80068ae <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80068a4:	bf00      	nop
 80068a6:	e002      	b.n	80068ae <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80068a8:	bf00      	nop
 80068aa:	e000      	b.n	80068ae <RCCEx_PLLSAI1_Config+0x9a>
      break;
 80068ac:	bf00      	nop
    }

    if(status == HAL_OK)
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d108      	bne.n	80068c6 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80068b4:	4b4b      	ldr	r3, [pc, #300]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f023 0203 	bic.w	r2, r3, #3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4948      	ldr	r1, [pc, #288]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f040 8086 	bne.w	80069da <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80068ce:	4b45      	ldr	r3, [pc, #276]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a44      	ldr	r2, [pc, #272]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80068d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068da:	f7fb fedd 	bl	8002698 <HAL_GetTick>
 80068de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068e0:	e009      	b.n	80068f6 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068e2:	f7fb fed9 	bl	8002698 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d902      	bls.n	80068f6 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	73fb      	strb	r3, [r7, #15]
        break;
 80068f4:	e005      	b.n	8006902 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068f6:	4b3b      	ldr	r3, [pc, #236]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1ef      	bne.n	80068e2 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d168      	bne.n	80069da <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d113      	bne.n	8006936 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800690e:	4b35      	ldr	r3, [pc, #212]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006910:	691a      	ldr	r2, [r3, #16]
 8006912:	4b35      	ldr	r3, [pc, #212]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1d4>)
 8006914:	4013      	ands	r3, r2
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6892      	ldr	r2, [r2, #8]
 800691a:	0211      	lsls	r1, r2, #8
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	68d2      	ldr	r2, [r2, #12]
 8006920:	06d2      	lsls	r2, r2, #27
 8006922:	4311      	orrs	r1, r2
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	6852      	ldr	r2, [r2, #4]
 8006928:	3a01      	subs	r2, #1
 800692a:	0112      	lsls	r2, r2, #4
 800692c:	430a      	orrs	r2, r1
 800692e:	492d      	ldr	r1, [pc, #180]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006930:	4313      	orrs	r3, r2
 8006932:	610b      	str	r3, [r1, #16]
 8006934:	e02d      	b.n	8006992 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d115      	bne.n	8006968 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800693c:	4b29      	ldr	r3, [pc, #164]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800693e:	691a      	ldr	r2, [r3, #16]
 8006940:	4b2a      	ldr	r3, [pc, #168]	; (80069ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8006942:	4013      	ands	r3, r2
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6892      	ldr	r2, [r2, #8]
 8006948:	0211      	lsls	r1, r2, #8
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6912      	ldr	r2, [r2, #16]
 800694e:	0852      	lsrs	r2, r2, #1
 8006950:	3a01      	subs	r2, #1
 8006952:	0552      	lsls	r2, r2, #21
 8006954:	4311      	orrs	r1, r2
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6852      	ldr	r2, [r2, #4]
 800695a:	3a01      	subs	r2, #1
 800695c:	0112      	lsls	r2, r2, #4
 800695e:	430a      	orrs	r2, r1
 8006960:	4920      	ldr	r1, [pc, #128]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006962:	4313      	orrs	r3, r2
 8006964:	610b      	str	r3, [r1, #16]
 8006966:	e014      	b.n	8006992 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006968:	4b1e      	ldr	r3, [pc, #120]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	4b20      	ldr	r3, [pc, #128]	; (80069f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800696e:	4013      	ands	r3, r2
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6892      	ldr	r2, [r2, #8]
 8006974:	0211      	lsls	r1, r2, #8
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	6952      	ldr	r2, [r2, #20]
 800697a:	0852      	lsrs	r2, r2, #1
 800697c:	3a01      	subs	r2, #1
 800697e:	0652      	lsls	r2, r2, #25
 8006980:	4311      	orrs	r1, r2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6852      	ldr	r2, [r2, #4]
 8006986:	3a01      	subs	r2, #1
 8006988:	0112      	lsls	r2, r2, #4
 800698a:	430a      	orrs	r2, r1
 800698c:	4915      	ldr	r1, [pc, #84]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800698e:	4313      	orrs	r3, r2
 8006990:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006992:	4b14      	ldr	r3, [pc, #80]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a13      	ldr	r2, [pc, #76]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006998:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800699c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699e:	f7fb fe7b 	bl	8002698 <HAL_GetTick>
 80069a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069a4:	e009      	b.n	80069ba <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069a6:	f7fb fe77 	bl	8002698 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d902      	bls.n	80069ba <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	73fb      	strb	r3, [r7, #15]
          break;
 80069b8:	e005      	b.n	80069c6 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069ba:	4b0a      	ldr	r3, [pc, #40]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0ef      	beq.n	80069a6 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d106      	bne.n	80069da <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	4903      	ldr	r1, [pc, #12]	; (80069e4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	40021000 	.word	0x40021000
 80069e8:	07ff800f 	.word	0x07ff800f
 80069ec:	ff9f800f 	.word	0xff9f800f
 80069f0:	f9ff800f 	.word	0xf9ff800f

080069f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a02:	4b70      	ldr	r3, [pc, #448]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00e      	beq.n	8006a2c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006a0e:	4b6d      	ldr	r3, [pc, #436]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f003 0203 	and.w	r2, r3, #3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d103      	bne.n	8006a26 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
       ||
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d13f      	bne.n	8006aa6 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	73fb      	strb	r3, [r7, #15]
 8006a2a:	e03c      	b.n	8006aa6 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d00c      	beq.n	8006a4e <RCCEx_PLLSAI2_Config+0x5a>
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d013      	beq.n	8006a60 <RCCEx_PLLSAI2_Config+0x6c>
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d120      	bne.n	8006a7e <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a3c:	4b61      	ldr	r3, [pc, #388]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d11d      	bne.n	8006a84 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a4c:	e01a      	b.n	8006a84 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a4e:	4b5d      	ldr	r3, [pc, #372]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d116      	bne.n	8006a88 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a5e:	e013      	b.n	8006a88 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a60:	4b58      	ldr	r3, [pc, #352]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10f      	bne.n	8006a8c <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a6c:	4b55      	ldr	r3, [pc, #340]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d109      	bne.n	8006a8c <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a7c:	e006      	b.n	8006a8c <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	73fb      	strb	r3, [r7, #15]
      break;
 8006a82:	e004      	b.n	8006a8e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8006a84:	bf00      	nop
 8006a86:	e002      	b.n	8006a8e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8006a88:	bf00      	nop
 8006a8a:	e000      	b.n	8006a8e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8006a8c:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d108      	bne.n	8006aa6 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006a94:	4b4b      	ldr	r3, [pc, #300]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f023 0203 	bic.w	r2, r3, #3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4948      	ldr	r1, [pc, #288]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f040 8086 	bne.w	8006bba <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006aae:	4b45      	ldr	r3, [pc, #276]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a44      	ldr	r2, [pc, #272]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aba:	f7fb fded 	bl	8002698 <HAL_GetTick>
 8006abe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ac0:	e009      	b.n	8006ad6 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ac2:	f7fb fde9 	bl	8002698 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d902      	bls.n	8006ad6 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	73fb      	strb	r3, [r7, #15]
        break;
 8006ad4:	e005      	b.n	8006ae2 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ad6:	4b3b      	ldr	r3, [pc, #236]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1ef      	bne.n	8006ac2 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d168      	bne.n	8006bba <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d113      	bne.n	8006b16 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006aee:	4b35      	ldr	r3, [pc, #212]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006af0:	695a      	ldr	r2, [r3, #20]
 8006af2:	4b35      	ldr	r3, [pc, #212]	; (8006bc8 <RCCEx_PLLSAI2_Config+0x1d4>)
 8006af4:	4013      	ands	r3, r2
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	6892      	ldr	r2, [r2, #8]
 8006afa:	0211      	lsls	r1, r2, #8
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	68d2      	ldr	r2, [r2, #12]
 8006b00:	06d2      	lsls	r2, r2, #27
 8006b02:	4311      	orrs	r1, r2
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	6852      	ldr	r2, [r2, #4]
 8006b08:	3a01      	subs	r2, #1
 8006b0a:	0112      	lsls	r2, r2, #4
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	492d      	ldr	r1, [pc, #180]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	614b      	str	r3, [r1, #20]
 8006b14:	e02d      	b.n	8006b72 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d115      	bne.n	8006b48 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b1c:	4b29      	ldr	r3, [pc, #164]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006b1e:	695a      	ldr	r2, [r3, #20]
 8006b20:	4b2a      	ldr	r3, [pc, #168]	; (8006bcc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b22:	4013      	ands	r3, r2
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6892      	ldr	r2, [r2, #8]
 8006b28:	0211      	lsls	r1, r2, #8
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	6912      	ldr	r2, [r2, #16]
 8006b2e:	0852      	lsrs	r2, r2, #1
 8006b30:	3a01      	subs	r2, #1
 8006b32:	0552      	lsls	r2, r2, #21
 8006b34:	4311      	orrs	r1, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6852      	ldr	r2, [r2, #4]
 8006b3a:	3a01      	subs	r2, #1
 8006b3c:	0112      	lsls	r2, r2, #4
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	4920      	ldr	r1, [pc, #128]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	614b      	str	r3, [r1, #20]
 8006b46:	e014      	b.n	8006b72 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b48:	4b1e      	ldr	r3, [pc, #120]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006b4a:	695a      	ldr	r2, [r3, #20]
 8006b4c:	4b20      	ldr	r3, [pc, #128]	; (8006bd0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006b4e:	4013      	ands	r3, r2
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6892      	ldr	r2, [r2, #8]
 8006b54:	0211      	lsls	r1, r2, #8
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6952      	ldr	r2, [r2, #20]
 8006b5a:	0852      	lsrs	r2, r2, #1
 8006b5c:	3a01      	subs	r2, #1
 8006b5e:	0652      	lsls	r2, r2, #25
 8006b60:	4311      	orrs	r1, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6852      	ldr	r2, [r2, #4]
 8006b66:	3a01      	subs	r2, #1
 8006b68:	0112      	lsls	r2, r2, #4
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	4915      	ldr	r1, [pc, #84]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006b72:	4b14      	ldr	r3, [pc, #80]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a13      	ldr	r2, [pc, #76]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b7c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7e:	f7fb fd8b 	bl	8002698 <HAL_GetTick>
 8006b82:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b84:	e009      	b.n	8006b9a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b86:	f7fb fd87 	bl	8002698 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d902      	bls.n	8006b9a <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	73fb      	strb	r3, [r7, #15]
          break;
 8006b98:	e005      	b.n	8006ba6 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b9a:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0ef      	beq.n	8006b86 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d106      	bne.n	8006bba <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006bac:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006bae:	695a      	ldr	r2, [r3, #20]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	4903      	ldr	r1, [pc, #12]	; (8006bc4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40021000 	.word	0x40021000
 8006bc8:	07ff800f 	.word	0x07ff800f
 8006bcc:	ff9f800f 	.word	0xff9f800f
 8006bd0:	f9ff800f 	.word	0xf9ff800f

08006bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e049      	b.n	8006c7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d106      	bne.n	8006c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7fb fb68 	bl	80022d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	4619      	mov	r1, r3
 8006c12:	4610      	mov	r0, r2
 8006c14:	f000 faa6 	bl	8007164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d001      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e04f      	b.n	8006d3c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68da      	ldr	r2, [r3, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0201 	orr.w	r2, r2, #1
 8006cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a23      	ldr	r2, [pc, #140]	; (8006d48 <HAL_TIM_Base_Start_IT+0xc4>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d01d      	beq.n	8006cfa <HAL_TIM_Base_Start_IT+0x76>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc6:	d018      	beq.n	8006cfa <HAL_TIM_Base_Start_IT+0x76>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a1f      	ldr	r2, [pc, #124]	; (8006d4c <HAL_TIM_Base_Start_IT+0xc8>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d013      	beq.n	8006cfa <HAL_TIM_Base_Start_IT+0x76>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a1e      	ldr	r2, [pc, #120]	; (8006d50 <HAL_TIM_Base_Start_IT+0xcc>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d00e      	beq.n	8006cfa <HAL_TIM_Base_Start_IT+0x76>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a1c      	ldr	r2, [pc, #112]	; (8006d54 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d009      	beq.n	8006cfa <HAL_TIM_Base_Start_IT+0x76>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1b      	ldr	r2, [pc, #108]	; (8006d58 <HAL_TIM_Base_Start_IT+0xd4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d004      	beq.n	8006cfa <HAL_TIM_Base_Start_IT+0x76>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a19      	ldr	r2, [pc, #100]	; (8006d5c <HAL_TIM_Base_Start_IT+0xd8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d115      	bne.n	8006d26 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	4b17      	ldr	r3, [pc, #92]	; (8006d60 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d02:	4013      	ands	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b06      	cmp	r3, #6
 8006d0a:	d015      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0xb4>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d12:	d011      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0201 	orr.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d24:	e008      	b.n	8006d38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f042 0201 	orr.w	r2, r2, #1
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	e000      	b.n	8006d3a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	40012c00 	.word	0x40012c00
 8006d4c:	40000400 	.word	0x40000400
 8006d50:	40000800 	.word	0x40000800
 8006d54:	40000c00 	.word	0x40000c00
 8006d58:	40013400 	.word	0x40013400
 8006d5c:	40014000 	.word	0x40014000
 8006d60:	00010007 	.word	0x00010007

08006d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d122      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d11b      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f06f 0202 	mvn.w	r2, #2
 8006d90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	f003 0303 	and.w	r3, r3, #3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f9be 	bl	8007128 <HAL_TIM_IC_CaptureCallback>
 8006dac:	e005      	b.n	8006dba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f9b0 	bl	8007114 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f9c1 	bl	800713c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	f003 0304 	and.w	r3, r3, #4
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	d122      	bne.n	8006e14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b04      	cmp	r3, #4
 8006dda:	d11b      	bne.n	8006e14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f06f 0204 	mvn.w	r2, #4
 8006de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2202      	movs	r2, #2
 8006dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f994 	bl	8007128 <HAL_TIM_IC_CaptureCallback>
 8006e00:	e005      	b.n	8006e0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f986 	bl	8007114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f997 	bl	800713c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	f003 0308 	and.w	r3, r3, #8
 8006e1e:	2b08      	cmp	r3, #8
 8006e20:	d122      	bne.n	8006e68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f003 0308 	and.w	r3, r3, #8
 8006e2c:	2b08      	cmp	r3, #8
 8006e2e:	d11b      	bne.n	8006e68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f06f 0208 	mvn.w	r2, #8
 8006e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2204      	movs	r2, #4
 8006e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f96a 	bl	8007128 <HAL_TIM_IC_CaptureCallback>
 8006e54:	e005      	b.n	8006e62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f95c 	bl	8007114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f96d 	bl	800713c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f003 0310 	and.w	r3, r3, #16
 8006e72:	2b10      	cmp	r3, #16
 8006e74:	d122      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f003 0310 	and.w	r3, r3, #16
 8006e80:	2b10      	cmp	r3, #16
 8006e82:	d11b      	bne.n	8006ebc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f06f 0210 	mvn.w	r2, #16
 8006e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2208      	movs	r2, #8
 8006e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f940 	bl	8007128 <HAL_TIM_IC_CaptureCallback>
 8006ea8:	e005      	b.n	8006eb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f932 	bl	8007114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f943 	bl	800713c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d10e      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d107      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0201 	mvn.w	r2, #1
 8006ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7fb f8bc 	bl	8002060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef2:	2b80      	cmp	r3, #128	; 0x80
 8006ef4:	d10e      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f00:	2b80      	cmp	r3, #128	; 0x80
 8006f02:	d107      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 faee 	bl	80074f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f22:	d10e      	bne.n	8006f42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2e:	2b80      	cmp	r3, #128	; 0x80
 8006f30:	d107      	bne.n	8006f42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fae1 	bl	8007504 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4c:	2b40      	cmp	r3, #64	; 0x40
 8006f4e:	d10e      	bne.n	8006f6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5a:	2b40      	cmp	r3, #64	; 0x40
 8006f5c:	d107      	bne.n	8006f6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f8f1 	bl	8007150 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d10e      	bne.n	8006f9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f003 0320 	and.w	r3, r3, #32
 8006f86:	2b20      	cmp	r3, #32
 8006f88:	d107      	bne.n	8006f9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f06f 0220 	mvn.w	r2, #32
 8006f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 faa1 	bl	80074dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f9a:	bf00      	nop
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d101      	bne.n	8006fba <HAL_TIM_ConfigClockSource+0x18>
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	e0a8      	b.n	800710c <HAL_TIM_ConfigClockSource+0x16a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fd8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006fdc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fe4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b40      	cmp	r3, #64	; 0x40
 8006ff4:	d067      	beq.n	80070c6 <HAL_TIM_ConfigClockSource+0x124>
 8006ff6:	2b40      	cmp	r3, #64	; 0x40
 8006ff8:	d80b      	bhi.n	8007012 <HAL_TIM_ConfigClockSource+0x70>
 8006ffa:	2b10      	cmp	r3, #16
 8006ffc:	d073      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0x144>
 8006ffe:	2b10      	cmp	r3, #16
 8007000:	d802      	bhi.n	8007008 <HAL_TIM_ConfigClockSource+0x66>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d06f      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007006:	e078      	b.n	80070fa <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007008:	2b20      	cmp	r3, #32
 800700a:	d06c      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0x144>
 800700c:	2b30      	cmp	r3, #48	; 0x30
 800700e:	d06a      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8007010:	e073      	b.n	80070fa <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007012:	2b70      	cmp	r3, #112	; 0x70
 8007014:	d00d      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0x90>
 8007016:	2b70      	cmp	r3, #112	; 0x70
 8007018:	d804      	bhi.n	8007024 <HAL_TIM_ConfigClockSource+0x82>
 800701a:	2b50      	cmp	r3, #80	; 0x50
 800701c:	d033      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0xe4>
 800701e:	2b60      	cmp	r3, #96	; 0x60
 8007020:	d041      	beq.n	80070a6 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8007022:	e06a      	b.n	80070fa <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007028:	d066      	beq.n	80070f8 <HAL_TIM_ConfigClockSource+0x156>
 800702a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800702e:	d017      	beq.n	8007060 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8007030:	e063      	b.n	80070fa <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6818      	ldr	r0, [r3, #0]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	6899      	ldr	r1, [r3, #8]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	f000 f9a3 	bl	800738c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007054:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	609a      	str	r2, [r3, #8]
      break;
 800705e:	e04c      	b.n	80070fa <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6818      	ldr	r0, [r3, #0]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	6899      	ldr	r1, [r3, #8]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f000 f98c 	bl	800738c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689a      	ldr	r2, [r3, #8]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007082:	609a      	str	r2, [r3, #8]
      break;
 8007084:	e039      	b.n	80070fa <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	6859      	ldr	r1, [r3, #4]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	461a      	mov	r2, r3
 8007094:	f000 f900 	bl	8007298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2150      	movs	r1, #80	; 0x50
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 f959 	bl	8007356 <TIM_ITRx_SetConfig>
      break;
 80070a4:	e029      	b.n	80070fa <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6818      	ldr	r0, [r3, #0]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	6859      	ldr	r1, [r3, #4]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	461a      	mov	r2, r3
 80070b4:	f000 f91f 	bl	80072f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2160      	movs	r1, #96	; 0x60
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 f949 	bl	8007356 <TIM_ITRx_SetConfig>
      break;
 80070c4:	e019      	b.n	80070fa <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6818      	ldr	r0, [r3, #0]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	6859      	ldr	r1, [r3, #4]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	461a      	mov	r2, r3
 80070d4:	f000 f8e0 	bl	8007298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2140      	movs	r1, #64	; 0x40
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 f939 	bl	8007356 <TIM_ITRx_SetConfig>
      break;
 80070e4:	e009      	b.n	80070fa <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4619      	mov	r1, r3
 80070f0:	4610      	mov	r0, r2
 80070f2:	f000 f930 	bl	8007356 <TIM_ITRx_SetConfig>
        break;
 80070f6:	e000      	b.n	80070fa <HAL_TIM_ConfigClockSource+0x158>
      break;
 80070f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a40      	ldr	r2, [pc, #256]	; (8007278 <TIM_Base_SetConfig+0x114>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d013      	beq.n	80071a4 <TIM_Base_SetConfig+0x40>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007182:	d00f      	beq.n	80071a4 <TIM_Base_SetConfig+0x40>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a3d      	ldr	r2, [pc, #244]	; (800727c <TIM_Base_SetConfig+0x118>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00b      	beq.n	80071a4 <TIM_Base_SetConfig+0x40>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a3c      	ldr	r2, [pc, #240]	; (8007280 <TIM_Base_SetConfig+0x11c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d007      	beq.n	80071a4 <TIM_Base_SetConfig+0x40>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a3b      	ldr	r2, [pc, #236]	; (8007284 <TIM_Base_SetConfig+0x120>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d003      	beq.n	80071a4 <TIM_Base_SetConfig+0x40>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a3a      	ldr	r2, [pc, #232]	; (8007288 <TIM_Base_SetConfig+0x124>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d108      	bne.n	80071b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a2f      	ldr	r2, [pc, #188]	; (8007278 <TIM_Base_SetConfig+0x114>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d01f      	beq.n	80071fe <TIM_Base_SetConfig+0x9a>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c4:	d01b      	beq.n	80071fe <TIM_Base_SetConfig+0x9a>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a2c      	ldr	r2, [pc, #176]	; (800727c <TIM_Base_SetConfig+0x118>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d017      	beq.n	80071fe <TIM_Base_SetConfig+0x9a>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a2b      	ldr	r2, [pc, #172]	; (8007280 <TIM_Base_SetConfig+0x11c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d013      	beq.n	80071fe <TIM_Base_SetConfig+0x9a>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a2a      	ldr	r2, [pc, #168]	; (8007284 <TIM_Base_SetConfig+0x120>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d00f      	beq.n	80071fe <TIM_Base_SetConfig+0x9a>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a29      	ldr	r2, [pc, #164]	; (8007288 <TIM_Base_SetConfig+0x124>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d00b      	beq.n	80071fe <TIM_Base_SetConfig+0x9a>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a28      	ldr	r2, [pc, #160]	; (800728c <TIM_Base_SetConfig+0x128>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d007      	beq.n	80071fe <TIM_Base_SetConfig+0x9a>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a27      	ldr	r2, [pc, #156]	; (8007290 <TIM_Base_SetConfig+0x12c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d003      	beq.n	80071fe <TIM_Base_SetConfig+0x9a>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a26      	ldr	r2, [pc, #152]	; (8007294 <TIM_Base_SetConfig+0x130>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d108      	bne.n	8007210 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	4313      	orrs	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	4313      	orrs	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a10      	ldr	r2, [pc, #64]	; (8007278 <TIM_Base_SetConfig+0x114>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d00f      	beq.n	800725c <TIM_Base_SetConfig+0xf8>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a12      	ldr	r2, [pc, #72]	; (8007288 <TIM_Base_SetConfig+0x124>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d00b      	beq.n	800725c <TIM_Base_SetConfig+0xf8>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a11      	ldr	r2, [pc, #68]	; (800728c <TIM_Base_SetConfig+0x128>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d007      	beq.n	800725c <TIM_Base_SetConfig+0xf8>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a10      	ldr	r2, [pc, #64]	; (8007290 <TIM_Base_SetConfig+0x12c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d003      	beq.n	800725c <TIM_Base_SetConfig+0xf8>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a0f      	ldr	r2, [pc, #60]	; (8007294 <TIM_Base_SetConfig+0x130>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d103      	bne.n	8007264 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	691a      	ldr	r2, [r3, #16]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	615a      	str	r2, [r3, #20]
}
 800726a:	bf00      	nop
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	40012c00 	.word	0x40012c00
 800727c:	40000400 	.word	0x40000400
 8007280:	40000800 	.word	0x40000800
 8007284:	40000c00 	.word	0x40000c00
 8007288:	40013400 	.word	0x40013400
 800728c:	40014000 	.word	0x40014000
 8007290:	40014400 	.word	0x40014400
 8007294:	40014800 	.word	0x40014800

08007298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007298:	b480      	push	{r7}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	f023 0201 	bic.w	r2, r3, #1
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	011b      	lsls	r3, r3, #4
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f023 030a 	bic.w	r3, r3, #10
 80072d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4313      	orrs	r3, r2
 80072dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	621a      	str	r2, [r3, #32]
}
 80072ea:	bf00      	nop
 80072ec:	371c      	adds	r7, #28
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b087      	sub	sp, #28
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	60f8      	str	r0, [r7, #12]
 80072fe:	60b9      	str	r1, [r7, #8]
 8007300:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	f023 0210 	bic.w	r2, r3, #16
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007320:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	031b      	lsls	r3, r3, #12
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	4313      	orrs	r3, r2
 800732a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007332:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	011b      	lsls	r3, r3, #4
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	4313      	orrs	r3, r2
 800733c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	621a      	str	r2, [r3, #32]
}
 800734a:	bf00      	nop
 800734c:	371c      	adds	r7, #28
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007356:	b480      	push	{r7}
 8007358:	b085      	sub	sp, #20
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800736c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4313      	orrs	r3, r2
 8007374:	f043 0307 	orr.w	r3, r3, #7
 8007378:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	609a      	str	r2, [r3, #8]
}
 8007380:	bf00      	nop
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	021a      	lsls	r2, r3, #8
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	431a      	orrs	r2, r3
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	609a      	str	r2, [r3, #8]
}
 80073c0:	bf00      	nop
 80073c2:	371c      	adds	r7, #28
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d101      	bne.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073e0:	2302      	movs	r3, #2
 80073e2:	e068      	b.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a2e      	ldr	r2, [pc, #184]	; (80074c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d004      	beq.n	8007418 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a2d      	ldr	r2, [pc, #180]	; (80074c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d108      	bne.n	800742a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800741e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	4313      	orrs	r3, r2
 8007428:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007430:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	4313      	orrs	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a1e      	ldr	r2, [pc, #120]	; (80074c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d01d      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007456:	d018      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a1b      	ldr	r2, [pc, #108]	; (80074cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d013      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a1a      	ldr	r2, [pc, #104]	; (80074d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d00e      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a18      	ldr	r2, [pc, #96]	; (80074d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d009      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a13      	ldr	r2, [pc, #76]	; (80074c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d004      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a14      	ldr	r2, [pc, #80]	; (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d10c      	bne.n	80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007490:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	4313      	orrs	r3, r2
 800749a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	40012c00 	.word	0x40012c00
 80074c8:	40013400 	.word	0x40013400
 80074cc:	40000400 	.word	0x40000400
 80074d0:	40000800 	.word	0x40000800
 80074d4:	40000c00 	.word	0x40000c00
 80074d8:	40014000 	.word	0x40014000

080074dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e042      	b.n	80075b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007530:	2b00      	cmp	r3, #0
 8007532:	d106      	bne.n	8007542 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7fa fef9 	bl	8002334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2224      	movs	r2, #36	; 0x24
 8007546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0201 	bic.w	r2, r2, #1
 8007558:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f994 	bl	8007888 <UART_SetConfig>
 8007560:	4603      	mov	r3, r0
 8007562:	2b01      	cmp	r3, #1
 8007564:	d101      	bne.n	800756a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e022      	b.n	80075b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fc5a 	bl	8007e2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689a      	ldr	r2, [r3, #8]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0201 	orr.w	r2, r2, #1
 80075a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fce1 	bl	8007f70 <UART_CheckIdleState>
 80075ae:	4603      	mov	r3, r0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08a      	sub	sp, #40	; 0x28
 80075bc:	af02      	add	r7, sp, #8
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	603b      	str	r3, [r7, #0]
 80075c4:	4613      	mov	r3, r2
 80075c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	f040 8084 	bne.w	80076dc <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d002      	beq.n	80075e0 <HAL_UART_Transmit+0x28>
 80075da:	88fb      	ldrh	r3, [r7, #6]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e07c      	b.n	80076de <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d101      	bne.n	80075f2 <HAL_UART_Transmit+0x3a>
 80075ee:	2302      	movs	r3, #2
 80075f0:	e075      	b.n	80076de <HAL_UART_Transmit+0x126>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2221      	movs	r2, #33	; 0x21
 8007606:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800760a:	f7fb f845 	bl	8002698 <HAL_GetTick>
 800760e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	88fa      	ldrh	r2, [r7, #6]
 8007614:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	88fa      	ldrh	r2, [r7, #6]
 800761c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007628:	d108      	bne.n	800763c <HAL_UART_Transmit+0x84>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d104      	bne.n	800763c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007632:	2300      	movs	r3, #0
 8007634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	61bb      	str	r3, [r7, #24]
 800763a:	e003      	b.n	8007644 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007640:	2300      	movs	r3, #0
 8007642:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800764c:	e02d      	b.n	80076aa <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	2200      	movs	r2, #0
 8007656:	2180      	movs	r1, #128	; 0x80
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 fcd1 	bl	8008000 <UART_WaitOnFlagUntilTimeout>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e03a      	b.n	80076de <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10b      	bne.n	8007686 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	881a      	ldrh	r2, [r3, #0]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800767a:	b292      	uxth	r2, r2
 800767c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	3302      	adds	r3, #2
 8007682:	61bb      	str	r3, [r7, #24]
 8007684:	e008      	b.n	8007698 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	781a      	ldrb	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	b292      	uxth	r2, r2
 8007690:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	3301      	adds	r3, #1
 8007696:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800769e:	b29b      	uxth	r3, r3
 80076a0:	3b01      	subs	r3, #1
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1cb      	bne.n	800764e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2200      	movs	r2, #0
 80076be:	2140      	movs	r1, #64	; 0x40
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 fc9d 	bl	8008000 <UART_WaitOnFlagUntilTimeout>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e006      	b.n	80076de <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	e000      	b.n	80076de <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80076dc:	2302      	movs	r3, #2
  }
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3720      	adds	r7, #32
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b08a      	sub	sp, #40	; 0x28
 80076ea:	af02      	add	r7, sp, #8
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	603b      	str	r3, [r7, #0]
 80076f2:	4613      	mov	r3, r2
 80076f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076fc:	2b20      	cmp	r3, #32
 80076fe:	f040 80be 	bne.w	800787e <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <HAL_UART_Receive+0x28>
 8007708:	88fb      	ldrh	r3, [r7, #6]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e0b6      	b.n	8007880 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007718:	2b01      	cmp	r3, #1
 800771a:	d101      	bne.n	8007720 <HAL_UART_Receive+0x3a>
 800771c:	2302      	movs	r3, #2
 800771e:	e0af      	b.n	8007880 <HAL_UART_Receive+0x19a>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2222      	movs	r2, #34	; 0x22
 8007734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007738:	f7fa ffae 	bl	8002698 <HAL_GetTick>
 800773c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	88fa      	ldrh	r2, [r7, #6]
 8007742:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	88fa      	ldrh	r2, [r7, #6]
 800774a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007756:	d10e      	bne.n	8007776 <HAL_UART_Receive+0x90>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d105      	bne.n	800776c <HAL_UART_Receive+0x86>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007766:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800776a:	e02d      	b.n	80077c8 <HAL_UART_Receive+0xe2>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	22ff      	movs	r2, #255	; 0xff
 8007770:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007774:	e028      	b.n	80077c8 <HAL_UART_Receive+0xe2>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10d      	bne.n	800779a <HAL_UART_Receive+0xb4>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d104      	bne.n	8007790 <HAL_UART_Receive+0xaa>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	22ff      	movs	r2, #255	; 0xff
 800778a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800778e:	e01b      	b.n	80077c8 <HAL_UART_Receive+0xe2>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	227f      	movs	r2, #127	; 0x7f
 8007794:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007798:	e016      	b.n	80077c8 <HAL_UART_Receive+0xe2>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077a2:	d10d      	bne.n	80077c0 <HAL_UART_Receive+0xda>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d104      	bne.n	80077b6 <HAL_UART_Receive+0xd0>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	227f      	movs	r2, #127	; 0x7f
 80077b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077b4:	e008      	b.n	80077c8 <HAL_UART_Receive+0xe2>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	223f      	movs	r2, #63	; 0x3f
 80077ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80077be:	e003      	b.n	80077c8 <HAL_UART_Receive+0xe2>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80077ce:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d8:	d108      	bne.n	80077ec <HAL_UART_Receive+0x106>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d104      	bne.n	80077ec <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	61bb      	str	r3, [r7, #24]
 80077ea:	e003      	b.n	80077f4 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077f0:	2300      	movs	r3, #0
 80077f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80077fc:	e033      	b.n	8007866 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2200      	movs	r2, #0
 8007806:	2120      	movs	r1, #32
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 fbf9 	bl	8008000 <UART_WaitOnFlagUntilTimeout>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e033      	b.n	8007880 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10c      	bne.n	8007838 <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007824:	b29a      	uxth	r2, r3
 8007826:	8a7b      	ldrh	r3, [r7, #18]
 8007828:	4013      	ands	r3, r2
 800782a:	b29a      	uxth	r2, r3
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	3302      	adds	r3, #2
 8007834:	61bb      	str	r3, [r7, #24]
 8007836:	e00d      	b.n	8007854 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800783e:	b29b      	uxth	r3, r3
 8007840:	b2da      	uxtb	r2, r3
 8007842:	8a7b      	ldrh	r3, [r7, #18]
 8007844:	b2db      	uxtb	r3, r3
 8007846:	4013      	ands	r3, r2
 8007848:	b2da      	uxtb	r2, r3
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	3301      	adds	r3, #1
 8007852:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b01      	subs	r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800786c:	b29b      	uxth	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1c5      	bne.n	80077fe <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2220      	movs	r2, #32
 8007876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	e000      	b.n	8007880 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800787e:	2302      	movs	r3, #2
  }
}
 8007880:	4618      	mov	r0, r3
 8007882:	3720      	adds	r7, #32
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007888:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800788c:	b088      	sub	sp, #32
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	689a      	ldr	r2, [r3, #8]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	431a      	orrs	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	431a      	orrs	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4bb1      	ldr	r3, [pc, #708]	; (8007b84 <UART_SetConfig+0x2fc>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	6812      	ldr	r2, [r2, #0]
 80078c6:	69f9      	ldr	r1, [r7, #28]
 80078c8:	430b      	orrs	r3, r1
 80078ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68da      	ldr	r2, [r3, #12]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4aa6      	ldr	r2, [pc, #664]	; (8007b88 <UART_SetConfig+0x300>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d004      	beq.n	80078fc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	69fa      	ldr	r2, [r7, #28]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007906:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	6812      	ldr	r2, [r2, #0]
 800790e:	69f9      	ldr	r1, [r7, #28]
 8007910:	430b      	orrs	r3, r1
 8007912:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791a:	f023 010f 	bic.w	r1, r3, #15
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	430a      	orrs	r2, r1
 8007928:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a97      	ldr	r2, [pc, #604]	; (8007b8c <UART_SetConfig+0x304>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d121      	bne.n	8007978 <UART_SetConfig+0xf0>
 8007934:	4b96      	ldr	r3, [pc, #600]	; (8007b90 <UART_SetConfig+0x308>)
 8007936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800793a:	f003 0303 	and.w	r3, r3, #3
 800793e:	2b03      	cmp	r3, #3
 8007940:	d816      	bhi.n	8007970 <UART_SetConfig+0xe8>
 8007942:	a201      	add	r2, pc, #4	; (adr r2, 8007948 <UART_SetConfig+0xc0>)
 8007944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007948:	08007959 	.word	0x08007959
 800794c:	08007965 	.word	0x08007965
 8007950:	0800795f 	.word	0x0800795f
 8007954:	0800796b 	.word	0x0800796b
 8007958:	2301      	movs	r3, #1
 800795a:	76fb      	strb	r3, [r7, #27]
 800795c:	e0e8      	b.n	8007b30 <UART_SetConfig+0x2a8>
 800795e:	2302      	movs	r3, #2
 8007960:	76fb      	strb	r3, [r7, #27]
 8007962:	e0e5      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007964:	2304      	movs	r3, #4
 8007966:	76fb      	strb	r3, [r7, #27]
 8007968:	e0e2      	b.n	8007b30 <UART_SetConfig+0x2a8>
 800796a:	2308      	movs	r3, #8
 800796c:	76fb      	strb	r3, [r7, #27]
 800796e:	e0df      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007970:	2310      	movs	r3, #16
 8007972:	76fb      	strb	r3, [r7, #27]
 8007974:	bf00      	nop
 8007976:	e0db      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a85      	ldr	r2, [pc, #532]	; (8007b94 <UART_SetConfig+0x30c>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d134      	bne.n	80079ec <UART_SetConfig+0x164>
 8007982:	4b83      	ldr	r3, [pc, #524]	; (8007b90 <UART_SetConfig+0x308>)
 8007984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007988:	f003 030c 	and.w	r3, r3, #12
 800798c:	2b0c      	cmp	r3, #12
 800798e:	d829      	bhi.n	80079e4 <UART_SetConfig+0x15c>
 8007990:	a201      	add	r2, pc, #4	; (adr r2, 8007998 <UART_SetConfig+0x110>)
 8007992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007996:	bf00      	nop
 8007998:	080079cd 	.word	0x080079cd
 800799c:	080079e5 	.word	0x080079e5
 80079a0:	080079e5 	.word	0x080079e5
 80079a4:	080079e5 	.word	0x080079e5
 80079a8:	080079d9 	.word	0x080079d9
 80079ac:	080079e5 	.word	0x080079e5
 80079b0:	080079e5 	.word	0x080079e5
 80079b4:	080079e5 	.word	0x080079e5
 80079b8:	080079d3 	.word	0x080079d3
 80079bc:	080079e5 	.word	0x080079e5
 80079c0:	080079e5 	.word	0x080079e5
 80079c4:	080079e5 	.word	0x080079e5
 80079c8:	080079df 	.word	0x080079df
 80079cc:	2300      	movs	r3, #0
 80079ce:	76fb      	strb	r3, [r7, #27]
 80079d0:	e0ae      	b.n	8007b30 <UART_SetConfig+0x2a8>
 80079d2:	2302      	movs	r3, #2
 80079d4:	76fb      	strb	r3, [r7, #27]
 80079d6:	e0ab      	b.n	8007b30 <UART_SetConfig+0x2a8>
 80079d8:	2304      	movs	r3, #4
 80079da:	76fb      	strb	r3, [r7, #27]
 80079dc:	e0a8      	b.n	8007b30 <UART_SetConfig+0x2a8>
 80079de:	2308      	movs	r3, #8
 80079e0:	76fb      	strb	r3, [r7, #27]
 80079e2:	e0a5      	b.n	8007b30 <UART_SetConfig+0x2a8>
 80079e4:	2310      	movs	r3, #16
 80079e6:	76fb      	strb	r3, [r7, #27]
 80079e8:	bf00      	nop
 80079ea:	e0a1      	b.n	8007b30 <UART_SetConfig+0x2a8>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a69      	ldr	r2, [pc, #420]	; (8007b98 <UART_SetConfig+0x310>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d120      	bne.n	8007a38 <UART_SetConfig+0x1b0>
 80079f6:	4b66      	ldr	r3, [pc, #408]	; (8007b90 <UART_SetConfig+0x308>)
 80079f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a00:	2b10      	cmp	r3, #16
 8007a02:	d00f      	beq.n	8007a24 <UART_SetConfig+0x19c>
 8007a04:	2b10      	cmp	r3, #16
 8007a06:	d802      	bhi.n	8007a0e <UART_SetConfig+0x186>
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d005      	beq.n	8007a18 <UART_SetConfig+0x190>
 8007a0c:	e010      	b.n	8007a30 <UART_SetConfig+0x1a8>
 8007a0e:	2b20      	cmp	r3, #32
 8007a10:	d005      	beq.n	8007a1e <UART_SetConfig+0x196>
 8007a12:	2b30      	cmp	r3, #48	; 0x30
 8007a14:	d009      	beq.n	8007a2a <UART_SetConfig+0x1a2>
 8007a16:	e00b      	b.n	8007a30 <UART_SetConfig+0x1a8>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	76fb      	strb	r3, [r7, #27]
 8007a1c:	e088      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	76fb      	strb	r3, [r7, #27]
 8007a22:	e085      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007a24:	2304      	movs	r3, #4
 8007a26:	76fb      	strb	r3, [r7, #27]
 8007a28:	e082      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007a2a:	2308      	movs	r3, #8
 8007a2c:	76fb      	strb	r3, [r7, #27]
 8007a2e:	e07f      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007a30:	2310      	movs	r3, #16
 8007a32:	76fb      	strb	r3, [r7, #27]
 8007a34:	bf00      	nop
 8007a36:	e07b      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a57      	ldr	r2, [pc, #348]	; (8007b9c <UART_SetConfig+0x314>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d120      	bne.n	8007a84 <UART_SetConfig+0x1fc>
 8007a42:	4b53      	ldr	r3, [pc, #332]	; (8007b90 <UART_SetConfig+0x308>)
 8007a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a4c:	2b40      	cmp	r3, #64	; 0x40
 8007a4e:	d00f      	beq.n	8007a70 <UART_SetConfig+0x1e8>
 8007a50:	2b40      	cmp	r3, #64	; 0x40
 8007a52:	d802      	bhi.n	8007a5a <UART_SetConfig+0x1d2>
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d005      	beq.n	8007a64 <UART_SetConfig+0x1dc>
 8007a58:	e010      	b.n	8007a7c <UART_SetConfig+0x1f4>
 8007a5a:	2b80      	cmp	r3, #128	; 0x80
 8007a5c:	d005      	beq.n	8007a6a <UART_SetConfig+0x1e2>
 8007a5e:	2bc0      	cmp	r3, #192	; 0xc0
 8007a60:	d009      	beq.n	8007a76 <UART_SetConfig+0x1ee>
 8007a62:	e00b      	b.n	8007a7c <UART_SetConfig+0x1f4>
 8007a64:	2300      	movs	r3, #0
 8007a66:	76fb      	strb	r3, [r7, #27]
 8007a68:	e062      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	76fb      	strb	r3, [r7, #27]
 8007a6e:	e05f      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007a70:	2304      	movs	r3, #4
 8007a72:	76fb      	strb	r3, [r7, #27]
 8007a74:	e05c      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007a76:	2308      	movs	r3, #8
 8007a78:	76fb      	strb	r3, [r7, #27]
 8007a7a:	e059      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007a7c:	2310      	movs	r3, #16
 8007a7e:	76fb      	strb	r3, [r7, #27]
 8007a80:	bf00      	nop
 8007a82:	e055      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a45      	ldr	r2, [pc, #276]	; (8007ba0 <UART_SetConfig+0x318>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d124      	bne.n	8007ad8 <UART_SetConfig+0x250>
 8007a8e:	4b40      	ldr	r3, [pc, #256]	; (8007b90 <UART_SetConfig+0x308>)
 8007a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a9c:	d012      	beq.n	8007ac4 <UART_SetConfig+0x23c>
 8007a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aa2:	d802      	bhi.n	8007aaa <UART_SetConfig+0x222>
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d007      	beq.n	8007ab8 <UART_SetConfig+0x230>
 8007aa8:	e012      	b.n	8007ad0 <UART_SetConfig+0x248>
 8007aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aae:	d006      	beq.n	8007abe <UART_SetConfig+0x236>
 8007ab0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ab4:	d009      	beq.n	8007aca <UART_SetConfig+0x242>
 8007ab6:	e00b      	b.n	8007ad0 <UART_SetConfig+0x248>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	76fb      	strb	r3, [r7, #27]
 8007abc:	e038      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007abe:	2302      	movs	r3, #2
 8007ac0:	76fb      	strb	r3, [r7, #27]
 8007ac2:	e035      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007ac4:	2304      	movs	r3, #4
 8007ac6:	76fb      	strb	r3, [r7, #27]
 8007ac8:	e032      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007aca:	2308      	movs	r3, #8
 8007acc:	76fb      	strb	r3, [r7, #27]
 8007ace:	e02f      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007ad0:	2310      	movs	r3, #16
 8007ad2:	76fb      	strb	r3, [r7, #27]
 8007ad4:	bf00      	nop
 8007ad6:	e02b      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a2a      	ldr	r2, [pc, #168]	; (8007b88 <UART_SetConfig+0x300>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d124      	bne.n	8007b2c <UART_SetConfig+0x2a4>
 8007ae2:	4b2b      	ldr	r3, [pc, #172]	; (8007b90 <UART_SetConfig+0x308>)
 8007ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007af0:	d012      	beq.n	8007b18 <UART_SetConfig+0x290>
 8007af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007af6:	d802      	bhi.n	8007afe <UART_SetConfig+0x276>
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d007      	beq.n	8007b0c <UART_SetConfig+0x284>
 8007afc:	e012      	b.n	8007b24 <UART_SetConfig+0x29c>
 8007afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b02:	d006      	beq.n	8007b12 <UART_SetConfig+0x28a>
 8007b04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b08:	d009      	beq.n	8007b1e <UART_SetConfig+0x296>
 8007b0a:	e00b      	b.n	8007b24 <UART_SetConfig+0x29c>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	76fb      	strb	r3, [r7, #27]
 8007b10:	e00e      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007b12:	2302      	movs	r3, #2
 8007b14:	76fb      	strb	r3, [r7, #27]
 8007b16:	e00b      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007b18:	2304      	movs	r3, #4
 8007b1a:	76fb      	strb	r3, [r7, #27]
 8007b1c:	e008      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007b1e:	2308      	movs	r3, #8
 8007b20:	76fb      	strb	r3, [r7, #27]
 8007b22:	e005      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007b24:	2310      	movs	r3, #16
 8007b26:	76fb      	strb	r3, [r7, #27]
 8007b28:	bf00      	nop
 8007b2a:	e001      	b.n	8007b30 <UART_SetConfig+0x2a8>
 8007b2c:	2310      	movs	r3, #16
 8007b2e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a14      	ldr	r2, [pc, #80]	; (8007b88 <UART_SetConfig+0x300>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	f040 80a1 	bne.w	8007c7e <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b3c:	7efb      	ldrb	r3, [r7, #27]
 8007b3e:	2b08      	cmp	r3, #8
 8007b40:	d836      	bhi.n	8007bb0 <UART_SetConfig+0x328>
 8007b42:	a201      	add	r2, pc, #4	; (adr r2, 8007b48 <UART_SetConfig+0x2c0>)
 8007b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b48:	08007b6d 	.word	0x08007b6d
 8007b4c:	08007bb1 	.word	0x08007bb1
 8007b50:	08007b75 	.word	0x08007b75
 8007b54:	08007bb1 	.word	0x08007bb1
 8007b58:	08007b7b 	.word	0x08007b7b
 8007b5c:	08007bb1 	.word	0x08007bb1
 8007b60:	08007bb1 	.word	0x08007bb1
 8007b64:	08007bb1 	.word	0x08007bb1
 8007b68:	08007ba9 	.word	0x08007ba9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b6c:	f7fe fa0a 	bl	8005f84 <HAL_RCC_GetPCLK1Freq>
 8007b70:	6178      	str	r0, [r7, #20]
        break;
 8007b72:	e022      	b.n	8007bba <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b74:	4b0b      	ldr	r3, [pc, #44]	; (8007ba4 <UART_SetConfig+0x31c>)
 8007b76:	617b      	str	r3, [r7, #20]
        break;
 8007b78:	e01f      	b.n	8007bba <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b7a:	f7fe f96d 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8007b7e:	6178      	str	r0, [r7, #20]
        break;
 8007b80:	e01b      	b.n	8007bba <UART_SetConfig+0x332>
 8007b82:	bf00      	nop
 8007b84:	cfff69f3 	.word	0xcfff69f3
 8007b88:	40008000 	.word	0x40008000
 8007b8c:	40013800 	.word	0x40013800
 8007b90:	40021000 	.word	0x40021000
 8007b94:	40004400 	.word	0x40004400
 8007b98:	40004800 	.word	0x40004800
 8007b9c:	40004c00 	.word	0x40004c00
 8007ba0:	40005000 	.word	0x40005000
 8007ba4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ba8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bac:	617b      	str	r3, [r7, #20]
        break;
 8007bae:	e004      	b.n	8007bba <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	76bb      	strb	r3, [r7, #26]
        break;
 8007bb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 811d 	beq.w	8007dfc <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	4a97      	ldr	r2, [pc, #604]	; (8007e24 <UART_SetConfig+0x59c>)
 8007bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bd4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685a      	ldr	r2, [r3, #4]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	4413      	add	r3, r2
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d305      	bcc.n	8007bf2 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d902      	bls.n	8007bf8 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	76bb      	strb	r3, [r7, #26]
 8007bf6:	e101      	b.n	8007dfc <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f04f 0100 	mov.w	r1, #0
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	4a87      	ldr	r2, [pc, #540]	; (8007e24 <UART_SetConfig+0x59c>)
 8007c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	f04f 0400 	mov.w	r4, #0
 8007c10:	461a      	mov	r2, r3
 8007c12:	4623      	mov	r3, r4
 8007c14:	f7f9 f828 	bl	8000c68 <__aeabi_uldivmod>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4622      	mov	r2, r4
 8007c20:	f04f 0300 	mov.w	r3, #0
 8007c24:	f04f 0400 	mov.w	r4, #0
 8007c28:	0214      	lsls	r4, r2, #8
 8007c2a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007c2e:	020b      	lsls	r3, r1, #8
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	6852      	ldr	r2, [r2, #4]
 8007c34:	0852      	lsrs	r2, r2, #1
 8007c36:	4611      	mov	r1, r2
 8007c38:	f04f 0200 	mov.w	r2, #0
 8007c3c:	eb13 0b01 	adds.w	fp, r3, r1
 8007c40:	eb44 0c02 	adc.w	ip, r4, r2
 8007c44:	4658      	mov	r0, fp
 8007c46:	4661      	mov	r1, ip
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f04f 0400 	mov.w	r4, #0
 8007c50:	461a      	mov	r2, r3
 8007c52:	4623      	mov	r3, r4
 8007c54:	f7f9 f808 	bl	8000c68 <__aeabi_uldivmod>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c64:	d308      	bcc.n	8007c78 <UART_SetConfig+0x3f0>
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c6c:	d204      	bcs.n	8007c78 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	60da      	str	r2, [r3, #12]
 8007c76:	e0c1      	b.n	8007dfc <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	76bb      	strb	r3, [r7, #26]
 8007c7c:	e0be      	b.n	8007dfc <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c86:	d164      	bne.n	8007d52 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8007c88:	7efb      	ldrb	r3, [r7, #27]
 8007c8a:	2b08      	cmp	r3, #8
 8007c8c:	d827      	bhi.n	8007cde <UART_SetConfig+0x456>
 8007c8e:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <UART_SetConfig+0x40c>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007cb9 	.word	0x08007cb9
 8007c98:	08007cc1 	.word	0x08007cc1
 8007c9c:	08007cc9 	.word	0x08007cc9
 8007ca0:	08007cdf 	.word	0x08007cdf
 8007ca4:	08007ccf 	.word	0x08007ccf
 8007ca8:	08007cdf 	.word	0x08007cdf
 8007cac:	08007cdf 	.word	0x08007cdf
 8007cb0:	08007cdf 	.word	0x08007cdf
 8007cb4:	08007cd7 	.word	0x08007cd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cb8:	f7fe f964 	bl	8005f84 <HAL_RCC_GetPCLK1Freq>
 8007cbc:	6178      	str	r0, [r7, #20]
        break;
 8007cbe:	e013      	b.n	8007ce8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cc0:	f7fe f976 	bl	8005fb0 <HAL_RCC_GetPCLK2Freq>
 8007cc4:	6178      	str	r0, [r7, #20]
        break;
 8007cc6:	e00f      	b.n	8007ce8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cc8:	4b57      	ldr	r3, [pc, #348]	; (8007e28 <UART_SetConfig+0x5a0>)
 8007cca:	617b      	str	r3, [r7, #20]
        break;
 8007ccc:	e00c      	b.n	8007ce8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cce:	f7fe f8c3 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8007cd2:	6178      	str	r0, [r7, #20]
        break;
 8007cd4:	e008      	b.n	8007ce8 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cda:	617b      	str	r3, [r7, #20]
        break;
 8007cdc:	e004      	b.n	8007ce8 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	76bb      	strb	r3, [r7, #26]
        break;
 8007ce6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 8086 	beq.w	8007dfc <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf4:	4a4b      	ldr	r2, [pc, #300]	; (8007e24 <UART_SetConfig+0x59c>)
 8007cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d02:	005a      	lsls	r2, r3, #1
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	085b      	lsrs	r3, r3, #1
 8007d0a:	441a      	add	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	2b0f      	cmp	r3, #15
 8007d1c:	d916      	bls.n	8007d4c <UART_SetConfig+0x4c4>
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d24:	d212      	bcs.n	8007d4c <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	f023 030f 	bic.w	r3, r3, #15
 8007d2e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	085b      	lsrs	r3, r3, #1
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	f003 0307 	and.w	r3, r3, #7
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	89fb      	ldrh	r3, [r7, #14]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	89fa      	ldrh	r2, [r7, #14]
 8007d48:	60da      	str	r2, [r3, #12]
 8007d4a:	e057      	b.n	8007dfc <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	76bb      	strb	r3, [r7, #26]
 8007d50:	e054      	b.n	8007dfc <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d52:	7efb      	ldrb	r3, [r7, #27]
 8007d54:	2b08      	cmp	r3, #8
 8007d56:	d828      	bhi.n	8007daa <UART_SetConfig+0x522>
 8007d58:	a201      	add	r2, pc, #4	; (adr r2, 8007d60 <UART_SetConfig+0x4d8>)
 8007d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5e:	bf00      	nop
 8007d60:	08007d85 	.word	0x08007d85
 8007d64:	08007d8d 	.word	0x08007d8d
 8007d68:	08007d95 	.word	0x08007d95
 8007d6c:	08007dab 	.word	0x08007dab
 8007d70:	08007d9b 	.word	0x08007d9b
 8007d74:	08007dab 	.word	0x08007dab
 8007d78:	08007dab 	.word	0x08007dab
 8007d7c:	08007dab 	.word	0x08007dab
 8007d80:	08007da3 	.word	0x08007da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d84:	f7fe f8fe 	bl	8005f84 <HAL_RCC_GetPCLK1Freq>
 8007d88:	6178      	str	r0, [r7, #20]
        break;
 8007d8a:	e013      	b.n	8007db4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d8c:	f7fe f910 	bl	8005fb0 <HAL_RCC_GetPCLK2Freq>
 8007d90:	6178      	str	r0, [r7, #20]
        break;
 8007d92:	e00f      	b.n	8007db4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d94:	4b24      	ldr	r3, [pc, #144]	; (8007e28 <UART_SetConfig+0x5a0>)
 8007d96:	617b      	str	r3, [r7, #20]
        break;
 8007d98:	e00c      	b.n	8007db4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d9a:	f7fe f85d 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8007d9e:	6178      	str	r0, [r7, #20]
        break;
 8007da0:	e008      	b.n	8007db4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007da6:	617b      	str	r3, [r7, #20]
        break;
 8007da8:	e004      	b.n	8007db4 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	76bb      	strb	r3, [r7, #26]
        break;
 8007db2:	bf00      	nop
    }

    if (pclk != 0U)
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d020      	beq.n	8007dfc <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbe:	4a19      	ldr	r2, [pc, #100]	; (8007e24 <UART_SetConfig+0x59c>)
 8007dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	fbb3 f2f2 	udiv	r2, r3, r2
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	085b      	lsrs	r3, r3, #1
 8007dd2:	441a      	add	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	2b0f      	cmp	r3, #15
 8007de4:	d908      	bls.n	8007df8 <UART_SetConfig+0x570>
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dec:	d204      	bcs.n	8007df8 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	60da      	str	r2, [r3, #12]
 8007df6:	e001      	b.n	8007dfc <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007e18:	7ebb      	ldrb	r3, [r7, #26]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3720      	adds	r7, #32
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007e24:	0800cffc 	.word	0x0800cffc
 8007e28:	00f42400 	.word	0x00f42400

08007e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00a      	beq.n	8007e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00a      	beq.n	8007e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	430a      	orrs	r2, r1
 8007e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7c:	f003 0304 	and.w	r3, r3, #4
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00a      	beq.n	8007e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9e:	f003 0308 	and.w	r3, r3, #8
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00a      	beq.n	8007ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec0:	f003 0310 	and.w	r3, r3, #16
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00a      	beq.n	8007ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee2:	f003 0320 	and.w	r3, r3, #32
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	430a      	orrs	r2, r1
 8007efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d01a      	beq.n	8007f42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f2a:	d10a      	bne.n	8007f42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00a      	beq.n	8007f64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	605a      	str	r2, [r3, #4]
  }
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af02      	add	r7, sp, #8
 8007f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007f80:	f7fa fb8a 	bl	8002698 <HAL_GetTick>
 8007f84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0308 	and.w	r3, r3, #8
 8007f90:	2b08      	cmp	r3, #8
 8007f92:	d10e      	bne.n	8007fb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f82c 	bl	8008000 <UART_WaitOnFlagUntilTimeout>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e022      	b.n	8007ff8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b04      	cmp	r3, #4
 8007fbe:	d10e      	bne.n	8007fde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f816 	bl	8008000 <UART_WaitOnFlagUntilTimeout>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e00c      	b.n	8007ff8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2220      	movs	r2, #32
 8007fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	4613      	mov	r3, r2
 800800e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008010:	e062      	b.n	80080d8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008018:	d05e      	beq.n	80080d8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800801a:	f7fa fb3d 	bl	8002698 <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	69ba      	ldr	r2, [r7, #24]
 8008026:	429a      	cmp	r2, r3
 8008028:	d302      	bcc.n	8008030 <UART_WaitOnFlagUntilTimeout+0x30>
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d11d      	bne.n	800806c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800803e:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	689a      	ldr	r2, [r3, #8]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0201 	bic.w	r2, r2, #1
 800804e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2220      	movs	r2, #32
 8008054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2220      	movs	r2, #32
 800805c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e045      	b.n	80080f8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	d02e      	beq.n	80080d8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	69db      	ldr	r3, [r3, #28]
 8008080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008088:	d126      	bne.n	80080d8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008092:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80080a2:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689a      	ldr	r2, [r3, #8]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0201 	bic.w	r2, r2, #1
 80080b2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2220      	movs	r2, #32
 80080b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2220      	movs	r2, #32
 80080c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2220      	movs	r2, #32
 80080c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e00f      	b.n	80080f8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	69da      	ldr	r2, [r3, #28]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	4013      	ands	r3, r2
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	bf0c      	ite	eq
 80080e8:	2301      	moveq	r3, #1
 80080ea:	2300      	movne	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	461a      	mov	r2, r3
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d08d      	beq.n	8008012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800810e:	2b01      	cmp	r3, #1
 8008110:	d101      	bne.n	8008116 <HAL_UARTEx_DisableFifoMode+0x16>
 8008112:	2302      	movs	r3, #2
 8008114:	e027      	b.n	8008166 <HAL_UARTEx_DisableFifoMode+0x66>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2224      	movs	r2, #36	; 0x24
 8008122:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 0201 	bic.w	r2, r2, #1
 800813c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008144:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2220      	movs	r2, #32
 8008158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b084      	sub	sp, #16
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008182:	2b01      	cmp	r3, #1
 8008184:	d101      	bne.n	800818a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008186:	2302      	movs	r3, #2
 8008188:	e02d      	b.n	80081e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2224      	movs	r2, #36	; 0x24
 8008196:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f022 0201 	bic.w	r2, r2, #1
 80081b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f850 	bl	800826c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2220      	movs	r2, #32
 80081d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d101      	bne.n	8008206 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008202:	2302      	movs	r3, #2
 8008204:	e02d      	b.n	8008262 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2224      	movs	r2, #36	; 0x24
 8008212:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f022 0201 	bic.w	r2, r2, #1
 800822c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	430a      	orrs	r2, r1
 8008240:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f812 	bl	800826c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2220      	movs	r2, #32
 8008254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
	...

0800826c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800826c:	b480      	push	{r7}
 800826e:	b089      	sub	sp, #36	; 0x24
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008274:	4a2f      	ldr	r2, [pc, #188]	; (8008334 <UARTEx_SetNbDataToProcess+0xc8>)
 8008276:	f107 0314 	add.w	r3, r7, #20
 800827a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800827e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008282:	4a2d      	ldr	r2, [pc, #180]	; (8008338 <UARTEx_SetNbDataToProcess+0xcc>)
 8008284:	f107 030c 	add.w	r3, r7, #12
 8008288:	e892 0003 	ldmia.w	r2, {r0, r1}
 800828c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008294:	2b00      	cmp	r3, #0
 8008296:	d108      	bne.n	80082aa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082a8:	e03d      	b.n	8008326 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082aa:	2308      	movs	r3, #8
 80082ac:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082ae:	2308      	movs	r3, #8
 80082b0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	0e5b      	lsrs	r3, r3, #25
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	f003 0307 	and.w	r3, r3, #7
 80082c0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	0f5b      	lsrs	r3, r3, #29
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	f003 0307 	and.w	r3, r3, #7
 80082d0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80082d2:	7fbb      	ldrb	r3, [r7, #30]
 80082d4:	7f3a      	ldrb	r2, [r7, #28]
 80082d6:	f107 0120 	add.w	r1, r7, #32
 80082da:	440a      	add	r2, r1
 80082dc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80082e0:	fb02 f303 	mul.w	r3, r2, r3
 80082e4:	7f3a      	ldrb	r2, [r7, #28]
 80082e6:	f107 0120 	add.w	r1, r7, #32
 80082ea:	440a      	add	r2, r1
 80082ec:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80082f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80082fc:	7ffb      	ldrb	r3, [r7, #31]
 80082fe:	7f7a      	ldrb	r2, [r7, #29]
 8008300:	f107 0120 	add.w	r1, r7, #32
 8008304:	440a      	add	r2, r1
 8008306:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800830a:	fb02 f303 	mul.w	r3, r2, r3
 800830e:	7f7a      	ldrb	r2, [r7, #29]
 8008310:	f107 0120 	add.w	r1, r7, #32
 8008314:	440a      	add	r2, r1
 8008316:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800831a:	fb93 f3f2 	sdiv	r3, r3, r2
 800831e:	b29a      	uxth	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008326:	bf00      	nop
 8008328:	3724      	adds	r7, #36	; 0x24
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	0800cf9c 	.word	0x0800cf9c
 8008338:	0800cfa4 	.word	0x0800cfa4

0800833c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008346:	2300      	movs	r3, #0
 8008348:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800834a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800834e:	2b84      	cmp	r3, #132	; 0x84
 8008350:	d005      	beq.n	800835e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008352:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4413      	add	r3, r2
 800835a:	3303      	adds	r3, #3
 800835c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800835e:	68fb      	ldr	r3, [r7, #12]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008372:	f3ef 8305 	mrs	r3, IPSR
 8008376:	607b      	str	r3, [r7, #4]
  return(result);
 8008378:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800837a:	2b00      	cmp	r3, #0
 800837c:	bf14      	ite	ne
 800837e:	2301      	movne	r3, #1
 8008380:	2300      	moveq	r3, #0
 8008382:	b2db      	uxtb	r3, r3
}
 8008384:	4618      	mov	r0, r3
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008394:	f001 f92e 	bl	80095f4 <vTaskStartScheduler>
  
  return osOK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	bd80      	pop	{r7, pc}

0800839e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800839e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083a0:	b089      	sub	sp, #36	; 0x24
 80083a2:	af04      	add	r7, sp, #16
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d020      	beq.n	80083f2 <osThreadCreate+0x54>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d01c      	beq.n	80083f2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685c      	ldr	r4, [r3, #4]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681d      	ldr	r5, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	691e      	ldr	r6, [r3, #16]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7ff ffb6 	bl	800833c <makeFreeRtosPriority>
 80083d0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083da:	9202      	str	r2, [sp, #8]
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	9100      	str	r1, [sp, #0]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	4632      	mov	r2, r6
 80083e4:	4629      	mov	r1, r5
 80083e6:	4620      	mov	r0, r4
 80083e8:	f000 ff41 	bl	800926e <xTaskCreateStatic>
 80083ec:	4603      	mov	r3, r0
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	e01c      	b.n	800842c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685c      	ldr	r4, [r3, #4]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083fe:	b29e      	uxth	r6, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008406:	4618      	mov	r0, r3
 8008408:	f7ff ff98 	bl	800833c <makeFreeRtosPriority>
 800840c:	4602      	mov	r2, r0
 800840e:	f107 030c 	add.w	r3, r7, #12
 8008412:	9301      	str	r3, [sp, #4]
 8008414:	9200      	str	r2, [sp, #0]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	4632      	mov	r2, r6
 800841a:	4629      	mov	r1, r5
 800841c:	4620      	mov	r0, r4
 800841e:	f000 ff80 	bl	8009322 <xTaskCreate>
 8008422:	4603      	mov	r3, r0
 8008424:	2b01      	cmp	r3, #1
 8008426:	d001      	beq.n	800842c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008428:	2300      	movs	r3, #0
 800842a:	e000      	b.n	800842e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800842c:	68fb      	ldr	r3, [r7, #12]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008436 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <osDelay+0x16>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	e000      	b.n	800844e <osDelay+0x18>
 800844c:	2301      	movs	r3, #1
 800844e:	4618      	mov	r0, r3
 8008450:	f001 f89c 	bl	800958c <vTaskDelay>
  
  return osOK;
 8008454:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d007      	beq.n	800847e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	4619      	mov	r1, r3
 8008474:	2001      	movs	r0, #1
 8008476:	f000 faae 	bl	80089d6 <xQueueCreateMutexStatic>
 800847a:	4603      	mov	r3, r0
 800847c:	e003      	b.n	8008486 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800847e:	2001      	movs	r0, #1
 8008480:	f000 fa91 	bl	80089a6 <xQueueCreateMutex>
 8008484:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008486:	4618      	mov	r0, r3
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
	...

08008490 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800849a:	2300      	movs	r3, #0
 800849c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d101      	bne.n	80084a8 <osMutexWait+0x18>
    return osErrorParameter;
 80084a4:	2380      	movs	r3, #128	; 0x80
 80084a6:	e03a      	b.n	800851e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084b2:	d103      	bne.n	80084bc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80084b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084b8:	60fb      	str	r3, [r7, #12]
 80084ba:	e009      	b.n	80084d0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d006      	beq.n	80084d0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <osMutexWait+0x40>
      ticks = 1;
 80084cc:	2301      	movs	r3, #1
 80084ce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80084d0:	f7ff ff4c 	bl	800836c <inHandlerMode>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d017      	beq.n	800850a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80084da:	f107 0308 	add.w	r3, r7, #8
 80084de:	461a      	mov	r2, r3
 80084e0:	2100      	movs	r1, #0
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fd1e 	bl	8008f24 <xQueueReceiveFromISR>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d001      	beq.n	80084f2 <osMutexWait+0x62>
      return osErrorOS;
 80084ee:	23ff      	movs	r3, #255	; 0xff
 80084f0:	e015      	b.n	800851e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d011      	beq.n	800851c <osMutexWait+0x8c>
 80084f8:	4b0b      	ldr	r3, [pc, #44]	; (8008528 <osMutexWait+0x98>)
 80084fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084fe:	601a      	str	r2, [r3, #0]
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	e008      	b.n	800851c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800850a:	68f9      	ldr	r1, [r7, #12]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fc01 	bl	8008d14 <xQueueSemaphoreTake>
 8008512:	4603      	mov	r3, r0
 8008514:	2b01      	cmp	r3, #1
 8008516:	d001      	beq.n	800851c <osMutexWait+0x8c>
    return osErrorOS;
 8008518:	23ff      	movs	r3, #255	; 0xff
 800851a:	e000      	b.n	800851e <osMutexWait+0x8e>
  }
  
  return osOK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	e000ed04 	.word	0xe000ed04

0800852c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008534:	2300      	movs	r3, #0
 8008536:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008538:	2300      	movs	r3, #0
 800853a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800853c:	f7ff ff16 	bl	800836c <inHandlerMode>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d016      	beq.n	8008574 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008546:	f107 0308 	add.w	r3, r7, #8
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fb57 	bl	8008c00 <xQueueGiveFromISR>
 8008552:	4603      	mov	r3, r0
 8008554:	2b01      	cmp	r3, #1
 8008556:	d001      	beq.n	800855c <osMutexRelease+0x30>
      return osErrorOS;
 8008558:	23ff      	movs	r3, #255	; 0xff
 800855a:	e017      	b.n	800858c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d013      	beq.n	800858a <osMutexRelease+0x5e>
 8008562:	4b0c      	ldr	r3, [pc, #48]	; (8008594 <osMutexRelease+0x68>)
 8008564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	e00a      	b.n	800858a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008574:	2300      	movs	r3, #0
 8008576:	2200      	movs	r2, #0
 8008578:	2100      	movs	r1, #0
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fa46 	bl	8008a0c <xQueueGenericSend>
 8008580:	4603      	mov	r3, r0
 8008582:	2b01      	cmp	r3, #1
 8008584:	d001      	beq.n	800858a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8008586:	23ff      	movs	r3, #255	; 0xff
 8008588:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800858a:	68fb      	ldr	r3, [r7, #12]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	e000ed04 	.word	0xe000ed04

08008598 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f103 0208 	add.w	r2, r3, #8
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f103 0208 	add.w	r2, r3, #8
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f103 0208 	add.w	r2, r3, #8
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085e6:	bf00      	nop
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085f2:	b480      	push	{r7}
 80085f4:	b085      	sub	sp, #20
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	689a      	ldr	r2, [r3, #8]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	1c5a      	adds	r2, r3, #1
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	601a      	str	r2, [r3, #0]
}
 800862e:	bf00      	nop
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800863a:	b480      	push	{r7}
 800863c:	b085      	sub	sp, #20
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008650:	d103      	bne.n	800865a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	e00c      	b.n	8008674 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	3308      	adds	r3, #8
 800865e:	60fb      	str	r3, [r7, #12]
 8008660:	e002      	b.n	8008668 <vListInsert+0x2e>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	60fb      	str	r3, [r7, #12]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	429a      	cmp	r2, r3
 8008672:	d2f6      	bcs.n	8008662 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	683a      	ldr	r2, [r7, #0]
 8008682:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	1c5a      	adds	r2, r3, #1
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	601a      	str	r2, [r3, #0]
}
 80086a0:	bf00      	nop
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	6892      	ldr	r2, [r2, #8]
 80086c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	6852      	ldr	r2, [r2, #4]
 80086cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d103      	bne.n	80086e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	689a      	ldr	r2, [r3, #8]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	1e5a      	subs	r2, r3, #1
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d109      	bne.n	8008728 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	60bb      	str	r3, [r7, #8]
 8008726:	e7fe      	b.n	8008726 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008728:	f001 feb0 	bl	800a48c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008734:	68f9      	ldr	r1, [r7, #12]
 8008736:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008738:	fb01 f303 	mul.w	r3, r1, r3
 800873c:	441a      	add	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008758:	3b01      	subs	r3, #1
 800875a:	68f9      	ldr	r1, [r7, #12]
 800875c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800875e:	fb01 f303 	mul.w	r3, r1, r3
 8008762:	441a      	add	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	22ff      	movs	r2, #255	; 0xff
 800876c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	22ff      	movs	r2, #255	; 0xff
 8008774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d114      	bne.n	80087a8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d01a      	beq.n	80087bc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3310      	adds	r3, #16
 800878a:	4618      	mov	r0, r3
 800878c:	f001 f970 	bl	8009a70 <xTaskRemoveFromEventList>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d012      	beq.n	80087bc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008796:	4b0d      	ldr	r3, [pc, #52]	; (80087cc <xQueueGenericReset+0xcc>)
 8008798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	e009      	b.n	80087bc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	3310      	adds	r3, #16
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff fef3 	bl	8008598 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3324      	adds	r3, #36	; 0x24
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff feee 	bl	8008598 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80087bc:	f001 fe94 	bl	800a4e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80087c0:	2301      	movs	r3, #1
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	e000ed04 	.word	0xe000ed04

080087d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08e      	sub	sp, #56	; 0x38
 80087d4:	af02      	add	r7, sp, #8
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
 80087dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d109      	bne.n	80087f8 <xQueueGenericCreateStatic+0x28>
 80087e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80087f6:	e7fe      	b.n	80087f6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d109      	bne.n	8008812 <xQueueGenericCreateStatic+0x42>
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	627b      	str	r3, [r7, #36]	; 0x24
 8008810:	e7fe      	b.n	8008810 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d002      	beq.n	800881e <xQueueGenericCreateStatic+0x4e>
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <xQueueGenericCreateStatic+0x52>
 800881e:	2301      	movs	r3, #1
 8008820:	e000      	b.n	8008824 <xQueueGenericCreateStatic+0x54>
 8008822:	2300      	movs	r3, #0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d109      	bne.n	800883c <xQueueGenericCreateStatic+0x6c>
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	623b      	str	r3, [r7, #32]
 800883a:	e7fe      	b.n	800883a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d102      	bne.n	8008848 <xQueueGenericCreateStatic+0x78>
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <xQueueGenericCreateStatic+0x7c>
 8008848:	2301      	movs	r3, #1
 800884a:	e000      	b.n	800884e <xQueueGenericCreateStatic+0x7e>
 800884c:	2300      	movs	r3, #0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d109      	bne.n	8008866 <xQueueGenericCreateStatic+0x96>
 8008852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	61fb      	str	r3, [r7, #28]
 8008864:	e7fe      	b.n	8008864 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008866:	2348      	movs	r3, #72	; 0x48
 8008868:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b48      	cmp	r3, #72	; 0x48
 800886e:	d009      	beq.n	8008884 <xQueueGenericCreateStatic+0xb4>
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	61bb      	str	r3, [r7, #24]
 8008882:	e7fe      	b.n	8008882 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008884:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800888a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00d      	beq.n	80088ac <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008898:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800889c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	4613      	mov	r3, r2
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	68b9      	ldr	r1, [r7, #8]
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f000 f844 	bl	8008934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3730      	adds	r7, #48	; 0x30
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b08a      	sub	sp, #40	; 0x28
 80088ba:	af02      	add	r7, sp, #8
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	60b9      	str	r1, [r7, #8]
 80088c0:	4613      	mov	r3, r2
 80088c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d109      	bne.n	80088de <xQueueGenericCreate+0x28>
 80088ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	613b      	str	r3, [r7, #16]
 80088dc:	e7fe      	b.n	80088dc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d102      	bne.n	80088ea <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	61fb      	str	r3, [r7, #28]
 80088e8:	e004      	b.n	80088f4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	fb02 f303 	mul.w	r3, r2, r3
 80088f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	3348      	adds	r3, #72	; 0x48
 80088f8:	4618      	mov	r0, r3
 80088fa:	f001 fee1 	bl	800a6c0 <pvPortMalloc>
 80088fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d011      	beq.n	800892a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	3348      	adds	r3, #72	; 0x48
 800890e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008918:	79fa      	ldrb	r2, [r7, #7]
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	4613      	mov	r3, r2
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	68b9      	ldr	r1, [r7, #8]
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 f805 	bl	8008934 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800892a:	69bb      	ldr	r3, [r7, #24]
	}
 800892c:	4618      	mov	r0, r3
 800892e:	3720      	adds	r7, #32
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
 8008940:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d103      	bne.n	8008950 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	69ba      	ldr	r2, [r7, #24]
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	e002      	b.n	8008956 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008962:	2101      	movs	r1, #1
 8008964:	69b8      	ldr	r0, [r7, #24]
 8008966:	f7ff fecb 	bl	8008700 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800896a:	bf00      	nop
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00e      	beq.n	800899e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008992:	2300      	movs	r3, #0
 8008994:	2200      	movs	r2, #0
 8008996:	2100      	movs	r1, #0
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f837 	bl	8008a0c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800899e:	bf00      	nop
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b086      	sub	sp, #24
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	4603      	mov	r3, r0
 80089ae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80089b0:	2301      	movs	r3, #1
 80089b2:	617b      	str	r3, [r7, #20]
 80089b4:	2300      	movs	r3, #0
 80089b6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80089b8:	79fb      	ldrb	r3, [r7, #7]
 80089ba:	461a      	mov	r2, r3
 80089bc:	6939      	ldr	r1, [r7, #16]
 80089be:	6978      	ldr	r0, [r7, #20]
 80089c0:	f7ff ff79 	bl	80088b6 <xQueueGenericCreate>
 80089c4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f7ff ffd3 	bl	8008972 <prvInitialiseMutex>

		return xNewQueue;
 80089cc:	68fb      	ldr	r3, [r7, #12]
	}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3718      	adds	r7, #24
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b088      	sub	sp, #32
 80089da:	af02      	add	r7, sp, #8
 80089dc:	4603      	mov	r3, r0
 80089de:	6039      	str	r1, [r7, #0]
 80089e0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80089e2:	2301      	movs	r3, #1
 80089e4:	617b      	str	r3, [r7, #20]
 80089e6:	2300      	movs	r3, #0
 80089e8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80089ea:	79fb      	ldrb	r3, [r7, #7]
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	2200      	movs	r2, #0
 80089f2:	6939      	ldr	r1, [r7, #16]
 80089f4:	6978      	ldr	r0, [r7, #20]
 80089f6:	f7ff feeb 	bl	80087d0 <xQueueGenericCreateStatic>
 80089fa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f7ff ffb8 	bl	8008972 <prvInitialiseMutex>

		return xNewQueue;
 8008a02:	68fb      	ldr	r3, [r7, #12]
	}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3718      	adds	r7, #24
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b08e      	sub	sp, #56	; 0x38
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
 8008a18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d109      	bne.n	8008a3c <xQueueGenericSend+0x30>
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a3a:	e7fe      	b.n	8008a3a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d103      	bne.n	8008a4a <xQueueGenericSend+0x3e>
 8008a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <xQueueGenericSend+0x42>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e000      	b.n	8008a50 <xQueueGenericSend+0x44>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d109      	bne.n	8008a68 <xQueueGenericSend+0x5c>
 8008a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	627b      	str	r3, [r7, #36]	; 0x24
 8008a66:	e7fe      	b.n	8008a66 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d103      	bne.n	8008a76 <xQueueGenericSend+0x6a>
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d101      	bne.n	8008a7a <xQueueGenericSend+0x6e>
 8008a76:	2301      	movs	r3, #1
 8008a78:	e000      	b.n	8008a7c <xQueueGenericSend+0x70>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d109      	bne.n	8008a94 <xQueueGenericSend+0x88>
 8008a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	623b      	str	r3, [r7, #32]
 8008a92:	e7fe      	b.n	8008a92 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a94:	f001 f9a2 	bl	8009ddc <xTaskGetSchedulerState>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d102      	bne.n	8008aa4 <xQueueGenericSend+0x98>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <xQueueGenericSend+0x9c>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e000      	b.n	8008aaa <xQueueGenericSend+0x9e>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d109      	bne.n	8008ac2 <xQueueGenericSend+0xb6>
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	61fb      	str	r3, [r7, #28]
 8008ac0:	e7fe      	b.n	8008ac0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ac2:	f001 fce3 	bl	800a48c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d302      	bcc.n	8008ad8 <xQueueGenericSend+0xcc>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d129      	bne.n	8008b2c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ad8:	683a      	ldr	r2, [r7, #0]
 8008ada:	68b9      	ldr	r1, [r7, #8]
 8008adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ade:	f000 fab6 	bl	800904e <prvCopyDataToQueue>
 8008ae2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d010      	beq.n	8008b0e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	3324      	adds	r3, #36	; 0x24
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 ffbd 	bl	8009a70 <xTaskRemoveFromEventList>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d013      	beq.n	8008b24 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008afc:	4b3f      	ldr	r3, [pc, #252]	; (8008bfc <xQueueGenericSend+0x1f0>)
 8008afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b02:	601a      	str	r2, [r3, #0]
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	e00a      	b.n	8008b24 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d007      	beq.n	8008b24 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008b14:	4b39      	ldr	r3, [pc, #228]	; (8008bfc <xQueueGenericSend+0x1f0>)
 8008b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008b24:	f001 fce0 	bl	800a4e8 <vPortExitCritical>
				return pdPASS;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e063      	b.n	8008bf4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d103      	bne.n	8008b3a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b32:	f001 fcd9 	bl	800a4e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008b36:	2300      	movs	r3, #0
 8008b38:	e05c      	b.n	8008bf4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d106      	bne.n	8008b4e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b40:	f107 0314 	add.w	r3, r7, #20
 8008b44:	4618      	mov	r0, r3
 8008b46:	f000 fff5 	bl	8009b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b4e:	f001 fccb 	bl	800a4e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b52:	f000 fdad 	bl	80096b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b56:	f001 fc99 	bl	800a48c <vPortEnterCritical>
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b60:	b25b      	sxtb	r3, r3
 8008b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b66:	d103      	bne.n	8008b70 <xQueueGenericSend+0x164>
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b76:	b25b      	sxtb	r3, r3
 8008b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b7c:	d103      	bne.n	8008b86 <xQueueGenericSend+0x17a>
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b86:	f001 fcaf 	bl	800a4e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b8a:	1d3a      	adds	r2, r7, #4
 8008b8c:	f107 0314 	add.w	r3, r7, #20
 8008b90:	4611      	mov	r1, r2
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 ffe4 	bl	8009b60 <xTaskCheckForTimeOut>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d124      	bne.n	8008be8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ba0:	f000 fb4d 	bl	800923e <prvIsQueueFull>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d018      	beq.n	8008bdc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bac:	3310      	adds	r3, #16
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 ff38 	bl	8009a28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bba:	f000 fad8 	bl	800916e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008bbe:	f000 fd85 	bl	80096cc <xTaskResumeAll>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f47f af7c 	bne.w	8008ac2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008bca:	4b0c      	ldr	r3, [pc, #48]	; (8008bfc <xQueueGenericSend+0x1f0>)
 8008bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd0:	601a      	str	r2, [r3, #0]
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	e772      	b.n	8008ac2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bde:	f000 fac6 	bl	800916e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008be2:	f000 fd73 	bl	80096cc <xTaskResumeAll>
 8008be6:	e76c      	b.n	8008ac2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bea:	f000 fac0 	bl	800916e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bee:	f000 fd6d 	bl	80096cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008bf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3738      	adds	r7, #56	; 0x38
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	e000ed04 	.word	0xe000ed04

08008c00 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b08e      	sub	sp, #56	; 0x38
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d109      	bne.n	8008c28 <xQueueGiveFromISR+0x28>
 8008c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	623b      	str	r3, [r7, #32]
 8008c26:	e7fe      	b.n	8008c26 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d009      	beq.n	8008c44 <xQueueGiveFromISR+0x44>
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	61fb      	str	r3, [r7, #28]
 8008c42:	e7fe      	b.n	8008c42 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d103      	bne.n	8008c54 <xQueueGiveFromISR+0x54>
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <xQueueGiveFromISR+0x58>
 8008c54:	2301      	movs	r3, #1
 8008c56:	e000      	b.n	8008c5a <xQueueGiveFromISR+0x5a>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d109      	bne.n	8008c72 <xQueueGiveFromISR+0x72>
 8008c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	61bb      	str	r3, [r7, #24]
 8008c70:	e7fe      	b.n	8008c70 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c72:	f001 fce7 	bl	800a644 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c76:	f3ef 8211 	mrs	r2, BASEPRI
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	617a      	str	r2, [r7, #20]
 8008c8c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c8e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d22b      	bcs.n	8008cfa <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cae:	1c5a      	adds	r2, r3, #1
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008cb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cbc:	d112      	bne.n	8008ce4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d016      	beq.n	8008cf4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc8:	3324      	adds	r3, #36	; 0x24
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 fed0 	bl	8009a70 <xTaskRemoveFromEventList>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00e      	beq.n	8008cf4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00b      	beq.n	8008cf4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	e007      	b.n	8008cf4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ce8:	3301      	adds	r3, #1
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	b25a      	sxtb	r2, r3
 8008cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	637b      	str	r3, [r7, #52]	; 0x34
 8008cf8:	e001      	b.n	8008cfe <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8008cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d00:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3738      	adds	r7, #56	; 0x38
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
	...

08008d14 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08e      	sub	sp, #56	; 0x38
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008d26:	2300      	movs	r3, #0
 8008d28:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d109      	bne.n	8008d44 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	623b      	str	r3, [r7, #32]
 8008d42:	e7fe      	b.n	8008d42 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d009      	beq.n	8008d60 <xQueueSemaphoreTake+0x4c>
 8008d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d50:	f383 8811 	msr	BASEPRI, r3
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	61fb      	str	r3, [r7, #28]
 8008d5e:	e7fe      	b.n	8008d5e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d60:	f001 f83c 	bl	8009ddc <xTaskGetSchedulerState>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d102      	bne.n	8008d70 <xQueueSemaphoreTake+0x5c>
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <xQueueSemaphoreTake+0x60>
 8008d70:	2301      	movs	r3, #1
 8008d72:	e000      	b.n	8008d76 <xQueueSemaphoreTake+0x62>
 8008d74:	2300      	movs	r3, #0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d109      	bne.n	8008d8e <xQueueSemaphoreTake+0x7a>
 8008d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	61bb      	str	r3, [r7, #24]
 8008d8c:	e7fe      	b.n	8008d8c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d8e:	f001 fb7d 	bl	800a48c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d96:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d024      	beq.n	8008de8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da0:	1e5a      	subs	r2, r3, #1
 8008da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d104      	bne.n	8008db8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008dae:	f001 f9cf 	bl	800a150 <pvTaskIncrementMutexHeldCount>
 8008db2:	4602      	mov	r2, r0
 8008db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00f      	beq.n	8008de0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc2:	3310      	adds	r3, #16
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 fe53 	bl	8009a70 <xTaskRemoveFromEventList>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d007      	beq.n	8008de0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008dd0:	4b53      	ldr	r3, [pc, #332]	; (8008f20 <xQueueSemaphoreTake+0x20c>)
 8008dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008de0:	f001 fb82 	bl	800a4e8 <vPortExitCritical>
				return pdPASS;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e096      	b.n	8008f16 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d110      	bne.n	8008e10 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d009      	beq.n	8008e08 <xQueueSemaphoreTake+0xf4>
 8008df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	617b      	str	r3, [r7, #20]
 8008e06:	e7fe      	b.n	8008e06 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008e08:	f001 fb6e 	bl	800a4e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	e082      	b.n	8008f16 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d106      	bne.n	8008e24 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e16:	f107 030c 	add.w	r3, r7, #12
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 fe8a 	bl	8009b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e20:	2301      	movs	r3, #1
 8008e22:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e24:	f001 fb60 	bl	800a4e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e28:	f000 fc42 	bl	80096b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e2c:	f001 fb2e 	bl	800a48c <vPortEnterCritical>
 8008e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e36:	b25b      	sxtb	r3, r3
 8008e38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e3c:	d103      	bne.n	8008e46 <xQueueSemaphoreTake+0x132>
 8008e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e4c:	b25b      	sxtb	r3, r3
 8008e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e52:	d103      	bne.n	8008e5c <xQueueSemaphoreTake+0x148>
 8008e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e5c:	f001 fb44 	bl	800a4e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e60:	463a      	mov	r2, r7
 8008e62:	f107 030c 	add.w	r3, r7, #12
 8008e66:	4611      	mov	r1, r2
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 fe79 	bl	8009b60 <xTaskCheckForTimeOut>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d132      	bne.n	8008eda <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e76:	f000 f9cc 	bl	8009212 <prvIsQueueEmpty>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d026      	beq.n	8008ece <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d109      	bne.n	8008e9c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008e88:	f001 fb00 	bl	800a48c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 ffc1 	bl	8009e18 <xTaskPriorityInherit>
 8008e96:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008e98:	f001 fb26 	bl	800a4e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9e:	3324      	adds	r3, #36	; 0x24
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	4611      	mov	r1, r2
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f000 fdbf 	bl	8009a28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008eaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008eac:	f000 f95f 	bl	800916e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008eb0:	f000 fc0c 	bl	80096cc <xTaskResumeAll>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f47f af69 	bne.w	8008d8e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008ebc:	4b18      	ldr	r3, [pc, #96]	; (8008f20 <xQueueSemaphoreTake+0x20c>)
 8008ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	e75f      	b.n	8008d8e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008ece:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ed0:	f000 f94d 	bl	800916e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ed4:	f000 fbfa 	bl	80096cc <xTaskResumeAll>
 8008ed8:	e759      	b.n	8008d8e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008eda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008edc:	f000 f947 	bl	800916e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ee0:	f000 fbf4 	bl	80096cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ee4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ee6:	f000 f994 	bl	8009212 <prvIsQueueEmpty>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f43f af4e 	beq.w	8008d8e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00d      	beq.n	8008f14 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008ef8:	f001 fac8 	bl	800a48c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008efc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008efe:	f000 f88e 	bl	800901e <prvGetDisinheritPriorityAfterTimeout>
 8008f02:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f001 f888 	bl	800a020 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008f10:	f001 faea 	bl	800a4e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3738      	adds	r7, #56	; 0x38
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	e000ed04 	.word	0xe000ed04

08008f24 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b08e      	sub	sp, #56	; 0x38
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d109      	bne.n	8008f4e <xQueueReceiveFromISR+0x2a>
 8008f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3e:	f383 8811 	msr	BASEPRI, r3
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	623b      	str	r3, [r7, #32]
 8008f4c:	e7fe      	b.n	8008f4c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d103      	bne.n	8008f5c <xQueueReceiveFromISR+0x38>
 8008f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <xQueueReceiveFromISR+0x3c>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e000      	b.n	8008f62 <xQueueReceiveFromISR+0x3e>
 8008f60:	2300      	movs	r3, #0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d109      	bne.n	8008f7a <xQueueReceiveFromISR+0x56>
 8008f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	61fb      	str	r3, [r7, #28]
 8008f78:	e7fe      	b.n	8008f78 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f7a:	f001 fb63 	bl	800a644 <vPortValidateInterruptPriority>
	__asm volatile
 8008f7e:	f3ef 8211 	mrs	r2, BASEPRI
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	61ba      	str	r2, [r7, #24]
 8008f94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008f96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d02f      	beq.n	8009006 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008fb0:	68b9      	ldr	r1, [r7, #8]
 8008fb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fb4:	f000 f8b5 	bl	8009122 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fba:	1e5a      	subs	r2, r3, #1
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008fc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fc8:	d112      	bne.n	8008ff0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d016      	beq.n	8009000 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd4:	3310      	adds	r3, #16
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 fd4a 	bl	8009a70 <xTaskRemoveFromEventList>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00e      	beq.n	8009000 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00b      	beq.n	8009000 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	601a      	str	r2, [r3, #0]
 8008fee:	e007      	b.n	8009000 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	b25a      	sxtb	r2, r3
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009000:	2301      	movs	r3, #1
 8009002:	637b      	str	r3, [r7, #52]	; 0x34
 8009004:	e001      	b.n	800900a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009006:	2300      	movs	r3, #0
 8009008:	637b      	str	r3, [r7, #52]	; 0x34
 800900a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009016:	4618      	mov	r0, r3
 8009018:	3738      	adds	r7, #56	; 0x38
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800901e:	b480      	push	{r7}
 8009020:	b085      	sub	sp, #20
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902a:	2b00      	cmp	r3, #0
 800902c:	d006      	beq.n	800903c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f1c3 0307 	rsb	r3, r3, #7
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	e001      	b.n	8009040 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800903c:	2300      	movs	r3, #0
 800903e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009040:	68fb      	ldr	r3, [r7, #12]
	}
 8009042:	4618      	mov	r0, r3
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b086      	sub	sp, #24
 8009052:	af00      	add	r7, sp, #0
 8009054:	60f8      	str	r0, [r7, #12]
 8009056:	60b9      	str	r1, [r7, #8]
 8009058:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800905a:	2300      	movs	r3, #0
 800905c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009062:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10d      	bne.n	8009088 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d14d      	bne.n	8009110 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	4618      	mov	r0, r3
 800907a:	f000 ff4d 	bl	8009f18 <xTaskPriorityDisinherit>
 800907e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	609a      	str	r2, [r3, #8]
 8009086:	e043      	b.n	8009110 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d119      	bne.n	80090c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6858      	ldr	r0, [r3, #4]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009096:	461a      	mov	r2, r3
 8009098:	68b9      	ldr	r1, [r7, #8]
 800909a:	f002 fdab 	bl	800bbf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	685a      	ldr	r2, [r3, #4]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	441a      	add	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d32b      	bcc.n	8009110 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	605a      	str	r2, [r3, #4]
 80090c0:	e026      	b.n	8009110 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	68d8      	ldr	r0, [r3, #12]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ca:	461a      	mov	r2, r3
 80090cc:	68b9      	ldr	r1, [r7, #8]
 80090ce:	f002 fd91 	bl	800bbf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	68da      	ldr	r2, [r3, #12]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090da:	425b      	negs	r3, r3
 80090dc:	441a      	add	r2, r3
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	68da      	ldr	r2, [r3, #12]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d207      	bcs.n	80090fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	689a      	ldr	r2, [r3, #8]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f6:	425b      	negs	r3, r3
 80090f8:	441a      	add	r2, r3
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b02      	cmp	r3, #2
 8009102:	d105      	bne.n	8009110 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d002      	beq.n	8009110 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	3b01      	subs	r3, #1
 800910e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	1c5a      	adds	r2, r3, #1
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009118:	697b      	ldr	r3, [r7, #20]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3718      	adds	r7, #24
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b082      	sub	sp, #8
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009130:	2b00      	cmp	r3, #0
 8009132:	d018      	beq.n	8009166 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	68da      	ldr	r2, [r3, #12]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913c:	441a      	add	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68da      	ldr	r2, [r3, #12]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	429a      	cmp	r2, r3
 800914c:	d303      	bcc.n	8009156 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68d9      	ldr	r1, [r3, #12]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915e:	461a      	mov	r2, r3
 8009160:	6838      	ldr	r0, [r7, #0]
 8009162:	f002 fd47 	bl	800bbf4 <memcpy>
	}
}
 8009166:	bf00      	nop
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b084      	sub	sp, #16
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009176:	f001 f989 	bl	800a48c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009180:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009182:	e011      	b.n	80091a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009188:	2b00      	cmp	r3, #0
 800918a:	d012      	beq.n	80091b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3324      	adds	r3, #36	; 0x24
 8009190:	4618      	mov	r0, r3
 8009192:	f000 fc6d 	bl	8009a70 <xTaskRemoveFromEventList>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d001      	beq.n	80091a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800919c:	f000 fd40 	bl	8009c20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	3b01      	subs	r3, #1
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	dce9      	bgt.n	8009184 <prvUnlockQueue+0x16>
 80091b0:	e000      	b.n	80091b4 <prvUnlockQueue+0x46>
					break;
 80091b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	22ff      	movs	r2, #255	; 0xff
 80091b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80091bc:	f001 f994 	bl	800a4e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80091c0:	f001 f964 	bl	800a48c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091cc:	e011      	b.n	80091f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d012      	beq.n	80091fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	3310      	adds	r3, #16
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 fc48 	bl	8009a70 <xTaskRemoveFromEventList>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d001      	beq.n	80091ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80091e6:	f000 fd1b 	bl	8009c20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80091ea:	7bbb      	ldrb	r3, [r7, #14]
 80091ec:	3b01      	subs	r3, #1
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	dce9      	bgt.n	80091ce <prvUnlockQueue+0x60>
 80091fa:	e000      	b.n	80091fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80091fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	22ff      	movs	r2, #255	; 0xff
 8009202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009206:	f001 f96f 	bl	800a4e8 <vPortExitCritical>
}
 800920a:	bf00      	nop
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b084      	sub	sp, #16
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800921a:	f001 f937 	bl	800a48c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009222:	2b00      	cmp	r3, #0
 8009224:	d102      	bne.n	800922c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009226:	2301      	movs	r3, #1
 8009228:	60fb      	str	r3, [r7, #12]
 800922a:	e001      	b.n	8009230 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800922c:	2300      	movs	r3, #0
 800922e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009230:	f001 f95a 	bl	800a4e8 <vPortExitCritical>

	return xReturn;
 8009234:	68fb      	ldr	r3, [r7, #12]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b084      	sub	sp, #16
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009246:	f001 f921 	bl	800a48c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009252:	429a      	cmp	r2, r3
 8009254:	d102      	bne.n	800925c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009256:	2301      	movs	r3, #1
 8009258:	60fb      	str	r3, [r7, #12]
 800925a:	e001      	b.n	8009260 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800925c:	2300      	movs	r3, #0
 800925e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009260:	f001 f942 	bl	800a4e8 <vPortExitCritical>

	return xReturn;
 8009264:	68fb      	ldr	r3, [r7, #12]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800926e:	b580      	push	{r7, lr}
 8009270:	b08e      	sub	sp, #56	; 0x38
 8009272:	af04      	add	r7, sp, #16
 8009274:	60f8      	str	r0, [r7, #12]
 8009276:	60b9      	str	r1, [r7, #8]
 8009278:	607a      	str	r2, [r7, #4]
 800927a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800927c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800927e:	2b00      	cmp	r3, #0
 8009280:	d109      	bne.n	8009296 <xTaskCreateStatic+0x28>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	623b      	str	r3, [r7, #32]
 8009294:	e7fe      	b.n	8009294 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009298:	2b00      	cmp	r3, #0
 800929a:	d109      	bne.n	80092b0 <xTaskCreateStatic+0x42>
 800929c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	61fb      	str	r3, [r7, #28]
 80092ae:	e7fe      	b.n	80092ae <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80092b0:	2354      	movs	r3, #84	; 0x54
 80092b2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	2b54      	cmp	r3, #84	; 0x54
 80092b8:	d009      	beq.n	80092ce <xTaskCreateStatic+0x60>
 80092ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	61bb      	str	r3, [r7, #24]
 80092cc:	e7fe      	b.n	80092cc <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80092ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80092d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d01e      	beq.n	8009314 <xTaskCreateStatic+0xa6>
 80092d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d01b      	beq.n	8009314 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	2202      	movs	r2, #2
 80092ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80092ee:	2300      	movs	r3, #0
 80092f0:	9303      	str	r3, [sp, #12]
 80092f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f4:	9302      	str	r3, [sp, #8]
 80092f6:	f107 0314 	add.w	r3, r7, #20
 80092fa:	9301      	str	r3, [sp, #4]
 80092fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	68b9      	ldr	r1, [r7, #8]
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f000 f850 	bl	80093ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800930c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800930e:	f000 f8d3 	bl	80094b8 <prvAddNewTaskToReadyList>
 8009312:	e001      	b.n	8009318 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009314:	2300      	movs	r3, #0
 8009316:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009318:	697b      	ldr	r3, [r7, #20]
	}
 800931a:	4618      	mov	r0, r3
 800931c:	3728      	adds	r7, #40	; 0x28
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009322:	b580      	push	{r7, lr}
 8009324:	b08c      	sub	sp, #48	; 0x30
 8009326:	af04      	add	r7, sp, #16
 8009328:	60f8      	str	r0, [r7, #12]
 800932a:	60b9      	str	r1, [r7, #8]
 800932c:	603b      	str	r3, [r7, #0]
 800932e:	4613      	mov	r3, r2
 8009330:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009332:	88fb      	ldrh	r3, [r7, #6]
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	4618      	mov	r0, r3
 8009338:	f001 f9c2 	bl	800a6c0 <pvPortMalloc>
 800933c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00e      	beq.n	8009362 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009344:	2054      	movs	r0, #84	; 0x54
 8009346:	f001 f9bb 	bl	800a6c0 <pvPortMalloc>
 800934a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d003      	beq.n	800935a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	697a      	ldr	r2, [r7, #20]
 8009356:	631a      	str	r2, [r3, #48]	; 0x30
 8009358:	e005      	b.n	8009366 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800935a:	6978      	ldr	r0, [r7, #20]
 800935c:	f001 fa72 	bl	800a844 <vPortFree>
 8009360:	e001      	b.n	8009366 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009362:	2300      	movs	r3, #0
 8009364:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d017      	beq.n	800939c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009374:	88fa      	ldrh	r2, [r7, #6]
 8009376:	2300      	movs	r3, #0
 8009378:	9303      	str	r3, [sp, #12]
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	9302      	str	r3, [sp, #8]
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	9301      	str	r3, [sp, #4]
 8009382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	68b9      	ldr	r1, [r7, #8]
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f000 f80e 	bl	80093ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009390:	69f8      	ldr	r0, [r7, #28]
 8009392:	f000 f891 	bl	80094b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009396:	2301      	movs	r3, #1
 8009398:	61bb      	str	r3, [r7, #24]
 800939a:	e002      	b.n	80093a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800939c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80093a2:	69bb      	ldr	r3, [r7, #24]
	}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3720      	adds	r7, #32
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b088      	sub	sp, #32
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
 80093b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80093ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80093c4:	3b01      	subs	r3, #1
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	f023 0307 	bic.w	r3, r3, #7
 80093d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	f003 0307 	and.w	r3, r3, #7
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d009      	beq.n	80093f2 <prvInitialiseNewTask+0x46>
 80093de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	617b      	str	r3, [r7, #20]
 80093f0:	e7fe      	b.n	80093f0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d01f      	beq.n	8009438 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093f8:	2300      	movs	r3, #0
 80093fa:	61fb      	str	r3, [r7, #28]
 80093fc:	e012      	b.n	8009424 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	4413      	add	r3, r2
 8009404:	7819      	ldrb	r1, [r3, #0]
 8009406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	4413      	add	r3, r2
 800940c:	3334      	adds	r3, #52	; 0x34
 800940e:	460a      	mov	r2, r1
 8009410:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	4413      	add	r3, r2
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d006      	beq.n	800942c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	3301      	adds	r3, #1
 8009422:	61fb      	str	r3, [r7, #28]
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	2b0f      	cmp	r3, #15
 8009428:	d9e9      	bls.n	80093fe <prvInitialiseNewTask+0x52>
 800942a:	e000      	b.n	800942e <prvInitialiseNewTask+0x82>
			{
				break;
 800942c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009430:	2200      	movs	r2, #0
 8009432:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009436:	e003      	b.n	8009440 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943a:	2200      	movs	r2, #0
 800943c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009442:	2b06      	cmp	r3, #6
 8009444:	d901      	bls.n	800944a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009446:	2306      	movs	r3, #6
 8009448:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800944e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009454:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009458:	2200      	movs	r2, #0
 800945a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800945c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945e:	3304      	adds	r3, #4
 8009460:	4618      	mov	r0, r3
 8009462:	f7ff f8b9 	bl	80085d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009468:	3318      	adds	r3, #24
 800946a:	4618      	mov	r0, r3
 800946c:	f7ff f8b4 	bl	80085d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009474:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009478:	f1c3 0207 	rsb	r2, r3, #7
 800947c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009484:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	2200      	movs	r2, #0
 800948a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800948c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948e:	2200      	movs	r2, #0
 8009490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	68f9      	ldr	r1, [r7, #12]
 8009498:	69b8      	ldr	r0, [r7, #24]
 800949a:	f000 fed3 	bl	800a244 <pxPortInitialiseStack>
 800949e:	4602      	mov	r2, r0
 80094a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80094a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d002      	beq.n	80094b0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80094aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094b0:	bf00      	nop
 80094b2:	3720      	adds	r7, #32
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80094c0:	f000 ffe4 	bl	800a48c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80094c4:	4b2a      	ldr	r3, [pc, #168]	; (8009570 <prvAddNewTaskToReadyList+0xb8>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	3301      	adds	r3, #1
 80094ca:	4a29      	ldr	r2, [pc, #164]	; (8009570 <prvAddNewTaskToReadyList+0xb8>)
 80094cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80094ce:	4b29      	ldr	r3, [pc, #164]	; (8009574 <prvAddNewTaskToReadyList+0xbc>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d109      	bne.n	80094ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80094d6:	4a27      	ldr	r2, [pc, #156]	; (8009574 <prvAddNewTaskToReadyList+0xbc>)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80094dc:	4b24      	ldr	r3, [pc, #144]	; (8009570 <prvAddNewTaskToReadyList+0xb8>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d110      	bne.n	8009506 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80094e4:	f000 fbc0 	bl	8009c68 <prvInitialiseTaskLists>
 80094e8:	e00d      	b.n	8009506 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80094ea:	4b23      	ldr	r3, [pc, #140]	; (8009578 <prvAddNewTaskToReadyList+0xc0>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d109      	bne.n	8009506 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80094f2:	4b20      	ldr	r3, [pc, #128]	; (8009574 <prvAddNewTaskToReadyList+0xbc>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d802      	bhi.n	8009506 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009500:	4a1c      	ldr	r2, [pc, #112]	; (8009574 <prvAddNewTaskToReadyList+0xbc>)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009506:	4b1d      	ldr	r3, [pc, #116]	; (800957c <prvAddNewTaskToReadyList+0xc4>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	3301      	adds	r3, #1
 800950c:	4a1b      	ldr	r2, [pc, #108]	; (800957c <prvAddNewTaskToReadyList+0xc4>)
 800950e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009514:	2201      	movs	r2, #1
 8009516:	409a      	lsls	r2, r3
 8009518:	4b19      	ldr	r3, [pc, #100]	; (8009580 <prvAddNewTaskToReadyList+0xc8>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4313      	orrs	r3, r2
 800951e:	4a18      	ldr	r2, [pc, #96]	; (8009580 <prvAddNewTaskToReadyList+0xc8>)
 8009520:	6013      	str	r3, [r2, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009526:	4613      	mov	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4413      	add	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4a15      	ldr	r2, [pc, #84]	; (8009584 <prvAddNewTaskToReadyList+0xcc>)
 8009530:	441a      	add	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	3304      	adds	r3, #4
 8009536:	4619      	mov	r1, r3
 8009538:	4610      	mov	r0, r2
 800953a:	f7ff f85a 	bl	80085f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800953e:	f000 ffd3 	bl	800a4e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009542:	4b0d      	ldr	r3, [pc, #52]	; (8009578 <prvAddNewTaskToReadyList+0xc0>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00e      	beq.n	8009568 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800954a:	4b0a      	ldr	r3, [pc, #40]	; (8009574 <prvAddNewTaskToReadyList+0xbc>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009554:	429a      	cmp	r2, r3
 8009556:	d207      	bcs.n	8009568 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009558:	4b0b      	ldr	r3, [pc, #44]	; (8009588 <prvAddNewTaskToReadyList+0xd0>)
 800955a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009568:	bf00      	nop
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	2000040c 	.word	0x2000040c
 8009574:	2000030c 	.word	0x2000030c
 8009578:	20000418 	.word	0x20000418
 800957c:	20000428 	.word	0x20000428
 8009580:	20000414 	.word	0x20000414
 8009584:	20000310 	.word	0x20000310
 8009588:	e000ed04 	.word	0xe000ed04

0800958c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009594:	2300      	movs	r3, #0
 8009596:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d016      	beq.n	80095cc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800959e:	4b13      	ldr	r3, [pc, #76]	; (80095ec <vTaskDelay+0x60>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d009      	beq.n	80095ba <vTaskDelay+0x2e>
 80095a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095aa:	f383 8811 	msr	BASEPRI, r3
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	f3bf 8f4f 	dsb	sy
 80095b6:	60bb      	str	r3, [r7, #8]
 80095b8:	e7fe      	b.n	80095b8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80095ba:	f000 f879 	bl	80096b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80095be:	2100      	movs	r1, #0
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fdd9 	bl	800a178 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80095c6:	f000 f881 	bl	80096cc <xTaskResumeAll>
 80095ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d107      	bne.n	80095e2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80095d2:	4b07      	ldr	r3, [pc, #28]	; (80095f0 <vTaskDelay+0x64>)
 80095d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d8:	601a      	str	r2, [r3, #0]
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095e2:	bf00      	nop
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20000434 	.word	0x20000434
 80095f0:	e000ed04 	.word	0xe000ed04

080095f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b08a      	sub	sp, #40	; 0x28
 80095f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80095fa:	2300      	movs	r3, #0
 80095fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80095fe:	2300      	movs	r3, #0
 8009600:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009602:	463a      	mov	r2, r7
 8009604:	1d39      	adds	r1, r7, #4
 8009606:	f107 0308 	add.w	r3, r7, #8
 800960a:	4618      	mov	r0, r3
 800960c:	f7f7 fcac 	bl	8000f68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	9202      	str	r2, [sp, #8]
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	2300      	movs	r3, #0
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	2300      	movs	r3, #0
 8009620:	460a      	mov	r2, r1
 8009622:	491d      	ldr	r1, [pc, #116]	; (8009698 <vTaskStartScheduler+0xa4>)
 8009624:	481d      	ldr	r0, [pc, #116]	; (800969c <vTaskStartScheduler+0xa8>)
 8009626:	f7ff fe22 	bl	800926e <xTaskCreateStatic>
 800962a:	4602      	mov	r2, r0
 800962c:	4b1c      	ldr	r3, [pc, #112]	; (80096a0 <vTaskStartScheduler+0xac>)
 800962e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009630:	4b1b      	ldr	r3, [pc, #108]	; (80096a0 <vTaskStartScheduler+0xac>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d002      	beq.n	800963e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009638:	2301      	movs	r3, #1
 800963a:	617b      	str	r3, [r7, #20]
 800963c:	e001      	b.n	8009642 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800963e:	2300      	movs	r3, #0
 8009640:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d115      	bne.n	8009674 <vTaskStartScheduler+0x80>
 8009648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964c:	f383 8811 	msr	BASEPRI, r3
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800965a:	4b12      	ldr	r3, [pc, #72]	; (80096a4 <vTaskStartScheduler+0xb0>)
 800965c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009660:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009662:	4b11      	ldr	r3, [pc, #68]	; (80096a8 <vTaskStartScheduler+0xb4>)
 8009664:	2201      	movs	r2, #1
 8009666:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009668:	4b10      	ldr	r3, [pc, #64]	; (80096ac <vTaskStartScheduler+0xb8>)
 800966a:	2200      	movs	r2, #0
 800966c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800966e:	f000 fe6f 	bl	800a350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009672:	e00d      	b.n	8009690 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800967a:	d109      	bne.n	8009690 <vTaskStartScheduler+0x9c>
 800967c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	60fb      	str	r3, [r7, #12]
 800968e:	e7fe      	b.n	800968e <vTaskStartScheduler+0x9a>
}
 8009690:	bf00      	nop
 8009692:	3718      	adds	r7, #24
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	0800cfac 	.word	0x0800cfac
 800969c:	08009c39 	.word	0x08009c39
 80096a0:	20000430 	.word	0x20000430
 80096a4:	2000042c 	.word	0x2000042c
 80096a8:	20000418 	.word	0x20000418
 80096ac:	20000410 	.word	0x20000410

080096b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80096b0:	b480      	push	{r7}
 80096b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80096b4:	4b04      	ldr	r3, [pc, #16]	; (80096c8 <vTaskSuspendAll+0x18>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3301      	adds	r3, #1
 80096ba:	4a03      	ldr	r2, [pc, #12]	; (80096c8 <vTaskSuspendAll+0x18>)
 80096bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80096be:	bf00      	nop
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	20000434 	.word	0x20000434

080096cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80096d6:	2300      	movs	r3, #0
 80096d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80096da:	4b41      	ldr	r3, [pc, #260]	; (80097e0 <xTaskResumeAll+0x114>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d109      	bne.n	80096f6 <xTaskResumeAll+0x2a>
 80096e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	603b      	str	r3, [r7, #0]
 80096f4:	e7fe      	b.n	80096f4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80096f6:	f000 fec9 	bl	800a48c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80096fa:	4b39      	ldr	r3, [pc, #228]	; (80097e0 <xTaskResumeAll+0x114>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3b01      	subs	r3, #1
 8009700:	4a37      	ldr	r2, [pc, #220]	; (80097e0 <xTaskResumeAll+0x114>)
 8009702:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009704:	4b36      	ldr	r3, [pc, #216]	; (80097e0 <xTaskResumeAll+0x114>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d161      	bne.n	80097d0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800970c:	4b35      	ldr	r3, [pc, #212]	; (80097e4 <xTaskResumeAll+0x118>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d05d      	beq.n	80097d0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009714:	e02e      	b.n	8009774 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009716:	4b34      	ldr	r3, [pc, #208]	; (80097e8 <xTaskResumeAll+0x11c>)
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	3318      	adds	r3, #24
 8009722:	4618      	mov	r0, r3
 8009724:	f7fe ffc2 	bl	80086ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	3304      	adds	r3, #4
 800972c:	4618      	mov	r0, r3
 800972e:	f7fe ffbd 	bl	80086ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009736:	2201      	movs	r2, #1
 8009738:	409a      	lsls	r2, r3
 800973a:	4b2c      	ldr	r3, [pc, #176]	; (80097ec <xTaskResumeAll+0x120>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4313      	orrs	r3, r2
 8009740:	4a2a      	ldr	r2, [pc, #168]	; (80097ec <xTaskResumeAll+0x120>)
 8009742:	6013      	str	r3, [r2, #0]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009748:	4613      	mov	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4413      	add	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4a27      	ldr	r2, [pc, #156]	; (80097f0 <xTaskResumeAll+0x124>)
 8009752:	441a      	add	r2, r3
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	3304      	adds	r3, #4
 8009758:	4619      	mov	r1, r3
 800975a:	4610      	mov	r0, r2
 800975c:	f7fe ff49 	bl	80085f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009764:	4b23      	ldr	r3, [pc, #140]	; (80097f4 <xTaskResumeAll+0x128>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976a:	429a      	cmp	r2, r3
 800976c:	d302      	bcc.n	8009774 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800976e:	4b22      	ldr	r3, [pc, #136]	; (80097f8 <xTaskResumeAll+0x12c>)
 8009770:	2201      	movs	r2, #1
 8009772:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009774:	4b1c      	ldr	r3, [pc, #112]	; (80097e8 <xTaskResumeAll+0x11c>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1cc      	bne.n	8009716 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009782:	f000 fb0b 	bl	8009d9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009786:	4b1d      	ldr	r3, [pc, #116]	; (80097fc <xTaskResumeAll+0x130>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d010      	beq.n	80097b4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009792:	f000 f837 	bl	8009804 <xTaskIncrementTick>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d002      	beq.n	80097a2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800979c:	4b16      	ldr	r3, [pc, #88]	; (80097f8 <xTaskResumeAll+0x12c>)
 800979e:	2201      	movs	r2, #1
 80097a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1f1      	bne.n	8009792 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80097ae:	4b13      	ldr	r3, [pc, #76]	; (80097fc <xTaskResumeAll+0x130>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80097b4:	4b10      	ldr	r3, [pc, #64]	; (80097f8 <xTaskResumeAll+0x12c>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d009      	beq.n	80097d0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80097bc:	2301      	movs	r3, #1
 80097be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80097c0:	4b0f      	ldr	r3, [pc, #60]	; (8009800 <xTaskResumeAll+0x134>)
 80097c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097c6:	601a      	str	r2, [r3, #0]
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097d0:	f000 fe8a 	bl	800a4e8 <vPortExitCritical>

	return xAlreadyYielded;
 80097d4:	68bb      	ldr	r3, [r7, #8]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20000434 	.word	0x20000434
 80097e4:	2000040c 	.word	0x2000040c
 80097e8:	200003cc 	.word	0x200003cc
 80097ec:	20000414 	.word	0x20000414
 80097f0:	20000310 	.word	0x20000310
 80097f4:	2000030c 	.word	0x2000030c
 80097f8:	20000420 	.word	0x20000420
 80097fc:	2000041c 	.word	0x2000041c
 8009800:	e000ed04 	.word	0xe000ed04

08009804 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800980a:	2300      	movs	r3, #0
 800980c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800980e:	4b4e      	ldr	r3, [pc, #312]	; (8009948 <xTaskIncrementTick+0x144>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	f040 8087 	bne.w	8009926 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009818:	4b4c      	ldr	r3, [pc, #304]	; (800994c <xTaskIncrementTick+0x148>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	3301      	adds	r3, #1
 800981e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009820:	4a4a      	ldr	r2, [pc, #296]	; (800994c <xTaskIncrementTick+0x148>)
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d11f      	bne.n	800986c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800982c:	4b48      	ldr	r3, [pc, #288]	; (8009950 <xTaskIncrementTick+0x14c>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d009      	beq.n	800984a <xTaskIncrementTick+0x46>
 8009836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	603b      	str	r3, [r7, #0]
 8009848:	e7fe      	b.n	8009848 <xTaskIncrementTick+0x44>
 800984a:	4b41      	ldr	r3, [pc, #260]	; (8009950 <xTaskIncrementTick+0x14c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	60fb      	str	r3, [r7, #12]
 8009850:	4b40      	ldr	r3, [pc, #256]	; (8009954 <xTaskIncrementTick+0x150>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a3e      	ldr	r2, [pc, #248]	; (8009950 <xTaskIncrementTick+0x14c>)
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	4a3e      	ldr	r2, [pc, #248]	; (8009954 <xTaskIncrementTick+0x150>)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6013      	str	r3, [r2, #0]
 800985e:	4b3e      	ldr	r3, [pc, #248]	; (8009958 <xTaskIncrementTick+0x154>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3301      	adds	r3, #1
 8009864:	4a3c      	ldr	r2, [pc, #240]	; (8009958 <xTaskIncrementTick+0x154>)
 8009866:	6013      	str	r3, [r2, #0]
 8009868:	f000 fa98 	bl	8009d9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800986c:	4b3b      	ldr	r3, [pc, #236]	; (800995c <xTaskIncrementTick+0x158>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	429a      	cmp	r2, r3
 8009874:	d348      	bcc.n	8009908 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009876:	4b36      	ldr	r3, [pc, #216]	; (8009950 <xTaskIncrementTick+0x14c>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d104      	bne.n	800988a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009880:	4b36      	ldr	r3, [pc, #216]	; (800995c <xTaskIncrementTick+0x158>)
 8009882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009886:	601a      	str	r2, [r3, #0]
					break;
 8009888:	e03e      	b.n	8009908 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800988a:	4b31      	ldr	r3, [pc, #196]	; (8009950 <xTaskIncrementTick+0x14c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d203      	bcs.n	80098aa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80098a2:	4a2e      	ldr	r2, [pc, #184]	; (800995c <xTaskIncrementTick+0x158>)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80098a8:	e02e      	b.n	8009908 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	3304      	adds	r3, #4
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fe fefc 	bl	80086ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d004      	beq.n	80098c6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	3318      	adds	r3, #24
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fe fef3 	bl	80086ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ca:	2201      	movs	r2, #1
 80098cc:	409a      	lsls	r2, r3
 80098ce:	4b24      	ldr	r3, [pc, #144]	; (8009960 <xTaskIncrementTick+0x15c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	4a22      	ldr	r2, [pc, #136]	; (8009960 <xTaskIncrementTick+0x15c>)
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098dc:	4613      	mov	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4413      	add	r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4a1f      	ldr	r2, [pc, #124]	; (8009964 <xTaskIncrementTick+0x160>)
 80098e6:	441a      	add	r2, r3
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	3304      	adds	r3, #4
 80098ec:	4619      	mov	r1, r3
 80098ee:	4610      	mov	r0, r2
 80098f0:	f7fe fe7f 	bl	80085f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f8:	4b1b      	ldr	r3, [pc, #108]	; (8009968 <xTaskIncrementTick+0x164>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fe:	429a      	cmp	r2, r3
 8009900:	d3b9      	bcc.n	8009876 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009902:	2301      	movs	r3, #1
 8009904:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009906:	e7b6      	b.n	8009876 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009908:	4b17      	ldr	r3, [pc, #92]	; (8009968 <xTaskIncrementTick+0x164>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990e:	4915      	ldr	r1, [pc, #84]	; (8009964 <xTaskIncrementTick+0x160>)
 8009910:	4613      	mov	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	440b      	add	r3, r1
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d907      	bls.n	8009930 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8009920:	2301      	movs	r3, #1
 8009922:	617b      	str	r3, [r7, #20]
 8009924:	e004      	b.n	8009930 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009926:	4b11      	ldr	r3, [pc, #68]	; (800996c <xTaskIncrementTick+0x168>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	3301      	adds	r3, #1
 800992c:	4a0f      	ldr	r2, [pc, #60]	; (800996c <xTaskIncrementTick+0x168>)
 800992e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009930:	4b0f      	ldr	r3, [pc, #60]	; (8009970 <xTaskIncrementTick+0x16c>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d001      	beq.n	800993c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8009938:	2301      	movs	r3, #1
 800993a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800993c:	697b      	ldr	r3, [r7, #20]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	20000434 	.word	0x20000434
 800994c:	20000410 	.word	0x20000410
 8009950:	200003c4 	.word	0x200003c4
 8009954:	200003c8 	.word	0x200003c8
 8009958:	20000424 	.word	0x20000424
 800995c:	2000042c 	.word	0x2000042c
 8009960:	20000414 	.word	0x20000414
 8009964:	20000310 	.word	0x20000310
 8009968:	2000030c 	.word	0x2000030c
 800996c:	2000041c 	.word	0x2000041c
 8009970:	20000420 	.word	0x20000420

08009974 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009974:	b480      	push	{r7}
 8009976:	b087      	sub	sp, #28
 8009978:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800997a:	4b26      	ldr	r3, [pc, #152]	; (8009a14 <vTaskSwitchContext+0xa0>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d003      	beq.n	800998a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009982:	4b25      	ldr	r3, [pc, #148]	; (8009a18 <vTaskSwitchContext+0xa4>)
 8009984:	2201      	movs	r2, #1
 8009986:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009988:	e03e      	b.n	8009a08 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800998a:	4b23      	ldr	r3, [pc, #140]	; (8009a18 <vTaskSwitchContext+0xa4>)
 800998c:	2200      	movs	r2, #0
 800998e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009990:	4b22      	ldr	r3, [pc, #136]	; (8009a1c <vTaskSwitchContext+0xa8>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	fab3 f383 	clz	r3, r3
 800999c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800999e:	7afb      	ldrb	r3, [r7, #11]
 80099a0:	f1c3 031f 	rsb	r3, r3, #31
 80099a4:	617b      	str	r3, [r7, #20]
 80099a6:	491e      	ldr	r1, [pc, #120]	; (8009a20 <vTaskSwitchContext+0xac>)
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	4613      	mov	r3, r2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	440b      	add	r3, r1
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d109      	bne.n	80099ce <vTaskSwitchContext+0x5a>
	__asm volatile
 80099ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	607b      	str	r3, [r7, #4]
 80099cc:	e7fe      	b.n	80099cc <vTaskSwitchContext+0x58>
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	4613      	mov	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	4a11      	ldr	r2, [pc, #68]	; (8009a20 <vTaskSwitchContext+0xac>)
 80099da:	4413      	add	r3, r2
 80099dc:	613b      	str	r3, [r7, #16]
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	605a      	str	r2, [r3, #4]
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	3308      	adds	r3, #8
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d104      	bne.n	80099fe <vTaskSwitchContext+0x8a>
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	605a      	str	r2, [r3, #4]
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	4a07      	ldr	r2, [pc, #28]	; (8009a24 <vTaskSwitchContext+0xb0>)
 8009a06:	6013      	str	r3, [r2, #0]
}
 8009a08:	bf00      	nop
 8009a0a:	371c      	adds	r7, #28
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr
 8009a14:	20000434 	.word	0x20000434
 8009a18:	20000420 	.word	0x20000420
 8009a1c:	20000414 	.word	0x20000414
 8009a20:	20000310 	.word	0x20000310
 8009a24:	2000030c 	.word	0x2000030c

08009a28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d109      	bne.n	8009a4c <vTaskPlaceOnEventList+0x24>
 8009a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	60fb      	str	r3, [r7, #12]
 8009a4a:	e7fe      	b.n	8009a4a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a4c:	4b07      	ldr	r3, [pc, #28]	; (8009a6c <vTaskPlaceOnEventList+0x44>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	3318      	adds	r3, #24
 8009a52:	4619      	mov	r1, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f7fe fdf0 	bl	800863a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	6838      	ldr	r0, [r7, #0]
 8009a5e:	f000 fb8b 	bl	800a178 <prvAddCurrentTaskToDelayedList>
}
 8009a62:	bf00      	nop
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	2000030c 	.word	0x2000030c

08009a70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d109      	bne.n	8009a9a <xTaskRemoveFromEventList+0x2a>
 8009a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	60fb      	str	r3, [r7, #12]
 8009a98:	e7fe      	b.n	8009a98 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	3318      	adds	r3, #24
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fe fe04 	bl	80086ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aa4:	4b1d      	ldr	r3, [pc, #116]	; (8009b1c <xTaskRemoveFromEventList+0xac>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d11c      	bne.n	8009ae6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	3304      	adds	r3, #4
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7fe fdfb 	bl	80086ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aba:	2201      	movs	r2, #1
 8009abc:	409a      	lsls	r2, r3
 8009abe:	4b18      	ldr	r3, [pc, #96]	; (8009b20 <xTaskRemoveFromEventList+0xb0>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	4a16      	ldr	r2, [pc, #88]	; (8009b20 <xTaskRemoveFromEventList+0xb0>)
 8009ac6:	6013      	str	r3, [r2, #0]
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009acc:	4613      	mov	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4413      	add	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4a13      	ldr	r2, [pc, #76]	; (8009b24 <xTaskRemoveFromEventList+0xb4>)
 8009ad6:	441a      	add	r2, r3
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	3304      	adds	r3, #4
 8009adc:	4619      	mov	r1, r3
 8009ade:	4610      	mov	r0, r2
 8009ae0:	f7fe fd87 	bl	80085f2 <vListInsertEnd>
 8009ae4:	e005      	b.n	8009af2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	3318      	adds	r3, #24
 8009aea:	4619      	mov	r1, r3
 8009aec:	480e      	ldr	r0, [pc, #56]	; (8009b28 <xTaskRemoveFromEventList+0xb8>)
 8009aee:	f7fe fd80 	bl	80085f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af6:	4b0d      	ldr	r3, [pc, #52]	; (8009b2c <xTaskRemoveFromEventList+0xbc>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d905      	bls.n	8009b0c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b00:	2301      	movs	r3, #1
 8009b02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b04:	4b0a      	ldr	r3, [pc, #40]	; (8009b30 <xTaskRemoveFromEventList+0xc0>)
 8009b06:	2201      	movs	r2, #1
 8009b08:	601a      	str	r2, [r3, #0]
 8009b0a:	e001      	b.n	8009b10 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b10:	697b      	ldr	r3, [r7, #20]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3718      	adds	r7, #24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	20000434 	.word	0x20000434
 8009b20:	20000414 	.word	0x20000414
 8009b24:	20000310 	.word	0x20000310
 8009b28:	200003cc 	.word	0x200003cc
 8009b2c:	2000030c 	.word	0x2000030c
 8009b30:	20000420 	.word	0x20000420

08009b34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b3c:	4b06      	ldr	r3, [pc, #24]	; (8009b58 <vTaskInternalSetTimeOutState+0x24>)
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b44:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <vTaskInternalSetTimeOutState+0x28>)
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	605a      	str	r2, [r3, #4]
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr
 8009b58:	20000424 	.word	0x20000424
 8009b5c:	20000410 	.word	0x20000410

08009b60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b088      	sub	sp, #32
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d109      	bne.n	8009b84 <xTaskCheckForTimeOut+0x24>
 8009b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	613b      	str	r3, [r7, #16]
 8009b82:	e7fe      	b.n	8009b82 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d109      	bne.n	8009b9e <xTaskCheckForTimeOut+0x3e>
 8009b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	60fb      	str	r3, [r7, #12]
 8009b9c:	e7fe      	b.n	8009b9c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009b9e:	f000 fc75 	bl	800a48c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ba2:	4b1d      	ldr	r3, [pc, #116]	; (8009c18 <xTaskCheckForTimeOut+0xb8>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bba:	d102      	bne.n	8009bc2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	61fb      	str	r3, [r7, #28]
 8009bc0:	e023      	b.n	8009c0a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	4b15      	ldr	r3, [pc, #84]	; (8009c1c <xTaskCheckForTimeOut+0xbc>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d007      	beq.n	8009bde <xTaskCheckForTimeOut+0x7e>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	69ba      	ldr	r2, [r7, #24]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d302      	bcc.n	8009bde <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	61fb      	str	r3, [r7, #28]
 8009bdc:	e015      	b.n	8009c0a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d20b      	bcs.n	8009c00 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	1ad2      	subs	r2, r2, r3
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7ff ff9d 	bl	8009b34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	61fb      	str	r3, [r7, #28]
 8009bfe:	e004      	b.n	8009c0a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	2200      	movs	r2, #0
 8009c04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c06:	2301      	movs	r3, #1
 8009c08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c0a:	f000 fc6d 	bl	800a4e8 <vPortExitCritical>

	return xReturn;
 8009c0e:	69fb      	ldr	r3, [r7, #28]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3720      	adds	r7, #32
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	20000410 	.word	0x20000410
 8009c1c:	20000424 	.word	0x20000424

08009c20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c20:	b480      	push	{r7}
 8009c22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c24:	4b03      	ldr	r3, [pc, #12]	; (8009c34 <vTaskMissedYield+0x14>)
 8009c26:	2201      	movs	r2, #1
 8009c28:	601a      	str	r2, [r3, #0]
}
 8009c2a:	bf00      	nop
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	20000420 	.word	0x20000420

08009c38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c40:	f000 f852 	bl	8009ce8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c44:	4b06      	ldr	r3, [pc, #24]	; (8009c60 <prvIdleTask+0x28>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d9f9      	bls.n	8009c40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c4c:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <prvIdleTask+0x2c>)
 8009c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c52:	601a      	str	r2, [r3, #0]
 8009c54:	f3bf 8f4f 	dsb	sy
 8009c58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c5c:	e7f0      	b.n	8009c40 <prvIdleTask+0x8>
 8009c5e:	bf00      	nop
 8009c60:	20000310 	.word	0x20000310
 8009c64:	e000ed04 	.word	0xe000ed04

08009c68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c6e:	2300      	movs	r3, #0
 8009c70:	607b      	str	r3, [r7, #4]
 8009c72:	e00c      	b.n	8009c8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	4613      	mov	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4a12      	ldr	r2, [pc, #72]	; (8009cc8 <prvInitialiseTaskLists+0x60>)
 8009c80:	4413      	add	r3, r2
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7fe fc88 	bl	8008598 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	607b      	str	r3, [r7, #4]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2b06      	cmp	r3, #6
 8009c92:	d9ef      	bls.n	8009c74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c94:	480d      	ldr	r0, [pc, #52]	; (8009ccc <prvInitialiseTaskLists+0x64>)
 8009c96:	f7fe fc7f 	bl	8008598 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c9a:	480d      	ldr	r0, [pc, #52]	; (8009cd0 <prvInitialiseTaskLists+0x68>)
 8009c9c:	f7fe fc7c 	bl	8008598 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ca0:	480c      	ldr	r0, [pc, #48]	; (8009cd4 <prvInitialiseTaskLists+0x6c>)
 8009ca2:	f7fe fc79 	bl	8008598 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ca6:	480c      	ldr	r0, [pc, #48]	; (8009cd8 <prvInitialiseTaskLists+0x70>)
 8009ca8:	f7fe fc76 	bl	8008598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009cac:	480b      	ldr	r0, [pc, #44]	; (8009cdc <prvInitialiseTaskLists+0x74>)
 8009cae:	f7fe fc73 	bl	8008598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cb2:	4b0b      	ldr	r3, [pc, #44]	; (8009ce0 <prvInitialiseTaskLists+0x78>)
 8009cb4:	4a05      	ldr	r2, [pc, #20]	; (8009ccc <prvInitialiseTaskLists+0x64>)
 8009cb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cb8:	4b0a      	ldr	r3, [pc, #40]	; (8009ce4 <prvInitialiseTaskLists+0x7c>)
 8009cba:	4a05      	ldr	r2, [pc, #20]	; (8009cd0 <prvInitialiseTaskLists+0x68>)
 8009cbc:	601a      	str	r2, [r3, #0]
}
 8009cbe:	bf00      	nop
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20000310 	.word	0x20000310
 8009ccc:	2000039c 	.word	0x2000039c
 8009cd0:	200003b0 	.word	0x200003b0
 8009cd4:	200003cc 	.word	0x200003cc
 8009cd8:	200003e0 	.word	0x200003e0
 8009cdc:	200003f8 	.word	0x200003f8
 8009ce0:	200003c4 	.word	0x200003c4
 8009ce4:	200003c8 	.word	0x200003c8

08009ce8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cee:	e019      	b.n	8009d24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009cf0:	f000 fbcc 	bl	800a48c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cf4:	4b0f      	ldr	r3, [pc, #60]	; (8009d34 <prvCheckTasksWaitingTermination+0x4c>)
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	3304      	adds	r3, #4
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fe fcd3 	bl	80086ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d06:	4b0c      	ldr	r3, [pc, #48]	; (8009d38 <prvCheckTasksWaitingTermination+0x50>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	4a0a      	ldr	r2, [pc, #40]	; (8009d38 <prvCheckTasksWaitingTermination+0x50>)
 8009d0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d10:	4b0a      	ldr	r3, [pc, #40]	; (8009d3c <prvCheckTasksWaitingTermination+0x54>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3b01      	subs	r3, #1
 8009d16:	4a09      	ldr	r2, [pc, #36]	; (8009d3c <prvCheckTasksWaitingTermination+0x54>)
 8009d18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d1a:	f000 fbe5 	bl	800a4e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f80e 	bl	8009d40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d24:	4b05      	ldr	r3, [pc, #20]	; (8009d3c <prvCheckTasksWaitingTermination+0x54>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1e1      	bne.n	8009cf0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d2c:	bf00      	nop
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	200003e0 	.word	0x200003e0
 8009d38:	2000040c 	.word	0x2000040c
 8009d3c:	200003f4 	.word	0x200003f4

08009d40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d108      	bne.n	8009d64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 fd74 	bl	800a844 <vPortFree>
				vPortFree( pxTCB );
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fd71 	bl	800a844 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d62:	e017      	b.n	8009d94 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d103      	bne.n	8009d76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fd68 	bl	800a844 <vPortFree>
	}
 8009d74:	e00e      	b.n	8009d94 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d009      	beq.n	8009d94 <prvDeleteTCB+0x54>
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	60fb      	str	r3, [r7, #12]
 8009d92:	e7fe      	b.n	8009d92 <prvDeleteTCB+0x52>
	}
 8009d94:	bf00      	nop
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009da2:	4b0c      	ldr	r3, [pc, #48]	; (8009dd4 <prvResetNextTaskUnblockTime+0x38>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d104      	bne.n	8009db6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009dac:	4b0a      	ldr	r3, [pc, #40]	; (8009dd8 <prvResetNextTaskUnblockTime+0x3c>)
 8009dae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009db2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009db4:	e008      	b.n	8009dc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009db6:	4b07      	ldr	r3, [pc, #28]	; (8009dd4 <prvResetNextTaskUnblockTime+0x38>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	4a04      	ldr	r2, [pc, #16]	; (8009dd8 <prvResetNextTaskUnblockTime+0x3c>)
 8009dc6:	6013      	str	r3, [r2, #0]
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr
 8009dd4:	200003c4 	.word	0x200003c4
 8009dd8:	2000042c 	.word	0x2000042c

08009ddc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009de2:	4b0b      	ldr	r3, [pc, #44]	; (8009e10 <xTaskGetSchedulerState+0x34>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d102      	bne.n	8009df0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009dea:	2301      	movs	r3, #1
 8009dec:	607b      	str	r3, [r7, #4]
 8009dee:	e008      	b.n	8009e02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009df0:	4b08      	ldr	r3, [pc, #32]	; (8009e14 <xTaskGetSchedulerState+0x38>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d102      	bne.n	8009dfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009df8:	2302      	movs	r3, #2
 8009dfa:	607b      	str	r3, [r7, #4]
 8009dfc:	e001      	b.n	8009e02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e02:	687b      	ldr	r3, [r7, #4]
	}
 8009e04:	4618      	mov	r0, r3
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	20000418 	.word	0x20000418
 8009e14:	20000434 	.word	0x20000434

08009e18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009e24:	2300      	movs	r3, #0
 8009e26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d069      	beq.n	8009f02 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e32:	4b36      	ldr	r3, [pc, #216]	; (8009f0c <xTaskPriorityInherit+0xf4>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d259      	bcs.n	8009ef0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	db06      	blt.n	8009e52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e44:	4b31      	ldr	r3, [pc, #196]	; (8009f0c <xTaskPriorityInherit+0xf4>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4a:	f1c3 0207 	rsb	r2, r3, #7
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	6959      	ldr	r1, [r3, #20]
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	4413      	add	r3, r2
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	4a2b      	ldr	r2, [pc, #172]	; (8009f10 <xTaskPriorityInherit+0xf8>)
 8009e64:	4413      	add	r3, r2
 8009e66:	4299      	cmp	r1, r3
 8009e68:	d13a      	bne.n	8009ee0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fe fc1c 	bl	80086ac <uxListRemove>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d115      	bne.n	8009ea6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e7e:	4924      	ldr	r1, [pc, #144]	; (8009f10 <xTaskPriorityInherit+0xf8>)
 8009e80:	4613      	mov	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	440b      	add	r3, r1
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10a      	bne.n	8009ea6 <xTaskPriorityInherit+0x8e>
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	2201      	movs	r2, #1
 8009e96:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9a:	43da      	mvns	r2, r3
 8009e9c:	4b1d      	ldr	r3, [pc, #116]	; (8009f14 <xTaskPriorityInherit+0xfc>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	4a1c      	ldr	r2, [pc, #112]	; (8009f14 <xTaskPriorityInherit+0xfc>)
 8009ea4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ea6:	4b19      	ldr	r3, [pc, #100]	; (8009f0c <xTaskPriorityInherit+0xf4>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	409a      	lsls	r2, r3
 8009eb8:	4b16      	ldr	r3, [pc, #88]	; (8009f14 <xTaskPriorityInherit+0xfc>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	4a15      	ldr	r2, [pc, #84]	; (8009f14 <xTaskPriorityInherit+0xfc>)
 8009ec0:	6013      	str	r3, [r2, #0]
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	4413      	add	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	4a10      	ldr	r2, [pc, #64]	; (8009f10 <xTaskPriorityInherit+0xf8>)
 8009ed0:	441a      	add	r2, r3
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	4610      	mov	r0, r2
 8009eda:	f7fe fb8a 	bl	80085f2 <vListInsertEnd>
 8009ede:	e004      	b.n	8009eea <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ee0:	4b0a      	ldr	r3, [pc, #40]	; (8009f0c <xTaskPriorityInherit+0xf4>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009eea:	2301      	movs	r3, #1
 8009eec:	60fb      	str	r3, [r7, #12]
 8009eee:	e008      	b.n	8009f02 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ef4:	4b05      	ldr	r3, [pc, #20]	; (8009f0c <xTaskPriorityInherit+0xf4>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d201      	bcs.n	8009f02 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009efe:	2301      	movs	r3, #1
 8009f00:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f02:	68fb      	ldr	r3, [r7, #12]
	}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	2000030c 	.word	0x2000030c
 8009f10:	20000310 	.word	0x20000310
 8009f14:	20000414 	.word	0x20000414

08009f18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f24:	2300      	movs	r3, #0
 8009f26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d06c      	beq.n	800a008 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f2e:	4b39      	ldr	r3, [pc, #228]	; (800a014 <xTaskPriorityDisinherit+0xfc>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	693a      	ldr	r2, [r7, #16]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d009      	beq.n	8009f4c <xTaskPriorityDisinherit+0x34>
 8009f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3c:	f383 8811 	msr	BASEPRI, r3
 8009f40:	f3bf 8f6f 	isb	sy
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	60fb      	str	r3, [r7, #12]
 8009f4a:	e7fe      	b.n	8009f4a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d109      	bne.n	8009f68 <xTaskPriorityDisinherit+0x50>
 8009f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	60bb      	str	r3, [r7, #8]
 8009f66:	e7fe      	b.n	8009f66 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f6c:	1e5a      	subs	r2, r3, #1
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d044      	beq.n	800a008 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d140      	bne.n	800a008 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	3304      	adds	r3, #4
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe fb8e 	bl	80086ac <uxListRemove>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d115      	bne.n	8009fc2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9a:	491f      	ldr	r1, [pc, #124]	; (800a018 <xTaskPriorityDisinherit+0x100>)
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	440b      	add	r3, r1
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10a      	bne.n	8009fc2 <xTaskPriorityDisinherit+0xaa>
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb6:	43da      	mvns	r2, r3
 8009fb8:	4b18      	ldr	r3, [pc, #96]	; (800a01c <xTaskPriorityDisinherit+0x104>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	4a17      	ldr	r2, [pc, #92]	; (800a01c <xTaskPriorityDisinherit+0x104>)
 8009fc0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fce:	f1c3 0207 	rsb	r2, r3, #7
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fda:	2201      	movs	r2, #1
 8009fdc:	409a      	lsls	r2, r3
 8009fde:	4b0f      	ldr	r3, [pc, #60]	; (800a01c <xTaskPriorityDisinherit+0x104>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	4a0d      	ldr	r2, [pc, #52]	; (800a01c <xTaskPriorityDisinherit+0x104>)
 8009fe6:	6013      	str	r3, [r2, #0]
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fec:	4613      	mov	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	4413      	add	r3, r2
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	4a08      	ldr	r2, [pc, #32]	; (800a018 <xTaskPriorityDisinherit+0x100>)
 8009ff6:	441a      	add	r2, r3
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	3304      	adds	r3, #4
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	4610      	mov	r0, r2
 800a000:	f7fe faf7 	bl	80085f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a004:	2301      	movs	r3, #1
 800a006:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a008:	697b      	ldr	r3, [r7, #20]
	}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3718      	adds	r7, #24
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	2000030c 	.word	0x2000030c
 800a018:	20000310 	.word	0x20000310
 800a01c:	20000414 	.word	0x20000414

0800a020 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a020:	b580      	push	{r7, lr}
 800a022:	b088      	sub	sp, #32
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a02e:	2301      	movs	r3, #1
 800a030:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 8081 	beq.w	800a13c <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d109      	bne.n	800a056 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	60fb      	str	r3, [r7, #12]
 800a054:	e7fe      	b.n	800a054 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a05a:	683a      	ldr	r2, [r7, #0]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d902      	bls.n	800a066 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	61fb      	str	r3, [r7, #28]
 800a064:	e002      	b.n	800a06c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a06a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a070:	69fa      	ldr	r2, [r7, #28]
 800a072:	429a      	cmp	r2, r3
 800a074:	d062      	beq.n	800a13c <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a07a:	697a      	ldr	r2, [r7, #20]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d15d      	bne.n	800a13c <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a080:	4b30      	ldr	r3, [pc, #192]	; (800a144 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	69ba      	ldr	r2, [r7, #24]
 800a086:	429a      	cmp	r2, r3
 800a088:	d109      	bne.n	800a09e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800a08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08e:	f383 8811 	msr	BASEPRI, r3
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	60bb      	str	r3, [r7, #8]
 800a09c:	e7fe      	b.n	800a09c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	69fa      	ldr	r2, [r7, #28]
 800a0a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	699b      	ldr	r3, [r3, #24]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	db04      	blt.n	800a0bc <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	f1c3 0207 	rsb	r2, r3, #7
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	6959      	ldr	r1, [r3, #20]
 800a0c0:	693a      	ldr	r2, [r7, #16]
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4a1f      	ldr	r2, [pc, #124]	; (800a148 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a0cc:	4413      	add	r3, r2
 800a0ce:	4299      	cmp	r1, r3
 800a0d0:	d134      	bne.n	800a13c <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	3304      	adds	r3, #4
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7fe fae8 	bl	80086ac <uxListRemove>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d115      	bne.n	800a10e <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e6:	4918      	ldr	r1, [pc, #96]	; (800a148 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	4413      	add	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	440b      	add	r3, r1
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10a      	bne.n	800a10e <vTaskPriorityDisinheritAfterTimeout+0xee>
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a102:	43da      	mvns	r2, r3
 800a104:	4b11      	ldr	r3, [pc, #68]	; (800a14c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4013      	ands	r3, r2
 800a10a:	4a10      	ldr	r2, [pc, #64]	; (800a14c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a10c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a112:	2201      	movs	r2, #1
 800a114:	409a      	lsls	r2, r3
 800a116:	4b0d      	ldr	r3, [pc, #52]	; (800a14c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	4a0b      	ldr	r2, [pc, #44]	; (800a14c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a124:	4613      	mov	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4413      	add	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4a06      	ldr	r2, [pc, #24]	; (800a148 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a12e:	441a      	add	r2, r3
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	3304      	adds	r3, #4
 800a134:	4619      	mov	r1, r3
 800a136:	4610      	mov	r0, r2
 800a138:	f7fe fa5b 	bl	80085f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a13c:	bf00      	nop
 800a13e:	3720      	adds	r7, #32
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	2000030c 	.word	0x2000030c
 800a148:	20000310 	.word	0x20000310
 800a14c:	20000414 	.word	0x20000414

0800a150 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a150:	b480      	push	{r7}
 800a152:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a154:	4b07      	ldr	r3, [pc, #28]	; (800a174 <pvTaskIncrementMutexHeldCount+0x24>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d004      	beq.n	800a166 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a15c:	4b05      	ldr	r3, [pc, #20]	; (800a174 <pvTaskIncrementMutexHeldCount+0x24>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a162:	3201      	adds	r2, #1
 800a164:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a166:	4b03      	ldr	r3, [pc, #12]	; (800a174 <pvTaskIncrementMutexHeldCount+0x24>)
 800a168:	681b      	ldr	r3, [r3, #0]
	}
 800a16a:	4618      	mov	r0, r3
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	2000030c 	.word	0x2000030c

0800a178 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a182:	4b29      	ldr	r3, [pc, #164]	; (800a228 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a188:	4b28      	ldr	r3, [pc, #160]	; (800a22c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	3304      	adds	r3, #4
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fe fa8c 	bl	80086ac <uxListRemove>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10b      	bne.n	800a1b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a19a:	4b24      	ldr	r3, [pc, #144]	; (800a22c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1a6:	43da      	mvns	r2, r3
 800a1a8:	4b21      	ldr	r3, [pc, #132]	; (800a230 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	4a20      	ldr	r2, [pc, #128]	; (800a230 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a1b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1b8:	d10a      	bne.n	800a1d0 <prvAddCurrentTaskToDelayedList+0x58>
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d007      	beq.n	800a1d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1c0:	4b1a      	ldr	r3, [pc, #104]	; (800a22c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	481a      	ldr	r0, [pc, #104]	; (800a234 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a1ca:	f7fe fa12 	bl	80085f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a1ce:	e026      	b.n	800a21e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a1d8:	4b14      	ldr	r3, [pc, #80]	; (800a22c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a1e0:	68ba      	ldr	r2, [r7, #8]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d209      	bcs.n	800a1fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1e8:	4b13      	ldr	r3, [pc, #76]	; (800a238 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	4b0f      	ldr	r3, [pc, #60]	; (800a22c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	3304      	adds	r3, #4
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	f7fe fa20 	bl	800863a <vListInsert>
}
 800a1fa:	e010      	b.n	800a21e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1fc:	4b0f      	ldr	r3, [pc, #60]	; (800a23c <prvAddCurrentTaskToDelayedList+0xc4>)
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	3304      	adds	r3, #4
 800a206:	4619      	mov	r1, r3
 800a208:	4610      	mov	r0, r2
 800a20a:	f7fe fa16 	bl	800863a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a20e:	4b0c      	ldr	r3, [pc, #48]	; (800a240 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	429a      	cmp	r2, r3
 800a216:	d202      	bcs.n	800a21e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a218:	4a09      	ldr	r2, [pc, #36]	; (800a240 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	6013      	str	r3, [r2, #0]
}
 800a21e:	bf00      	nop
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	20000410 	.word	0x20000410
 800a22c:	2000030c 	.word	0x2000030c
 800a230:	20000414 	.word	0x20000414
 800a234:	200003f8 	.word	0x200003f8
 800a238:	200003c8 	.word	0x200003c8
 800a23c:	200003c4 	.word	0x200003c4
 800a240:	2000042c 	.word	0x2000042c

0800a244 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	3b04      	subs	r3, #4
 800a254:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a25c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	3b04      	subs	r3, #4
 800a262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	f023 0201 	bic.w	r2, r3, #1
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	3b04      	subs	r3, #4
 800a272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a274:	4a0c      	ldr	r2, [pc, #48]	; (800a2a8 <pxPortInitialiseStack+0x64>)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3b14      	subs	r3, #20
 800a27e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	3b04      	subs	r3, #4
 800a28a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f06f 0202 	mvn.w	r2, #2
 800a292:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	3b20      	subs	r3, #32
 800a298:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a29a:	68fb      	ldr	r3, [r7, #12]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr
 800a2a8:	0800a2ad 	.word	0x0800a2ad

0800a2ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a2b6:	4b11      	ldr	r3, [pc, #68]	; (800a2fc <prvTaskExitError+0x50>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2be:	d009      	beq.n	800a2d4 <prvTaskExitError+0x28>
 800a2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	60fb      	str	r3, [r7, #12]
 800a2d2:	e7fe      	b.n	800a2d2 <prvTaskExitError+0x26>
 800a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a2e6:	bf00      	nop
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d0fc      	beq.n	800a2e8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a2ee:	bf00      	nop
 800a2f0:	3714      	adds	r7, #20
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	20000010 	.word	0x20000010

0800a300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a300:	4b07      	ldr	r3, [pc, #28]	; (800a320 <pxCurrentTCBConst2>)
 800a302:	6819      	ldr	r1, [r3, #0]
 800a304:	6808      	ldr	r0, [r1, #0]
 800a306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30a:	f380 8809 	msr	PSP, r0
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f04f 0000 	mov.w	r0, #0
 800a316:	f380 8811 	msr	BASEPRI, r0
 800a31a:	4770      	bx	lr
 800a31c:	f3af 8000 	nop.w

0800a320 <pxCurrentTCBConst2>:
 800a320:	2000030c 	.word	0x2000030c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop

0800a328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a328:	4808      	ldr	r0, [pc, #32]	; (800a34c <prvPortStartFirstTask+0x24>)
 800a32a:	6800      	ldr	r0, [r0, #0]
 800a32c:	6800      	ldr	r0, [r0, #0]
 800a32e:	f380 8808 	msr	MSP, r0
 800a332:	f04f 0000 	mov.w	r0, #0
 800a336:	f380 8814 	msr	CONTROL, r0
 800a33a:	b662      	cpsie	i
 800a33c:	b661      	cpsie	f
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	df00      	svc	0
 800a348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a34a:	bf00      	nop
 800a34c:	e000ed08 	.word	0xe000ed08

0800a350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a356:	4b44      	ldr	r3, [pc, #272]	; (800a468 <xPortStartScheduler+0x118>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a44      	ldr	r2, [pc, #272]	; (800a46c <xPortStartScheduler+0x11c>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d109      	bne.n	800a374 <xPortStartScheduler+0x24>
 800a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	613b      	str	r3, [r7, #16]
 800a372:	e7fe      	b.n	800a372 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a374:	4b3c      	ldr	r3, [pc, #240]	; (800a468 <xPortStartScheduler+0x118>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a3d      	ldr	r2, [pc, #244]	; (800a470 <xPortStartScheduler+0x120>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d109      	bne.n	800a392 <xPortStartScheduler+0x42>
 800a37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a382:	f383 8811 	msr	BASEPRI, r3
 800a386:	f3bf 8f6f 	isb	sy
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	60fb      	str	r3, [r7, #12]
 800a390:	e7fe      	b.n	800a390 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a392:	4b38      	ldr	r3, [pc, #224]	; (800a474 <xPortStartScheduler+0x124>)
 800a394:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	22ff      	movs	r2, #255	; 0xff
 800a3a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a3ac:	78fb      	ldrb	r3, [r7, #3]
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a3b4:	b2da      	uxtb	r2, r3
 800a3b6:	4b30      	ldr	r3, [pc, #192]	; (800a478 <xPortStartScheduler+0x128>)
 800a3b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a3ba:	4b30      	ldr	r3, [pc, #192]	; (800a47c <xPortStartScheduler+0x12c>)
 800a3bc:	2207      	movs	r2, #7
 800a3be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3c0:	e009      	b.n	800a3d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a3c2:	4b2e      	ldr	r3, [pc, #184]	; (800a47c <xPortStartScheduler+0x12c>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	4a2c      	ldr	r2, [pc, #176]	; (800a47c <xPortStartScheduler+0x12c>)
 800a3ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a3cc:	78fb      	ldrb	r3, [r7, #3]
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	005b      	lsls	r3, r3, #1
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3d6:	78fb      	ldrb	r3, [r7, #3]
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3de:	2b80      	cmp	r3, #128	; 0x80
 800a3e0:	d0ef      	beq.n	800a3c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a3e2:	4b26      	ldr	r3, [pc, #152]	; (800a47c <xPortStartScheduler+0x12c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f1c3 0307 	rsb	r3, r3, #7
 800a3ea:	2b04      	cmp	r3, #4
 800a3ec:	d009      	beq.n	800a402 <xPortStartScheduler+0xb2>
 800a3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	60bb      	str	r3, [r7, #8]
 800a400:	e7fe      	b.n	800a400 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a402:	4b1e      	ldr	r3, [pc, #120]	; (800a47c <xPortStartScheduler+0x12c>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	021b      	lsls	r3, r3, #8
 800a408:	4a1c      	ldr	r2, [pc, #112]	; (800a47c <xPortStartScheduler+0x12c>)
 800a40a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a40c:	4b1b      	ldr	r3, [pc, #108]	; (800a47c <xPortStartScheduler+0x12c>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a414:	4a19      	ldr	r2, [pc, #100]	; (800a47c <xPortStartScheduler+0x12c>)
 800a416:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	b2da      	uxtb	r2, r3
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a420:	4b17      	ldr	r3, [pc, #92]	; (800a480 <xPortStartScheduler+0x130>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a16      	ldr	r2, [pc, #88]	; (800a480 <xPortStartScheduler+0x130>)
 800a426:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a42a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a42c:	4b14      	ldr	r3, [pc, #80]	; (800a480 <xPortStartScheduler+0x130>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a13      	ldr	r2, [pc, #76]	; (800a480 <xPortStartScheduler+0x130>)
 800a432:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a436:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a438:	f000 f8d6 	bl	800a5e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a43c:	4b11      	ldr	r3, [pc, #68]	; (800a484 <xPortStartScheduler+0x134>)
 800a43e:	2200      	movs	r2, #0
 800a440:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a442:	f000 f8f5 	bl	800a630 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a446:	4b10      	ldr	r3, [pc, #64]	; (800a488 <xPortStartScheduler+0x138>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a0f      	ldr	r2, [pc, #60]	; (800a488 <xPortStartScheduler+0x138>)
 800a44c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a450:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a452:	f7ff ff69 	bl	800a328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a456:	f7ff fa8d 	bl	8009974 <vTaskSwitchContext>
	prvTaskExitError();
 800a45a:	f7ff ff27 	bl	800a2ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3718      	adds	r7, #24
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	e000ed00 	.word	0xe000ed00
 800a46c:	410fc271 	.word	0x410fc271
 800a470:	410fc270 	.word	0x410fc270
 800a474:	e000e400 	.word	0xe000e400
 800a478:	20000438 	.word	0x20000438
 800a47c:	2000043c 	.word	0x2000043c
 800a480:	e000ed20 	.word	0xe000ed20
 800a484:	20000010 	.word	0x20000010
 800a488:	e000ef34 	.word	0xe000ef34

0800a48c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a496:	f383 8811 	msr	BASEPRI, r3
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a4a4:	4b0e      	ldr	r3, [pc, #56]	; (800a4e0 <vPortEnterCritical+0x54>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	4a0d      	ldr	r2, [pc, #52]	; (800a4e0 <vPortEnterCritical+0x54>)
 800a4ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a4ae:	4b0c      	ldr	r3, [pc, #48]	; (800a4e0 <vPortEnterCritical+0x54>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d10e      	bne.n	800a4d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a4b6:	4b0b      	ldr	r3, [pc, #44]	; (800a4e4 <vPortEnterCritical+0x58>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d009      	beq.n	800a4d4 <vPortEnterCritical+0x48>
 800a4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	603b      	str	r3, [r7, #0]
 800a4d2:	e7fe      	b.n	800a4d2 <vPortEnterCritical+0x46>
	}
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	20000010 	.word	0x20000010
 800a4e4:	e000ed04 	.word	0xe000ed04

0800a4e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a4ee:	4b11      	ldr	r3, [pc, #68]	; (800a534 <vPortExitCritical+0x4c>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d109      	bne.n	800a50a <vPortExitCritical+0x22>
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	607b      	str	r3, [r7, #4]
 800a508:	e7fe      	b.n	800a508 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a50a:	4b0a      	ldr	r3, [pc, #40]	; (800a534 <vPortExitCritical+0x4c>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	3b01      	subs	r3, #1
 800a510:	4a08      	ldr	r2, [pc, #32]	; (800a534 <vPortExitCritical+0x4c>)
 800a512:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a514:	4b07      	ldr	r3, [pc, #28]	; (800a534 <vPortExitCritical+0x4c>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d104      	bne.n	800a526 <vPortExitCritical+0x3e>
 800a51c:	2300      	movs	r3, #0
 800a51e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a526:	bf00      	nop
 800a528:	370c      	adds	r7, #12
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	20000010 	.word	0x20000010
	...

0800a540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a540:	f3ef 8009 	mrs	r0, PSP
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	4b15      	ldr	r3, [pc, #84]	; (800a5a0 <pxCurrentTCBConst>)
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	f01e 0f10 	tst.w	lr, #16
 800a550:	bf08      	it	eq
 800a552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55a:	6010      	str	r0, [r2, #0]
 800a55c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a560:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a564:	f380 8811 	msr	BASEPRI, r0
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f7ff fa00 	bl	8009974 <vTaskSwitchContext>
 800a574:	f04f 0000 	mov.w	r0, #0
 800a578:	f380 8811 	msr	BASEPRI, r0
 800a57c:	bc09      	pop	{r0, r3}
 800a57e:	6819      	ldr	r1, [r3, #0]
 800a580:	6808      	ldr	r0, [r1, #0]
 800a582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a586:	f01e 0f10 	tst.w	lr, #16
 800a58a:	bf08      	it	eq
 800a58c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a590:	f380 8809 	msr	PSP, r0
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	f3af 8000 	nop.w

0800a5a0 <pxCurrentTCBConst>:
 800a5a0:	2000030c 	.word	0x2000030c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop

0800a5a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a5c0:	f7ff f920 	bl	8009804 <xTaskIncrementTick>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d003      	beq.n	800a5d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a5ca:	4b06      	ldr	r3, [pc, #24]	; (800a5e4 <SysTick_Handler+0x3c>)
 800a5cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d0:	601a      	str	r2, [r3, #0]
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a5dc:	bf00      	nop
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	e000ed04 	.word	0xe000ed04

0800a5e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5ec:	4b0b      	ldr	r3, [pc, #44]	; (800a61c <vPortSetupTimerInterrupt+0x34>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5f2:	4b0b      	ldr	r3, [pc, #44]	; (800a620 <vPortSetupTimerInterrupt+0x38>)
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5f8:	4b0a      	ldr	r3, [pc, #40]	; (800a624 <vPortSetupTimerInterrupt+0x3c>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a0a      	ldr	r2, [pc, #40]	; (800a628 <vPortSetupTimerInterrupt+0x40>)
 800a5fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a602:	099b      	lsrs	r3, r3, #6
 800a604:	4a09      	ldr	r2, [pc, #36]	; (800a62c <vPortSetupTimerInterrupt+0x44>)
 800a606:	3b01      	subs	r3, #1
 800a608:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a60a:	4b04      	ldr	r3, [pc, #16]	; (800a61c <vPortSetupTimerInterrupt+0x34>)
 800a60c:	2207      	movs	r2, #7
 800a60e:	601a      	str	r2, [r3, #0]
}
 800a610:	bf00      	nop
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	e000e010 	.word	0xe000e010
 800a620:	e000e018 	.word	0xe000e018
 800a624:	20000004 	.word	0x20000004
 800a628:	10624dd3 	.word	0x10624dd3
 800a62c:	e000e014 	.word	0xe000e014

0800a630 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a630:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a640 <vPortEnableVFP+0x10>
 800a634:	6801      	ldr	r1, [r0, #0]
 800a636:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a63a:	6001      	str	r1, [r0, #0]
 800a63c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a63e:	bf00      	nop
 800a640:	e000ed88 	.word	0xe000ed88

0800a644 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a64a:	f3ef 8305 	mrs	r3, IPSR
 800a64e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2b0f      	cmp	r3, #15
 800a654:	d913      	bls.n	800a67e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a656:	4a16      	ldr	r2, [pc, #88]	; (800a6b0 <vPortValidateInterruptPriority+0x6c>)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	4413      	add	r3, r2
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a660:	4b14      	ldr	r3, [pc, #80]	; (800a6b4 <vPortValidateInterruptPriority+0x70>)
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	7afa      	ldrb	r2, [r7, #11]
 800a666:	429a      	cmp	r2, r3
 800a668:	d209      	bcs.n	800a67e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a66e:	f383 8811 	msr	BASEPRI, r3
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	f3bf 8f4f 	dsb	sy
 800a67a:	607b      	str	r3, [r7, #4]
 800a67c:	e7fe      	b.n	800a67c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a67e:	4b0e      	ldr	r3, [pc, #56]	; (800a6b8 <vPortValidateInterruptPriority+0x74>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a686:	4b0d      	ldr	r3, [pc, #52]	; (800a6bc <vPortValidateInterruptPriority+0x78>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d909      	bls.n	800a6a2 <vPortValidateInterruptPriority+0x5e>
 800a68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	603b      	str	r3, [r7, #0]
 800a6a0:	e7fe      	b.n	800a6a0 <vPortValidateInterruptPriority+0x5c>
	}
 800a6a2:	bf00      	nop
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	e000e3f0 	.word	0xe000e3f0
 800a6b4:	20000438 	.word	0x20000438
 800a6b8:	e000ed0c 	.word	0xe000ed0c
 800a6bc:	2000043c 	.word	0x2000043c

0800a6c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b08a      	sub	sp, #40	; 0x28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a6cc:	f7fe fff0 	bl	80096b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a6d0:	4b57      	ldr	r3, [pc, #348]	; (800a830 <pvPortMalloc+0x170>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d101      	bne.n	800a6dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a6d8:	f000 f90c 	bl	800a8f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6dc:	4b55      	ldr	r3, [pc, #340]	; (800a834 <pvPortMalloc+0x174>)
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f040 808c 	bne.w	800a802 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d01c      	beq.n	800a72a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a6f0:	2208      	movs	r2, #8
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f003 0307 	and.w	r3, r3, #7
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d013      	beq.n	800a72a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f023 0307 	bic.w	r3, r3, #7
 800a708:	3308      	adds	r3, #8
 800a70a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f003 0307 	and.w	r3, r3, #7
 800a712:	2b00      	cmp	r3, #0
 800a714:	d009      	beq.n	800a72a <pvPortMalloc+0x6a>
 800a716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71a:	f383 8811 	msr	BASEPRI, r3
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	617b      	str	r3, [r7, #20]
 800a728:	e7fe      	b.n	800a728 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d068      	beq.n	800a802 <pvPortMalloc+0x142>
 800a730:	4b41      	ldr	r3, [pc, #260]	; (800a838 <pvPortMalloc+0x178>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	429a      	cmp	r2, r3
 800a738:	d863      	bhi.n	800a802 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a73a:	4b40      	ldr	r3, [pc, #256]	; (800a83c <pvPortMalloc+0x17c>)
 800a73c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a73e:	4b3f      	ldr	r3, [pc, #252]	; (800a83c <pvPortMalloc+0x17c>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a744:	e004      	b.n	800a750 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a748:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	429a      	cmp	r2, r3
 800a758:	d903      	bls.n	800a762 <pvPortMalloc+0xa2>
 800a75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1f1      	bne.n	800a746 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a762:	4b33      	ldr	r3, [pc, #204]	; (800a830 <pvPortMalloc+0x170>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a768:	429a      	cmp	r2, r3
 800a76a:	d04a      	beq.n	800a802 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a76c:	6a3b      	ldr	r3, [r7, #32]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2208      	movs	r2, #8
 800a772:	4413      	add	r3, r2
 800a774:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	6a3b      	ldr	r3, [r7, #32]
 800a77c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a780:	685a      	ldr	r2, [r3, #4]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	1ad2      	subs	r2, r2, r3
 800a786:	2308      	movs	r3, #8
 800a788:	005b      	lsls	r3, r3, #1
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d91e      	bls.n	800a7cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a78e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4413      	add	r3, r2
 800a794:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a796:	69bb      	ldr	r3, [r7, #24]
 800a798:	f003 0307 	and.w	r3, r3, #7
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d009      	beq.n	800a7b4 <pvPortMalloc+0xf4>
 800a7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	613b      	str	r3, [r7, #16]
 800a7b2:	e7fe      	b.n	800a7b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b6:	685a      	ldr	r2, [r3, #4]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	1ad2      	subs	r2, r2, r3
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a7c6:	69b8      	ldr	r0, [r7, #24]
 800a7c8:	f000 f8f8 	bl	800a9bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7cc:	4b1a      	ldr	r3, [pc, #104]	; (800a838 <pvPortMalloc+0x178>)
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	4a18      	ldr	r2, [pc, #96]	; (800a838 <pvPortMalloc+0x178>)
 800a7d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7da:	4b17      	ldr	r3, [pc, #92]	; (800a838 <pvPortMalloc+0x178>)
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	4b18      	ldr	r3, [pc, #96]	; (800a840 <pvPortMalloc+0x180>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d203      	bcs.n	800a7ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7e6:	4b14      	ldr	r3, [pc, #80]	; (800a838 <pvPortMalloc+0x178>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a15      	ldr	r2, [pc, #84]	; (800a840 <pvPortMalloc+0x180>)
 800a7ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f0:	685a      	ldr	r2, [r3, #4]
 800a7f2:	4b10      	ldr	r3, [pc, #64]	; (800a834 <pvPortMalloc+0x174>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	431a      	orrs	r2, r3
 800a7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fe:	2200      	movs	r2, #0
 800a800:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a802:	f7fe ff63 	bl	80096cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	f003 0307 	and.w	r3, r3, #7
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d009      	beq.n	800a824 <pvPortMalloc+0x164>
 800a810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a814:	f383 8811 	msr	BASEPRI, r3
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	60fb      	str	r3, [r7, #12]
 800a822:	e7fe      	b.n	800a822 <pvPortMalloc+0x162>
	return pvReturn;
 800a824:	69fb      	ldr	r3, [r7, #28]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3728      	adds	r7, #40	; 0x28
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	20018ae8 	.word	0x20018ae8
 800a834:	20018af4 	.word	0x20018af4
 800a838:	20018aec 	.word	0x20018aec
 800a83c:	20018ae0 	.word	0x20018ae0
 800a840:	20018af0 	.word	0x20018af0

0800a844 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d046      	beq.n	800a8e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a856:	2308      	movs	r3, #8
 800a858:	425b      	negs	r3, r3
 800a85a:	697a      	ldr	r2, [r7, #20]
 800a85c:	4413      	add	r3, r2
 800a85e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	4b20      	ldr	r3, [pc, #128]	; (800a8ec <vPortFree+0xa8>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4013      	ands	r3, r2
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d109      	bne.n	800a886 <vPortFree+0x42>
 800a872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a876:	f383 8811 	msr	BASEPRI, r3
 800a87a:	f3bf 8f6f 	isb	sy
 800a87e:	f3bf 8f4f 	dsb	sy
 800a882:	60fb      	str	r3, [r7, #12]
 800a884:	e7fe      	b.n	800a884 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d009      	beq.n	800a8a2 <vPortFree+0x5e>
 800a88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	60bb      	str	r3, [r7, #8]
 800a8a0:	e7fe      	b.n	800a8a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	685a      	ldr	r2, [r3, #4]
 800a8a6:	4b11      	ldr	r3, [pc, #68]	; (800a8ec <vPortFree+0xa8>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4013      	ands	r3, r2
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d019      	beq.n	800a8e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d115      	bne.n	800a8e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	4b0b      	ldr	r3, [pc, #44]	; (800a8ec <vPortFree+0xa8>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	43db      	mvns	r3, r3
 800a8c2:	401a      	ands	r2, r3
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a8c8:	f7fe fef2 	bl	80096b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	685a      	ldr	r2, [r3, #4]
 800a8d0:	4b07      	ldr	r3, [pc, #28]	; (800a8f0 <vPortFree+0xac>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	4a06      	ldr	r2, [pc, #24]	; (800a8f0 <vPortFree+0xac>)
 800a8d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a8da:	6938      	ldr	r0, [r7, #16]
 800a8dc:	f000 f86e 	bl	800a9bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a8e0:	f7fe fef4 	bl	80096cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a8e4:	bf00      	nop
 800a8e6:	3718      	adds	r7, #24
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	20018af4 	.word	0x20018af4
 800a8f0:	20018aec 	.word	0x20018aec

0800a8f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a8fa:	4b29      	ldr	r3, [pc, #164]	; (800a9a0 <prvHeapInit+0xac>)
 800a8fc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a8fe:	4b29      	ldr	r3, [pc, #164]	; (800a9a4 <prvHeapInit+0xb0>)
 800a900:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f003 0307 	and.w	r3, r3, #7
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d00c      	beq.n	800a926 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	3307      	adds	r3, #7
 800a910:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f023 0307 	bic.w	r3, r3, #7
 800a918:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a91a:	68ba      	ldr	r2, [r7, #8]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	4a20      	ldr	r2, [pc, #128]	; (800a9a4 <prvHeapInit+0xb0>)
 800a922:	4413      	add	r3, r2
 800a924:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a92a:	4a1f      	ldr	r2, [pc, #124]	; (800a9a8 <prvHeapInit+0xb4>)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a930:	4b1d      	ldr	r3, [pc, #116]	; (800a9a8 <prvHeapInit+0xb4>)
 800a932:	2200      	movs	r2, #0
 800a934:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	4413      	add	r3, r2
 800a93c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a93e:	2208      	movs	r2, #8
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	1a9b      	subs	r3, r3, r2
 800a944:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f023 0307 	bic.w	r3, r3, #7
 800a94c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	4a16      	ldr	r2, [pc, #88]	; (800a9ac <prvHeapInit+0xb8>)
 800a952:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a954:	4b15      	ldr	r3, [pc, #84]	; (800a9ac <prvHeapInit+0xb8>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2200      	movs	r2, #0
 800a95a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a95c:	4b13      	ldr	r3, [pc, #76]	; (800a9ac <prvHeapInit+0xb8>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2200      	movs	r2, #0
 800a962:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	1ad2      	subs	r2, r2, r3
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a972:	4b0e      	ldr	r3, [pc, #56]	; (800a9ac <prvHeapInit+0xb8>)
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	4a0c      	ldr	r2, [pc, #48]	; (800a9b0 <prvHeapInit+0xbc>)
 800a980:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	4a0b      	ldr	r2, [pc, #44]	; (800a9b4 <prvHeapInit+0xc0>)
 800a988:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a98a:	4b0b      	ldr	r3, [pc, #44]	; (800a9b8 <prvHeapInit+0xc4>)
 800a98c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a990:	601a      	str	r2, [r3, #0]
}
 800a992:	bf00      	nop
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	000186a0 	.word	0x000186a0
 800a9a4:	20000440 	.word	0x20000440
 800a9a8:	20018ae0 	.word	0x20018ae0
 800a9ac:	20018ae8 	.word	0x20018ae8
 800a9b0:	20018af0 	.word	0x20018af0
 800a9b4:	20018aec 	.word	0x20018aec
 800a9b8:	20018af4 	.word	0x20018af4

0800a9bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9c4:	4b28      	ldr	r3, [pc, #160]	; (800aa68 <prvInsertBlockIntoFreeList+0xac>)
 800a9c6:	60fb      	str	r3, [r7, #12]
 800a9c8:	e002      	b.n	800a9d0 <prvInsertBlockIntoFreeList+0x14>
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	60fb      	str	r3, [r7, #12]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d8f7      	bhi.n	800a9ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d108      	bne.n	800a9fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	685a      	ldr	r2, [r3, #4]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	441a      	add	r2, r3
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	441a      	add	r2, r3
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d118      	bne.n	800aa44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	4b15      	ldr	r3, [pc, #84]	; (800aa6c <prvInsertBlockIntoFreeList+0xb0>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d00d      	beq.n	800aa3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	685a      	ldr	r2, [r3, #4]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	441a      	add	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	601a      	str	r2, [r3, #0]
 800aa38:	e008      	b.n	800aa4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa3a:	4b0c      	ldr	r3, [pc, #48]	; (800aa6c <prvInsertBlockIntoFreeList+0xb0>)
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	601a      	str	r2, [r3, #0]
 800aa42:	e003      	b.n	800aa4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d002      	beq.n	800aa5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa5a:	bf00      	nop
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	20018ae0 	.word	0x20018ae0
 800aa6c:	20018ae8 	.word	0x20018ae8

0800aa70 <arm_rfft_32_fast_init_f32>:
 800aa70:	b178      	cbz	r0, 800aa92 <arm_rfft_32_fast_init_f32+0x22>
 800aa72:	b430      	push	{r4, r5}
 800aa74:	4908      	ldr	r1, [pc, #32]	; (800aa98 <arm_rfft_32_fast_init_f32+0x28>)
 800aa76:	4a09      	ldr	r2, [pc, #36]	; (800aa9c <arm_rfft_32_fast_init_f32+0x2c>)
 800aa78:	2310      	movs	r3, #16
 800aa7a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800aa7e:	8003      	strh	r3, [r0, #0]
 800aa80:	2520      	movs	r5, #32
 800aa82:	2414      	movs	r4, #20
 800aa84:	4b06      	ldr	r3, [pc, #24]	; (800aaa0 <arm_rfft_32_fast_init_f32+0x30>)
 800aa86:	8205      	strh	r5, [r0, #16]
 800aa88:	8184      	strh	r4, [r0, #12]
 800aa8a:	6143      	str	r3, [r0, #20]
 800aa8c:	bc30      	pop	{r4, r5}
 800aa8e:	2000      	movs	r0, #0
 800aa90:	4770      	bx	lr
 800aa92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa96:	4770      	bx	lr
 800aa98:	0800dfc4 	.word	0x0800dfc4
 800aa9c:	08013100 	.word	0x08013100
 800aaa0:	0801be80 	.word	0x0801be80

0800aaa4 <arm_rfft_64_fast_init_f32>:
 800aaa4:	b178      	cbz	r0, 800aac6 <arm_rfft_64_fast_init_f32+0x22>
 800aaa6:	b430      	push	{r4, r5}
 800aaa8:	4908      	ldr	r1, [pc, #32]	; (800aacc <arm_rfft_64_fast_init_f32+0x28>)
 800aaaa:	4a09      	ldr	r2, [pc, #36]	; (800aad0 <arm_rfft_64_fast_init_f32+0x2c>)
 800aaac:	2320      	movs	r3, #32
 800aaae:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800aab2:	8003      	strh	r3, [r0, #0]
 800aab4:	2540      	movs	r5, #64	; 0x40
 800aab6:	2430      	movs	r4, #48	; 0x30
 800aab8:	4b06      	ldr	r3, [pc, #24]	; (800aad4 <arm_rfft_64_fast_init_f32+0x30>)
 800aaba:	8205      	strh	r5, [r0, #16]
 800aabc:	8184      	strh	r4, [r0, #12]
 800aabe:	6143      	str	r3, [r0, #20]
 800aac0:	bc30      	pop	{r4, r5}
 800aac2:	2000      	movs	r0, #0
 800aac4:	4770      	bx	lr
 800aac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aaca:	4770      	bx	lr
 800aacc:	0801011c 	.word	0x0801011c
 800aad0:	08017980 	.word	0x08017980
 800aad4:	08020700 	.word	0x08020700

0800aad8 <arm_rfft_256_fast_init_f32>:
 800aad8:	b180      	cbz	r0, 800aafc <arm_rfft_256_fast_init_f32+0x24>
 800aada:	b430      	push	{r4, r5}
 800aadc:	4909      	ldr	r1, [pc, #36]	; (800ab04 <arm_rfft_256_fast_init_f32+0x2c>)
 800aade:	4a0a      	ldr	r2, [pc, #40]	; (800ab08 <arm_rfft_256_fast_init_f32+0x30>)
 800aae0:	2380      	movs	r3, #128	; 0x80
 800aae2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800aae6:	8003      	strh	r3, [r0, #0]
 800aae8:	f44f 7580 	mov.w	r5, #256	; 0x100
 800aaec:	24d0      	movs	r4, #208	; 0xd0
 800aaee:	4b07      	ldr	r3, [pc, #28]	; (800ab0c <arm_rfft_256_fast_init_f32+0x34>)
 800aaf0:	8205      	strh	r5, [r0, #16]
 800aaf2:	8184      	strh	r4, [r0, #12]
 800aaf4:	6143      	str	r3, [r0, #20]
 800aaf6:	bc30      	pop	{r4, r5}
 800aaf8:	2000      	movs	r0, #0
 800aafa:	4770      	bx	lr
 800aafc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	0800de24 	.word	0x0800de24
 800ab08:	08012d00 	.word	0x08012d00
 800ab0c:	0801ba80 	.word	0x0801ba80

0800ab10 <arm_rfft_512_fast_init_f32>:
 800ab10:	b190      	cbz	r0, 800ab38 <arm_rfft_512_fast_init_f32+0x28>
 800ab12:	b430      	push	{r4, r5}
 800ab14:	490a      	ldr	r1, [pc, #40]	; (800ab40 <arm_rfft_512_fast_init_f32+0x30>)
 800ab16:	4a0b      	ldr	r2, [pc, #44]	; (800ab44 <arm_rfft_512_fast_init_f32+0x34>)
 800ab18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab1c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ab20:	8003      	strh	r3, [r0, #0]
 800ab22:	f44f 7500 	mov.w	r5, #512	; 0x200
 800ab26:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800ab2a:	4b07      	ldr	r3, [pc, #28]	; (800ab48 <arm_rfft_512_fast_init_f32+0x38>)
 800ab2c:	8205      	strh	r5, [r0, #16]
 800ab2e:	8184      	strh	r4, [r0, #12]
 800ab30:	6143      	str	r3, [r0, #20]
 800ab32:	bc30      	pop	{r4, r5}
 800ab34:	2000      	movs	r0, #0
 800ab36:	4770      	bx	lr
 800ab38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	0800fdac 	.word	0x0800fdac
 800ab44:	08017180 	.word	0x08017180
 800ab48:	0801ff00 	.word	0x0801ff00

0800ab4c <arm_rfft_1024_fast_init_f32>:
 800ab4c:	b190      	cbz	r0, 800ab74 <arm_rfft_1024_fast_init_f32+0x28>
 800ab4e:	b430      	push	{r4, r5}
 800ab50:	490a      	ldr	r1, [pc, #40]	; (800ab7c <arm_rfft_1024_fast_init_f32+0x30>)
 800ab52:	4a0b      	ldr	r2, [pc, #44]	; (800ab80 <arm_rfft_1024_fast_init_f32+0x34>)
 800ab54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab58:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ab5c:	8003      	strh	r3, [r0, #0]
 800ab5e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800ab62:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800ab66:	4b07      	ldr	r3, [pc, #28]	; (800ab84 <arm_rfft_1024_fast_init_f32+0x38>)
 800ab68:	8205      	strh	r5, [r0, #16]
 800ab6a:	8184      	strh	r4, [r0, #12]
 800ab6c:	6143      	str	r3, [r0, #20]
 800ab6e:	bc30      	pop	{r4, r5}
 800ab70:	2000      	movs	r0, #0
 800ab72:	4770      	bx	lr
 800ab74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	0801017c 	.word	0x0801017c
 800ab80:	08017a80 	.word	0x08017a80
 800ab84:	08018a80 	.word	0x08018a80

0800ab88 <arm_rfft_2048_fast_init_f32>:
 800ab88:	b190      	cbz	r0, 800abb0 <arm_rfft_2048_fast_init_f32+0x28>
 800ab8a:	b430      	push	{r4, r5}
 800ab8c:	490a      	ldr	r1, [pc, #40]	; (800abb8 <arm_rfft_2048_fast_init_f32+0x30>)
 800ab8e:	4a0b      	ldr	r2, [pc, #44]	; (800abbc <arm_rfft_2048_fast_init_f32+0x34>)
 800ab90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab94:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ab98:	8003      	strh	r3, [r0, #0]
 800ab9a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800ab9e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800aba2:	4b07      	ldr	r3, [pc, #28]	; (800abc0 <arm_rfft_2048_fast_init_f32+0x38>)
 800aba4:	8205      	strh	r5, [r0, #16]
 800aba6:	8184      	strh	r4, [r0, #12]
 800aba8:	6143      	str	r3, [r0, #20]
 800abaa:	bc30      	pop	{r4, r5}
 800abac:	2000      	movs	r0, #0
 800abae:	4770      	bx	lr
 800abb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	0800d014 	.word	0x0800d014
 800abbc:	08010d00 	.word	0x08010d00
 800abc0:	08019a80 	.word	0x08019a80

0800abc4 <arm_rfft_4096_fast_init_f32>:
 800abc4:	b190      	cbz	r0, 800abec <arm_rfft_4096_fast_init_f32+0x28>
 800abc6:	b430      	push	{r4, r5}
 800abc8:	490a      	ldr	r1, [pc, #40]	; (800abf4 <arm_rfft_4096_fast_init_f32+0x30>)
 800abca:	4a0b      	ldr	r2, [pc, #44]	; (800abf8 <arm_rfft_4096_fast_init_f32+0x34>)
 800abcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800abd0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800abd4:	8003      	strh	r3, [r0, #0]
 800abd6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800abda:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800abde:	4b07      	ldr	r3, [pc, #28]	; (800abfc <arm_rfft_4096_fast_init_f32+0x38>)
 800abe0:	8205      	strh	r5, [r0, #16]
 800abe2:	8184      	strh	r4, [r0, #12]
 800abe4:	6143      	str	r3, [r0, #20]
 800abe6:	bc30      	pop	{r4, r5}
 800abe8:	2000      	movs	r0, #0
 800abea:	4770      	bx	lr
 800abec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	0800dfec 	.word	0x0800dfec
 800abf8:	08013180 	.word	0x08013180
 800abfc:	0801bf00 	.word	0x0801bf00

0800ac00 <arm_rfft_fast_init_f32>:
 800ac00:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ac04:	d01f      	beq.n	800ac46 <arm_rfft_fast_init_f32+0x46>
 800ac06:	d90b      	bls.n	800ac20 <arm_rfft_fast_init_f32+0x20>
 800ac08:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800ac0c:	d019      	beq.n	800ac42 <arm_rfft_fast_init_f32+0x42>
 800ac0e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800ac12:	d012      	beq.n	800ac3a <arm_rfft_fast_init_f32+0x3a>
 800ac14:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ac18:	d00d      	beq.n	800ac36 <arm_rfft_fast_init_f32+0x36>
 800ac1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac1e:	4770      	bx	lr
 800ac20:	2940      	cmp	r1, #64	; 0x40
 800ac22:	d00c      	beq.n	800ac3e <arm_rfft_fast_init_f32+0x3e>
 800ac24:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ac28:	d003      	beq.n	800ac32 <arm_rfft_fast_init_f32+0x32>
 800ac2a:	2920      	cmp	r1, #32
 800ac2c:	d1f5      	bne.n	800ac1a <arm_rfft_fast_init_f32+0x1a>
 800ac2e:	4b07      	ldr	r3, [pc, #28]	; (800ac4c <arm_rfft_fast_init_f32+0x4c>)
 800ac30:	4718      	bx	r3
 800ac32:	4b07      	ldr	r3, [pc, #28]	; (800ac50 <arm_rfft_fast_init_f32+0x50>)
 800ac34:	4718      	bx	r3
 800ac36:	4b07      	ldr	r3, [pc, #28]	; (800ac54 <arm_rfft_fast_init_f32+0x54>)
 800ac38:	4718      	bx	r3
 800ac3a:	4b07      	ldr	r3, [pc, #28]	; (800ac58 <arm_rfft_fast_init_f32+0x58>)
 800ac3c:	4718      	bx	r3
 800ac3e:	4b07      	ldr	r3, [pc, #28]	; (800ac5c <arm_rfft_fast_init_f32+0x5c>)
 800ac40:	e7f6      	b.n	800ac30 <arm_rfft_fast_init_f32+0x30>
 800ac42:	4b07      	ldr	r3, [pc, #28]	; (800ac60 <arm_rfft_fast_init_f32+0x60>)
 800ac44:	e7f4      	b.n	800ac30 <arm_rfft_fast_init_f32+0x30>
 800ac46:	4b07      	ldr	r3, [pc, #28]	; (800ac64 <arm_rfft_fast_init_f32+0x64>)
 800ac48:	e7f2      	b.n	800ac30 <arm_rfft_fast_init_f32+0x30>
 800ac4a:	bf00      	nop
 800ac4c:	0800aa71 	.word	0x0800aa71
 800ac50:	0800aad9 	.word	0x0800aad9
 800ac54:	0800ab4d 	.word	0x0800ab4d
 800ac58:	0800abc5 	.word	0x0800abc5
 800ac5c:	0800aaa5 	.word	0x0800aaa5
 800ac60:	0800ab89 	.word	0x0800ab89
 800ac64:	0800ab11 	.word	0x0800ab11

0800ac68 <stage_rfft_f32>:
 800ac68:	b410      	push	{r4}
 800ac6a:	edd1 7a00 	vldr	s15, [r1]
 800ac6e:	ed91 7a01 	vldr	s14, [r1, #4]
 800ac72:	8804      	ldrh	r4, [r0, #0]
 800ac74:	6940      	ldr	r0, [r0, #20]
 800ac76:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ac7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ac7e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800ac82:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ac86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac8a:	3c01      	subs	r4, #1
 800ac8c:	ee26 7a84 	vmul.f32	s14, s13, s8
 800ac90:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ac94:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800ac98:	ed82 7a00 	vstr	s14, [r2]
 800ac9c:	edc2 7a01 	vstr	s15, [r2, #4]
 800aca0:	3010      	adds	r0, #16
 800aca2:	3210      	adds	r2, #16
 800aca4:	3b08      	subs	r3, #8
 800aca6:	3110      	adds	r1, #16
 800aca8:	ed11 5a02 	vldr	s10, [r1, #-8]
 800acac:	ed93 7a02 	vldr	s14, [r3, #8]
 800acb0:	ed50 6a02 	vldr	s13, [r0, #-8]
 800acb4:	edd3 4a03 	vldr	s9, [r3, #12]
 800acb8:	ed51 7a01 	vldr	s15, [r1, #-4]
 800acbc:	ed10 6a01 	vldr	s12, [r0, #-4]
 800acc0:	ee77 5a45 	vsub.f32	s11, s14, s10
 800acc4:	ee37 7a05 	vadd.f32	s14, s14, s10
 800acc8:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800accc:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800acd0:	ee66 5a25 	vmul.f32	s11, s12, s11
 800acd4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800acd8:	ee37 7a23 	vadd.f32	s14, s14, s7
 800acdc:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ace0:	ee26 6a05 	vmul.f32	s12, s12, s10
 800ace4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ace8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800acec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800acf0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800acf4:	ee67 7a84 	vmul.f32	s15, s15, s8
 800acf8:	3c01      	subs	r4, #1
 800acfa:	ed02 7a02 	vstr	s14, [r2, #-8]
 800acfe:	ed42 7a01 	vstr	s15, [r2, #-4]
 800ad02:	f1a3 0308 	sub.w	r3, r3, #8
 800ad06:	f101 0108 	add.w	r1, r1, #8
 800ad0a:	f100 0008 	add.w	r0, r0, #8
 800ad0e:	f102 0208 	add.w	r2, r2, #8
 800ad12:	d1c9      	bne.n	800aca8 <stage_rfft_f32+0x40>
 800ad14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop

0800ad1c <merge_rfft_f32>:
 800ad1c:	b410      	push	{r4}
 800ad1e:	edd1 7a00 	vldr	s15, [r1]
 800ad22:	edd1 6a01 	vldr	s13, [r1, #4]
 800ad26:	8804      	ldrh	r4, [r0, #0]
 800ad28:	6940      	ldr	r0, [r0, #20]
 800ad2a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ad2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ad32:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800ad36:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ad3a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ad3e:	3c01      	subs	r4, #1
 800ad40:	ed82 7a00 	vstr	s14, [r2]
 800ad44:	edc2 7a01 	vstr	s15, [r2, #4]
 800ad48:	b3dc      	cbz	r4, 800adc2 <merge_rfft_f32+0xa6>
 800ad4a:	00e3      	lsls	r3, r4, #3
 800ad4c:	3b08      	subs	r3, #8
 800ad4e:	440b      	add	r3, r1
 800ad50:	3010      	adds	r0, #16
 800ad52:	3210      	adds	r2, #16
 800ad54:	3110      	adds	r1, #16
 800ad56:	ed11 5a02 	vldr	s10, [r1, #-8]
 800ad5a:	ed93 7a02 	vldr	s14, [r3, #8]
 800ad5e:	ed50 6a02 	vldr	s13, [r0, #-8]
 800ad62:	edd3 4a03 	vldr	s9, [r3, #12]
 800ad66:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ad6a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800ad6e:	ee75 5a47 	vsub.f32	s11, s10, s14
 800ad72:	ee37 7a05 	vadd.f32	s14, s14, s10
 800ad76:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800ad7a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800ad7e:	ee66 5a25 	vmul.f32	s11, s12, s11
 800ad82:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ad86:	ee37 7a63 	vsub.f32	s14, s14, s7
 800ad8a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ad8e:	ee26 6a05 	vmul.f32	s12, s12, s10
 800ad92:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ad96:	ee37 7a46 	vsub.f32	s14, s14, s12
 800ad9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ad9e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800ada2:	ee67 7a84 	vmul.f32	s15, s15, s8
 800ada6:	3c01      	subs	r4, #1
 800ada8:	ed02 7a02 	vstr	s14, [r2, #-8]
 800adac:	ed42 7a01 	vstr	s15, [r2, #-4]
 800adb0:	f1a3 0308 	sub.w	r3, r3, #8
 800adb4:	f101 0108 	add.w	r1, r1, #8
 800adb8:	f100 0008 	add.w	r0, r0, #8
 800adbc:	f102 0208 	add.w	r2, r2, #8
 800adc0:	d1c9      	bne.n	800ad56 <merge_rfft_f32+0x3a>
 800adc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <arm_rfft_fast_f32>:
 800adc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adcc:	8a05      	ldrh	r5, [r0, #16]
 800adce:	086d      	lsrs	r5, r5, #1
 800add0:	8005      	strh	r5, [r0, #0]
 800add2:	4604      	mov	r4, r0
 800add4:	4616      	mov	r6, r2
 800add6:	461d      	mov	r5, r3
 800add8:	b14b      	cbz	r3, 800adee <arm_rfft_fast_f32+0x26>
 800adda:	f7ff ff9f 	bl	800ad1c <merge_rfft_f32>
 800adde:	462a      	mov	r2, r5
 800ade0:	4631      	mov	r1, r6
 800ade2:	4620      	mov	r0, r4
 800ade4:	2301      	movs	r3, #1
 800ade6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adea:	f000 bb33 	b.w	800b454 <arm_cfft_f32>
 800adee:	460f      	mov	r7, r1
 800adf0:	461a      	mov	r2, r3
 800adf2:	2301      	movs	r3, #1
 800adf4:	f000 fb2e 	bl	800b454 <arm_cfft_f32>
 800adf8:	4632      	mov	r2, r6
 800adfa:	4639      	mov	r1, r7
 800adfc:	4620      	mov	r0, r4
 800adfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae02:	f7ff bf31 	b.w	800ac68 <stage_rfft_f32>
 800ae06:	bf00      	nop

0800ae08 <arm_cfft_radix8by2_f32>:
 800ae08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae0c:	ed2d 8b08 	vpush	{d8-d11}
 800ae10:	4607      	mov	r7, r0
 800ae12:	4608      	mov	r0, r1
 800ae14:	f8b7 c000 	ldrh.w	ip, [r7]
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800ae1e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800ae22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ae26:	f000 80b0 	beq.w	800af8a <arm_cfft_radix8by2_f32+0x182>
 800ae2a:	008c      	lsls	r4, r1, #2
 800ae2c:	3410      	adds	r4, #16
 800ae2e:	f100 0310 	add.w	r3, r0, #16
 800ae32:	1906      	adds	r6, r0, r4
 800ae34:	3210      	adds	r2, #16
 800ae36:	4444      	add	r4, r8
 800ae38:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800ae3c:	f108 0510 	add.w	r5, r8, #16
 800ae40:	ed15 2a04 	vldr	s4, [r5, #-16]
 800ae44:	ed55 2a03 	vldr	s5, [r5, #-12]
 800ae48:	ed54 4a04 	vldr	s9, [r4, #-16]
 800ae4c:	ed14 4a03 	vldr	s8, [r4, #-12]
 800ae50:	ed14 6a02 	vldr	s12, [r4, #-8]
 800ae54:	ed54 5a01 	vldr	s11, [r4, #-4]
 800ae58:	ed53 3a04 	vldr	s7, [r3, #-16]
 800ae5c:	ed15 0a02 	vldr	s0, [r5, #-8]
 800ae60:	ed55 0a01 	vldr	s1, [r5, #-4]
 800ae64:	ed56 6a04 	vldr	s13, [r6, #-16]
 800ae68:	ed16 3a03 	vldr	s6, [r6, #-12]
 800ae6c:	ed13 7a03 	vldr	s14, [r3, #-12]
 800ae70:	ed13 5a02 	vldr	s10, [r3, #-8]
 800ae74:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ae78:	ed16 1a02 	vldr	s2, [r6, #-8]
 800ae7c:	ed56 1a01 	vldr	s3, [r6, #-4]
 800ae80:	ee73 ba82 	vadd.f32	s23, s7, s4
 800ae84:	ee37 ba22 	vadd.f32	s22, s14, s5
 800ae88:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800ae8c:	ee33 9a04 	vadd.f32	s18, s6, s8
 800ae90:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800ae94:	ee75 aa00 	vadd.f32	s21, s10, s0
 800ae98:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800ae9c:	ee71 8a06 	vadd.f32	s17, s2, s12
 800aea0:	ed43 ba04 	vstr	s23, [r3, #-16]
 800aea4:	ed03 ba03 	vstr	s22, [r3, #-12]
 800aea8:	ed43 aa02 	vstr	s21, [r3, #-8]
 800aeac:	ed03 aa01 	vstr	s20, [r3, #-4]
 800aeb0:	ed06 8a01 	vstr	s16, [r6, #-4]
 800aeb4:	ed46 9a04 	vstr	s19, [r6, #-16]
 800aeb8:	ed06 9a03 	vstr	s18, [r6, #-12]
 800aebc:	ed46 8a02 	vstr	s17, [r6, #-8]
 800aec0:	ee37 7a62 	vsub.f32	s14, s14, s5
 800aec4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800aec8:	ee34 4a43 	vsub.f32	s8, s8, s6
 800aecc:	ed52 6a03 	vldr	s13, [r2, #-12]
 800aed0:	ed12 3a04 	vldr	s6, [r2, #-16]
 800aed4:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800aed8:	ee27 8a26 	vmul.f32	s16, s14, s13
 800aedc:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800aee0:	ee23 2a83 	vmul.f32	s4, s7, s6
 800aee4:	ee64 4a83 	vmul.f32	s9, s9, s6
 800aee8:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800aeec:	ee27 7a03 	vmul.f32	s14, s14, s6
 800aef0:	ee64 6a26 	vmul.f32	s13, s8, s13
 800aef4:	ee24 4a03 	vmul.f32	s8, s8, s6
 800aef8:	ee37 7a63 	vsub.f32	s14, s14, s7
 800aefc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800af00:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800af04:	ee32 3a08 	vadd.f32	s6, s4, s16
 800af08:	ed05 7a03 	vstr	s14, [r5, #-12]
 800af0c:	ed05 3a04 	vstr	s6, [r5, #-16]
 800af10:	ed04 4a04 	vstr	s8, [r4, #-16]
 800af14:	ed44 6a03 	vstr	s13, [r4, #-12]
 800af18:	ed12 7a01 	vldr	s14, [r2, #-4]
 800af1c:	ee76 6a41 	vsub.f32	s13, s12, s2
 800af20:	ee35 5a40 	vsub.f32	s10, s10, s0
 800af24:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800af28:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800af2c:	ed52 5a02 	vldr	s11, [r2, #-8]
 800af30:	ee67 3a87 	vmul.f32	s7, s15, s14
 800af34:	ee66 4a87 	vmul.f32	s9, s13, s14
 800af38:	ee25 4a25 	vmul.f32	s8, s10, s11
 800af3c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800af40:	ee25 5a07 	vmul.f32	s10, s10, s14
 800af44:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800af48:	ee26 7a07 	vmul.f32	s14, s12, s14
 800af4c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800af50:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800af54:	ee74 5a23 	vadd.f32	s11, s8, s7
 800af58:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800af5c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800af60:	3310      	adds	r3, #16
 800af62:	4563      	cmp	r3, ip
 800af64:	ed45 5a02 	vstr	s11, [r5, #-8]
 800af68:	f106 0610 	add.w	r6, r6, #16
 800af6c:	ed45 7a01 	vstr	s15, [r5, #-4]
 800af70:	f102 0210 	add.w	r2, r2, #16
 800af74:	ed04 6a02 	vstr	s12, [r4, #-8]
 800af78:	ed04 7a01 	vstr	s14, [r4, #-4]
 800af7c:	f105 0510 	add.w	r5, r5, #16
 800af80:	f104 0410 	add.w	r4, r4, #16
 800af84:	f47f af5c 	bne.w	800ae40 <arm_cfft_radix8by2_f32+0x38>
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	b28c      	uxth	r4, r1
 800af8c:	4621      	mov	r1, r4
 800af8e:	2302      	movs	r3, #2
 800af90:	f000 fb3e 	bl	800b610 <arm_radix8_butterfly_f32>
 800af94:	ecbd 8b08 	vpop	{d8-d11}
 800af98:	4621      	mov	r1, r4
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	4640      	mov	r0, r8
 800af9e:	2302      	movs	r3, #2
 800afa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afa4:	f000 bb34 	b.w	800b610 <arm_radix8_butterfly_f32>

0800afa8 <arm_cfft_radix8by4_f32>:
 800afa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afac:	ed2d 8b0a 	vpush	{d8-d12}
 800afb0:	b08d      	sub	sp, #52	; 0x34
 800afb2:	460d      	mov	r5, r1
 800afb4:	910b      	str	r1, [sp, #44]	; 0x2c
 800afb6:	8801      	ldrh	r1, [r0, #0]
 800afb8:	6842      	ldr	r2, [r0, #4]
 800afba:	900a      	str	r0, [sp, #40]	; 0x28
 800afbc:	0849      	lsrs	r1, r1, #1
 800afbe:	008b      	lsls	r3, r1, #2
 800afc0:	18ee      	adds	r6, r5, r3
 800afc2:	18f0      	adds	r0, r6, r3
 800afc4:	edd0 5a00 	vldr	s11, [r0]
 800afc8:	edd5 7a00 	vldr	s15, [r5]
 800afcc:	ed96 7a00 	vldr	s14, [r6]
 800afd0:	edd0 3a01 	vldr	s7, [r0, #4]
 800afd4:	ed96 4a01 	vldr	s8, [r6, #4]
 800afd8:	ed95 5a01 	vldr	s10, [r5, #4]
 800afdc:	9008      	str	r0, [sp, #32]
 800afde:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800afe2:	18c7      	adds	r7, r0, r3
 800afe4:	edd7 4a00 	vldr	s9, [r7]
 800afe8:	ed97 3a01 	vldr	s6, [r7, #4]
 800afec:	9701      	str	r7, [sp, #4]
 800afee:	ee77 6a06 	vadd.f32	s13, s14, s12
 800aff2:	462c      	mov	r4, r5
 800aff4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800aff8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800affc:	ee16 ca90 	vmov	ip, s13
 800b000:	f844 cb08 	str.w	ip, [r4], #8
 800b004:	ee75 6a23 	vadd.f32	s13, s10, s7
 800b008:	edd6 5a01 	vldr	s11, [r6, #4]
 800b00c:	edd7 2a01 	vldr	s5, [r7, #4]
 800b010:	9404      	str	r4, [sp, #16]
 800b012:	ee35 5a63 	vsub.f32	s10, s10, s7
 800b016:	ee74 3a27 	vadd.f32	s7, s8, s15
 800b01a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800b01e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800b022:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800b026:	0849      	lsrs	r1, r1, #1
 800b028:	f102 0e08 	add.w	lr, r2, #8
 800b02c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800b030:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800b034:	9109      	str	r1, [sp, #36]	; 0x24
 800b036:	ee35 4a47 	vsub.f32	s8, s10, s14
 800b03a:	f1a1 0902 	sub.w	r9, r1, #2
 800b03e:	f8cd e00c 	str.w	lr, [sp, #12]
 800b042:	4631      	mov	r1, r6
 800b044:	ee13 ea90 	vmov	lr, s7
 800b048:	ee36 6a64 	vsub.f32	s12, s12, s9
 800b04c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800b050:	4604      	mov	r4, r0
 800b052:	edc5 5a01 	vstr	s11, [r5, #4]
 800b056:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b05a:	f841 eb08 	str.w	lr, [r1], #8
 800b05e:	ee34 5a24 	vadd.f32	s10, s8, s9
 800b062:	ee16 ea10 	vmov	lr, s12
 800b066:	ed86 5a01 	vstr	s10, [r6, #4]
 800b06a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800b06e:	f844 eb08 	str.w	lr, [r4], #8
 800b072:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b076:	edc0 6a01 	vstr	s13, [r0, #4]
 800b07a:	9405      	str	r4, [sp, #20]
 800b07c:	4604      	mov	r4, r0
 800b07e:	ee17 0a90 	vmov	r0, s15
 800b082:	9106      	str	r1, [sp, #24]
 800b084:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b088:	f102 0110 	add.w	r1, r2, #16
 800b08c:	46bc      	mov	ip, r7
 800b08e:	9100      	str	r1, [sp, #0]
 800b090:	f847 0b08 	str.w	r0, [r7], #8
 800b094:	f102 0118 	add.w	r1, r2, #24
 800b098:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800b09c:	9102      	str	r1, [sp, #8]
 800b09e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b0a2:	9007      	str	r0, [sp, #28]
 800b0a4:	f000 8134 	beq.w	800b310 <arm_cfft_radix8by4_f32+0x368>
 800b0a8:	f102 0920 	add.w	r9, r2, #32
 800b0ac:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800b0b0:	9a01      	ldr	r2, [sp, #4]
 800b0b2:	f8dd a000 	ldr.w	sl, [sp]
 800b0b6:	3b0c      	subs	r3, #12
 800b0b8:	4683      	mov	fp, r0
 800b0ba:	4463      	add	r3, ip
 800b0bc:	f105 0e10 	add.w	lr, r5, #16
 800b0c0:	f1a4 010c 	sub.w	r1, r4, #12
 800b0c4:	f104 0510 	add.w	r5, r4, #16
 800b0c8:	f1a6 0c0c 	sub.w	ip, r6, #12
 800b0cc:	f1a2 040c 	sub.w	r4, r2, #12
 800b0d0:	f106 0010 	add.w	r0, r6, #16
 800b0d4:	3210      	adds	r2, #16
 800b0d6:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800b0da:	ed55 5a02 	vldr	s11, [r5, #-8]
 800b0de:	ed50 7a02 	vldr	s15, [r0, #-8]
 800b0e2:	ed52 1a02 	vldr	s3, [r2, #-8]
 800b0e6:	ed55 6a01 	vldr	s13, [r5, #-4]
 800b0ea:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800b0ee:	ed12 1a01 	vldr	s2, [r2, #-4]
 800b0f2:	ed10 8a01 	vldr	s16, [r0, #-4]
 800b0f6:	ee35 4a25 	vadd.f32	s8, s10, s11
 800b0fa:	ee30 6a26 	vadd.f32	s12, s0, s13
 800b0fe:	ee37 7a84 	vadd.f32	s14, s15, s8
 800b102:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b106:	ee37 7a21 	vadd.f32	s14, s14, s3
 800b10a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800b10e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800b112:	ed10 7a01 	vldr	s14, [r0, #-4]
 800b116:	ed52 6a01 	vldr	s13, [r2, #-4]
 800b11a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800b11e:	ee78 aa25 	vadd.f32	s21, s16, s11
 800b122:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b126:	ee70 3a67 	vsub.f32	s7, s0, s15
 800b12a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800b12e:	ed94 7a02 	vldr	s14, [r4, #8]
 800b132:	ed9c 2a02 	vldr	s4, [ip, #8]
 800b136:	ed91 ba02 	vldr	s22, [r1, #8]
 800b13a:	edd3 9a02 	vldr	s19, [r3, #8]
 800b13e:	edd4 2a01 	vldr	s5, [r4, #4]
 800b142:	ed9c 9a01 	vldr	s18, [ip, #4]
 800b146:	ed93 5a01 	vldr	s10, [r3, #4]
 800b14a:	edd1 0a01 	vldr	s1, [r1, #4]
 800b14e:	ee72 6a07 	vadd.f32	s13, s4, s14
 800b152:	ee32 2a47 	vsub.f32	s4, s4, s14
 800b156:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800b15a:	ee79 4a22 	vadd.f32	s9, s18, s5
 800b15e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800b162:	ee79 2a62 	vsub.f32	s5, s18, s5
 800b166:	ed8c 7a02 	vstr	s14, [ip, #8]
 800b16a:	ed91 7a01 	vldr	s14, [r1, #4]
 800b16e:	edd3 8a01 	vldr	s17, [r3, #4]
 800b172:	ee34 7a87 	vadd.f32	s14, s9, s14
 800b176:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800b17a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800b17e:	ee32 9a60 	vsub.f32	s18, s4, s1
 800b182:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b186:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800b18a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800b18e:	ee73 8a22 	vadd.f32	s17, s6, s5
 800b192:	ee39 9a05 	vadd.f32	s18, s18, s10
 800b196:	ee7a aac1 	vsub.f32	s21, s21, s2
 800b19a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b19e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800b1a2:	ee69 ba07 	vmul.f32	s23, s18, s14
 800b1a6:	ee6a aa87 	vmul.f32	s21, s21, s14
 800b1aa:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800b1ae:	ee63 ca87 	vmul.f32	s25, s7, s14
 800b1b2:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800b1b6:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800b1ba:	ee68 8a87 	vmul.f32	s17, s17, s14
 800b1be:	ee73 3aea 	vsub.f32	s7, s7, s21
 800b1c2:	ee78 8a89 	vadd.f32	s17, s17, s18
 800b1c6:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800b1ca:	ee3b aaca 	vsub.f32	s20, s23, s20
 800b1ce:	ee34 4a67 	vsub.f32	s8, s8, s15
 800b1d2:	ee76 6acb 	vsub.f32	s13, s13, s22
 800b1d6:	ee36 6a48 	vsub.f32	s12, s12, s16
 800b1da:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800b1de:	ed00 7a02 	vstr	s14, [r0, #-8]
 800b1e2:	ed40 3a01 	vstr	s7, [r0, #-4]
 800b1e6:	edc1 8a01 	vstr	s17, [r1, #4]
 800b1ea:	ed81 aa02 	vstr	s20, [r1, #8]
 800b1ee:	ed59 3a04 	vldr	s7, [r9, #-16]
 800b1f2:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800b1f6:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800b1fa:	ed59 6a03 	vldr	s13, [r9, #-12]
 800b1fe:	ee34 4a61 	vsub.f32	s8, s8, s3
 800b202:	ee36 6a41 	vsub.f32	s12, s12, s2
 800b206:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800b20a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800b20e:	ee24 9a23 	vmul.f32	s18, s8, s7
 800b212:	ee26 6a23 	vmul.f32	s12, s12, s7
 800b216:	ee24 4a26 	vmul.f32	s8, s8, s13
 800b21a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b21e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800b222:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800b226:	ee36 6a44 	vsub.f32	s12, s12, s8
 800b22a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b22e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800b232:	ee79 3a29 	vadd.f32	s7, s18, s19
 800b236:	ee75 6a60 	vsub.f32	s13, s10, s1
 800b23a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800b23e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b242:	ed45 3a02 	vstr	s7, [r5, #-8]
 800b246:	ed05 6a01 	vstr	s12, [r5, #-4]
 800b24a:	ed84 7a01 	vstr	s14, [r4, #4]
 800b24e:	ed84 4a02 	vstr	s8, [r4, #8]
 800b252:	ee35 6a81 	vadd.f32	s12, s11, s2
 800b256:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800b25a:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800b25e:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800b262:	ee33 3a62 	vsub.f32	s6, s6, s5
 800b266:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800b26a:	ee67 2a26 	vmul.f32	s5, s14, s13
 800b26e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800b272:	ee26 5a25 	vmul.f32	s10, s12, s11
 800b276:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b27a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b27e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b282:	ee63 6a26 	vmul.f32	s13, s6, s13
 800b286:	ee23 3a25 	vmul.f32	s6, s6, s11
 800b28a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b28e:	ee75 5a24 	vadd.f32	s11, s10, s9
 800b292:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800b296:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b29a:	f1bb 0b01 	subs.w	fp, fp, #1
 800b29e:	ed42 5a02 	vstr	s11, [r2, #-8]
 800b2a2:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b2a6:	f10e 0e08 	add.w	lr, lr, #8
 800b2aa:	ed83 3a02 	vstr	s6, [r3, #8]
 800b2ae:	ed83 7a01 	vstr	s14, [r3, #4]
 800b2b2:	f1ac 0c08 	sub.w	ip, ip, #8
 800b2b6:	f10a 0a08 	add.w	sl, sl, #8
 800b2ba:	f100 0008 	add.w	r0, r0, #8
 800b2be:	f1a1 0108 	sub.w	r1, r1, #8
 800b2c2:	f109 0910 	add.w	r9, r9, #16
 800b2c6:	f105 0508 	add.w	r5, r5, #8
 800b2ca:	f1a4 0408 	sub.w	r4, r4, #8
 800b2ce:	f108 0818 	add.w	r8, r8, #24
 800b2d2:	f102 0208 	add.w	r2, r2, #8
 800b2d6:	f1a3 0308 	sub.w	r3, r3, #8
 800b2da:	f47f aefc 	bne.w	800b0d6 <arm_cfft_radix8by4_f32+0x12e>
 800b2de:	9907      	ldr	r1, [sp, #28]
 800b2e0:	9800      	ldr	r0, [sp, #0]
 800b2e2:	00cb      	lsls	r3, r1, #3
 800b2e4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800b2e8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800b2ec:	9100      	str	r1, [sp, #0]
 800b2ee:	9904      	ldr	r1, [sp, #16]
 800b2f0:	4419      	add	r1, r3
 800b2f2:	9104      	str	r1, [sp, #16]
 800b2f4:	9903      	ldr	r1, [sp, #12]
 800b2f6:	4419      	add	r1, r3
 800b2f8:	9103      	str	r1, [sp, #12]
 800b2fa:	9906      	ldr	r1, [sp, #24]
 800b2fc:	4419      	add	r1, r3
 800b2fe:	9106      	str	r1, [sp, #24]
 800b300:	9905      	ldr	r1, [sp, #20]
 800b302:	441f      	add	r7, r3
 800b304:	4419      	add	r1, r3
 800b306:	9b02      	ldr	r3, [sp, #8]
 800b308:	9105      	str	r1, [sp, #20]
 800b30a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b30e:	9302      	str	r3, [sp, #8]
 800b310:	9904      	ldr	r1, [sp, #16]
 800b312:	9805      	ldr	r0, [sp, #20]
 800b314:	ed91 4a00 	vldr	s8, [r1]
 800b318:	edd0 6a00 	vldr	s13, [r0]
 800b31c:	9b06      	ldr	r3, [sp, #24]
 800b31e:	ed97 3a00 	vldr	s6, [r7]
 800b322:	edd3 7a00 	vldr	s15, [r3]
 800b326:	edd0 4a01 	vldr	s9, [r0, #4]
 800b32a:	edd1 3a01 	vldr	s7, [r1, #4]
 800b32e:	ed97 2a01 	vldr	s4, [r7, #4]
 800b332:	ed93 7a01 	vldr	s14, [r3, #4]
 800b336:	9a03      	ldr	r2, [sp, #12]
 800b338:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800b33c:	ee34 6a26 	vadd.f32	s12, s8, s13
 800b340:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800b344:	ee37 5a86 	vadd.f32	s10, s15, s12
 800b348:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800b34c:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b350:	ee74 6a66 	vsub.f32	s13, s8, s13
 800b354:	ed81 5a00 	vstr	s10, [r1]
 800b358:	ed93 5a01 	vldr	s10, [r3, #4]
 800b35c:	edd7 4a01 	vldr	s9, [r7, #4]
 800b360:	ee35 5a85 	vadd.f32	s10, s11, s10
 800b364:	ee37 4a26 	vadd.f32	s8, s14, s13
 800b368:	ee35 5a24 	vadd.f32	s10, s10, s9
 800b36c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800b370:	ed81 5a01 	vstr	s10, [r1, #4]
 800b374:	edd2 1a00 	vldr	s3, [r2]
 800b378:	edd2 2a01 	vldr	s5, [r2, #4]
 800b37c:	ee34 5a83 	vadd.f32	s10, s9, s6
 800b380:	ee34 4a42 	vsub.f32	s8, s8, s4
 800b384:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b388:	ee64 4a21 	vmul.f32	s9, s8, s3
 800b38c:	ee24 4a22 	vmul.f32	s8, s8, s5
 800b390:	ee65 2a22 	vmul.f32	s5, s10, s5
 800b394:	ee25 5a21 	vmul.f32	s10, s10, s3
 800b398:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800b39c:	ee35 5a44 	vsub.f32	s10, s10, s8
 800b3a0:	edc3 2a00 	vstr	s5, [r3]
 800b3a4:	ed83 5a01 	vstr	s10, [r3, #4]
 800b3a8:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800b3ac:	9b00      	ldr	r3, [sp, #0]
 800b3ae:	ee36 6a43 	vsub.f32	s12, s12, s6
 800b3b2:	ed93 4a01 	vldr	s8, [r3, #4]
 800b3b6:	ed93 5a00 	vldr	s10, [r3]
 800b3ba:	9b02      	ldr	r3, [sp, #8]
 800b3bc:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800b3c0:	ee66 4a05 	vmul.f32	s9, s12, s10
 800b3c4:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b3c8:	ee26 6a04 	vmul.f32	s12, s12, s8
 800b3cc:	ee65 5a84 	vmul.f32	s11, s11, s8
 800b3d0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b3d4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800b3d8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b3dc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b3e0:	ed80 6a01 	vstr	s12, [r0, #4]
 800b3e4:	edc0 5a00 	vstr	s11, [r0]
 800b3e8:	edd3 5a01 	vldr	s11, [r3, #4]
 800b3ec:	edd3 6a00 	vldr	s13, [r3]
 800b3f0:	ee37 7a02 	vadd.f32	s14, s14, s4
 800b3f4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800b3f8:	ee27 6a26 	vmul.f32	s12, s14, s13
 800b3fc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b400:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b404:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b408:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b40c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b410:	ed87 7a01 	vstr	s14, [r7, #4]
 800b414:	edc7 7a00 	vstr	s15, [r7]
 800b418:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800b41c:	4621      	mov	r1, r4
 800b41e:	686a      	ldr	r2, [r5, #4]
 800b420:	2304      	movs	r3, #4
 800b422:	f000 f8f5 	bl	800b610 <arm_radix8_butterfly_f32>
 800b426:	4630      	mov	r0, r6
 800b428:	4621      	mov	r1, r4
 800b42a:	686a      	ldr	r2, [r5, #4]
 800b42c:	2304      	movs	r3, #4
 800b42e:	f000 f8ef 	bl	800b610 <arm_radix8_butterfly_f32>
 800b432:	9808      	ldr	r0, [sp, #32]
 800b434:	686a      	ldr	r2, [r5, #4]
 800b436:	4621      	mov	r1, r4
 800b438:	2304      	movs	r3, #4
 800b43a:	f000 f8e9 	bl	800b610 <arm_radix8_butterfly_f32>
 800b43e:	686a      	ldr	r2, [r5, #4]
 800b440:	9801      	ldr	r0, [sp, #4]
 800b442:	4621      	mov	r1, r4
 800b444:	2304      	movs	r3, #4
 800b446:	b00d      	add	sp, #52	; 0x34
 800b448:	ecbd 8b0a 	vpop	{d8-d12}
 800b44c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b450:	f000 b8de 	b.w	800b610 <arm_radix8_butterfly_f32>

0800b454 <arm_cfft_f32>:
 800b454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b458:	2a01      	cmp	r2, #1
 800b45a:	4606      	mov	r6, r0
 800b45c:	4617      	mov	r7, r2
 800b45e:	460c      	mov	r4, r1
 800b460:	4698      	mov	r8, r3
 800b462:	8805      	ldrh	r5, [r0, #0]
 800b464:	d056      	beq.n	800b514 <arm_cfft_f32+0xc0>
 800b466:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800b46a:	d063      	beq.n	800b534 <arm_cfft_f32+0xe0>
 800b46c:	d916      	bls.n	800b49c <arm_cfft_f32+0x48>
 800b46e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800b472:	d01a      	beq.n	800b4aa <arm_cfft_f32+0x56>
 800b474:	d947      	bls.n	800b506 <arm_cfft_f32+0xb2>
 800b476:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800b47a:	d05b      	beq.n	800b534 <arm_cfft_f32+0xe0>
 800b47c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800b480:	d105      	bne.n	800b48e <arm_cfft_f32+0x3a>
 800b482:	2301      	movs	r3, #1
 800b484:	6872      	ldr	r2, [r6, #4]
 800b486:	4629      	mov	r1, r5
 800b488:	4620      	mov	r0, r4
 800b48a:	f000 f8c1 	bl	800b610 <arm_radix8_butterfly_f32>
 800b48e:	f1b8 0f00 	cmp.w	r8, #0
 800b492:	d111      	bne.n	800b4b8 <arm_cfft_f32+0x64>
 800b494:	2f01      	cmp	r7, #1
 800b496:	d016      	beq.n	800b4c6 <arm_cfft_f32+0x72>
 800b498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b49c:	2d20      	cmp	r5, #32
 800b49e:	d049      	beq.n	800b534 <arm_cfft_f32+0xe0>
 800b4a0:	d935      	bls.n	800b50e <arm_cfft_f32+0xba>
 800b4a2:	2d40      	cmp	r5, #64	; 0x40
 800b4a4:	d0ed      	beq.n	800b482 <arm_cfft_f32+0x2e>
 800b4a6:	2d80      	cmp	r5, #128	; 0x80
 800b4a8:	d1f1      	bne.n	800b48e <arm_cfft_f32+0x3a>
 800b4aa:	4621      	mov	r1, r4
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	f7ff fcab 	bl	800ae08 <arm_cfft_radix8by2_f32>
 800b4b2:	f1b8 0f00 	cmp.w	r8, #0
 800b4b6:	d0ed      	beq.n	800b494 <arm_cfft_f32+0x40>
 800b4b8:	68b2      	ldr	r2, [r6, #8]
 800b4ba:	89b1      	ldrh	r1, [r6, #12]
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f000 f841 	bl	800b544 <arm_bitreversal_32>
 800b4c2:	2f01      	cmp	r7, #1
 800b4c4:	d1e8      	bne.n	800b498 <arm_cfft_f32+0x44>
 800b4c6:	ee07 5a90 	vmov	s15, r5
 800b4ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b4d6:	2d00      	cmp	r5, #0
 800b4d8:	d0de      	beq.n	800b498 <arm_cfft_f32+0x44>
 800b4da:	f104 0108 	add.w	r1, r4, #8
 800b4de:	2300      	movs	r3, #0
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	429d      	cmp	r5, r3
 800b4e4:	f101 0108 	add.w	r1, r1, #8
 800b4e8:	ed11 7a04 	vldr	s14, [r1, #-16]
 800b4ec:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b4f0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b4f4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b4f8:	ed01 7a04 	vstr	s14, [r1, #-16]
 800b4fc:	ed41 7a03 	vstr	s15, [r1, #-12]
 800b500:	d1ee      	bne.n	800b4e0 <arm_cfft_f32+0x8c>
 800b502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b506:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800b50a:	d0ba      	beq.n	800b482 <arm_cfft_f32+0x2e>
 800b50c:	e7bf      	b.n	800b48e <arm_cfft_f32+0x3a>
 800b50e:	2d10      	cmp	r5, #16
 800b510:	d0cb      	beq.n	800b4aa <arm_cfft_f32+0x56>
 800b512:	e7bc      	b.n	800b48e <arm_cfft_f32+0x3a>
 800b514:	b19d      	cbz	r5, 800b53e <arm_cfft_f32+0xea>
 800b516:	f101 030c 	add.w	r3, r1, #12
 800b51a:	2200      	movs	r2, #0
 800b51c:	ed53 7a02 	vldr	s15, [r3, #-8]
 800b520:	3201      	adds	r2, #1
 800b522:	eef1 7a67 	vneg.f32	s15, s15
 800b526:	4295      	cmp	r5, r2
 800b528:	ed43 7a02 	vstr	s15, [r3, #-8]
 800b52c:	f103 0308 	add.w	r3, r3, #8
 800b530:	d1f4      	bne.n	800b51c <arm_cfft_f32+0xc8>
 800b532:	e798      	b.n	800b466 <arm_cfft_f32+0x12>
 800b534:	4621      	mov	r1, r4
 800b536:	4630      	mov	r0, r6
 800b538:	f7ff fd36 	bl	800afa8 <arm_cfft_radix8by4_f32>
 800b53c:	e7a7      	b.n	800b48e <arm_cfft_f32+0x3a>
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d0aa      	beq.n	800b498 <arm_cfft_f32+0x44>
 800b542:	e7b9      	b.n	800b4b8 <arm_cfft_f32+0x64>

0800b544 <arm_bitreversal_32>:
 800b544:	b1e9      	cbz	r1, 800b582 <arm_bitreversal_32+0x3e>
 800b546:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b548:	2500      	movs	r5, #0
 800b54a:	f102 0e02 	add.w	lr, r2, #2
 800b54e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800b552:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800b556:	08a4      	lsrs	r4, r4, #2
 800b558:	089b      	lsrs	r3, r3, #2
 800b55a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800b55e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800b562:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800b566:	00a6      	lsls	r6, r4, #2
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800b56e:	3304      	adds	r3, #4
 800b570:	1d34      	adds	r4, r6, #4
 800b572:	3502      	adds	r5, #2
 800b574:	58c6      	ldr	r6, [r0, r3]
 800b576:	5907      	ldr	r7, [r0, r4]
 800b578:	50c7      	str	r7, [r0, r3]
 800b57a:	428d      	cmp	r5, r1
 800b57c:	5106      	str	r6, [r0, r4]
 800b57e:	d3e6      	bcc.n	800b54e <arm_bitreversal_32+0xa>
 800b580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b582:	4770      	bx	lr

0800b584 <arm_sin_f32>:
 800b584:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b604 <arm_sin_f32+0x80>
 800b588:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b58c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b594:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b598:	d504      	bpl.n	800b5a4 <arm_sin_f32+0x20>
 800b59a:	ee17 3a90 	vmov	r3, s15
 800b59e:	3b01      	subs	r3, #1
 800b5a0:	ee07 3a90 	vmov	s15, r3
 800b5a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5a8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800b608 <arm_sin_f32+0x84>
 800b5ac:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b5b0:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b5b4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b5b8:	ee17 3a90 	vmov	r3, s15
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5c2:	d21a      	bcs.n	800b5fa <arm_sin_f32+0x76>
 800b5c4:	ee07 3a90 	vmov	s15, r3
 800b5c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5cc:	1c59      	adds	r1, r3, #1
 800b5ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b5d2:	4a0e      	ldr	r2, [pc, #56]	; (800b60c <arm_sin_f32+0x88>)
 800b5d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b5d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5dc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b5e0:	ed93 7a00 	vldr	s14, [r3]
 800b5e4:	edd2 6a00 	vldr	s13, [r2]
 800b5e8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b5ec:	ee20 0a26 	vmul.f32	s0, s0, s13
 800b5f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b5f4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b5f8:	4770      	bx	lr
 800b5fa:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b5fe:	2101      	movs	r1, #1
 800b600:	2300      	movs	r3, #0
 800b602:	e7e6      	b.n	800b5d2 <arm_sin_f32+0x4e>
 800b604:	3e22f983 	.word	0x3e22f983
 800b608:	44000000 	.word	0x44000000
 800b60c:	080104fc 	.word	0x080104fc

0800b610 <arm_radix8_butterfly_f32>:
 800b610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b614:	ed2d 8b10 	vpush	{d8-d15}
 800b618:	b095      	sub	sp, #84	; 0x54
 800b61a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800b61e:	4603      	mov	r3, r0
 800b620:	3304      	adds	r3, #4
 800b622:	ed9f bab9 	vldr	s22, [pc, #740]	; 800b908 <arm_radix8_butterfly_f32+0x2f8>
 800b626:	9012      	str	r0, [sp, #72]	; 0x48
 800b628:	468b      	mov	fp, r1
 800b62a:	9313      	str	r3, [sp, #76]	; 0x4c
 800b62c:	4689      	mov	r9, r1
 800b62e:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800b632:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b634:	960f      	str	r6, [sp, #60]	; 0x3c
 800b636:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800b63a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800b63e:	eb03 0508 	add.w	r5, r3, r8
 800b642:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800b646:	eb05 040e 	add.w	r4, r5, lr
 800b64a:	0137      	lsls	r7, r6, #4
 800b64c:	eba6 030a 	sub.w	r3, r6, sl
 800b650:	eb04 000e 	add.w	r0, r4, lr
 800b654:	44b2      	add	sl, r6
 800b656:	1d3a      	adds	r2, r7, #4
 800b658:	9702      	str	r7, [sp, #8]
 800b65a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800b65e:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800b662:	ebae 0c06 	sub.w	ip, lr, r6
 800b666:	9703      	str	r7, [sp, #12]
 800b668:	eb03 0708 	add.w	r7, r3, r8
 800b66c:	9701      	str	r7, [sp, #4]
 800b66e:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800b672:	9706      	str	r7, [sp, #24]
 800b674:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800b676:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800b67a:	f10e 0104 	add.w	r1, lr, #4
 800b67e:	4439      	add	r1, r7
 800b680:	443a      	add	r2, r7
 800b682:	0137      	lsls	r7, r6, #4
 800b684:	00f6      	lsls	r6, r6, #3
 800b686:	9704      	str	r7, [sp, #16]
 800b688:	9605      	str	r6, [sp, #20]
 800b68a:	9f01      	ldr	r7, [sp, #4]
 800b68c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800b68e:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800b692:	f04f 0c00 	mov.w	ip, #0
 800b696:	edd4 6a00 	vldr	s13, [r4]
 800b69a:	edd7 1a00 	vldr	s3, [r7]
 800b69e:	ed16 aa01 	vldr	s20, [r6, #-4]
 800b6a2:	edd5 5a00 	vldr	s11, [r5]
 800b6a6:	ed52 9a01 	vldr	s19, [r2, #-4]
 800b6aa:	ed90 6a00 	vldr	s12, [r0]
 800b6ae:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b6b2:	ed93 3a00 	vldr	s6, [r3]
 800b6b6:	ee39 0a86 	vadd.f32	s0, s19, s12
 800b6ba:	ee33 2a21 	vadd.f32	s4, s6, s3
 800b6be:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800b6c2:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800b6c6:	ee35 7a02 	vadd.f32	s14, s10, s4
 800b6ca:	ee34 4a80 	vadd.f32	s8, s9, s0
 800b6ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b6d2:	ee74 6a07 	vadd.f32	s13, s8, s14
 800b6d6:	ee34 4a47 	vsub.f32	s8, s8, s14
 800b6da:	ed46 6a01 	vstr	s13, [r6, #-4]
 800b6de:	ed85 4a00 	vstr	s8, [r5]
 800b6e2:	edd1 6a00 	vldr	s13, [r1]
 800b6e6:	ed94 9a01 	vldr	s18, [r4, #4]
 800b6ea:	edd3 2a01 	vldr	s5, [r3, #4]
 800b6ee:	edd7 8a01 	vldr	s17, [r7, #4]
 800b6f2:	edd6 0a00 	vldr	s1, [r6]
 800b6f6:	edd5 3a01 	vldr	s7, [r5, #4]
 800b6fa:	ed90 8a01 	vldr	s16, [r0, #4]
 800b6fe:	ed92 7a00 	vldr	s14, [r2]
 800b702:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b706:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800b70a:	ee72 aae8 	vsub.f32	s21, s5, s17
 800b70e:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800b712:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800b716:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b71a:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800b71e:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800b722:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800b726:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800b72a:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800b72e:	ee77 0a08 	vadd.f32	s1, s14, s16
 800b732:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800b736:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b73a:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800b73e:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800b742:	ee76 6a89 	vadd.f32	s13, s13, s18
 800b746:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800b74a:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b74e:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800b752:	ee35 5a42 	vsub.f32	s10, s10, s4
 800b756:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800b75a:	ee33 2a20 	vadd.f32	s4, s6, s1
 800b75e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800b762:	ee33 3a60 	vsub.f32	s6, s6, s1
 800b766:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800b76a:	ee77 0a01 	vadd.f32	s1, s14, s2
 800b76e:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800b772:	ee37 7a41 	vsub.f32	s14, s14, s2
 800b776:	ee73 1a84 	vadd.f32	s3, s7, s8
 800b77a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800b77e:	ee76 3a27 	vadd.f32	s7, s12, s15
 800b782:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b786:	ee32 8a00 	vadd.f32	s16, s4, s0
 800b78a:	ee33 1a45 	vsub.f32	s2, s6, s10
 800b78e:	ee32 2a40 	vsub.f32	s4, s4, s0
 800b792:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b796:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800b79a:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800b79e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800b7a2:	ee34 6a67 	vsub.f32	s12, s8, s15
 800b7a6:	ee75 4a87 	vadd.f32	s9, s11, s14
 800b7aa:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800b7ae:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800b7b2:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b7b6:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800b7ba:	44dc      	add	ip, fp
 800b7bc:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b7c0:	45e1      	cmp	r9, ip
 800b7c2:	ed86 8a00 	vstr	s16, [r6]
 800b7c6:	ed85 2a01 	vstr	s4, [r5, #4]
 800b7ca:	4456      	add	r6, sl
 800b7cc:	ed02 0a01 	vstr	s0, [r2, #-4]
 800b7d0:	4455      	add	r5, sl
 800b7d2:	edc0 6a00 	vstr	s13, [r0]
 800b7d6:	ed82 1a00 	vstr	s2, [r2]
 800b7da:	ed80 5a01 	vstr	s10, [r0, #4]
 800b7de:	4452      	add	r2, sl
 800b7e0:	ed01 3a01 	vstr	s6, [r1, #-4]
 800b7e4:	4450      	add	r0, sl
 800b7e6:	edc7 2a00 	vstr	s5, [r7]
 800b7ea:	edc4 4a00 	vstr	s9, [r4]
 800b7ee:	ed83 7a00 	vstr	s14, [r3]
 800b7f2:	edc1 5a00 	vstr	s11, [r1]
 800b7f6:	edc7 3a01 	vstr	s7, [r7, #4]
 800b7fa:	4451      	add	r1, sl
 800b7fc:	ed84 6a01 	vstr	s12, [r4, #4]
 800b800:	4457      	add	r7, sl
 800b802:	edc3 7a01 	vstr	s15, [r3, #4]
 800b806:	4454      	add	r4, sl
 800b808:	4453      	add	r3, sl
 800b80a:	f63f af44 	bhi.w	800b696 <arm_radix8_butterfly_f32+0x86>
 800b80e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b810:	2b07      	cmp	r3, #7
 800b812:	f240 81b7 	bls.w	800bb84 <arm_radix8_butterfly_f32+0x574>
 800b816:	9b06      	ldr	r3, [sp, #24]
 800b818:	9903      	ldr	r1, [sp, #12]
 800b81a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b81c:	9e05      	ldr	r6, [sp, #20]
 800b81e:	9a04      	ldr	r2, [sp, #16]
 800b820:	f103 0c08 	add.w	ip, r3, #8
 800b824:	9b02      	ldr	r3, [sp, #8]
 800b826:	3108      	adds	r1, #8
 800b828:	f108 0808 	add.w	r8, r8, #8
 800b82c:	1841      	adds	r1, r0, r1
 800b82e:	3608      	adds	r6, #8
 800b830:	330c      	adds	r3, #12
 800b832:	4604      	mov	r4, r0
 800b834:	4444      	add	r4, r8
 800b836:	18c3      	adds	r3, r0, r3
 800b838:	9109      	str	r1, [sp, #36]	; 0x24
 800b83a:	1981      	adds	r1, r0, r6
 800b83c:	f10e 0e08 	add.w	lr, lr, #8
 800b840:	3208      	adds	r2, #8
 800b842:	940b      	str	r4, [sp, #44]	; 0x2c
 800b844:	9107      	str	r1, [sp, #28]
 800b846:	4604      	mov	r4, r0
 800b848:	4601      	mov	r1, r0
 800b84a:	9304      	str	r3, [sp, #16]
 800b84c:	f100 030c 	add.w	r3, r0, #12
 800b850:	4474      	add	r4, lr
 800b852:	f04f 0801 	mov.w	r8, #1
 800b856:	1882      	adds	r2, r0, r2
 800b858:	4461      	add	r1, ip
 800b85a:	9305      	str	r3, [sp, #20]
 800b85c:	464b      	mov	r3, r9
 800b85e:	940a      	str	r4, [sp, #40]	; 0x28
 800b860:	46c1      	mov	r9, r8
 800b862:	9208      	str	r2, [sp, #32]
 800b864:	46d8      	mov	r8, fp
 800b866:	9106      	str	r1, [sp, #24]
 800b868:	f04f 0e00 	mov.w	lr, #0
 800b86c:	469b      	mov	fp, r3
 800b86e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b870:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b872:	449e      	add	lr, r3
 800b874:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800b878:	441a      	add	r2, r3
 800b87a:	920e      	str	r2, [sp, #56]	; 0x38
 800b87c:	441a      	add	r2, r3
 800b87e:	18d4      	adds	r4, r2, r3
 800b880:	18e5      	adds	r5, r4, r3
 800b882:	18ee      	adds	r6, r5, r3
 800b884:	18f7      	adds	r7, r6, r3
 800b886:	eb07 0c03 	add.w	ip, r7, r3
 800b88a:	920d      	str	r2, [sp, #52]	; 0x34
 800b88c:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800b890:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800b894:	910c      	str	r1, [sp, #48]	; 0x30
 800b896:	4419      	add	r1, r3
 800b898:	9103      	str	r1, [sp, #12]
 800b89a:	4419      	add	r1, r3
 800b89c:	18ca      	adds	r2, r1, r3
 800b89e:	9202      	str	r2, [sp, #8]
 800b8a0:	441a      	add	r2, r3
 800b8a2:	18d0      	adds	r0, r2, r3
 800b8a4:	ed92 ea01 	vldr	s28, [r2, #4]
 800b8a8:	9a02      	ldr	r2, [sp, #8]
 800b8aa:	edd4 7a00 	vldr	s15, [r4]
 800b8ae:	edd2 da01 	vldr	s27, [r2, #4]
 800b8b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8b4:	ed91 da01 	vldr	s26, [r1, #4]
 800b8b8:	ed92 ca01 	vldr	s24, [r2, #4]
 800b8bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8be:	9903      	ldr	r1, [sp, #12]
 800b8c0:	edcd 7a03 	vstr	s15, [sp, #12]
 800b8c4:	edd2 7a00 	vldr	s15, [r2]
 800b8c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8ca:	edcd 7a02 	vstr	s15, [sp, #8]
 800b8ce:	edd2 7a00 	vldr	s15, [r2]
 800b8d2:	edd0 ea01 	vldr	s29, [r0, #4]
 800b8d6:	edd1 ca01 	vldr	s25, [r1, #4]
 800b8da:	eddc ba00 	vldr	s23, [ip]
 800b8de:	edd7 aa00 	vldr	s21, [r7]
 800b8e2:	ed96 aa00 	vldr	s20, [r6]
 800b8e6:	edd5 9a00 	vldr	s19, [r5]
 800b8ea:	edcd 7a01 	vstr	s15, [sp, #4]
 800b8ee:	4403      	add	r3, r0
 800b8f0:	ed93 fa01 	vldr	s30, [r3, #4]
 800b8f4:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800b8f8:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800b8fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b900:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b904:	46cc      	mov	ip, r9
 800b906:	e001      	b.n	800b90c <arm_radix8_butterfly_f32+0x2fc>
 800b908:	3f3504f3 	.word	0x3f3504f3
 800b90c:	ed91 6a00 	vldr	s12, [r1]
 800b910:	ed93 5a00 	vldr	s10, [r3]
 800b914:	edd0 fa00 	vldr	s31, [r0]
 800b918:	edd4 7a00 	vldr	s15, [r4]
 800b91c:	ed95 7a00 	vldr	s14, [r5]
 800b920:	ed56 3a01 	vldr	s7, [r6, #-4]
 800b924:	ed17 3a01 	vldr	s6, [r7, #-4]
 800b928:	ed92 2a00 	vldr	s4, [r2]
 800b92c:	ed96 0a00 	vldr	s0, [r6]
 800b930:	ee33 8a85 	vadd.f32	s16, s7, s10
 800b934:	ee32 1a06 	vadd.f32	s2, s4, s12
 800b938:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800b93c:	ee77 4a87 	vadd.f32	s9, s15, s14
 800b940:	ee78 1a04 	vadd.f32	s3, s16, s8
 800b944:	ee71 6a24 	vadd.f32	s13, s2, s9
 800b948:	ee32 2a46 	vsub.f32	s4, s4, s12
 800b94c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800b950:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b954:	ed06 6a01 	vstr	s12, [r6, #-4]
 800b958:	edd4 8a01 	vldr	s17, [r4, #4]
 800b95c:	ed92 9a01 	vldr	s18, [r2, #4]
 800b960:	edd7 0a00 	vldr	s1, [r7]
 800b964:	edd1 2a01 	vldr	s5, [r1, #4]
 800b968:	ed95 7a01 	vldr	s14, [r5, #4]
 800b96c:	ed93 6a01 	vldr	s12, [r3, #4]
 800b970:	edd0 5a01 	vldr	s11, [r0, #4]
 800b974:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800b978:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800b97c:	ee39 5a62 	vsub.f32	s10, s18, s5
 800b980:	ee78 fac7 	vsub.f32	s31, s17, s14
 800b984:	ee38 4a44 	vsub.f32	s8, s16, s8
 800b988:	ee38 7a87 	vadd.f32	s14, s17, s14
 800b98c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800b990:	ee79 2a22 	vadd.f32	s5, s18, s5
 800b994:	ee32 9a27 	vadd.f32	s18, s4, s15
 800b998:	ee72 7a67 	vsub.f32	s15, s4, s15
 800b99c:	ee30 2a06 	vadd.f32	s4, s0, s12
 800b9a0:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800b9a4:	ee71 4a64 	vsub.f32	s9, s2, s9
 800b9a8:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800b9ac:	ee32 1a08 	vadd.f32	s2, s4, s16
 800b9b0:	ee72 fa87 	vadd.f32	s31, s5, s14
 800b9b4:	ee32 2a48 	vsub.f32	s4, s4, s16
 800b9b8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800b9bc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800b9c0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800b9c4:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800b9c8:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800b9cc:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800b9d0:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800b9d4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b9d8:	ee30 6a46 	vsub.f32	s12, s0, s12
 800b9dc:	ee74 0a22 	vadd.f32	s1, s8, s5
 800b9e0:	ee36 0a28 	vadd.f32	s0, s12, s17
 800b9e4:	ee74 2a62 	vsub.f32	s5, s8, s5
 800b9e8:	ee36 6a68 	vsub.f32	s12, s12, s17
 800b9ec:	ee32 4a64 	vsub.f32	s8, s4, s9
 800b9f0:	ee73 8a09 	vadd.f32	s17, s6, s18
 800b9f4:	ee74 4a82 	vadd.f32	s9, s9, s4
 800b9f8:	ee33 9a49 	vsub.f32	s18, s6, s18
 800b9fc:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800ba00:	ee35 3a85 	vadd.f32	s6, s11, s10
 800ba04:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800ba08:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800ba0c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800ba10:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800ba14:	ee30 7a68 	vsub.f32	s14, s0, s17
 800ba18:	ee35 8a03 	vadd.f32	s16, s10, s6
 800ba1c:	ee38 0a80 	vadd.f32	s0, s17, s0
 800ba20:	ee73 3a82 	vadd.f32	s7, s7, s4
 800ba24:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800ba28:	ed9d 2a01 	vldr	s4, [sp, #4]
 800ba2c:	eddd 1a02 	vldr	s3, [sp, #8]
 800ba30:	ee35 5a43 	vsub.f32	s10, s10, s6
 800ba34:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800ba38:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800ba3c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800ba40:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ba44:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800ba48:	ee76 5a49 	vsub.f32	s11, s12, s18
 800ba4c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800ba50:	ee39 6a06 	vadd.f32	s12, s18, s12
 800ba54:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800ba58:	ee21 4a84 	vmul.f32	s8, s3, s8
 800ba5c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800ba60:	ee22 7a07 	vmul.f32	s14, s4, s14
 800ba64:	ee22 2a08 	vmul.f32	s4, s4, s16
 800ba68:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800ba6c:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800ba70:	ee31 1a09 	vadd.f32	s2, s2, s18
 800ba74:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800ba78:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800ba7c:	ee74 0a60 	vsub.f32	s1, s8, s1
 800ba80:	ee37 7a48 	vsub.f32	s14, s14, s16
 800ba84:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800ba88:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800ba8c:	ee72 1a21 	vadd.f32	s3, s4, s3
 800ba90:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800ba94:	ee38 2a89 	vadd.f32	s4, s17, s18
 800ba98:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800ba9c:	ee38 8a04 	vadd.f32	s16, s16, s8
 800baa0:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800baa4:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800baa8:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800baac:	eddd 5a03 	vldr	s11, [sp, #12]
 800bab0:	edc6 fa00 	vstr	s31, [r6]
 800bab4:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800bab8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800babc:	ee30 0a45 	vsub.f32	s0, s0, s10
 800bac0:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800bac4:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800bac8:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800bacc:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800bad0:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800bad4:	ee25 6a86 	vmul.f32	s12, s11, s12
 800bad8:	ee74 4a89 	vadd.f32	s9, s9, s18
 800badc:	ee34 3a43 	vsub.f32	s6, s8, s6
 800bae0:	ee78 8a85 	vadd.f32	s17, s17, s10
 800bae4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800bae8:	44c4      	add	ip, r8
 800baea:	45e3      	cmp	fp, ip
 800baec:	edc3 3a00 	vstr	s7, [r3]
 800baf0:	edc3 6a01 	vstr	s13, [r3, #4]
 800baf4:	4456      	add	r6, sl
 800baf6:	ed07 1a01 	vstr	s2, [r7, #-4]
 800bafa:	edc7 0a00 	vstr	s1, [r7]
 800bafe:	4453      	add	r3, sl
 800bb00:	ed80 2a00 	vstr	s4, [r0]
 800bb04:	edc0 2a01 	vstr	s5, [r0, #4]
 800bb08:	4457      	add	r7, sl
 800bb0a:	edc2 1a00 	vstr	s3, [r2]
 800bb0e:	ed82 7a01 	vstr	s14, [r2, #4]
 800bb12:	4450      	add	r0, sl
 800bb14:	ed85 8a00 	vstr	s16, [r5]
 800bb18:	ed85 0a01 	vstr	s0, [r5, #4]
 800bb1c:	4452      	add	r2, sl
 800bb1e:	edc1 4a00 	vstr	s9, [r1]
 800bb22:	4455      	add	r5, sl
 800bb24:	ed81 3a01 	vstr	s6, [r1, #4]
 800bb28:	edc4 8a00 	vstr	s17, [r4]
 800bb2c:	ed84 6a01 	vstr	s12, [r4, #4]
 800bb30:	4451      	add	r1, sl
 800bb32:	4454      	add	r4, sl
 800bb34:	f63f aeea 	bhi.w	800b90c <arm_radix8_butterfly_f32+0x2fc>
 800bb38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb3a:	3308      	adds	r3, #8
 800bb3c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb40:	3308      	adds	r3, #8
 800bb42:	930a      	str	r3, [sp, #40]	; 0x28
 800bb44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb46:	3308      	adds	r3, #8
 800bb48:	9309      	str	r3, [sp, #36]	; 0x24
 800bb4a:	9b08      	ldr	r3, [sp, #32]
 800bb4c:	3308      	adds	r3, #8
 800bb4e:	9308      	str	r3, [sp, #32]
 800bb50:	9b07      	ldr	r3, [sp, #28]
 800bb52:	3308      	adds	r3, #8
 800bb54:	9307      	str	r3, [sp, #28]
 800bb56:	9b06      	ldr	r3, [sp, #24]
 800bb58:	3308      	adds	r3, #8
 800bb5a:	9306      	str	r3, [sp, #24]
 800bb5c:	9b05      	ldr	r3, [sp, #20]
 800bb5e:	3308      	adds	r3, #8
 800bb60:	9305      	str	r3, [sp, #20]
 800bb62:	9b04      	ldr	r3, [sp, #16]
 800bb64:	3308      	adds	r3, #8
 800bb66:	9304      	str	r3, [sp, #16]
 800bb68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb6a:	f109 0901 	add.w	r9, r9, #1
 800bb6e:	454b      	cmp	r3, r9
 800bb70:	f47f ae7d 	bne.w	800b86e <arm_radix8_butterfly_f32+0x25e>
 800bb74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb76:	00db      	lsls	r3, r3, #3
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	46d9      	mov	r9, fp
 800bb7c:	9310      	str	r3, [sp, #64]	; 0x40
 800bb7e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800bb82:	e554      	b.n	800b62e <arm_radix8_butterfly_f32+0x1e>
 800bb84:	b015      	add	sp, #84	; 0x54
 800bb86:	ecbd 8b10 	vpop	{d8-d15}
 800bb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb8e:	bf00      	nop

0800bb90 <__errno>:
 800bb90:	4b01      	ldr	r3, [pc, #4]	; (800bb98 <__errno+0x8>)
 800bb92:	6818      	ldr	r0, [r3, #0]
 800bb94:	4770      	bx	lr
 800bb96:	bf00      	nop
 800bb98:	20000014 	.word	0x20000014

0800bb9c <__libc_init_array>:
 800bb9c:	b570      	push	{r4, r5, r6, lr}
 800bb9e:	4e0d      	ldr	r6, [pc, #52]	; (800bbd4 <__libc_init_array+0x38>)
 800bba0:	4c0d      	ldr	r4, [pc, #52]	; (800bbd8 <__libc_init_array+0x3c>)
 800bba2:	1ba4      	subs	r4, r4, r6
 800bba4:	10a4      	asrs	r4, r4, #2
 800bba6:	2500      	movs	r5, #0
 800bba8:	42a5      	cmp	r5, r4
 800bbaa:	d109      	bne.n	800bbc0 <__libc_init_array+0x24>
 800bbac:	4e0b      	ldr	r6, [pc, #44]	; (800bbdc <__libc_init_array+0x40>)
 800bbae:	4c0c      	ldr	r4, [pc, #48]	; (800bbe0 <__libc_init_array+0x44>)
 800bbb0:	f000 ff34 	bl	800ca1c <_init>
 800bbb4:	1ba4      	subs	r4, r4, r6
 800bbb6:	10a4      	asrs	r4, r4, #2
 800bbb8:	2500      	movs	r5, #0
 800bbba:	42a5      	cmp	r5, r4
 800bbbc:	d105      	bne.n	800bbca <__libc_init_array+0x2e>
 800bbbe:	bd70      	pop	{r4, r5, r6, pc}
 800bbc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbc4:	4798      	blx	r3
 800bbc6:	3501      	adds	r5, #1
 800bbc8:	e7ee      	b.n	800bba8 <__libc_init_array+0xc>
 800bbca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbce:	4798      	blx	r3
 800bbd0:	3501      	adds	r5, #1
 800bbd2:	e7f2      	b.n	800bbba <__libc_init_array+0x1e>
 800bbd4:	08020848 	.word	0x08020848
 800bbd8:	08020848 	.word	0x08020848
 800bbdc:	08020848 	.word	0x08020848
 800bbe0:	0802084c 	.word	0x0802084c

0800bbe4 <malloc>:
 800bbe4:	4b02      	ldr	r3, [pc, #8]	; (800bbf0 <malloc+0xc>)
 800bbe6:	4601      	mov	r1, r0
 800bbe8:	6818      	ldr	r0, [r3, #0]
 800bbea:	f000 b865 	b.w	800bcb8 <_malloc_r>
 800bbee:	bf00      	nop
 800bbf0:	20000014 	.word	0x20000014

0800bbf4 <memcpy>:
 800bbf4:	b510      	push	{r4, lr}
 800bbf6:	1e43      	subs	r3, r0, #1
 800bbf8:	440a      	add	r2, r1
 800bbfa:	4291      	cmp	r1, r2
 800bbfc:	d100      	bne.n	800bc00 <memcpy+0xc>
 800bbfe:	bd10      	pop	{r4, pc}
 800bc00:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc04:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc08:	e7f7      	b.n	800bbfa <memcpy+0x6>

0800bc0a <memset>:
 800bc0a:	4402      	add	r2, r0
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d100      	bne.n	800bc14 <memset+0xa>
 800bc12:	4770      	bx	lr
 800bc14:	f803 1b01 	strb.w	r1, [r3], #1
 800bc18:	e7f9      	b.n	800bc0e <memset+0x4>
	...

0800bc1c <_free_r>:
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	4605      	mov	r5, r0
 800bc20:	2900      	cmp	r1, #0
 800bc22:	d045      	beq.n	800bcb0 <_free_r+0x94>
 800bc24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc28:	1f0c      	subs	r4, r1, #4
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	bfb8      	it	lt
 800bc2e:	18e4      	addlt	r4, r4, r3
 800bc30:	f000 f900 	bl	800be34 <__malloc_lock>
 800bc34:	4a1f      	ldr	r2, [pc, #124]	; (800bcb4 <_free_r+0x98>)
 800bc36:	6813      	ldr	r3, [r2, #0]
 800bc38:	4610      	mov	r0, r2
 800bc3a:	b933      	cbnz	r3, 800bc4a <_free_r+0x2e>
 800bc3c:	6063      	str	r3, [r4, #4]
 800bc3e:	6014      	str	r4, [r2, #0]
 800bc40:	4628      	mov	r0, r5
 800bc42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc46:	f000 b8f6 	b.w	800be36 <__malloc_unlock>
 800bc4a:	42a3      	cmp	r3, r4
 800bc4c:	d90c      	bls.n	800bc68 <_free_r+0x4c>
 800bc4e:	6821      	ldr	r1, [r4, #0]
 800bc50:	1862      	adds	r2, r4, r1
 800bc52:	4293      	cmp	r3, r2
 800bc54:	bf04      	itt	eq
 800bc56:	681a      	ldreq	r2, [r3, #0]
 800bc58:	685b      	ldreq	r3, [r3, #4]
 800bc5a:	6063      	str	r3, [r4, #4]
 800bc5c:	bf04      	itt	eq
 800bc5e:	1852      	addeq	r2, r2, r1
 800bc60:	6022      	streq	r2, [r4, #0]
 800bc62:	6004      	str	r4, [r0, #0]
 800bc64:	e7ec      	b.n	800bc40 <_free_r+0x24>
 800bc66:	4613      	mov	r3, r2
 800bc68:	685a      	ldr	r2, [r3, #4]
 800bc6a:	b10a      	cbz	r2, 800bc70 <_free_r+0x54>
 800bc6c:	42a2      	cmp	r2, r4
 800bc6e:	d9fa      	bls.n	800bc66 <_free_r+0x4a>
 800bc70:	6819      	ldr	r1, [r3, #0]
 800bc72:	1858      	adds	r0, r3, r1
 800bc74:	42a0      	cmp	r0, r4
 800bc76:	d10b      	bne.n	800bc90 <_free_r+0x74>
 800bc78:	6820      	ldr	r0, [r4, #0]
 800bc7a:	4401      	add	r1, r0
 800bc7c:	1858      	adds	r0, r3, r1
 800bc7e:	4282      	cmp	r2, r0
 800bc80:	6019      	str	r1, [r3, #0]
 800bc82:	d1dd      	bne.n	800bc40 <_free_r+0x24>
 800bc84:	6810      	ldr	r0, [r2, #0]
 800bc86:	6852      	ldr	r2, [r2, #4]
 800bc88:	605a      	str	r2, [r3, #4]
 800bc8a:	4401      	add	r1, r0
 800bc8c:	6019      	str	r1, [r3, #0]
 800bc8e:	e7d7      	b.n	800bc40 <_free_r+0x24>
 800bc90:	d902      	bls.n	800bc98 <_free_r+0x7c>
 800bc92:	230c      	movs	r3, #12
 800bc94:	602b      	str	r3, [r5, #0]
 800bc96:	e7d3      	b.n	800bc40 <_free_r+0x24>
 800bc98:	6820      	ldr	r0, [r4, #0]
 800bc9a:	1821      	adds	r1, r4, r0
 800bc9c:	428a      	cmp	r2, r1
 800bc9e:	bf04      	itt	eq
 800bca0:	6811      	ldreq	r1, [r2, #0]
 800bca2:	6852      	ldreq	r2, [r2, #4]
 800bca4:	6062      	str	r2, [r4, #4]
 800bca6:	bf04      	itt	eq
 800bca8:	1809      	addeq	r1, r1, r0
 800bcaa:	6021      	streq	r1, [r4, #0]
 800bcac:	605c      	str	r4, [r3, #4]
 800bcae:	e7c7      	b.n	800bc40 <_free_r+0x24>
 800bcb0:	bd38      	pop	{r3, r4, r5, pc}
 800bcb2:	bf00      	nop
 800bcb4:	20018af8 	.word	0x20018af8

0800bcb8 <_malloc_r>:
 800bcb8:	b570      	push	{r4, r5, r6, lr}
 800bcba:	1ccd      	adds	r5, r1, #3
 800bcbc:	f025 0503 	bic.w	r5, r5, #3
 800bcc0:	3508      	adds	r5, #8
 800bcc2:	2d0c      	cmp	r5, #12
 800bcc4:	bf38      	it	cc
 800bcc6:	250c      	movcc	r5, #12
 800bcc8:	2d00      	cmp	r5, #0
 800bcca:	4606      	mov	r6, r0
 800bccc:	db01      	blt.n	800bcd2 <_malloc_r+0x1a>
 800bcce:	42a9      	cmp	r1, r5
 800bcd0:	d903      	bls.n	800bcda <_malloc_r+0x22>
 800bcd2:	230c      	movs	r3, #12
 800bcd4:	6033      	str	r3, [r6, #0]
 800bcd6:	2000      	movs	r0, #0
 800bcd8:	bd70      	pop	{r4, r5, r6, pc}
 800bcda:	f000 f8ab 	bl	800be34 <__malloc_lock>
 800bcde:	4a21      	ldr	r2, [pc, #132]	; (800bd64 <_malloc_r+0xac>)
 800bce0:	6814      	ldr	r4, [r2, #0]
 800bce2:	4621      	mov	r1, r4
 800bce4:	b991      	cbnz	r1, 800bd0c <_malloc_r+0x54>
 800bce6:	4c20      	ldr	r4, [pc, #128]	; (800bd68 <_malloc_r+0xb0>)
 800bce8:	6823      	ldr	r3, [r4, #0]
 800bcea:	b91b      	cbnz	r3, 800bcf4 <_malloc_r+0x3c>
 800bcec:	4630      	mov	r0, r6
 800bcee:	f000 f871 	bl	800bdd4 <_sbrk_r>
 800bcf2:	6020      	str	r0, [r4, #0]
 800bcf4:	4629      	mov	r1, r5
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	f000 f86c 	bl	800bdd4 <_sbrk_r>
 800bcfc:	1c43      	adds	r3, r0, #1
 800bcfe:	d124      	bne.n	800bd4a <_malloc_r+0x92>
 800bd00:	230c      	movs	r3, #12
 800bd02:	6033      	str	r3, [r6, #0]
 800bd04:	4630      	mov	r0, r6
 800bd06:	f000 f896 	bl	800be36 <__malloc_unlock>
 800bd0a:	e7e4      	b.n	800bcd6 <_malloc_r+0x1e>
 800bd0c:	680b      	ldr	r3, [r1, #0]
 800bd0e:	1b5b      	subs	r3, r3, r5
 800bd10:	d418      	bmi.n	800bd44 <_malloc_r+0x8c>
 800bd12:	2b0b      	cmp	r3, #11
 800bd14:	d90f      	bls.n	800bd36 <_malloc_r+0x7e>
 800bd16:	600b      	str	r3, [r1, #0]
 800bd18:	50cd      	str	r5, [r1, r3]
 800bd1a:	18cc      	adds	r4, r1, r3
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	f000 f88a 	bl	800be36 <__malloc_unlock>
 800bd22:	f104 000b 	add.w	r0, r4, #11
 800bd26:	1d23      	adds	r3, r4, #4
 800bd28:	f020 0007 	bic.w	r0, r0, #7
 800bd2c:	1ac3      	subs	r3, r0, r3
 800bd2e:	d0d3      	beq.n	800bcd8 <_malloc_r+0x20>
 800bd30:	425a      	negs	r2, r3
 800bd32:	50e2      	str	r2, [r4, r3]
 800bd34:	e7d0      	b.n	800bcd8 <_malloc_r+0x20>
 800bd36:	428c      	cmp	r4, r1
 800bd38:	684b      	ldr	r3, [r1, #4]
 800bd3a:	bf16      	itet	ne
 800bd3c:	6063      	strne	r3, [r4, #4]
 800bd3e:	6013      	streq	r3, [r2, #0]
 800bd40:	460c      	movne	r4, r1
 800bd42:	e7eb      	b.n	800bd1c <_malloc_r+0x64>
 800bd44:	460c      	mov	r4, r1
 800bd46:	6849      	ldr	r1, [r1, #4]
 800bd48:	e7cc      	b.n	800bce4 <_malloc_r+0x2c>
 800bd4a:	1cc4      	adds	r4, r0, #3
 800bd4c:	f024 0403 	bic.w	r4, r4, #3
 800bd50:	42a0      	cmp	r0, r4
 800bd52:	d005      	beq.n	800bd60 <_malloc_r+0xa8>
 800bd54:	1a21      	subs	r1, r4, r0
 800bd56:	4630      	mov	r0, r6
 800bd58:	f000 f83c 	bl	800bdd4 <_sbrk_r>
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	d0cf      	beq.n	800bd00 <_malloc_r+0x48>
 800bd60:	6025      	str	r5, [r4, #0]
 800bd62:	e7db      	b.n	800bd1c <_malloc_r+0x64>
 800bd64:	20018af8 	.word	0x20018af8
 800bd68:	20018afc 	.word	0x20018afc

0800bd6c <rand>:
 800bd6c:	b538      	push	{r3, r4, r5, lr}
 800bd6e:	4b13      	ldr	r3, [pc, #76]	; (800bdbc <rand+0x50>)
 800bd70:	681c      	ldr	r4, [r3, #0]
 800bd72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd74:	b97b      	cbnz	r3, 800bd96 <rand+0x2a>
 800bd76:	2018      	movs	r0, #24
 800bd78:	f7ff ff34 	bl	800bbe4 <malloc>
 800bd7c:	4a10      	ldr	r2, [pc, #64]	; (800bdc0 <rand+0x54>)
 800bd7e:	4b11      	ldr	r3, [pc, #68]	; (800bdc4 <rand+0x58>)
 800bd80:	63a0      	str	r0, [r4, #56]	; 0x38
 800bd82:	e9c0 2300 	strd	r2, r3, [r0]
 800bd86:	4b10      	ldr	r3, [pc, #64]	; (800bdc8 <rand+0x5c>)
 800bd88:	6083      	str	r3, [r0, #8]
 800bd8a:	230b      	movs	r3, #11
 800bd8c:	8183      	strh	r3, [r0, #12]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	2300      	movs	r3, #0
 800bd92:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bd96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bd98:	480c      	ldr	r0, [pc, #48]	; (800bdcc <rand+0x60>)
 800bd9a:	690a      	ldr	r2, [r1, #16]
 800bd9c:	694b      	ldr	r3, [r1, #20]
 800bd9e:	4c0c      	ldr	r4, [pc, #48]	; (800bdd0 <rand+0x64>)
 800bda0:	4350      	muls	r0, r2
 800bda2:	fb04 0003 	mla	r0, r4, r3, r0
 800bda6:	fba2 2304 	umull	r2, r3, r2, r4
 800bdaa:	4403      	add	r3, r0
 800bdac:	1c54      	adds	r4, r2, #1
 800bdae:	f143 0500 	adc.w	r5, r3, #0
 800bdb2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800bdb6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800bdba:	bd38      	pop	{r3, r4, r5, pc}
 800bdbc:	20000014 	.word	0x20000014
 800bdc0:	abcd330e 	.word	0xabcd330e
 800bdc4:	e66d1234 	.word	0xe66d1234
 800bdc8:	0005deec 	.word	0x0005deec
 800bdcc:	5851f42d 	.word	0x5851f42d
 800bdd0:	4c957f2d 	.word	0x4c957f2d

0800bdd4 <_sbrk_r>:
 800bdd4:	b538      	push	{r3, r4, r5, lr}
 800bdd6:	4c06      	ldr	r4, [pc, #24]	; (800bdf0 <_sbrk_r+0x1c>)
 800bdd8:	2300      	movs	r3, #0
 800bdda:	4605      	mov	r5, r0
 800bddc:	4608      	mov	r0, r1
 800bdde:	6023      	str	r3, [r4, #0]
 800bde0:	f7f6 fb98 	bl	8002514 <_sbrk>
 800bde4:	1c43      	adds	r3, r0, #1
 800bde6:	d102      	bne.n	800bdee <_sbrk_r+0x1a>
 800bde8:	6823      	ldr	r3, [r4, #0]
 800bdea:	b103      	cbz	r3, 800bdee <_sbrk_r+0x1a>
 800bdec:	602b      	str	r3, [r5, #0]
 800bdee:	bd38      	pop	{r3, r4, r5, pc}
 800bdf0:	20024f9c 	.word	0x20024f9c

0800bdf4 <siprintf>:
 800bdf4:	b40e      	push	{r1, r2, r3}
 800bdf6:	b500      	push	{lr}
 800bdf8:	b09c      	sub	sp, #112	; 0x70
 800bdfa:	ab1d      	add	r3, sp, #116	; 0x74
 800bdfc:	9002      	str	r0, [sp, #8]
 800bdfe:	9006      	str	r0, [sp, #24]
 800be00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800be04:	4809      	ldr	r0, [pc, #36]	; (800be2c <siprintf+0x38>)
 800be06:	9107      	str	r1, [sp, #28]
 800be08:	9104      	str	r1, [sp, #16]
 800be0a:	4909      	ldr	r1, [pc, #36]	; (800be30 <siprintf+0x3c>)
 800be0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800be10:	9105      	str	r1, [sp, #20]
 800be12:	6800      	ldr	r0, [r0, #0]
 800be14:	9301      	str	r3, [sp, #4]
 800be16:	a902      	add	r1, sp, #8
 800be18:	f000 f868 	bl	800beec <_svfiprintf_r>
 800be1c:	9b02      	ldr	r3, [sp, #8]
 800be1e:	2200      	movs	r2, #0
 800be20:	701a      	strb	r2, [r3, #0]
 800be22:	b01c      	add	sp, #112	; 0x70
 800be24:	f85d eb04 	ldr.w	lr, [sp], #4
 800be28:	b003      	add	sp, #12
 800be2a:	4770      	bx	lr
 800be2c:	20000014 	.word	0x20000014
 800be30:	ffff0208 	.word	0xffff0208

0800be34 <__malloc_lock>:
 800be34:	4770      	bx	lr

0800be36 <__malloc_unlock>:
 800be36:	4770      	bx	lr

0800be38 <__ssputs_r>:
 800be38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be3c:	688e      	ldr	r6, [r1, #8]
 800be3e:	429e      	cmp	r6, r3
 800be40:	4682      	mov	sl, r0
 800be42:	460c      	mov	r4, r1
 800be44:	4690      	mov	r8, r2
 800be46:	4699      	mov	r9, r3
 800be48:	d837      	bhi.n	800beba <__ssputs_r+0x82>
 800be4a:	898a      	ldrh	r2, [r1, #12]
 800be4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be50:	d031      	beq.n	800beb6 <__ssputs_r+0x7e>
 800be52:	6825      	ldr	r5, [r4, #0]
 800be54:	6909      	ldr	r1, [r1, #16]
 800be56:	1a6f      	subs	r7, r5, r1
 800be58:	6965      	ldr	r5, [r4, #20]
 800be5a:	2302      	movs	r3, #2
 800be5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be60:	fb95 f5f3 	sdiv	r5, r5, r3
 800be64:	f109 0301 	add.w	r3, r9, #1
 800be68:	443b      	add	r3, r7
 800be6a:	429d      	cmp	r5, r3
 800be6c:	bf38      	it	cc
 800be6e:	461d      	movcc	r5, r3
 800be70:	0553      	lsls	r3, r2, #21
 800be72:	d530      	bpl.n	800bed6 <__ssputs_r+0x9e>
 800be74:	4629      	mov	r1, r5
 800be76:	f7ff ff1f 	bl	800bcb8 <_malloc_r>
 800be7a:	4606      	mov	r6, r0
 800be7c:	b950      	cbnz	r0, 800be94 <__ssputs_r+0x5c>
 800be7e:	230c      	movs	r3, #12
 800be80:	f8ca 3000 	str.w	r3, [sl]
 800be84:	89a3      	ldrh	r3, [r4, #12]
 800be86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be8a:	81a3      	strh	r3, [r4, #12]
 800be8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be94:	463a      	mov	r2, r7
 800be96:	6921      	ldr	r1, [r4, #16]
 800be98:	f7ff feac 	bl	800bbf4 <memcpy>
 800be9c:	89a3      	ldrh	r3, [r4, #12]
 800be9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bea6:	81a3      	strh	r3, [r4, #12]
 800bea8:	6126      	str	r6, [r4, #16]
 800beaa:	6165      	str	r5, [r4, #20]
 800beac:	443e      	add	r6, r7
 800beae:	1bed      	subs	r5, r5, r7
 800beb0:	6026      	str	r6, [r4, #0]
 800beb2:	60a5      	str	r5, [r4, #8]
 800beb4:	464e      	mov	r6, r9
 800beb6:	454e      	cmp	r6, r9
 800beb8:	d900      	bls.n	800bebc <__ssputs_r+0x84>
 800beba:	464e      	mov	r6, r9
 800bebc:	4632      	mov	r2, r6
 800bebe:	4641      	mov	r1, r8
 800bec0:	6820      	ldr	r0, [r4, #0]
 800bec2:	f000 fa93 	bl	800c3ec <memmove>
 800bec6:	68a3      	ldr	r3, [r4, #8]
 800bec8:	1b9b      	subs	r3, r3, r6
 800beca:	60a3      	str	r3, [r4, #8]
 800becc:	6823      	ldr	r3, [r4, #0]
 800bece:	441e      	add	r6, r3
 800bed0:	6026      	str	r6, [r4, #0]
 800bed2:	2000      	movs	r0, #0
 800bed4:	e7dc      	b.n	800be90 <__ssputs_r+0x58>
 800bed6:	462a      	mov	r2, r5
 800bed8:	f000 faa1 	bl	800c41e <_realloc_r>
 800bedc:	4606      	mov	r6, r0
 800bede:	2800      	cmp	r0, #0
 800bee0:	d1e2      	bne.n	800bea8 <__ssputs_r+0x70>
 800bee2:	6921      	ldr	r1, [r4, #16]
 800bee4:	4650      	mov	r0, sl
 800bee6:	f7ff fe99 	bl	800bc1c <_free_r>
 800beea:	e7c8      	b.n	800be7e <__ssputs_r+0x46>

0800beec <_svfiprintf_r>:
 800beec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef0:	461d      	mov	r5, r3
 800bef2:	898b      	ldrh	r3, [r1, #12]
 800bef4:	061f      	lsls	r7, r3, #24
 800bef6:	b09d      	sub	sp, #116	; 0x74
 800bef8:	4680      	mov	r8, r0
 800befa:	460c      	mov	r4, r1
 800befc:	4616      	mov	r6, r2
 800befe:	d50f      	bpl.n	800bf20 <_svfiprintf_r+0x34>
 800bf00:	690b      	ldr	r3, [r1, #16]
 800bf02:	b96b      	cbnz	r3, 800bf20 <_svfiprintf_r+0x34>
 800bf04:	2140      	movs	r1, #64	; 0x40
 800bf06:	f7ff fed7 	bl	800bcb8 <_malloc_r>
 800bf0a:	6020      	str	r0, [r4, #0]
 800bf0c:	6120      	str	r0, [r4, #16]
 800bf0e:	b928      	cbnz	r0, 800bf1c <_svfiprintf_r+0x30>
 800bf10:	230c      	movs	r3, #12
 800bf12:	f8c8 3000 	str.w	r3, [r8]
 800bf16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf1a:	e0c8      	b.n	800c0ae <_svfiprintf_r+0x1c2>
 800bf1c:	2340      	movs	r3, #64	; 0x40
 800bf1e:	6163      	str	r3, [r4, #20]
 800bf20:	2300      	movs	r3, #0
 800bf22:	9309      	str	r3, [sp, #36]	; 0x24
 800bf24:	2320      	movs	r3, #32
 800bf26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf2a:	2330      	movs	r3, #48	; 0x30
 800bf2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf30:	9503      	str	r5, [sp, #12]
 800bf32:	f04f 0b01 	mov.w	fp, #1
 800bf36:	4637      	mov	r7, r6
 800bf38:	463d      	mov	r5, r7
 800bf3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bf3e:	b10b      	cbz	r3, 800bf44 <_svfiprintf_r+0x58>
 800bf40:	2b25      	cmp	r3, #37	; 0x25
 800bf42:	d13e      	bne.n	800bfc2 <_svfiprintf_r+0xd6>
 800bf44:	ebb7 0a06 	subs.w	sl, r7, r6
 800bf48:	d00b      	beq.n	800bf62 <_svfiprintf_r+0x76>
 800bf4a:	4653      	mov	r3, sl
 800bf4c:	4632      	mov	r2, r6
 800bf4e:	4621      	mov	r1, r4
 800bf50:	4640      	mov	r0, r8
 800bf52:	f7ff ff71 	bl	800be38 <__ssputs_r>
 800bf56:	3001      	adds	r0, #1
 800bf58:	f000 80a4 	beq.w	800c0a4 <_svfiprintf_r+0x1b8>
 800bf5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf5e:	4453      	add	r3, sl
 800bf60:	9309      	str	r3, [sp, #36]	; 0x24
 800bf62:	783b      	ldrb	r3, [r7, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f000 809d 	beq.w	800c0a4 <_svfiprintf_r+0x1b8>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf74:	9304      	str	r3, [sp, #16]
 800bf76:	9307      	str	r3, [sp, #28]
 800bf78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf7c:	931a      	str	r3, [sp, #104]	; 0x68
 800bf7e:	462f      	mov	r7, r5
 800bf80:	2205      	movs	r2, #5
 800bf82:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bf86:	4850      	ldr	r0, [pc, #320]	; (800c0c8 <_svfiprintf_r+0x1dc>)
 800bf88:	f7f4 f93a 	bl	8000200 <memchr>
 800bf8c:	9b04      	ldr	r3, [sp, #16]
 800bf8e:	b9d0      	cbnz	r0, 800bfc6 <_svfiprintf_r+0xda>
 800bf90:	06d9      	lsls	r1, r3, #27
 800bf92:	bf44      	itt	mi
 800bf94:	2220      	movmi	r2, #32
 800bf96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bf9a:	071a      	lsls	r2, r3, #28
 800bf9c:	bf44      	itt	mi
 800bf9e:	222b      	movmi	r2, #43	; 0x2b
 800bfa0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bfa4:	782a      	ldrb	r2, [r5, #0]
 800bfa6:	2a2a      	cmp	r2, #42	; 0x2a
 800bfa8:	d015      	beq.n	800bfd6 <_svfiprintf_r+0xea>
 800bfaa:	9a07      	ldr	r2, [sp, #28]
 800bfac:	462f      	mov	r7, r5
 800bfae:	2000      	movs	r0, #0
 800bfb0:	250a      	movs	r5, #10
 800bfb2:	4639      	mov	r1, r7
 800bfb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfb8:	3b30      	subs	r3, #48	; 0x30
 800bfba:	2b09      	cmp	r3, #9
 800bfbc:	d94d      	bls.n	800c05a <_svfiprintf_r+0x16e>
 800bfbe:	b1b8      	cbz	r0, 800bff0 <_svfiprintf_r+0x104>
 800bfc0:	e00f      	b.n	800bfe2 <_svfiprintf_r+0xf6>
 800bfc2:	462f      	mov	r7, r5
 800bfc4:	e7b8      	b.n	800bf38 <_svfiprintf_r+0x4c>
 800bfc6:	4a40      	ldr	r2, [pc, #256]	; (800c0c8 <_svfiprintf_r+0x1dc>)
 800bfc8:	1a80      	subs	r0, r0, r2
 800bfca:	fa0b f000 	lsl.w	r0, fp, r0
 800bfce:	4318      	orrs	r0, r3
 800bfd0:	9004      	str	r0, [sp, #16]
 800bfd2:	463d      	mov	r5, r7
 800bfd4:	e7d3      	b.n	800bf7e <_svfiprintf_r+0x92>
 800bfd6:	9a03      	ldr	r2, [sp, #12]
 800bfd8:	1d11      	adds	r1, r2, #4
 800bfda:	6812      	ldr	r2, [r2, #0]
 800bfdc:	9103      	str	r1, [sp, #12]
 800bfde:	2a00      	cmp	r2, #0
 800bfe0:	db01      	blt.n	800bfe6 <_svfiprintf_r+0xfa>
 800bfe2:	9207      	str	r2, [sp, #28]
 800bfe4:	e004      	b.n	800bff0 <_svfiprintf_r+0x104>
 800bfe6:	4252      	negs	r2, r2
 800bfe8:	f043 0302 	orr.w	r3, r3, #2
 800bfec:	9207      	str	r2, [sp, #28]
 800bfee:	9304      	str	r3, [sp, #16]
 800bff0:	783b      	ldrb	r3, [r7, #0]
 800bff2:	2b2e      	cmp	r3, #46	; 0x2e
 800bff4:	d10c      	bne.n	800c010 <_svfiprintf_r+0x124>
 800bff6:	787b      	ldrb	r3, [r7, #1]
 800bff8:	2b2a      	cmp	r3, #42	; 0x2a
 800bffa:	d133      	bne.n	800c064 <_svfiprintf_r+0x178>
 800bffc:	9b03      	ldr	r3, [sp, #12]
 800bffe:	1d1a      	adds	r2, r3, #4
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	9203      	str	r2, [sp, #12]
 800c004:	2b00      	cmp	r3, #0
 800c006:	bfb8      	it	lt
 800c008:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c00c:	3702      	adds	r7, #2
 800c00e:	9305      	str	r3, [sp, #20]
 800c010:	4d2e      	ldr	r5, [pc, #184]	; (800c0cc <_svfiprintf_r+0x1e0>)
 800c012:	7839      	ldrb	r1, [r7, #0]
 800c014:	2203      	movs	r2, #3
 800c016:	4628      	mov	r0, r5
 800c018:	f7f4 f8f2 	bl	8000200 <memchr>
 800c01c:	b138      	cbz	r0, 800c02e <_svfiprintf_r+0x142>
 800c01e:	2340      	movs	r3, #64	; 0x40
 800c020:	1b40      	subs	r0, r0, r5
 800c022:	fa03 f000 	lsl.w	r0, r3, r0
 800c026:	9b04      	ldr	r3, [sp, #16]
 800c028:	4303      	orrs	r3, r0
 800c02a:	3701      	adds	r7, #1
 800c02c:	9304      	str	r3, [sp, #16]
 800c02e:	7839      	ldrb	r1, [r7, #0]
 800c030:	4827      	ldr	r0, [pc, #156]	; (800c0d0 <_svfiprintf_r+0x1e4>)
 800c032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c036:	2206      	movs	r2, #6
 800c038:	1c7e      	adds	r6, r7, #1
 800c03a:	f7f4 f8e1 	bl	8000200 <memchr>
 800c03e:	2800      	cmp	r0, #0
 800c040:	d038      	beq.n	800c0b4 <_svfiprintf_r+0x1c8>
 800c042:	4b24      	ldr	r3, [pc, #144]	; (800c0d4 <_svfiprintf_r+0x1e8>)
 800c044:	bb13      	cbnz	r3, 800c08c <_svfiprintf_r+0x1a0>
 800c046:	9b03      	ldr	r3, [sp, #12]
 800c048:	3307      	adds	r3, #7
 800c04a:	f023 0307 	bic.w	r3, r3, #7
 800c04e:	3308      	adds	r3, #8
 800c050:	9303      	str	r3, [sp, #12]
 800c052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c054:	444b      	add	r3, r9
 800c056:	9309      	str	r3, [sp, #36]	; 0x24
 800c058:	e76d      	b.n	800bf36 <_svfiprintf_r+0x4a>
 800c05a:	fb05 3202 	mla	r2, r5, r2, r3
 800c05e:	2001      	movs	r0, #1
 800c060:	460f      	mov	r7, r1
 800c062:	e7a6      	b.n	800bfb2 <_svfiprintf_r+0xc6>
 800c064:	2300      	movs	r3, #0
 800c066:	3701      	adds	r7, #1
 800c068:	9305      	str	r3, [sp, #20]
 800c06a:	4619      	mov	r1, r3
 800c06c:	250a      	movs	r5, #10
 800c06e:	4638      	mov	r0, r7
 800c070:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c074:	3a30      	subs	r2, #48	; 0x30
 800c076:	2a09      	cmp	r2, #9
 800c078:	d903      	bls.n	800c082 <_svfiprintf_r+0x196>
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d0c8      	beq.n	800c010 <_svfiprintf_r+0x124>
 800c07e:	9105      	str	r1, [sp, #20]
 800c080:	e7c6      	b.n	800c010 <_svfiprintf_r+0x124>
 800c082:	fb05 2101 	mla	r1, r5, r1, r2
 800c086:	2301      	movs	r3, #1
 800c088:	4607      	mov	r7, r0
 800c08a:	e7f0      	b.n	800c06e <_svfiprintf_r+0x182>
 800c08c:	ab03      	add	r3, sp, #12
 800c08e:	9300      	str	r3, [sp, #0]
 800c090:	4622      	mov	r2, r4
 800c092:	4b11      	ldr	r3, [pc, #68]	; (800c0d8 <_svfiprintf_r+0x1ec>)
 800c094:	a904      	add	r1, sp, #16
 800c096:	4640      	mov	r0, r8
 800c098:	f3af 8000 	nop.w
 800c09c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c0a0:	4681      	mov	r9, r0
 800c0a2:	d1d6      	bne.n	800c052 <_svfiprintf_r+0x166>
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	065b      	lsls	r3, r3, #25
 800c0a8:	f53f af35 	bmi.w	800bf16 <_svfiprintf_r+0x2a>
 800c0ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0ae:	b01d      	add	sp, #116	; 0x74
 800c0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b4:	ab03      	add	r3, sp, #12
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	4622      	mov	r2, r4
 800c0ba:	4b07      	ldr	r3, [pc, #28]	; (800c0d8 <_svfiprintf_r+0x1ec>)
 800c0bc:	a904      	add	r1, sp, #16
 800c0be:	4640      	mov	r0, r8
 800c0c0:	f000 f882 	bl	800c1c8 <_printf_i>
 800c0c4:	e7ea      	b.n	800c09c <_svfiprintf_r+0x1b0>
 800c0c6:	bf00      	nop
 800c0c8:	08020800 	.word	0x08020800
 800c0cc:	08020806 	.word	0x08020806
 800c0d0:	0802080a 	.word	0x0802080a
 800c0d4:	00000000 	.word	0x00000000
 800c0d8:	0800be39 	.word	0x0800be39

0800c0dc <_printf_common>:
 800c0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0e0:	4691      	mov	r9, r2
 800c0e2:	461f      	mov	r7, r3
 800c0e4:	688a      	ldr	r2, [r1, #8]
 800c0e6:	690b      	ldr	r3, [r1, #16]
 800c0e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	bfb8      	it	lt
 800c0f0:	4613      	movlt	r3, r2
 800c0f2:	f8c9 3000 	str.w	r3, [r9]
 800c0f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0fa:	4606      	mov	r6, r0
 800c0fc:	460c      	mov	r4, r1
 800c0fe:	b112      	cbz	r2, 800c106 <_printf_common+0x2a>
 800c100:	3301      	adds	r3, #1
 800c102:	f8c9 3000 	str.w	r3, [r9]
 800c106:	6823      	ldr	r3, [r4, #0]
 800c108:	0699      	lsls	r1, r3, #26
 800c10a:	bf42      	ittt	mi
 800c10c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c110:	3302      	addmi	r3, #2
 800c112:	f8c9 3000 	strmi.w	r3, [r9]
 800c116:	6825      	ldr	r5, [r4, #0]
 800c118:	f015 0506 	ands.w	r5, r5, #6
 800c11c:	d107      	bne.n	800c12e <_printf_common+0x52>
 800c11e:	f104 0a19 	add.w	sl, r4, #25
 800c122:	68e3      	ldr	r3, [r4, #12]
 800c124:	f8d9 2000 	ldr.w	r2, [r9]
 800c128:	1a9b      	subs	r3, r3, r2
 800c12a:	42ab      	cmp	r3, r5
 800c12c:	dc28      	bgt.n	800c180 <_printf_common+0xa4>
 800c12e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c132:	6822      	ldr	r2, [r4, #0]
 800c134:	3300      	adds	r3, #0
 800c136:	bf18      	it	ne
 800c138:	2301      	movne	r3, #1
 800c13a:	0692      	lsls	r2, r2, #26
 800c13c:	d42d      	bmi.n	800c19a <_printf_common+0xbe>
 800c13e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c142:	4639      	mov	r1, r7
 800c144:	4630      	mov	r0, r6
 800c146:	47c0      	blx	r8
 800c148:	3001      	adds	r0, #1
 800c14a:	d020      	beq.n	800c18e <_printf_common+0xb2>
 800c14c:	6823      	ldr	r3, [r4, #0]
 800c14e:	68e5      	ldr	r5, [r4, #12]
 800c150:	f8d9 2000 	ldr.w	r2, [r9]
 800c154:	f003 0306 	and.w	r3, r3, #6
 800c158:	2b04      	cmp	r3, #4
 800c15a:	bf08      	it	eq
 800c15c:	1aad      	subeq	r5, r5, r2
 800c15e:	68a3      	ldr	r3, [r4, #8]
 800c160:	6922      	ldr	r2, [r4, #16]
 800c162:	bf0c      	ite	eq
 800c164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c168:	2500      	movne	r5, #0
 800c16a:	4293      	cmp	r3, r2
 800c16c:	bfc4      	itt	gt
 800c16e:	1a9b      	subgt	r3, r3, r2
 800c170:	18ed      	addgt	r5, r5, r3
 800c172:	f04f 0900 	mov.w	r9, #0
 800c176:	341a      	adds	r4, #26
 800c178:	454d      	cmp	r5, r9
 800c17a:	d11a      	bne.n	800c1b2 <_printf_common+0xd6>
 800c17c:	2000      	movs	r0, #0
 800c17e:	e008      	b.n	800c192 <_printf_common+0xb6>
 800c180:	2301      	movs	r3, #1
 800c182:	4652      	mov	r2, sl
 800c184:	4639      	mov	r1, r7
 800c186:	4630      	mov	r0, r6
 800c188:	47c0      	blx	r8
 800c18a:	3001      	adds	r0, #1
 800c18c:	d103      	bne.n	800c196 <_printf_common+0xba>
 800c18e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c196:	3501      	adds	r5, #1
 800c198:	e7c3      	b.n	800c122 <_printf_common+0x46>
 800c19a:	18e1      	adds	r1, r4, r3
 800c19c:	1c5a      	adds	r2, r3, #1
 800c19e:	2030      	movs	r0, #48	; 0x30
 800c1a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c1a4:	4422      	add	r2, r4
 800c1a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1ae:	3302      	adds	r3, #2
 800c1b0:	e7c5      	b.n	800c13e <_printf_common+0x62>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	4622      	mov	r2, r4
 800c1b6:	4639      	mov	r1, r7
 800c1b8:	4630      	mov	r0, r6
 800c1ba:	47c0      	blx	r8
 800c1bc:	3001      	adds	r0, #1
 800c1be:	d0e6      	beq.n	800c18e <_printf_common+0xb2>
 800c1c0:	f109 0901 	add.w	r9, r9, #1
 800c1c4:	e7d8      	b.n	800c178 <_printf_common+0x9c>
	...

0800c1c8 <_printf_i>:
 800c1c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c1d0:	460c      	mov	r4, r1
 800c1d2:	7e09      	ldrb	r1, [r1, #24]
 800c1d4:	b085      	sub	sp, #20
 800c1d6:	296e      	cmp	r1, #110	; 0x6e
 800c1d8:	4617      	mov	r7, r2
 800c1da:	4606      	mov	r6, r0
 800c1dc:	4698      	mov	r8, r3
 800c1de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1e0:	f000 80b3 	beq.w	800c34a <_printf_i+0x182>
 800c1e4:	d822      	bhi.n	800c22c <_printf_i+0x64>
 800c1e6:	2963      	cmp	r1, #99	; 0x63
 800c1e8:	d036      	beq.n	800c258 <_printf_i+0x90>
 800c1ea:	d80a      	bhi.n	800c202 <_printf_i+0x3a>
 800c1ec:	2900      	cmp	r1, #0
 800c1ee:	f000 80b9 	beq.w	800c364 <_printf_i+0x19c>
 800c1f2:	2958      	cmp	r1, #88	; 0x58
 800c1f4:	f000 8083 	beq.w	800c2fe <_printf_i+0x136>
 800c1f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c200:	e032      	b.n	800c268 <_printf_i+0xa0>
 800c202:	2964      	cmp	r1, #100	; 0x64
 800c204:	d001      	beq.n	800c20a <_printf_i+0x42>
 800c206:	2969      	cmp	r1, #105	; 0x69
 800c208:	d1f6      	bne.n	800c1f8 <_printf_i+0x30>
 800c20a:	6820      	ldr	r0, [r4, #0]
 800c20c:	6813      	ldr	r3, [r2, #0]
 800c20e:	0605      	lsls	r5, r0, #24
 800c210:	f103 0104 	add.w	r1, r3, #4
 800c214:	d52a      	bpl.n	800c26c <_printf_i+0xa4>
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	6011      	str	r1, [r2, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	da03      	bge.n	800c226 <_printf_i+0x5e>
 800c21e:	222d      	movs	r2, #45	; 0x2d
 800c220:	425b      	negs	r3, r3
 800c222:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c226:	486f      	ldr	r0, [pc, #444]	; (800c3e4 <_printf_i+0x21c>)
 800c228:	220a      	movs	r2, #10
 800c22a:	e039      	b.n	800c2a0 <_printf_i+0xd8>
 800c22c:	2973      	cmp	r1, #115	; 0x73
 800c22e:	f000 809d 	beq.w	800c36c <_printf_i+0x1a4>
 800c232:	d808      	bhi.n	800c246 <_printf_i+0x7e>
 800c234:	296f      	cmp	r1, #111	; 0x6f
 800c236:	d020      	beq.n	800c27a <_printf_i+0xb2>
 800c238:	2970      	cmp	r1, #112	; 0x70
 800c23a:	d1dd      	bne.n	800c1f8 <_printf_i+0x30>
 800c23c:	6823      	ldr	r3, [r4, #0]
 800c23e:	f043 0320 	orr.w	r3, r3, #32
 800c242:	6023      	str	r3, [r4, #0]
 800c244:	e003      	b.n	800c24e <_printf_i+0x86>
 800c246:	2975      	cmp	r1, #117	; 0x75
 800c248:	d017      	beq.n	800c27a <_printf_i+0xb2>
 800c24a:	2978      	cmp	r1, #120	; 0x78
 800c24c:	d1d4      	bne.n	800c1f8 <_printf_i+0x30>
 800c24e:	2378      	movs	r3, #120	; 0x78
 800c250:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c254:	4864      	ldr	r0, [pc, #400]	; (800c3e8 <_printf_i+0x220>)
 800c256:	e055      	b.n	800c304 <_printf_i+0x13c>
 800c258:	6813      	ldr	r3, [r2, #0]
 800c25a:	1d19      	adds	r1, r3, #4
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	6011      	str	r1, [r2, #0]
 800c260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c268:	2301      	movs	r3, #1
 800c26a:	e08c      	b.n	800c386 <_printf_i+0x1be>
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	6011      	str	r1, [r2, #0]
 800c270:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c274:	bf18      	it	ne
 800c276:	b21b      	sxthne	r3, r3
 800c278:	e7cf      	b.n	800c21a <_printf_i+0x52>
 800c27a:	6813      	ldr	r3, [r2, #0]
 800c27c:	6825      	ldr	r5, [r4, #0]
 800c27e:	1d18      	adds	r0, r3, #4
 800c280:	6010      	str	r0, [r2, #0]
 800c282:	0628      	lsls	r0, r5, #24
 800c284:	d501      	bpl.n	800c28a <_printf_i+0xc2>
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	e002      	b.n	800c290 <_printf_i+0xc8>
 800c28a:	0668      	lsls	r0, r5, #25
 800c28c:	d5fb      	bpl.n	800c286 <_printf_i+0xbe>
 800c28e:	881b      	ldrh	r3, [r3, #0]
 800c290:	4854      	ldr	r0, [pc, #336]	; (800c3e4 <_printf_i+0x21c>)
 800c292:	296f      	cmp	r1, #111	; 0x6f
 800c294:	bf14      	ite	ne
 800c296:	220a      	movne	r2, #10
 800c298:	2208      	moveq	r2, #8
 800c29a:	2100      	movs	r1, #0
 800c29c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2a0:	6865      	ldr	r5, [r4, #4]
 800c2a2:	60a5      	str	r5, [r4, #8]
 800c2a4:	2d00      	cmp	r5, #0
 800c2a6:	f2c0 8095 	blt.w	800c3d4 <_printf_i+0x20c>
 800c2aa:	6821      	ldr	r1, [r4, #0]
 800c2ac:	f021 0104 	bic.w	r1, r1, #4
 800c2b0:	6021      	str	r1, [r4, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d13d      	bne.n	800c332 <_printf_i+0x16a>
 800c2b6:	2d00      	cmp	r5, #0
 800c2b8:	f040 808e 	bne.w	800c3d8 <_printf_i+0x210>
 800c2bc:	4665      	mov	r5, ip
 800c2be:	2a08      	cmp	r2, #8
 800c2c0:	d10b      	bne.n	800c2da <_printf_i+0x112>
 800c2c2:	6823      	ldr	r3, [r4, #0]
 800c2c4:	07db      	lsls	r3, r3, #31
 800c2c6:	d508      	bpl.n	800c2da <_printf_i+0x112>
 800c2c8:	6923      	ldr	r3, [r4, #16]
 800c2ca:	6862      	ldr	r2, [r4, #4]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	bfde      	ittt	le
 800c2d0:	2330      	movle	r3, #48	; 0x30
 800c2d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2d6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c2da:	ebac 0305 	sub.w	r3, ip, r5
 800c2de:	6123      	str	r3, [r4, #16]
 800c2e0:	f8cd 8000 	str.w	r8, [sp]
 800c2e4:	463b      	mov	r3, r7
 800c2e6:	aa03      	add	r2, sp, #12
 800c2e8:	4621      	mov	r1, r4
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f7ff fef6 	bl	800c0dc <_printf_common>
 800c2f0:	3001      	adds	r0, #1
 800c2f2:	d14d      	bne.n	800c390 <_printf_i+0x1c8>
 800c2f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2f8:	b005      	add	sp, #20
 800c2fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2fe:	4839      	ldr	r0, [pc, #228]	; (800c3e4 <_printf_i+0x21c>)
 800c300:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c304:	6813      	ldr	r3, [r2, #0]
 800c306:	6821      	ldr	r1, [r4, #0]
 800c308:	1d1d      	adds	r5, r3, #4
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6015      	str	r5, [r2, #0]
 800c30e:	060a      	lsls	r2, r1, #24
 800c310:	d50b      	bpl.n	800c32a <_printf_i+0x162>
 800c312:	07ca      	lsls	r2, r1, #31
 800c314:	bf44      	itt	mi
 800c316:	f041 0120 	orrmi.w	r1, r1, #32
 800c31a:	6021      	strmi	r1, [r4, #0]
 800c31c:	b91b      	cbnz	r3, 800c326 <_printf_i+0x15e>
 800c31e:	6822      	ldr	r2, [r4, #0]
 800c320:	f022 0220 	bic.w	r2, r2, #32
 800c324:	6022      	str	r2, [r4, #0]
 800c326:	2210      	movs	r2, #16
 800c328:	e7b7      	b.n	800c29a <_printf_i+0xd2>
 800c32a:	064d      	lsls	r5, r1, #25
 800c32c:	bf48      	it	mi
 800c32e:	b29b      	uxthmi	r3, r3
 800c330:	e7ef      	b.n	800c312 <_printf_i+0x14a>
 800c332:	4665      	mov	r5, ip
 800c334:	fbb3 f1f2 	udiv	r1, r3, r2
 800c338:	fb02 3311 	mls	r3, r2, r1, r3
 800c33c:	5cc3      	ldrb	r3, [r0, r3]
 800c33e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c342:	460b      	mov	r3, r1
 800c344:	2900      	cmp	r1, #0
 800c346:	d1f5      	bne.n	800c334 <_printf_i+0x16c>
 800c348:	e7b9      	b.n	800c2be <_printf_i+0xf6>
 800c34a:	6813      	ldr	r3, [r2, #0]
 800c34c:	6825      	ldr	r5, [r4, #0]
 800c34e:	6961      	ldr	r1, [r4, #20]
 800c350:	1d18      	adds	r0, r3, #4
 800c352:	6010      	str	r0, [r2, #0]
 800c354:	0628      	lsls	r0, r5, #24
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	d501      	bpl.n	800c35e <_printf_i+0x196>
 800c35a:	6019      	str	r1, [r3, #0]
 800c35c:	e002      	b.n	800c364 <_printf_i+0x19c>
 800c35e:	066a      	lsls	r2, r5, #25
 800c360:	d5fb      	bpl.n	800c35a <_printf_i+0x192>
 800c362:	8019      	strh	r1, [r3, #0]
 800c364:	2300      	movs	r3, #0
 800c366:	6123      	str	r3, [r4, #16]
 800c368:	4665      	mov	r5, ip
 800c36a:	e7b9      	b.n	800c2e0 <_printf_i+0x118>
 800c36c:	6813      	ldr	r3, [r2, #0]
 800c36e:	1d19      	adds	r1, r3, #4
 800c370:	6011      	str	r1, [r2, #0]
 800c372:	681d      	ldr	r5, [r3, #0]
 800c374:	6862      	ldr	r2, [r4, #4]
 800c376:	2100      	movs	r1, #0
 800c378:	4628      	mov	r0, r5
 800c37a:	f7f3 ff41 	bl	8000200 <memchr>
 800c37e:	b108      	cbz	r0, 800c384 <_printf_i+0x1bc>
 800c380:	1b40      	subs	r0, r0, r5
 800c382:	6060      	str	r0, [r4, #4]
 800c384:	6863      	ldr	r3, [r4, #4]
 800c386:	6123      	str	r3, [r4, #16]
 800c388:	2300      	movs	r3, #0
 800c38a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c38e:	e7a7      	b.n	800c2e0 <_printf_i+0x118>
 800c390:	6923      	ldr	r3, [r4, #16]
 800c392:	462a      	mov	r2, r5
 800c394:	4639      	mov	r1, r7
 800c396:	4630      	mov	r0, r6
 800c398:	47c0      	blx	r8
 800c39a:	3001      	adds	r0, #1
 800c39c:	d0aa      	beq.n	800c2f4 <_printf_i+0x12c>
 800c39e:	6823      	ldr	r3, [r4, #0]
 800c3a0:	079b      	lsls	r3, r3, #30
 800c3a2:	d413      	bmi.n	800c3cc <_printf_i+0x204>
 800c3a4:	68e0      	ldr	r0, [r4, #12]
 800c3a6:	9b03      	ldr	r3, [sp, #12]
 800c3a8:	4298      	cmp	r0, r3
 800c3aa:	bfb8      	it	lt
 800c3ac:	4618      	movlt	r0, r3
 800c3ae:	e7a3      	b.n	800c2f8 <_printf_i+0x130>
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	464a      	mov	r2, r9
 800c3b4:	4639      	mov	r1, r7
 800c3b6:	4630      	mov	r0, r6
 800c3b8:	47c0      	blx	r8
 800c3ba:	3001      	adds	r0, #1
 800c3bc:	d09a      	beq.n	800c2f4 <_printf_i+0x12c>
 800c3be:	3501      	adds	r5, #1
 800c3c0:	68e3      	ldr	r3, [r4, #12]
 800c3c2:	9a03      	ldr	r2, [sp, #12]
 800c3c4:	1a9b      	subs	r3, r3, r2
 800c3c6:	42ab      	cmp	r3, r5
 800c3c8:	dcf2      	bgt.n	800c3b0 <_printf_i+0x1e8>
 800c3ca:	e7eb      	b.n	800c3a4 <_printf_i+0x1dc>
 800c3cc:	2500      	movs	r5, #0
 800c3ce:	f104 0919 	add.w	r9, r4, #25
 800c3d2:	e7f5      	b.n	800c3c0 <_printf_i+0x1f8>
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d1ac      	bne.n	800c332 <_printf_i+0x16a>
 800c3d8:	7803      	ldrb	r3, [r0, #0]
 800c3da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3e2:	e76c      	b.n	800c2be <_printf_i+0xf6>
 800c3e4:	08020811 	.word	0x08020811
 800c3e8:	08020822 	.word	0x08020822

0800c3ec <memmove>:
 800c3ec:	4288      	cmp	r0, r1
 800c3ee:	b510      	push	{r4, lr}
 800c3f0:	eb01 0302 	add.w	r3, r1, r2
 800c3f4:	d807      	bhi.n	800c406 <memmove+0x1a>
 800c3f6:	1e42      	subs	r2, r0, #1
 800c3f8:	4299      	cmp	r1, r3
 800c3fa:	d00a      	beq.n	800c412 <memmove+0x26>
 800c3fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c400:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c404:	e7f8      	b.n	800c3f8 <memmove+0xc>
 800c406:	4283      	cmp	r3, r0
 800c408:	d9f5      	bls.n	800c3f6 <memmove+0xa>
 800c40a:	1881      	adds	r1, r0, r2
 800c40c:	1ad2      	subs	r2, r2, r3
 800c40e:	42d3      	cmn	r3, r2
 800c410:	d100      	bne.n	800c414 <memmove+0x28>
 800c412:	bd10      	pop	{r4, pc}
 800c414:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c418:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c41c:	e7f7      	b.n	800c40e <memmove+0x22>

0800c41e <_realloc_r>:
 800c41e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c420:	4607      	mov	r7, r0
 800c422:	4614      	mov	r4, r2
 800c424:	460e      	mov	r6, r1
 800c426:	b921      	cbnz	r1, 800c432 <_realloc_r+0x14>
 800c428:	4611      	mov	r1, r2
 800c42a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c42e:	f7ff bc43 	b.w	800bcb8 <_malloc_r>
 800c432:	b922      	cbnz	r2, 800c43e <_realloc_r+0x20>
 800c434:	f7ff fbf2 	bl	800bc1c <_free_r>
 800c438:	4625      	mov	r5, r4
 800c43a:	4628      	mov	r0, r5
 800c43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c43e:	f000 f814 	bl	800c46a <_malloc_usable_size_r>
 800c442:	42a0      	cmp	r0, r4
 800c444:	d20f      	bcs.n	800c466 <_realloc_r+0x48>
 800c446:	4621      	mov	r1, r4
 800c448:	4638      	mov	r0, r7
 800c44a:	f7ff fc35 	bl	800bcb8 <_malloc_r>
 800c44e:	4605      	mov	r5, r0
 800c450:	2800      	cmp	r0, #0
 800c452:	d0f2      	beq.n	800c43a <_realloc_r+0x1c>
 800c454:	4631      	mov	r1, r6
 800c456:	4622      	mov	r2, r4
 800c458:	f7ff fbcc 	bl	800bbf4 <memcpy>
 800c45c:	4631      	mov	r1, r6
 800c45e:	4638      	mov	r0, r7
 800c460:	f7ff fbdc 	bl	800bc1c <_free_r>
 800c464:	e7e9      	b.n	800c43a <_realloc_r+0x1c>
 800c466:	4635      	mov	r5, r6
 800c468:	e7e7      	b.n	800c43a <_realloc_r+0x1c>

0800c46a <_malloc_usable_size_r>:
 800c46a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c46e:	1f18      	subs	r0, r3, #4
 800c470:	2b00      	cmp	r3, #0
 800c472:	bfbc      	itt	lt
 800c474:	580b      	ldrlt	r3, [r1, r0]
 800c476:	18c0      	addlt	r0, r0, r3
 800c478:	4770      	bx	lr
	...

0800c47c <sqrt>:
 800c47c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c480:	ed2d 8b02 	vpush	{d8}
 800c484:	b08b      	sub	sp, #44	; 0x2c
 800c486:	ec55 4b10 	vmov	r4, r5, d0
 800c48a:	f000 f8c7 	bl	800c61c <__ieee754_sqrt>
 800c48e:	4b26      	ldr	r3, [pc, #152]	; (800c528 <sqrt+0xac>)
 800c490:	eeb0 8a40 	vmov.f32	s16, s0
 800c494:	eef0 8a60 	vmov.f32	s17, s1
 800c498:	f993 6000 	ldrsb.w	r6, [r3]
 800c49c:	1c73      	adds	r3, r6, #1
 800c49e:	d02a      	beq.n	800c4f6 <sqrt+0x7a>
 800c4a0:	4622      	mov	r2, r4
 800c4a2:	462b      	mov	r3, r5
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	4629      	mov	r1, r5
 800c4a8:	f7f4 fb50 	bl	8000b4c <__aeabi_dcmpun>
 800c4ac:	4607      	mov	r7, r0
 800c4ae:	bb10      	cbnz	r0, 800c4f6 <sqrt+0x7a>
 800c4b0:	f04f 0800 	mov.w	r8, #0
 800c4b4:	f04f 0900 	mov.w	r9, #0
 800c4b8:	4642      	mov	r2, r8
 800c4ba:	464b      	mov	r3, r9
 800c4bc:	4620      	mov	r0, r4
 800c4be:	4629      	mov	r1, r5
 800c4c0:	f7f4 fb1c 	bl	8000afc <__aeabi_dcmplt>
 800c4c4:	b1b8      	cbz	r0, 800c4f6 <sqrt+0x7a>
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	9300      	str	r3, [sp, #0]
 800c4ca:	4b18      	ldr	r3, [pc, #96]	; (800c52c <sqrt+0xb0>)
 800c4cc:	9301      	str	r3, [sp, #4]
 800c4ce:	9708      	str	r7, [sp, #32]
 800c4d0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c4d4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c4d8:	b9b6      	cbnz	r6, 800c508 <sqrt+0x8c>
 800c4da:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c4de:	4668      	mov	r0, sp
 800c4e0:	f000 f9a2 	bl	800c828 <matherr>
 800c4e4:	b1d0      	cbz	r0, 800c51c <sqrt+0xa0>
 800c4e6:	9b08      	ldr	r3, [sp, #32]
 800c4e8:	b11b      	cbz	r3, 800c4f2 <sqrt+0x76>
 800c4ea:	f7ff fb51 	bl	800bb90 <__errno>
 800c4ee:	9b08      	ldr	r3, [sp, #32]
 800c4f0:	6003      	str	r3, [r0, #0]
 800c4f2:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c4f6:	eeb0 0a48 	vmov.f32	s0, s16
 800c4fa:	eef0 0a68 	vmov.f32	s1, s17
 800c4fe:	b00b      	add	sp, #44	; 0x2c
 800c500:	ecbd 8b02 	vpop	{d8}
 800c504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c508:	4642      	mov	r2, r8
 800c50a:	464b      	mov	r3, r9
 800c50c:	4640      	mov	r0, r8
 800c50e:	4649      	mov	r1, r9
 800c510:	f7f4 f9ac 	bl	800086c <__aeabi_ddiv>
 800c514:	2e02      	cmp	r6, #2
 800c516:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c51a:	d1e0      	bne.n	800c4de <sqrt+0x62>
 800c51c:	f7ff fb38 	bl	800bb90 <__errno>
 800c520:	2321      	movs	r3, #33	; 0x21
 800c522:	6003      	str	r3, [r0, #0]
 800c524:	e7df      	b.n	800c4e6 <sqrt+0x6a>
 800c526:	bf00      	nop
 800c528:	20000078 	.word	0x20000078
 800c52c:	08020833 	.word	0x08020833

0800c530 <log10f>:
 800c530:	b510      	push	{r4, lr}
 800c532:	ed2d 8b02 	vpush	{d8}
 800c536:	b08a      	sub	sp, #40	; 0x28
 800c538:	eeb0 8a40 	vmov.f32	s16, s0
 800c53c:	f000 f91e 	bl	800c77c <__ieee754_log10f>
 800c540:	4b31      	ldr	r3, [pc, #196]	; (800c608 <log10f+0xd8>)
 800c542:	f993 4000 	ldrsb.w	r4, [r3]
 800c546:	1c63      	adds	r3, r4, #1
 800c548:	d059      	beq.n	800c5fe <log10f+0xce>
 800c54a:	eeb4 8a48 	vcmp.f32	s16, s16
 800c54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c552:	d654      	bvs.n	800c5fe <log10f+0xce>
 800c554:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c55c:	d84f      	bhi.n	800c5fe <log10f+0xce>
 800c55e:	4b2b      	ldr	r3, [pc, #172]	; (800c60c <log10f+0xdc>)
 800c560:	9301      	str	r3, [sp, #4]
 800c562:	ee18 0a10 	vmov	r0, s16
 800c566:	2300      	movs	r3, #0
 800c568:	9308      	str	r3, [sp, #32]
 800c56a:	f7f3 fffd 	bl	8000568 <__aeabi_f2d>
 800c56e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c576:	b994      	cbnz	r4, 800c59e <log10f+0x6e>
 800c578:	4b25      	ldr	r3, [pc, #148]	; (800c610 <log10f+0xe0>)
 800c57a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c57e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c586:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c58a:	d025      	beq.n	800c5d8 <log10f+0xa8>
 800c58c:	2301      	movs	r3, #1
 800c58e:	2c02      	cmp	r4, #2
 800c590:	9300      	str	r3, [sp, #0]
 800c592:	d116      	bne.n	800c5c2 <log10f+0x92>
 800c594:	f7ff fafc 	bl	800bb90 <__errno>
 800c598:	2321      	movs	r3, #33	; 0x21
 800c59a:	6003      	str	r3, [r0, #0]
 800c59c:	e016      	b.n	800c5cc <log10f+0x9c>
 800c59e:	4b1d      	ldr	r3, [pc, #116]	; (800c614 <log10f+0xe4>)
 800c5a0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c5ae:	d1ed      	bne.n	800c58c <log10f+0x5c>
 800c5b0:	2302      	movs	r3, #2
 800c5b2:	429c      	cmp	r4, r3
 800c5b4:	9300      	str	r3, [sp, #0]
 800c5b6:	d111      	bne.n	800c5dc <log10f+0xac>
 800c5b8:	f7ff faea 	bl	800bb90 <__errno>
 800c5bc:	2322      	movs	r3, #34	; 0x22
 800c5be:	6003      	str	r3, [r0, #0]
 800c5c0:	e011      	b.n	800c5e6 <log10f+0xb6>
 800c5c2:	4668      	mov	r0, sp
 800c5c4:	f000 f930 	bl	800c828 <matherr>
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	d0e3      	beq.n	800c594 <log10f+0x64>
 800c5cc:	4812      	ldr	r0, [pc, #72]	; (800c618 <log10f+0xe8>)
 800c5ce:	f000 f92f 	bl	800c830 <nan>
 800c5d2:	ed8d 0b06 	vstr	d0, [sp, #24]
 800c5d6:	e006      	b.n	800c5e6 <log10f+0xb6>
 800c5d8:	2302      	movs	r3, #2
 800c5da:	9300      	str	r3, [sp, #0]
 800c5dc:	4668      	mov	r0, sp
 800c5de:	f000 f923 	bl	800c828 <matherr>
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	d0e8      	beq.n	800c5b8 <log10f+0x88>
 800c5e6:	9b08      	ldr	r3, [sp, #32]
 800c5e8:	b11b      	cbz	r3, 800c5f2 <log10f+0xc2>
 800c5ea:	f7ff fad1 	bl	800bb90 <__errno>
 800c5ee:	9b08      	ldr	r3, [sp, #32]
 800c5f0:	6003      	str	r3, [r0, #0]
 800c5f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5f6:	f7f4 fae7 	bl	8000bc8 <__aeabi_d2f>
 800c5fa:	ee00 0a10 	vmov	s0, r0
 800c5fe:	b00a      	add	sp, #40	; 0x28
 800c600:	ecbd 8b02 	vpop	{d8}
 800c604:	bd10      	pop	{r4, pc}
 800c606:	bf00      	nop
 800c608:	20000078 	.word	0x20000078
 800c60c:	08020838 	.word	0x08020838
 800c610:	c7efffff 	.word	0xc7efffff
 800c614:	fff00000 	.word	0xfff00000
 800c618:	08020805 	.word	0x08020805

0800c61c <__ieee754_sqrt>:
 800c61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c620:	4955      	ldr	r1, [pc, #340]	; (800c778 <__ieee754_sqrt+0x15c>)
 800c622:	ec55 4b10 	vmov	r4, r5, d0
 800c626:	43a9      	bics	r1, r5
 800c628:	462b      	mov	r3, r5
 800c62a:	462a      	mov	r2, r5
 800c62c:	d112      	bne.n	800c654 <__ieee754_sqrt+0x38>
 800c62e:	ee10 2a10 	vmov	r2, s0
 800c632:	ee10 0a10 	vmov	r0, s0
 800c636:	4629      	mov	r1, r5
 800c638:	f7f3 ffee 	bl	8000618 <__aeabi_dmul>
 800c63c:	4602      	mov	r2, r0
 800c63e:	460b      	mov	r3, r1
 800c640:	4620      	mov	r0, r4
 800c642:	4629      	mov	r1, r5
 800c644:	f7f3 fe32 	bl	80002ac <__adddf3>
 800c648:	4604      	mov	r4, r0
 800c64a:	460d      	mov	r5, r1
 800c64c:	ec45 4b10 	vmov	d0, r4, r5
 800c650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c654:	2d00      	cmp	r5, #0
 800c656:	ee10 0a10 	vmov	r0, s0
 800c65a:	4621      	mov	r1, r4
 800c65c:	dc0f      	bgt.n	800c67e <__ieee754_sqrt+0x62>
 800c65e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c662:	4330      	orrs	r0, r6
 800c664:	d0f2      	beq.n	800c64c <__ieee754_sqrt+0x30>
 800c666:	b155      	cbz	r5, 800c67e <__ieee754_sqrt+0x62>
 800c668:	ee10 2a10 	vmov	r2, s0
 800c66c:	4620      	mov	r0, r4
 800c66e:	4629      	mov	r1, r5
 800c670:	f7f3 fe1a 	bl	80002a8 <__aeabi_dsub>
 800c674:	4602      	mov	r2, r0
 800c676:	460b      	mov	r3, r1
 800c678:	f7f4 f8f8 	bl	800086c <__aeabi_ddiv>
 800c67c:	e7e4      	b.n	800c648 <__ieee754_sqrt+0x2c>
 800c67e:	151b      	asrs	r3, r3, #20
 800c680:	d073      	beq.n	800c76a <__ieee754_sqrt+0x14e>
 800c682:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c686:	07dd      	lsls	r5, r3, #31
 800c688:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c68c:	bf48      	it	mi
 800c68e:	0fc8      	lsrmi	r0, r1, #31
 800c690:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c694:	bf44      	itt	mi
 800c696:	0049      	lslmi	r1, r1, #1
 800c698:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c69c:	2500      	movs	r5, #0
 800c69e:	1058      	asrs	r0, r3, #1
 800c6a0:	0fcb      	lsrs	r3, r1, #31
 800c6a2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c6a6:	0049      	lsls	r1, r1, #1
 800c6a8:	2316      	movs	r3, #22
 800c6aa:	462c      	mov	r4, r5
 800c6ac:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c6b0:	19a7      	adds	r7, r4, r6
 800c6b2:	4297      	cmp	r7, r2
 800c6b4:	bfde      	ittt	le
 800c6b6:	19bc      	addle	r4, r7, r6
 800c6b8:	1bd2      	suble	r2, r2, r7
 800c6ba:	19ad      	addle	r5, r5, r6
 800c6bc:	0fcf      	lsrs	r7, r1, #31
 800c6be:	3b01      	subs	r3, #1
 800c6c0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c6c4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c6c8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c6cc:	d1f0      	bne.n	800c6b0 <__ieee754_sqrt+0x94>
 800c6ce:	f04f 0c20 	mov.w	ip, #32
 800c6d2:	469e      	mov	lr, r3
 800c6d4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c6d8:	42a2      	cmp	r2, r4
 800c6da:	eb06 070e 	add.w	r7, r6, lr
 800c6de:	dc02      	bgt.n	800c6e6 <__ieee754_sqrt+0xca>
 800c6e0:	d112      	bne.n	800c708 <__ieee754_sqrt+0xec>
 800c6e2:	428f      	cmp	r7, r1
 800c6e4:	d810      	bhi.n	800c708 <__ieee754_sqrt+0xec>
 800c6e6:	2f00      	cmp	r7, #0
 800c6e8:	eb07 0e06 	add.w	lr, r7, r6
 800c6ec:	da42      	bge.n	800c774 <__ieee754_sqrt+0x158>
 800c6ee:	f1be 0f00 	cmp.w	lr, #0
 800c6f2:	db3f      	blt.n	800c774 <__ieee754_sqrt+0x158>
 800c6f4:	f104 0801 	add.w	r8, r4, #1
 800c6f8:	1b12      	subs	r2, r2, r4
 800c6fa:	428f      	cmp	r7, r1
 800c6fc:	bf88      	it	hi
 800c6fe:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800c702:	1bc9      	subs	r1, r1, r7
 800c704:	4433      	add	r3, r6
 800c706:	4644      	mov	r4, r8
 800c708:	0052      	lsls	r2, r2, #1
 800c70a:	f1bc 0c01 	subs.w	ip, ip, #1
 800c70e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c712:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c716:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c71a:	d1dd      	bne.n	800c6d8 <__ieee754_sqrt+0xbc>
 800c71c:	430a      	orrs	r2, r1
 800c71e:	d006      	beq.n	800c72e <__ieee754_sqrt+0x112>
 800c720:	1c5c      	adds	r4, r3, #1
 800c722:	bf13      	iteet	ne
 800c724:	3301      	addne	r3, #1
 800c726:	3501      	addeq	r5, #1
 800c728:	4663      	moveq	r3, ip
 800c72a:	f023 0301 	bicne.w	r3, r3, #1
 800c72e:	106a      	asrs	r2, r5, #1
 800c730:	085b      	lsrs	r3, r3, #1
 800c732:	07e9      	lsls	r1, r5, #31
 800c734:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c738:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c73c:	bf48      	it	mi
 800c73e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c742:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c746:	461c      	mov	r4, r3
 800c748:	e780      	b.n	800c64c <__ieee754_sqrt+0x30>
 800c74a:	0aca      	lsrs	r2, r1, #11
 800c74c:	3815      	subs	r0, #21
 800c74e:	0549      	lsls	r1, r1, #21
 800c750:	2a00      	cmp	r2, #0
 800c752:	d0fa      	beq.n	800c74a <__ieee754_sqrt+0x12e>
 800c754:	02d6      	lsls	r6, r2, #11
 800c756:	d50a      	bpl.n	800c76e <__ieee754_sqrt+0x152>
 800c758:	f1c3 0420 	rsb	r4, r3, #32
 800c75c:	fa21 f404 	lsr.w	r4, r1, r4
 800c760:	1e5d      	subs	r5, r3, #1
 800c762:	4099      	lsls	r1, r3
 800c764:	4322      	orrs	r2, r4
 800c766:	1b43      	subs	r3, r0, r5
 800c768:	e78b      	b.n	800c682 <__ieee754_sqrt+0x66>
 800c76a:	4618      	mov	r0, r3
 800c76c:	e7f0      	b.n	800c750 <__ieee754_sqrt+0x134>
 800c76e:	0052      	lsls	r2, r2, #1
 800c770:	3301      	adds	r3, #1
 800c772:	e7ef      	b.n	800c754 <__ieee754_sqrt+0x138>
 800c774:	46a0      	mov	r8, r4
 800c776:	e7bf      	b.n	800c6f8 <__ieee754_sqrt+0xdc>
 800c778:	7ff00000 	.word	0x7ff00000

0800c77c <__ieee754_log10f>:
 800c77c:	b508      	push	{r3, lr}
 800c77e:	ee10 2a10 	vmov	r2, s0
 800c782:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800c786:	ed2d 8b02 	vpush	{d8}
 800c78a:	d108      	bne.n	800c79e <__ieee754_log10f+0x22>
 800c78c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800c810 <__ieee754_log10f+0x94>
 800c790:	eddf 7a20 	vldr	s15, [pc, #128]	; 800c814 <__ieee754_log10f+0x98>
 800c794:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800c798:	ecbd 8b02 	vpop	{d8}
 800c79c:	bd08      	pop	{r3, pc}
 800c79e:	2a00      	cmp	r2, #0
 800c7a0:	da02      	bge.n	800c7a8 <__ieee754_log10f+0x2c>
 800c7a2:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c7a6:	e7f3      	b.n	800c790 <__ieee754_log10f+0x14>
 800c7a8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c7ac:	db02      	blt.n	800c7b4 <__ieee754_log10f+0x38>
 800c7ae:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c7b2:	e7f1      	b.n	800c798 <__ieee754_log10f+0x1c>
 800c7b4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800c7b8:	bfbf      	itttt	lt
 800c7ba:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 800c818 <__ieee754_log10f+0x9c>
 800c7be:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c7c2:	f06f 0118 	mvnlt.w	r1, #24
 800c7c6:	ee17 2a90 	vmovlt	r2, s15
 800c7ca:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800c7ce:	bfa8      	it	ge
 800c7d0:	2100      	movge	r1, #0
 800c7d2:	3b7f      	subs	r3, #127	; 0x7f
 800c7d4:	440b      	add	r3, r1
 800c7d6:	0fd9      	lsrs	r1, r3, #31
 800c7d8:	440b      	add	r3, r1
 800c7da:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800c7de:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 800c7e2:	ee07 3a90 	vmov	s15, r3
 800c7e6:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 800c7ea:	ee00 3a10 	vmov	s0, r3
 800c7ee:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800c7f2:	f000 f825 	bl	800c840 <__ieee754_logf>
 800c7f6:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c81c <__ieee754_log10f+0xa0>
 800c7fa:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c7fe:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c820 <__ieee754_log10f+0xa4>
 800c802:	eea8 0a27 	vfma.f32	s0, s16, s15
 800c806:	eddf 7a07 	vldr	s15, [pc, #28]	; 800c824 <__ieee754_log10f+0xa8>
 800c80a:	eea8 0a27 	vfma.f32	s0, s16, s15
 800c80e:	e7c3      	b.n	800c798 <__ieee754_log10f+0x1c>
 800c810:	cc000000 	.word	0xcc000000
 800c814:	00000000 	.word	0x00000000
 800c818:	4c000000 	.word	0x4c000000
 800c81c:	3ede5bd9 	.word	0x3ede5bd9
 800c820:	355427db 	.word	0x355427db
 800c824:	3e9a2080 	.word	0x3e9a2080

0800c828 <matherr>:
 800c828:	2000      	movs	r0, #0
 800c82a:	4770      	bx	lr
 800c82c:	0000      	movs	r0, r0
	...

0800c830 <nan>:
 800c830:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c838 <nan+0x8>
 800c834:	4770      	bx	lr
 800c836:	bf00      	nop
 800c838:	00000000 	.word	0x00000000
 800c83c:	7ff80000 	.word	0x7ff80000

0800c840 <__ieee754_logf>:
 800c840:	ee10 3a10 	vmov	r3, s0
 800c844:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c848:	d106      	bne.n	800c858 <__ieee754_logf+0x18>
 800c84a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800c9e0 <__ieee754_logf+0x1a0>
 800c84e:	eddf 7a65 	vldr	s15, [pc, #404]	; 800c9e4 <__ieee754_logf+0x1a4>
 800c852:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800c856:	4770      	bx	lr
 800c858:	2b00      	cmp	r3, #0
 800c85a:	da02      	bge.n	800c862 <__ieee754_logf+0x22>
 800c85c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c860:	e7f5      	b.n	800c84e <__ieee754_logf+0xe>
 800c862:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c866:	db02      	blt.n	800c86e <__ieee754_logf+0x2e>
 800c868:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c86c:	4770      	bx	lr
 800c86e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c872:	bfbf      	itttt	lt
 800c874:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800c9e8 <__ieee754_logf+0x1a8>
 800c878:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c87c:	f06f 0118 	mvnlt.w	r1, #24
 800c880:	ee17 3a90 	vmovlt	r3, s15
 800c884:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800c888:	bfa8      	it	ge
 800c88a:	2100      	movge	r1, #0
 800c88c:	3a7f      	subs	r2, #127	; 0x7f
 800c88e:	440a      	add	r2, r1
 800c890:	4956      	ldr	r1, [pc, #344]	; (800c9ec <__ieee754_logf+0x1ac>)
 800c892:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c896:	4419      	add	r1, r3
 800c898:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800c89c:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 800c8a0:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800c8a4:	4319      	orrs	r1, r3
 800c8a6:	ee07 1a90 	vmov	s15, r1
 800c8aa:	f103 010f 	add.w	r1, r3, #15
 800c8ae:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800c8b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c8b6:	290f      	cmp	r1, #15
 800c8b8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c8bc:	dc31      	bgt.n	800c922 <__ieee754_logf+0xe2>
 800c8be:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8c6:	d10f      	bne.n	800c8e8 <__ieee754_logf+0xa8>
 800c8c8:	2a00      	cmp	r2, #0
 800c8ca:	f000 8085 	beq.w	800c9d8 <__ieee754_logf+0x198>
 800c8ce:	ee07 2a90 	vmov	s15, r2
 800c8d2:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800c9f0 <__ieee754_logf+0x1b0>
 800c8d6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800c9f4 <__ieee754_logf+0x1b4>
 800c8da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8de:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c8e2:	eea7 0a87 	vfma.f32	s0, s15, s14
 800c8e6:	4770      	bx	lr
 800c8e8:	eddf 7a43 	vldr	s15, [pc, #268]	; 800c9f8 <__ieee754_logf+0x1b8>
 800c8ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c8f0:	eea0 7a67 	vfms.f32	s14, s0, s15
 800c8f4:	ee60 7a00 	vmul.f32	s15, s0, s0
 800c8f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8fc:	b912      	cbnz	r2, 800c904 <__ieee754_logf+0xc4>
 800c8fe:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c902:	4770      	bx	lr
 800c904:	ee07 2a90 	vmov	s15, r2
 800c908:	eddf 6a39 	vldr	s13, [pc, #228]	; 800c9f0 <__ieee754_logf+0x1b0>
 800c90c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c910:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c914:	ee37 0a40 	vsub.f32	s0, s14, s0
 800c918:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c9f4 <__ieee754_logf+0x1b4>
 800c91c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800c920:	4770      	bx	lr
 800c922:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c926:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c92a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c9fc <__ieee754_logf+0x1bc>
 800c92e:	eddf 4a34 	vldr	s9, [pc, #208]	; 800ca00 <__ieee754_logf+0x1c0>
 800c932:	4934      	ldr	r1, [pc, #208]	; (800ca04 <__ieee754_logf+0x1c4>)
 800c934:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800c938:	4419      	add	r1, r3
 800c93a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800c93e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c942:	430b      	orrs	r3, r1
 800c944:	2b00      	cmp	r3, #0
 800c946:	ee07 2a90 	vmov	s15, r2
 800c94a:	ee26 5a06 	vmul.f32	s10, s12, s12
 800c94e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c952:	ee25 7a05 	vmul.f32	s14, s10, s10
 800c956:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800ca08 <__ieee754_logf+0x1c8>
 800c95a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c95e:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800ca0c <__ieee754_logf+0x1cc>
 800c962:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c966:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800ca10 <__ieee754_logf+0x1d0>
 800c96a:	eee7 7a24 	vfma.f32	s15, s14, s9
 800c96e:	eddf 4a29 	vldr	s9, [pc, #164]	; 800ca14 <__ieee754_logf+0x1d4>
 800c972:	eee7 4a87 	vfma.f32	s9, s15, s14
 800c976:	eddf 7a28 	vldr	s15, [pc, #160]	; 800ca18 <__ieee754_logf+0x1d8>
 800c97a:	eee4 7a87 	vfma.f32	s15, s9, s14
 800c97e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c982:	eee5 7a87 	vfma.f32	s15, s11, s14
 800c986:	dd1c      	ble.n	800c9c2 <__ieee754_logf+0x182>
 800c988:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c98c:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c990:	ee27 7a00 	vmul.f32	s14, s14, s0
 800c994:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c998:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c99c:	b922      	cbnz	r2, 800c9a8 <__ieee754_logf+0x168>
 800c99e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c9a6:	4770      	bx	lr
 800c9a8:	ed9f 6a11 	vldr	s12, [pc, #68]	; 800c9f0 <__ieee754_logf+0x1b0>
 800c9ac:	eee6 7a86 	vfma.f32	s15, s13, s12
 800c9b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9b4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c9b8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c9f4 <__ieee754_logf+0x1b4>
 800c9bc:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800c9c0:	4770      	bx	lr
 800c9c2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c9c6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c9ca:	2a00      	cmp	r2, #0
 800c9cc:	d0e9      	beq.n	800c9a2 <__ieee754_logf+0x162>
 800c9ce:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800c9f0 <__ieee754_logf+0x1b0>
 800c9d2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c9d6:	e7ed      	b.n	800c9b4 <__ieee754_logf+0x174>
 800c9d8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800c9e4 <__ieee754_logf+0x1a4>
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop
 800c9e0:	cc000000 	.word	0xcc000000
 800c9e4:	00000000 	.word	0x00000000
 800c9e8:	4c000000 	.word	0x4c000000
 800c9ec:	004afb20 	.word	0x004afb20
 800c9f0:	3717f7d1 	.word	0x3717f7d1
 800c9f4:	3f317180 	.word	0x3f317180
 800c9f8:	3eaaaaab 	.word	0x3eaaaaab
 800c9fc:	3e1cd04f 	.word	0x3e1cd04f
 800ca00:	3e178897 	.word	0x3e178897
 800ca04:	ffcf5c30 	.word	0xffcf5c30
 800ca08:	3e638e29 	.word	0x3e638e29
 800ca0c:	3ecccccd 	.word	0x3ecccccd
 800ca10:	3e3a3325 	.word	0x3e3a3325
 800ca14:	3e924925 	.word	0x3e924925
 800ca18:	3f2aaaab 	.word	0x3f2aaaab

0800ca1c <_init>:
 800ca1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca1e:	bf00      	nop
 800ca20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca22:	bc08      	pop	{r3}
 800ca24:	469e      	mov	lr, r3
 800ca26:	4770      	bx	lr

0800ca28 <_fini>:
 800ca28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca2a:	bf00      	nop
 800ca2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca2e:	bc08      	pop	{r3}
 800ca30:	469e      	mov	lr, r3
 800ca32:	4770      	bx	lr
